
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004df4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00004df4  00004ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a31  00802104  00802104  00004fac  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00004fac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00004fb6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004fe8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000758  00000000  00000000  00005028  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0001807a  00000000  00000000  00005780  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003438  00000000  00000000  0001d7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c607  00000000  00000000  00020c32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001790  00000000  00000000  0002d23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002dc93  00000000  00000000  0002e9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e3f  00000000  00000000  0005c65f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000860  00000000  00000000  000644a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000cb2c  00000000  00000000  00064d00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c4       	rjmp	.+2172   	; 0x87e <__ctors_end>
       2:	00 00       	nop
       4:	59 c4       	rjmp	.+2226   	; 0x8b8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c4       	rjmp	.+2222   	; 0x8b8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c4       	rjmp	.+2218   	; 0x8b8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c4       	rjmp	.+2214   	; 0x8b8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c4       	rjmp	.+2210   	; 0x8b8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c4       	rjmp	.+2206   	; 0x8b8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c4       	rjmp	.+2202   	; 0x8b8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c4       	rjmp	.+2198   	; 0x8b8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__vector_9>
      28:	47 c4       	rjmp	.+2190   	; 0x8b8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 90 21 	jmp	0x4320	; 0x4320 <__vector_11>
      30:	0c 94 d4 1e 	jmp	0x3da8	; 0x3da8 <__vector_12>
      34:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__vector_13>
      38:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__vector_14>
      3c:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__vector_15>
      40:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__vector_16>
      44:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <__vector_17>
      48:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__vector_18>
      4c:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__vector_19>
      50:	0c 94 1c 20 	jmp	0x4038	; 0x4038 <__vector_20>
      54:	0c 94 45 20 	jmp	0x408a	; 0x408a <__vector_21>
      58:	2f c4       	rjmp	.+2142   	; 0x8b8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__vector_23>
      60:	2b c4       	rjmp	.+2134   	; 0x8b8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c4       	rjmp	.+2130   	; 0x8b8 <__bad_interrupt>
      66:	00 00       	nop
      68:	27 c4       	rjmp	.+2126   	; 0x8b8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	25 c4       	rjmp	.+2122   	; 0x8b8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c4       	rjmp	.+2118   	; 0x8b8 <__bad_interrupt>
      72:	00 00       	nop
      74:	21 c4       	rjmp	.+2114   	; 0x8b8 <__bad_interrupt>
      76:	00 00       	nop
      78:	1f c4       	rjmp	.+2110   	; 0x8b8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1d c4       	rjmp	.+2106   	; 0x8b8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1b c4       	rjmp	.+2102   	; 0x8b8 <__bad_interrupt>
      82:	00 00       	nop
      84:	19 c4       	rjmp	.+2098   	; 0x8b8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__vector_34>
      8c:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__vector_35>
      90:	0c 94 6e 20 	jmp	0x40dc	; 0x40dc <__vector_36>
      94:	0c 94 97 20 	jmp	0x412e	; 0x412e <__vector_37>
      98:	0c 94 c0 20 	jmp	0x4180	; 0x4180 <__vector_38>
      9c:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <__vector_39>
      a0:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__vector_40>
      a4:	09 c4       	rjmp	.+2066   	; 0x8b8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	07 c4       	rjmp	.+2062   	; 0x8b8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c8 11       	cpse	r28, r8
      ae:	cd 11       	cpse	r28, r13
      b0:	ff 11       	cpse	r31, r15
      b2:	ff 11       	cpse	r31, r15
      b4:	ff 11       	cpse	r31, r15
      b6:	ff 11       	cpse	r31, r15
      b8:	ff 11       	cpse	r31, r15
      ba:	ff 11       	cpse	r31, r15
      bc:	ff 11       	cpse	r31, r15
      be:	ff 11       	cpse	r31, r15
      c0:	ff 11       	cpse	r31, r15
      c2:	ff 11       	cpse	r31, r15
      c4:	ff 11       	cpse	r31, r15
      c6:	ff 11       	cpse	r31, r15
      c8:	ff 11       	cpse	r31, r15
      ca:	ff 11       	cpse	r31, r15
      cc:	d2 11       	cpse	r29, r2
      ce:	ff 11       	cpse	r31, r15
      d0:	ff 11       	cpse	r31, r15
      d2:	ff 11       	cpse	r31, r15
      d4:	ff 11       	cpse	r31, r15
      d6:	ff 11       	cpse	r31, r15
      d8:	ff 11       	cpse	r31, r15
      da:	ff 11       	cpse	r31, r15
      dc:	ff 11       	cpse	r31, r15
      de:	ff 11       	cpse	r31, r15
      e0:	ff 11       	cpse	r31, r15
      e2:	ff 11       	cpse	r31, r15
      e4:	ff 11       	cpse	r31, r15
      e6:	ff 11       	cpse	r31, r15
      e8:	ff 11       	cpse	r31, r15
      ea:	ff 11       	cpse	r31, r15
      ec:	ff 11       	cpse	r31, r15
      ee:	d7 11       	cpse	r29, r7
      f0:	dc 11       	cpse	r29, r12
      f2:	ff 11       	cpse	r31, r15
      f4:	ff 11       	cpse	r31, r15
      f6:	ff 11       	cpse	r31, r15
      f8:	ff 11       	cpse	r31, r15
      fa:	ff 11       	cpse	r31, r15
      fc:	ff 11       	cpse	r31, r15
      fe:	ff 11       	cpse	r31, r15
     100:	ff 11       	cpse	r31, r15
     102:	ff 11       	cpse	r31, r15
     104:	ff 11       	cpse	r31, r15
     106:	ff 11       	cpse	r31, r15
     108:	ff 11       	cpse	r31, r15
     10a:	ff 11       	cpse	r31, r15
     10c:	ff 11       	cpse	r31, r15
     10e:	e1 11       	cpse	r30, r1
     110:	e6 11       	cpse	r30, r6
     112:	ff 11       	cpse	r31, r15
     114:	ff 11       	cpse	r31, r15
     116:	ff 11       	cpse	r31, r15
     118:	ff 11       	cpse	r31, r15
     11a:	ff 11       	cpse	r31, r15
     11c:	ff 11       	cpse	r31, r15
     11e:	ff 11       	cpse	r31, r15
     120:	ff 11       	cpse	r31, r15
     122:	ff 11       	cpse	r31, r15
     124:	ff 11       	cpse	r31, r15
     126:	ff 11       	cpse	r31, r15
     128:	ff 11       	cpse	r31, r15
     12a:	ff 11       	cpse	r31, r15
     12c:	ff 11       	cpse	r31, r15
     12e:	eb 11       	cpse	r30, r11
     130:	f0 11       	cpse	r31, r0
     132:	ff 11       	cpse	r31, r15
     134:	ff 11       	cpse	r31, r15
     136:	ff 11       	cpse	r31, r15
     138:	ff 11       	cpse	r31, r15
     13a:	ff 11       	cpse	r31, r15
     13c:	ff 11       	cpse	r31, r15
     13e:	ff 11       	cpse	r31, r15
     140:	ff 11       	cpse	r31, r15
     142:	ff 11       	cpse	r31, r15
     144:	ff 11       	cpse	r31, r15
     146:	ff 11       	cpse	r31, r15
     148:	ff 11       	cpse	r31, r15
     14a:	ff 11       	cpse	r31, r15
     14c:	ff 11       	cpse	r31, r15
     14e:	f5 11       	cpse	r31, r5
     150:	fa 11       	cpse	r31, r10
     152:	f9 13       	cpse	r31, r25
     154:	f9 13       	cpse	r31, r25
     156:	f9 13       	cpse	r31, r25
     158:	f9 13       	cpse	r31, r25
     15a:	f9 13       	cpse	r31, r25
     15c:	f9 13       	cpse	r31, r25
     15e:	fb 13       	cpse	r31, r27
     160:	fb 13       	cpse	r31, r27
     162:	fb 13       	cpse	r31, r27
     164:	fb 13       	cpse	r31, r27
     166:	fb 13       	cpse	r31, r27
     168:	fb 13       	cpse	r31, r27
     16a:	fb 13       	cpse	r31, r27
     16c:	fb 13       	cpse	r31, r27
     16e:	fb 13       	cpse	r31, r27
     170:	fb 13       	cpse	r31, r27
     172:	fb 13       	cpse	r31, r27
     174:	fb 13       	cpse	r31, r27
     176:	fb 13       	cpse	r31, r27
     178:	fb 13       	cpse	r31, r27
     17a:	fb 13       	cpse	r31, r27
     17c:	fb 13       	cpse	r31, r27
     17e:	fb 13       	cpse	r31, r27
     180:	fb 13       	cpse	r31, r27
     182:	fb 13       	cpse	r31, r27
     184:	fb 13       	cpse	r31, r27
     186:	fb 13       	cpse	r31, r27
     188:	fb 13       	cpse	r31, r27
     18a:	fb 13       	cpse	r31, r27
     18c:	fb 13       	cpse	r31, r27
     18e:	fb 13       	cpse	r31, r27
     190:	fb 13       	cpse	r31, r27
     192:	fb 13       	cpse	r31, r27
     194:	fb 13       	cpse	r31, r27
     196:	fb 13       	cpse	r31, r27
     198:	fb 13       	cpse	r31, r27
     19a:	fb 13       	cpse	r31, r27
     19c:	fb 13       	cpse	r31, r27
     19e:	fb 13       	cpse	r31, r27
     1a0:	fb 13       	cpse	r31, r27
     1a2:	fb 13       	cpse	r31, r27
     1a4:	fb 13       	cpse	r31, r27
     1a6:	fb 13       	cpse	r31, r27
     1a8:	fb 13       	cpse	r31, r27
     1aa:	fb 13       	cpse	r31, r27
     1ac:	fb 13       	cpse	r31, r27
     1ae:	fb 13       	cpse	r31, r27
     1b0:	fb 13       	cpse	r31, r27
     1b2:	fb 13       	cpse	r31, r27
     1b4:	fb 13       	cpse	r31, r27
     1b6:	fb 13       	cpse	r31, r27
     1b8:	fb 13       	cpse	r31, r27
     1ba:	fb 13       	cpse	r31, r27
     1bc:	fb 13       	cpse	r31, r27
     1be:	fb 13       	cpse	r31, r27
     1c0:	fb 13       	cpse	r31, r27
     1c2:	fb 13       	cpse	r31, r27
     1c4:	fb 13       	cpse	r31, r27
     1c6:	fb 13       	cpse	r31, r27
     1c8:	fb 13       	cpse	r31, r27
     1ca:	fb 13       	cpse	r31, r27
     1cc:	fb 13       	cpse	r31, r27
     1ce:	fb 13       	cpse	r31, r27
     1d0:	fb 13       	cpse	r31, r27
     1d2:	fb 13       	cpse	r31, r27
     1d4:	f9 13       	cpse	r31, r25
     1d6:	f9 13       	cpse	r31, r25
     1d8:	fb 13       	cpse	r31, r27
     1da:	fb 13       	cpse	r31, r27
     1dc:	fb 13       	cpse	r31, r27
     1de:	f9 13       	cpse	r31, r25
     1e0:	f9 13       	cpse	r31, r25
     1e2:	fb 13       	cpse	r31, r27
     1e4:	fb 13       	cpse	r31, r27
     1e6:	fb 13       	cpse	r31, r27
     1e8:	fb 13       	cpse	r31, r27
     1ea:	f9 13       	cpse	r31, r25
     1ec:	fb 13       	cpse	r31, r27
     1ee:	fb 13       	cpse	r31, r27
     1f0:	f9 13       	cpse	r31, r25
     1f2:	fb 13       	cpse	r31, r27
     1f4:	f9 13       	cpse	r31, r25
     1f6:	fb 13       	cpse	r31, r27
     1f8:	f9 13       	cpse	r31, r25
     1fa:	fb 13       	cpse	r31, r27
     1fc:	fb 13       	cpse	r31, r27
     1fe:	f9 13       	cpse	r31, r25
     200:	fb 13       	cpse	r31, r27
     202:	fb 13       	cpse	r31, r27
     204:	fb 13       	cpse	r31, r27
     206:	fb 13       	cpse	r31, r27
     208:	fb 13       	cpse	r31, r27
     20a:	fb 13       	cpse	r31, r27
     20c:	fb 13       	cpse	r31, r27
     20e:	fb 13       	cpse	r31, r27
     210:	fb 13       	cpse	r31, r27
     212:	fb 13       	cpse	r31, r27
     214:	fb 13       	cpse	r31, r27
     216:	f9 13       	cpse	r31, r25
     218:	fb 13       	cpse	r31, r27
     21a:	fb 13       	cpse	r31, r27
     21c:	fb 13       	cpse	r31, r27
     21e:	fb 13       	cpse	r31, r27
     220:	fb 13       	cpse	r31, r27
     222:	fb 13       	cpse	r31, r27
     224:	fb 13       	cpse	r31, r27
     226:	fb 13       	cpse	r31, r27
     228:	fb 13       	cpse	r31, r27
     22a:	fb 13       	cpse	r31, r27
     22c:	fb 13       	cpse	r31, r27
     22e:	fb 13       	cpse	r31, r27
     230:	f9 13       	cpse	r31, r25
     232:	f5 14       	cp	r15, r5
     234:	04 15       	cp	r16, r4
     236:	48 15       	cp	r20, r8
     238:	4d 15       	cp	r20, r13
     23a:	52 15       	cp	r21, r2
     23c:	57 15       	cp	r21, r7
     23e:	c7 15       	cp	r28, r7
     240:	c7 15       	cp	r28, r7
     242:	c7 15       	cp	r28, r7
     244:	c7 15       	cp	r28, r7
     246:	c7 15       	cp	r28, r7
     248:	c7 15       	cp	r28, r7
     24a:	c7 15       	cp	r28, r7
     24c:	c7 15       	cp	r28, r7
     24e:	c7 15       	cp	r28, r7
     250:	c7 15       	cp	r28, r7
     252:	c7 15       	cp	r28, r7
     254:	c7 15       	cp	r28, r7
     256:	c7 15       	cp	r28, r7
     258:	c7 15       	cp	r28, r7
     25a:	c7 15       	cp	r28, r7
     25c:	c7 15       	cp	r28, r7
     25e:	c7 15       	cp	r28, r7
     260:	c7 15       	cp	r28, r7
     262:	c7 15       	cp	r28, r7
     264:	c7 15       	cp	r28, r7
     266:	c7 15       	cp	r28, r7
     268:	c7 15       	cp	r28, r7
     26a:	c7 15       	cp	r28, r7
     26c:	c7 15       	cp	r28, r7
     26e:	c7 15       	cp	r28, r7
     270:	c7 15       	cp	r28, r7
     272:	c7 15       	cp	r28, r7
     274:	c7 15       	cp	r28, r7
     276:	c7 15       	cp	r28, r7
     278:	c7 15       	cp	r28, r7
     27a:	c7 15       	cp	r28, r7
     27c:	c7 15       	cp	r28, r7
     27e:	c7 15       	cp	r28, r7
     280:	c7 15       	cp	r28, r7
     282:	c7 15       	cp	r28, r7
     284:	c7 15       	cp	r28, r7
     286:	c7 15       	cp	r28, r7
     288:	c7 15       	cp	r28, r7
     28a:	c7 15       	cp	r28, r7
     28c:	c7 15       	cp	r28, r7
     28e:	c7 15       	cp	r28, r7
     290:	c7 15       	cp	r28, r7
     292:	c7 15       	cp	r28, r7
     294:	c7 15       	cp	r28, r7
     296:	c7 15       	cp	r28, r7
     298:	c7 15       	cp	r28, r7
     29a:	c7 15       	cp	r28, r7
     29c:	c7 15       	cp	r28, r7
     29e:	c7 15       	cp	r28, r7
     2a0:	c7 15       	cp	r28, r7
     2a2:	c7 15       	cp	r28, r7
     2a4:	c7 15       	cp	r28, r7
     2a6:	c7 15       	cp	r28, r7
     2a8:	c7 15       	cp	r28, r7
     2aa:	c7 15       	cp	r28, r7
     2ac:	c7 15       	cp	r28, r7
     2ae:	c7 15       	cp	r28, r7
     2b0:	c7 15       	cp	r28, r7
     2b2:	c7 15       	cp	r28, r7
     2b4:	5e 15       	cp	r21, r14
     2b6:	6b 14       	cp	r6, r11
     2b8:	c7 15       	cp	r28, r7
     2ba:	c7 15       	cp	r28, r7
     2bc:	c7 15       	cp	r28, r7
     2be:	64 15       	cp	r22, r4
     2c0:	c1 15       	cp	r28, r1
     2c2:	c7 15       	cp	r28, r7
     2c4:	c7 15       	cp	r28, r7
     2c6:	c7 15       	cp	r28, r7
     2c8:	c7 15       	cp	r28, r7
     2ca:	5c 15       	cp	r21, r12
     2cc:	c7 15       	cp	r28, r7
     2ce:	c7 15       	cp	r28, r7
     2d0:	d9 14       	cp	r13, r9
     2d2:	c7 15       	cp	r28, r7
     2d4:	c3 15       	cp	r28, r3
     2d6:	c7 15       	cp	r28, r7
     2d8:	66 15       	cp	r22, r6
     2da:	c7 15       	cp	r28, r7
     2dc:	c7 15       	cp	r28, r7
     2de:	c4 15       	cp	r28, r4
     2e0:	c7 15       	cp	r28, r7
     2e2:	c7 15       	cp	r28, r7
     2e4:	c7 15       	cp	r28, r7
     2e6:	c7 15       	cp	r28, r7
     2e8:	c7 15       	cp	r28, r7
     2ea:	c7 15       	cp	r28, r7
     2ec:	c7 15       	cp	r28, r7
     2ee:	c7 15       	cp	r28, r7
     2f0:	c7 15       	cp	r28, r7
     2f2:	c7 15       	cp	r28, r7
     2f4:	c7 15       	cp	r28, r7
     2f6:	62 15       	cp	r22, r2
     2f8:	c7 15       	cp	r28, r7
     2fa:	c7 15       	cp	r28, r7
     2fc:	c7 15       	cp	r28, r7
     2fe:	c7 15       	cp	r28, r7
     300:	c7 15       	cp	r28, r7
     302:	c7 15       	cp	r28, r7
     304:	c7 15       	cp	r28, r7
     306:	c7 15       	cp	r28, r7
     308:	c7 15       	cp	r28, r7
     30a:	c7 15       	cp	r28, r7
     30c:	c7 15       	cp	r28, r7
     30e:	c7 15       	cp	r28, r7
     310:	60 15       	cp	r22, r0
     312:	10 15       	cp	r17, r0
     314:	18 15       	cp	r17, r8
     316:	20 15       	cp	r18, r0
     318:	28 15       	cp	r18, r8
     31a:	30 15       	cp	r19, r0
     31c:	38 15       	cp	r19, r8
     31e:	40 15       	cp	r20, r0
     320:	9f 1b       	sub	r25, r31
     322:	e5 1b       	sub	r30, r21
     324:	f3 1b       	sub	r31, r19
     326:	c9 1b       	sub	r28, r25
     328:	ad 1b       	sub	r26, r29
     32a:	d7 1b       	sub	r29, r23
     32c:	bb 1b       	sub	r27, r27

0000032e <__trampolines_end>:
     32e:	00 00       	nop
     330:	14 00       	.word	0x0014	; ????
     332:	50 00       	.word	0x0050	; ????
     334:	b4 00       	.word	0x00b4	; ????
     336:	40 01       	movw	r8, r0
     338:	f3 01       	movw	r30, r6
     33a:	cd 02       	muls	r28, r29
     33c:	cd 03       	fmulsu	r20, r21
     33e:	f3 04       	cpc	r15, r3
     340:	3d 06       	cpc	r3, r29
     342:	ad 07       	cpc	r26, r29
     344:	3f 09       	sbc	r19, r15
     346:	f4 0a       	sbc	r15, r20
     348:	c9 0c       	add	r12, r9
     34a:	bf 0e       	add	r11, r31
     34c:	d4 10       	cpse	r13, r4
     34e:	07 13       	cpse	r16, r23
     350:	55 15       	cp	r21, r5
     352:	be 17       	cp	r27, r30
     354:	41 1a       	sub	r4, r17
     356:	db 1c       	adc	r13, r11
     358:	8b 1f       	adc	r24, r27
     35a:	50 22       	and	r5, r16
     35c:	27 25       	eor	r18, r7
     35e:	0f 28       	or	r0, r15
     360:	06 2b       	or	r16, r22
     362:	0a 2e       	mov	r0, r26
     364:	19 31       	cpi	r17, 0x19	; 25
     366:	32 34       	cpi	r19, 0x42	; 66
     368:	52 37       	cpi	r21, 0x72	; 114
     36a:	77 3a       	cpi	r23, 0xA7	; 167
     36c:	a0 3d       	cpi	r26, 0xD0	; 208
     36e:	cb 40       	sbci	r28, 0x0B	; 11
     370:	f5 43       	sbci	r31, 0x35	; 53
     372:	1c 47       	sbci	r17, 0x7C	; 124
     374:	3f 4a       	sbci	r19, 0xAF	; 175
     376:	5c 4d       	sbci	r21, 0xDC	; 220
     378:	70 50       	subi	r23, 0x00	; 0
     37a:	7a 53       	subi	r23, 0x3A	; 58
     37c:	78 56       	subi	r23, 0x68	; 104
     37e:	67 59       	subi	r22, 0x97	; 151
     380:	47 5c       	subi	r20, 0xC7	; 199
     382:	15 5f       	subi	r17, 0xF5	; 245
     384:	cf 61       	ori	r28, 0x1F	; 31
     386:	75 64       	ori	r23, 0x45	; 69
     388:	03 67       	ori	r16, 0x73	; 115
     38a:	79 69       	ori	r23, 0x99	; 153
     38c:	d6 6b       	ori	r29, 0xB6	; 182
     38e:	16 6e       	ori	r17, 0xE6	; 230
     390:	3a 70       	andi	r19, 0x0A	; 10
     392:	3f 72       	andi	r19, 0x2F	; 47
     394:	26 74       	andi	r18, 0x46	; 70
     396:	eb 75       	andi	r30, 0x5B	; 91
     398:	8f 77       	andi	r24, 0x7F	; 127
     39a:	0f 79       	andi	r16, 0x9F	; 159
     39c:	6d 7a       	andi	r22, 0xAD	; 173
     39e:	a5 7b       	andi	r26, 0xB5	; 181
     3a0:	b8 7c       	andi	r27, 0xC8	; 200
     3a2:	a5 7d       	andi	r26, 0xD5	; 213
     3a4:	6c 7e       	andi	r22, 0xEC	; 236
     3a6:	0b 7f       	andi	r16, 0xFB	; 251
     3a8:	83 7f       	andi	r24, 0xF3	; 243
     3aa:	d3 7f       	andi	r29, 0xF3	; 243
     3ac:	fb 7f       	andi	r31, 0xFB	; 251
     3ae:	fb 7f       	andi	r31, 0xFB	; 251
     3b0:	d3 7f       	andi	r29, 0xF3	; 243
     3b2:	83 7f       	andi	r24, 0xF3	; 243
     3b4:	0b 7f       	andi	r16, 0xFB	; 251
     3b6:	6c 7e       	andi	r22, 0xEC	; 236
     3b8:	a5 7d       	andi	r26, 0xD5	; 213
     3ba:	b8 7c       	andi	r27, 0xC8	; 200
     3bc:	a5 7b       	andi	r26, 0xB5	; 181
     3be:	6d 7a       	andi	r22, 0xAD	; 173
     3c0:	0f 79       	andi	r16, 0x9F	; 159
     3c2:	8f 77       	andi	r24, 0x7F	; 127
     3c4:	eb 75       	andi	r30, 0x5B	; 91
     3c6:	26 74       	andi	r18, 0x46	; 70
     3c8:	3f 72       	andi	r19, 0x2F	; 47
     3ca:	3a 70       	andi	r19, 0x0A	; 10
     3cc:	16 6e       	ori	r17, 0xE6	; 230
     3ce:	d6 6b       	ori	r29, 0xB6	; 182
     3d0:	79 69       	ori	r23, 0x99	; 153
     3d2:	03 67       	ori	r16, 0x73	; 115
     3d4:	75 64       	ori	r23, 0x45	; 69
     3d6:	cf 61       	ori	r28, 0x1F	; 31
     3d8:	15 5f       	subi	r17, 0xF5	; 245
     3da:	47 5c       	subi	r20, 0xC7	; 199
     3dc:	67 59       	subi	r22, 0x97	; 151
     3de:	78 56       	subi	r23, 0x68	; 104
     3e0:	7a 53       	subi	r23, 0x3A	; 58
     3e2:	70 50       	subi	r23, 0x00	; 0
     3e4:	5c 4d       	sbci	r21, 0xDC	; 220
     3e6:	3f 4a       	sbci	r19, 0xAF	; 175
     3e8:	1c 47       	sbci	r17, 0x7C	; 124
     3ea:	f5 43       	sbci	r31, 0x35	; 53
     3ec:	cb 40       	sbci	r28, 0x0B	; 11
     3ee:	a0 3d       	cpi	r26, 0xD0	; 208
     3f0:	77 3a       	cpi	r23, 0xA7	; 167
     3f2:	52 37       	cpi	r21, 0x72	; 114
     3f4:	32 34       	cpi	r19, 0x42	; 66
     3f6:	19 31       	cpi	r17, 0x19	; 25
     3f8:	0a 2e       	mov	r0, r26
     3fa:	06 2b       	or	r16, r22
     3fc:	0f 28       	or	r0, r15
     3fe:	27 25       	eor	r18, r7
     400:	50 22       	and	r5, r16
     402:	8b 1f       	adc	r24, r27
     404:	db 1c       	adc	r13, r11
     406:	41 1a       	sub	r4, r17
     408:	be 17       	cp	r27, r30
     40a:	55 15       	cp	r21, r5
     40c:	07 13       	cpse	r16, r23
     40e:	d4 10       	cpse	r13, r4
     410:	bf 0e       	add	r11, r31
     412:	c9 0c       	add	r12, r9
     414:	f4 0a       	sbc	r15, r20
     416:	3f 09       	sbc	r19, r15
     418:	ad 07       	cpc	r26, r29
     41a:	3d 06       	cpc	r3, r29
     41c:	f3 04       	cpc	r15, r3
     41e:	cd 03       	fmulsu	r20, r21
     420:	cd 02       	muls	r28, r29
     422:	f3 01       	movw	r30, r6
     424:	40 01       	movw	r8, r0
     426:	b4 00       	.word	0x00b4	; ????
     428:	50 00       	.word	0x0050	; ????
     42a:	14 00       	.word	0x0014	; ????
	...

0000042e <_lin_table>:
     42e:	00 01 01 02 02 02 02 03 03 03 03 03 03 04 04 04     ................
     43e:	04 04 04 04 04 05 05 05 05 05 05 05 05 05 05 06     ................
     44e:	06 06 06 06 06 06 06 06 06 06 06 07 07 07 07 07     ................
     45e:	07 07 07 07 07 07 07 07 07 08 08 08 08 08 08 08     ................
     46e:	08 08 08 08 08 08 08 08 08 09 09 09 09 09 09 09     ................
     47e:	09 09 09 09 09 09 09 09 09 09 09 0a 0a 0a 0a 0a     ................
     48e:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0b     ................
     49e:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
     4ae:	0b 0b 0b 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4be:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
     4ce:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4de:	0d 0d 0d 0d 0d 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     4ee:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     4fe:	0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     50e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     51e:	0f 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     52e:	00 06 08 0a 0b 0d 0e 0f 10 11 12 13 14 14 15 16     ................
     53e:	17 17 18 19 19 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f 1f     ................
     54e:	20 20 21 21 22 22 23 23 24 24 25 25 26 26 26 27       !!""##$$%%&&&'
     55e:	27 28 28 28 29 29 2a 2a 2a 2b 2b 2b 2c 2c 2d 2d     '((())***+++,,--
     56e:	2d 2e 2e 2e 2f 2f 2f 30 30 30 31 31 31 32 32 32     -...///000111222
     57e:	33 33 33 34 34 34 34 35 35 35 36 36 36 37 37 37     3334444555666777
     58e:	37 38 38 38 39 39 39 39 3a 3a 3a 3b 3b 3b 3b 3c     78889999:::;;;;<
     59e:	3c 3c 3c 3d 3d 3d 3d 3e 3e 3e 3e 3f 3f 3f 3f 40     <<<====>>>>????@
     5ae:	00 0b 10 14 17 19 1c 1e 20 22 24 26 27 29 2a 2c     ........ "$&')*,
     5be:	2d 2f 30 31 33 34 35 36 37 39 3a 3b 3c 3d 3e 3f     -/01345679:;<=>?
     5ce:	40 41 42 43 44 45 46 47 48 48 49 4a 4b 4c 4d 4e     @ABCDEFGHHIJKLMN
     5de:	4e 4f 50 51 52 52 53 54 55 55 56 57 58 58 59 5a     NOPQRRSTUUVWXXYZ
     5ee:	5b 5b 5c 5d 5d 5e 5f 5f 60 61 61 62 63 63 64 65     [[\]]^__`aabccde
     5fe:	65 66 66 67 68 68 69 6a 6a 6b 6b 6c 6d 6d 6e 6e     effghhijjkklmmnn
     60e:	6f 6f 70 71 71 72 72 73 73 74 74 75 76 76 77 77     oopqqrrssttuvvww
     61e:	78 78 79 79 7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7f 7f     xxyyzz{{||}}~~..
     62e:	00 10 17 1c 20 24 27 2a 2d 30 33 35 37 3a 3c 3e     .... $'*-0357:<>
     63e:	40 42 44 46 48 49 4b 4d 4e 50 52 53 55 56 58 59     @BDFHIKMNPRSUVXY
     64e:	5b 5c 5d 5f 60 61 63 64 65 66 68 69 6a 6b 6d 6e     [\]_`acdefhijkmn
     65e:	6f 70 71 72 73 74 76 77 78 79 7a 7b 7c 7d 7e 7f     opqrstvwxyz{|}~.
     66e:	80 81 82 83 84 85 86 87 88 89 8a 8b 8b 8c 8d 8e     ................
     67e:	8f 90 91 92 93 94 94 95 96 97 98 99 99 9a 9b 9c     ................
     68e:	9d 9e 9e 9f a0 a1 a2 a2 a3 a4 a5 a6 a6 a7 a8 a9     ................
     69e:	a9 aa ab ac ac ad ae af af b0 b1 b1 b2 b3 b4 b4     ................
     6ae:	b5 b6 b6 b7 b8 b9 b9 ba bb bb bc bd bd be bf bf     ................
     6be:	c0 c1 c1 c2 c3 c3 c4 c5 c5 c6 c7 c7 c8 c8 c9 ca     ................
     6ce:	ca cb cc cc cd ce ce cf cf d0 d1 d1 d2 d2 d3 d4     ................
     6de:	d4 d5 d5 d6 d7 d7 d8 d8 d9 da da db db dc dd dd     ................
     6ee:	de de df df e0 e1 e1 e2 e2 e3 e3 e4 e5 e5 e6 e6     ................
     6fe:	e7 e7 e8 e8 e9 ea ea eb eb ec ec ed ed ee ee ef     ................
     70e:	ef f0 f1 f1 f2 f2 f3 f3 f4 f4 f5 f5 f6 f6 f7 f7     ................
     71e:	f8 f8 f9 f9 fa fa fb fb fc fc fd fd fe fe ff ff     ................

0000072e <_reorder_table>:
     72e:	70 07 78 0f 74 17 7c 1f 72 27 7a 2f 76 37 7e 3f     p.x.t.|.r'z/v7~?
     73e:	71 47 79 4f 75 57 7d 5f 73 67 7b 6f 60 03 68 0b     qGyOuW}_sg{o`.h.
     74e:	64 13 6c 1b 62 23 6a 2b 66 33 6e 3b 61 43 69 4b     d.l.b#j+f3n;aCiK
     75e:	65 53 6d 5b 50 05 58 0d 54 15 5c 1d 52 25 5a 2d     eSm[P.X.T.\.R%Z-
     76e:	56 35 5e 3d 51 45 59 4d 40 01 48 09 44 11 4c 19     V5^=QEYM@.H.D.L.
     77e:	42 21 4a 29 46 31 4e 39 30 06 38 0e 34 16 3c 1e     B!J)F1N90.8.4.<.
     78e:	32 26 3a 2e 20 02 28 0a 24 12 2c 1a 10 04 18 0c     2&:. .(.$.,.....

0000079e <_cas_constants>:
     79e:	42 76 fc 30 82 5a 82 5a fc 30 42 76 8a 7d f9 18     Bv.0.Z.Z.0Bv.}..
     7ae:	42 76 fc 30 6e 6a 1d 47 82 5a 82 5a 1d 47 6e 6a     Bv.0nj.G.Z.Z.Gnj
     7be:	fc 30 42 76 f9 18 8a 7d 62 7f 8c 0c 8a 7d f9 18     .0Bv...}b....}..
     7ce:	7d 7a 28 25 42 76 fc 30 e3 70 57 3c 6e 6a 1d 47     }z(%Bv.0.pW<nj.G
     7de:	f2 62 34 51 82 5a 82 5a 34 51 f2 62 1d 47 6e 6a     .b4Q.Z.Z4Q.b.Gnj
     7ee:	57 3c e3 70 fc 30 42 76 28 25 7d 7a f9 18 8a 7d     W<.p.0Bv(%}z...}
     7fe:	8c 0c 62 7f d9 7f 48 06 62 7f 8c 0c 9d 7e c8 12     ..b...H.b....~..
     80e:	8a 7d f9 18 2a 7c 1a 1f 7d 7a 28 25 85 78 1f 2b     .}..*|..}z(%.x.+
     81e:	42 76 fc 30 b6 73 ba 36 e3 70 57 3c ca 6d ce 41     Bv.0.s.6.pW<.m.A
     82e:	6e 6a 1d 47 d0 66 40 4c f2 62 34 51 d7 5e f6 55     nj.G.f@L.b4Q.^.U
     83e:	82 5a 82 5a f6 55 d7 5e 34 51 f2 62 40 4c d0 66     .Z.Z.U.^4Q.b@L.f
     84e:	1d 47 6e 6a ce 41 ca 6d 57 3c e3 70 ba 36 b6 73     .Gnj.A.mW<.p.6.s
     85e:	fc 30 42 76 1f 2b 85 78 28 25 7d 7a 1a 1f 2a 7c     .0Bv.+.x(%}z..*|
     86e:	f9 18 8a 7d c8 12 9d 7e 8c 0c 62 7f 48 06 d9 7f     ...}...~..b.H...

0000087e <__ctors_end>:
     87e:	11 24       	eor	r1, r1
     880:	1f be       	out	0x3f, r1	; 63
     882:	cf ef       	ldi	r28, 0xFF	; 255
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df e2       	ldi	r29, 0x2F	; 47
     888:	de bf       	out	0x3e, r29	; 62

0000088a <__do_copy_data>:
     88a:	11 e2       	ldi	r17, 0x21	; 33
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e2       	ldi	r27, 0x20	; 32
     890:	e4 ef       	ldi	r30, 0xF4	; 244
     892:	fd e4       	ldi	r31, 0x4D	; 77
     894:	02 c0       	rjmp	.+4      	; 0x89a <__do_copy_data+0x10>
     896:	05 90       	lpm	r0, Z+
     898:	0d 92       	st	X+, r0
     89a:	a4 30       	cpi	r26, 0x04	; 4
     89c:	b1 07       	cpc	r27, r17
     89e:	d9 f7       	brne	.-10     	; 0x896 <__do_copy_data+0xc>

000008a0 <__do_clear_bss>:
     8a0:	2b e2       	ldi	r18, 0x2B	; 43
     8a2:	a4 e0       	ldi	r26, 0x04	; 4
     8a4:	b1 e2       	ldi	r27, 0x21	; 33
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <.do_clear_bss_start>

000008a8 <.do_clear_bss_loop>:
     8a8:	1d 92       	st	X+, r1

000008aa <.do_clear_bss_start>:
     8aa:	a5 33       	cpi	r26, 0x35	; 53
     8ac:	b2 07       	cpc	r27, r18
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <.do_clear_bss_loop>
     8b0:	0e 94 22 1b 	call	0x3644	; 0x3644 <main>
     8b4:	0c 94 f8 26 	jmp	0x4df0	; 0x4df0 <_exit>

000008b8 <__bad_interrupt>:
     8b8:	a3 cb       	rjmp	.-2234   	; 0x0 <__vectors>

000008ba <wdt_set_timeout_period>:
	uint8_t temp = (WDT_WPER_gm & (win_period << WDT_WPER_gp)) |
			(WDT.WINCTRL & WDT_WEN_bm) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
	wdt_wait_while_busy();
	return true;
}
     8ba:	60 91 80 00 	lds	r22, 0x0080
     8be:	62 70       	andi	r22, 0x02	; 2
     8c0:	61 60       	ori	r22, 0x01	; 1
     8c2:	24 e0       	ldi	r18, 0x04	; 4
     8c4:	82 9f       	mul	r24, r18
     8c6:	c0 01       	movw	r24, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	8c 73       	andi	r24, 0x3C	; 60
     8cc:	68 2b       	or	r22, r24
     8ce:	80 e8       	ldi	r24, 0x80	; 128
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <ccp_write_io>
     8d6:	e0 e8       	ldi	r30, 0x80	; 128
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	80 fd       	sbrc	r24, 0
     8de:	fd cf       	rjmp	.-6      	; 0x8da <wdt_set_timeout_period+0x20>
     8e0:	08 95       	ret

000008e2 <wdt_disable>:
 *  automatically ignored during the change enable period. Disable functions
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
     8e2:	60 91 80 00 	lds	r22, 0x0080
     8e6:	6c 7f       	andi	r22, 0xFC	; 252
     8e8:	61 60       	ori	r22, 0x01	; 1
	ccp_write_io((void *)&WDT.CTRL, temp);
     8ea:	80 e8       	ldi	r24, 0x80	; 128
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <ccp_write_io>
     8f2:	08 95       	ret

000008f4 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     8f4:	60 91 80 00 	lds	r22, 0x0080
     8f8:	6c 73       	andi	r22, 0x3C	; 60
     8fa:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     8fc:	80 e8       	ldi	r24, 0x80	; 128
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     904:	e0 e8       	ldi	r30, 0x80	; 128
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	80 fd       	sbrc	r24, 0
     90c:	fd cf       	rjmp	.-6      	; 0x908 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     90e:	08 95       	ret

00000910 <init_adc>:
	mean_med_l = start_bubble(bubble_med_l);
	mean_high_l = start_bubble(bubble_high_l);
	
	mean_low_r = start_bubble(bubble_low_r);
	mean_med_r = start_bubble(bubble_med_r);
	mean_high_r = start_bubble(bubble_high_r);
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	61 97       	sbiw	r28, 0x11	; 17
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	de bf       	out	0x3e, r29	; 62
     920:	18 2f       	mov	r17, r24
     922:	be 01       	movw	r22, r28
     924:	6f 5f       	subi	r22, 0xFF	; 255
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <adc_read_configuration>
     930:	99 81       	ldd	r25, Y+1	; 0x01
     932:	2a 81       	ldd	r18, Y+2	; 0x02
     934:	2f 78       	andi	r18, 0x8F	; 143
     936:	22 61       	ori	r18, 0x12	; 18
     938:	2a 83       	std	Y+2, r18	; 0x02
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	8c 83       	std	Y+4, r24	; 0x04
     93e:	91 7e       	andi	r25, 0xE1	; 225
     940:	90 61       	ori	r25, 0x10	; 16
     942:	99 83       	std	Y+1, r25	; 0x01
     944:	1b 82       	std	Y+3, r1	; 0x03
     946:	8f b7       	in	r24, 0x3f	; 63
     948:	f8 94       	cli
     94a:	98 e0       	ldi	r25, 0x08	; 8
     94c:	90 93 08 02 	sts	0x0208, r25
     950:	8f bf       	out	0x3f, r24	; 63
     952:	be 01       	movw	r22, r28
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <adc_write_configuration>
     960:	ae 01       	movw	r20, r28
     962:	48 5f       	subi	r20, 0xF8	; 248
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <adcch_read_configuration>
     970:	14 30       	cpi	r17, 0x04	; 4
     972:	b9 f0       	breq	.+46     	; 0x9a2 <init_adc+0x92>
     974:	28 f4       	brcc	.+10     	; 0x980 <init_adc+0x70>
     976:	11 30       	cpi	r17, 0x01	; 1
     978:	41 f0       	breq	.+16     	; 0x98a <init_adc+0x7a>
     97a:	12 30       	cpi	r17, 0x02	; 2
     97c:	61 f0       	breq	.+24     	; 0x996 <init_adc+0x86>
     97e:	21 c0       	rjmp	.+66     	; 0x9c2 <init_adc+0xb2>
     980:	15 30       	cpi	r17, 0x05	; 5
     982:	a9 f0       	breq	.+42     	; 0x9ae <init_adc+0x9e>
     984:	16 30       	cpi	r17, 0x06	; 6
     986:	c1 f0       	breq	.+48     	; 0x9b8 <init_adc+0xa8>
     988:	1c c0       	rjmp	.+56     	; 0x9c2 <init_adc+0xb2>
     98a:	19 8a       	std	Y+17, r1	; 0x11
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	88 87       	std	Y+8, r24	; 0x08
     990:	80 e2       	ldi	r24, 0x20	; 32
     992:	89 87       	std	Y+9, r24	; 0x09
     994:	16 c0       	rjmp	.+44     	; 0x9c2 <init_adc+0xb2>
     996:	19 8a       	std	Y+17, r1	; 0x11
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	88 87       	std	Y+8, r24	; 0x08
     99c:	88 e0       	ldi	r24, 0x08	; 8
     99e:	89 87       	std	Y+9, r24	; 0x09
     9a0:	10 c0       	rjmp	.+32     	; 0x9c2 <init_adc+0xb2>
     9a2:	19 8a       	std	Y+17, r1	; 0x11
     9a4:	8a e0       	ldi	r24, 0x0A	; 10
     9a6:	88 87       	std	Y+8, r24	; 0x08
     9a8:	83 e1       	ldi	r24, 0x13	; 19
     9aa:	89 87       	std	Y+9, r24	; 0x09
     9ac:	0a c0       	rjmp	.+20     	; 0x9c2 <init_adc+0xb2>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	88 87       	std	Y+8, r24	; 0x08
     9b2:	80 e6       	ldi	r24, 0x60	; 96
     9b4:	89 87       	std	Y+9, r24	; 0x09
     9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <init_adc+0xb2>
     9b8:	18 86       	std	Y+8, r1	; 0x08
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	89 87       	std	Y+9, r24	; 0x09
     9be:	86 e4       	ldi	r24, 0x46	; 70
     9c0:	89 8b       	std	Y+17, r24	; 0x11
     9c2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9c4:	1c 86       	std	Y+12, r1	; 0x0c
     9c6:	80 7f       	andi	r24, 0xF0	; 240
     9c8:	8a 87       	std	Y+10, r24	; 0x0a
     9ca:	ae 01       	movw	r20, r28
     9cc:	48 5f       	subi	r20, 0xF8	; 248
     9ce:	5f 4f       	sbci	r21, 0xFF	; 255
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <adcch_write_configuration>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <adc_enable>
     9e2:	9f b7       	in	r25, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	e0 e0       	ldi	r30, 0x00	; 0
     9e8:	f2 e0       	ldi	r31, 0x02	; 2
     9ea:	80 81       	ld	r24, Z
     9ec:	84 60       	ori	r24, 0x04	; 4
     9ee:	80 83       	st	Z, r24
     9f0:	9f bf       	out	0x3f, r25	; 63
     9f2:	86 81       	ldd	r24, Z+6	; 0x06
     9f4:	80 ff       	sbrs	r24, 0
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <init_adc+0xe2>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 06 02 	sts	0x0206, r24
     9fe:	61 96       	adiw	r28, 0x11	; 17
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	08 95       	ret

00000a0c <change_adc_channel>:
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	2a 97       	sbiw	r28, 0x0a	; 10
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	de bf       	out	0x3e, r29	; 62
     a1c:	18 2f       	mov	r17, r24
     a1e:	ae 01       	movw	r20, r28
     a20:	4f 5f       	subi	r20, 0xFF	; 255
     a22:	5f 4f       	sbci	r21, 0xFF	; 255
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <adcch_read_configuration>
     a2e:	14 30       	cpi	r17, 0x04	; 4
     a30:	b9 f0       	breq	.+46     	; 0xa60 <change_adc_channel+0x54>
     a32:	28 f4       	brcc	.+10     	; 0xa3e <change_adc_channel+0x32>
     a34:	11 30       	cpi	r17, 0x01	; 1
     a36:	41 f0       	breq	.+16     	; 0xa48 <change_adc_channel+0x3c>
     a38:	12 30       	cpi	r17, 0x02	; 2
     a3a:	61 f0       	breq	.+24     	; 0xa54 <change_adc_channel+0x48>
     a3c:	21 c0       	rjmp	.+66     	; 0xa80 <change_adc_channel+0x74>
     a3e:	15 30       	cpi	r17, 0x05	; 5
     a40:	a9 f0       	breq	.+42     	; 0xa6c <change_adc_channel+0x60>
     a42:	16 30       	cpi	r17, 0x06	; 6
     a44:	c1 f0       	breq	.+48     	; 0xa76 <change_adc_channel+0x6a>
     a46:	1c c0       	rjmp	.+56     	; 0xa80 <change_adc_channel+0x74>
     a48:	1a 86       	std	Y+10, r1	; 0x0a
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	89 83       	std	Y+1, r24	; 0x01
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	16 c0       	rjmp	.+44     	; 0xa80 <change_adc_channel+0x74>
     a54:	1a 86       	std	Y+10, r1	; 0x0a
     a56:	8a e0       	ldi	r24, 0x0A	; 10
     a58:	89 83       	std	Y+1, r24	; 0x01
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	8a 83       	std	Y+2, r24	; 0x02
     a5e:	10 c0       	rjmp	.+32     	; 0xa80 <change_adc_channel+0x74>
     a60:	1a 86       	std	Y+10, r1	; 0x0a
     a62:	8a e0       	ldi	r24, 0x0A	; 10
     a64:	89 83       	std	Y+1, r24	; 0x01
     a66:	83 e1       	ldi	r24, 0x13	; 19
     a68:	8a 83       	std	Y+2, r24	; 0x02
     a6a:	0a c0       	rjmp	.+20     	; 0xa80 <change_adc_channel+0x74>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	80 e6       	ldi	r24, 0x60	; 96
     a72:	8a 83       	std	Y+2, r24	; 0x02
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <change_adc_channel+0x74>
     a76:	19 82       	std	Y+1, r1	; 0x01
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	8a 83       	std	Y+2, r24	; 0x02
     a7c:	86 e4       	ldi	r24, 0x46	; 70
     a7e:	8a 87       	std	Y+10, r24	; 0x0a
     a80:	ae 01       	movw	r20, r28
     a82:	4f 5f       	subi	r20, 0xFF	; 255
     a84:	5f 4f       	sbci	r21, 0xFF	; 255
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <adcch_write_configuration>
     a90:	2a 96       	adiw	r28, 0x0a	; 10
     a92:	cd bf       	out	0x3d, r28	; 61
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	08 95       	ret

00000a9e <adc_callback>:
     a9e:	80 91 45 21 	lds	r24, 0x2145
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <adc_callback+0xa>
     aa6:	4c c0       	rjmp	.+152    	; 0xb40 <adc_callback+0xa2>
     aa8:	28 f4       	brcc	.+10     	; 0xab4 <adc_callback+0x16>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	51 f0       	breq	.+20     	; 0xac2 <adc_callback+0x24>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	09 f1       	breq	.+66     	; 0xaf4 <adc_callback+0x56>
     ab2:	08 95       	ret
     ab4:	85 30       	cpi	r24, 0x05	; 5
     ab6:	09 f4       	brne	.+2      	; 0xaba <adc_callback+0x1c>
     ab8:	69 c0       	rjmp	.+210    	; 0xb8c <adc_callback+0xee>
     aba:	86 30       	cpi	r24, 0x06	; 6
     abc:	09 f4       	brne	.+2      	; 0xac0 <adc_callback+0x22>
     abe:	75 c0       	rjmp	.+234    	; 0xbaa <adc_callback+0x10c>
     ac0:	08 95       	ret
     ac2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <ischarging>
     ac6:	81 11       	cpse	r24, r1
     ac8:	92 c0       	rjmp	.+292    	; 0xbee <adc_callback+0x150>
     aca:	80 91 45 21 	lds	r24, 0x2145
     ace:	80 93 44 21 	sts	0x2144, r24
     ad2:	86 e0       	ldi	r24, 0x06	; 6
     ad4:	80 93 45 21 	sts	0x2145, r24
     ad8:	80 91 45 21 	lds	r24, 0x2145
     adc:	97 df       	rcall	.-210    	; 0xa0c <change_adc_channel>
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	98 e0       	ldi	r25, 0x08	; 8
     ae2:	0e 94 12 21 	call	0x4224	; 0x4224 <tc45_enable>
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	98 e0       	ldi	r25, 0x08	; 8
     aea:	0e 94 44 21 	call	0x4288	; 0x4288 <tc45_disable>
     aee:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <load_data_color_led>
     af2:	08 95       	ret
     af4:	80 91 05 21 	lds	r24, 0x2105
     af8:	90 91 06 21 	lds	r25, 0x2106
     afc:	9c 01       	movw	r18, r24
     afe:	2f 5f       	subi	r18, 0xFF	; 255
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	20 93 05 21 	sts	0x2105, r18
     b06:	30 93 06 21 	sts	0x2106, r19
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	fc 01       	movw	r30, r24
     b10:	ea 58       	subi	r30, 0x8A	; 138
     b12:	f6 4d       	sbci	r31, 0xD6	; 214
     b14:	40 83       	st	Z, r20
     b16:	51 83       	std	Z+1, r21	; 0x01
     b18:	80 91 05 21 	lds	r24, 0x2105
     b1c:	90 91 06 21 	lds	r25, 0x2106
     b20:	80 38       	cpi	r24, 0x80	; 128
     b22:	91 05       	cpc	r25, r1
     b24:	08 f4       	brcc	.+2      	; 0xb28 <adc_callback+0x8a>
     b26:	63 c0       	rjmp	.+198    	; 0xbee <adc_callback+0x150>
     b28:	10 92 05 21 	sts	0x2105, r1
     b2c:	10 92 06 21 	sts	0x2106, r1
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	80 93 04 21 	sts	0x2104, r24
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	98 e0       	ldi	r25, 0x08	; 8
     b3a:	0c 94 44 21 	jmp	0x4288	; 0x4288 <tc45_disable>
     b3e:	08 95       	ret
     b40:	80 91 05 21 	lds	r24, 0x2105
     b44:	90 91 06 21 	lds	r25, 0x2106
     b48:	9c 01       	movw	r18, r24
     b4a:	2f 5f       	subi	r18, 0xFF	; 255
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255
     b4e:	20 93 05 21 	sts	0x2105, r18
     b52:	30 93 06 21 	sts	0x2106, r19
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	fc 01       	movw	r30, r24
     b5c:	ea 58       	subi	r30, 0x8A	; 138
     b5e:	f6 4d       	sbci	r31, 0xD6	; 214
     b60:	40 83       	st	Z, r20
     b62:	51 83       	std	Z+1, r21	; 0x01
     b64:	80 91 05 21 	lds	r24, 0x2105
     b68:	90 91 06 21 	lds	r25, 0x2106
     b6c:	80 38       	cpi	r24, 0x80	; 128
     b6e:	91 05       	cpc	r25, r1
     b70:	08 f4       	brcc	.+2      	; 0xb74 <adc_callback+0xd6>
     b72:	3d c0       	rjmp	.+122    	; 0xbee <adc_callback+0x150>
     b74:	10 92 05 21 	sts	0x2105, r1
     b78:	10 92 06 21 	sts	0x2106, r1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 93 04 21 	sts	0x2104, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	98 e0       	ldi	r25, 0x08	; 8
     b86:	0c 94 44 21 	jmp	0x4288	; 0x4288 <tc45_disable>
     b8a:	08 95       	ret
     b8c:	40 93 40 21 	sts	0x2140, r20
     b90:	50 93 41 21 	sts	0x2141, r21
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	80 93 3d 21 	sts	0x213D, r24
     b9a:	80 91 44 21 	lds	r24, 0x2144
     b9e:	80 93 45 21 	sts	0x2145, r24
     ba2:	80 91 45 21 	lds	r24, 0x2145
     ba6:	32 cf       	rjmp	.-412    	; 0xa0c <change_adc_channel>
     ba8:	08 95       	ret
     baa:	40 93 3e 21 	sts	0x213E, r20
     bae:	50 93 3f 21 	sts	0x213F, r21
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 3c 21 	sts	0x213C, r24
     bb8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <ischarging>
     bbc:	88 23       	and	r24, r24
     bbe:	b9 f0       	breq	.+46     	; 0xbee <adc_callback+0x150>
     bc0:	4f ef       	ldi	r20, 0xFF	; 255
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
     bca:	80 91 45 21 	lds	r24, 0x2145
     bce:	80 93 44 21 	sts	0x2144, r24
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	80 93 45 21 	sts	0x2145, r24
     bd8:	80 91 45 21 	lds	r24, 0x2145
     bdc:	17 df       	rcall	.-466    	; 0xa0c <change_adc_channel>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	98 e0       	ldi	r25, 0x08	; 8
     be2:	0e 94 44 21 	call	0x4288	; 0x4288 <tc45_disable>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	98 e0       	ldi	r25, 0x08	; 8
     bea:	0c 94 12 21 	jmp	0x4224	; 0x4224 <tc45_enable>
     bee:	08 95       	ret

00000bf0 <adc_enable_interrupt>:
     bf0:	cf 93       	push	r28
     bf2:	df 93       	push	r29
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	2a 97       	sbiw	r28, 0x0a	; 10
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <adc_disable>
     c06:	ae 01       	movw	r20, r28
     c08:	4f 5f       	subi	r20, 0xFF	; 255
     c0a:	5f 4f       	sbci	r21, 0xFF	; 255
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	92 e0       	ldi	r25, 0x02	; 2
     c12:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <adcch_read_configuration>
     c16:	e0 ea       	ldi	r30, 0xA0	; 160
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	81 60       	ori	r24, 0x01	; 1
     c1e:	82 83       	std	Z+2, r24	; 0x02
     c20:	6f e4       	ldi	r22, 0x4F	; 79
     c22:	75 e0       	ldi	r23, 0x05	; 5
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <adc_set_callback>
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	8c 7f       	andi	r24, 0xFC	; 252
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	8b 83       	std	Y+3, r24	; 0x03
     c34:	ae 01       	movw	r20, r28
     c36:	4f 5f       	subi	r20, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <adcch_write_configuration>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	92 e0       	ldi	r25, 0x02	; 2
     c48:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <adc_enable>
     c4c:	78 94       	sei
     c4e:	2a 96       	adiw	r28, 0x0a	; 10
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <mean>:


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     c5a:	66 23       	and	r22, r22
     c5c:	69 f0       	breq	.+26     	; 0xc78 <mean+0x1e>
     c5e:	fc 01       	movw	r30, r24
     c60:	ac 01       	movw	r20, r24
     c62:	46 0f       	add	r20, r22
     c64:	51 1d       	adc	r21, r1
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
	{
		m += a[i];
     c6a:	21 91       	ld	r18, Z+
     c6c:	82 0f       	add	r24, r18
     c6e:	91 1d       	adc	r25, r1


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     c70:	e4 17       	cp	r30, r20
     c72:	f5 07       	cpc	r31, r21
     c74:	d1 f7       	brne	.-12     	; 0xc6a <mean+0x10>
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <mean+0x22>



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
	}
	return m/order;
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
     c82:	86 2f       	mov	r24, r22
}
     c84:	08 95       	ret

00000c86 <updateLEDs>:
		return 3;
	}
}

void updateLEDs()
{
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29

//	bool playing = isplaying();
//	bool charging = ischarging();

		// get and bin the power of frequencies to colors
		low_power_old = low_power;
     c9a:	80 91 1b 21 	lds	r24, 0x211B
     c9e:	90 91 1c 21 	lds	r25, 0x211C
     ca2:	a0 91 1d 21 	lds	r26, 0x211D
     ca6:	b0 91 1e 21 	lds	r27, 0x211E
     caa:	80 93 0f 21 	sts	0x210F, r24
     cae:	90 93 10 21 	sts	0x2110, r25
     cb2:	a0 93 11 21 	sts	0x2111, r26
     cb6:	b0 93 12 21 	sts	0x2112, r27
		mid_power_old = mid_power;
     cba:	80 91 17 21 	lds	r24, 0x2117
     cbe:	90 91 18 21 	lds	r25, 0x2118
     cc2:	a0 91 19 21 	lds	r26, 0x2119
     cc6:	b0 91 1a 21 	lds	r27, 0x211A
     cca:	80 93 0b 21 	sts	0x210B, r24
     cce:	90 93 0c 21 	sts	0x210C, r25
     cd2:	a0 93 0d 21 	sts	0x210D, r26
     cd6:	b0 93 0e 21 	sts	0x210E, r27
		high_power_old = high_power;
     cda:	80 91 13 21 	lds	r24, 0x2113
     cde:	90 91 14 21 	lds	r25, 0x2114
     ce2:	a0 91 15 21 	lds	r26, 0x2115
     ce6:	b0 91 16 21 	lds	r27, 0x2116
     cea:	80 93 07 21 	sts	0x2107, r24
     cee:	90 93 08 21 	sts	0x2108, r25
     cf2:	a0 93 09 21 	sts	0x2109, r26
     cf6:	b0 93 0a 21 	sts	0x210A, r27

		low_power = 0;
     cfa:	10 92 1b 21 	sts	0x211B, r1
     cfe:	10 92 1c 21 	sts	0x211C, r1
     d02:	10 92 1d 21 	sts	0x211D, r1
     d06:	10 92 1e 21 	sts	0x211E, r1
		mid_power = 0;
     d0a:	10 92 17 21 	sts	0x2117, r1
     d0e:	10 92 18 21 	sts	0x2118, r1
     d12:	10 92 19 21 	sts	0x2119, r1
     d16:	10 92 1a 21 	sts	0x211A, r1
		high_power = 0;
     d1a:	10 92 13 21 	sts	0x2113, r1
     d1e:	10 92 14 21 	sts	0x2114, r1
     d22:	10 92 15 21 	sts	0x2115, r1
     d26:	10 92 16 21 	sts	0x2116, r1

		for (int i = 0; i < lows; i++){
     d2a:	00 91 0f 20 	lds	r16, 0x200F
     d2e:	10 91 10 20 	lds	r17, 0x2010
     d32:	10 16       	cp	r1, r16
     d34:	11 06       	cpc	r1, r17
     d36:	44 f5       	brge	.+80     	; 0xd88 <updateLEDs+0x102>
     d38:	81 2c       	mov	r8, r1
     d3a:	91 2c       	mov	r9, r1
     d3c:	54 01       	movw	r10, r8
     d3e:	0f 2e       	mov	r0, r31
     d40:	f3 eb       	ldi	r31, 0xB3	; 179
     d42:	ef 2e       	mov	r14, r31
     d44:	f5 e2       	ldi	r31, 0x25	; 37
     d46:	ff 2e       	mov	r15, r31
     d48:	f0 2d       	mov	r31, r0
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
			low_power += fht_lin_out[i];
     d4e:	f7 01       	movw	r30, r14
     d50:	81 91       	ld	r24, Z+
     d52:	91 91       	ld	r25, Z+
     d54:	7f 01       	movw	r14, r30
     d56:	bc 01       	movw	r22, r24
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__floatunsisf>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	0e 94 94 24 	call	0x4928	; 0x4928 <__addsf3>
     d6c:	4b 01       	movw	r8, r22
     d6e:	5c 01       	movw	r10, r24

		low_power = 0;
		mid_power = 0;
		high_power = 0;

		for (int i = 0; i < lows; i++){
     d70:	21 96       	adiw	r28, 0x01	; 1
     d72:	c0 17       	cp	r28, r16
     d74:	d1 07       	cpc	r29, r17
     d76:	5c f3       	brlt	.-42     	; 0xd4e <updateLEDs+0xc8>
     d78:	60 93 1b 21 	sts	0x211B, r22
     d7c:	70 93 1c 21 	sts	0x211C, r23
     d80:	80 93 1d 21 	sts	0x211D, r24
     d84:	90 93 1e 21 	sts	0x211E, r25
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     d88:	c0 91 0d 20 	lds	r28, 0x200D
     d8c:	d0 91 0e 20 	lds	r29, 0x200E
     d90:	c0 0f       	add	r28, r16
     d92:	d1 1f       	adc	r29, r17
     d94:	0c 17       	cp	r16, r28
     d96:	1d 07       	cpc	r17, r29
     d98:	6c f5       	brge	.+90     	; 0xdf4 <updateLEDs+0x16e>
     d9a:	80 90 17 21 	lds	r8, 0x2117
     d9e:	90 90 18 21 	lds	r9, 0x2118
     da2:	a0 90 19 21 	lds	r10, 0x2119
     da6:	b0 90 1a 21 	lds	r11, 0x211A
     daa:	c8 01       	movw	r24, r16
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	9c 01       	movw	r18, r24
     db2:	2d 54       	subi	r18, 0x4D	; 77
     db4:	3a 4d       	sbci	r19, 0xDA	; 218
     db6:	79 01       	movw	r14, r18
			mid_power += fht_lin_out[i];
     db8:	f7 01       	movw	r30, r14
     dba:	81 91       	ld	r24, Z+
     dbc:	91 91       	ld	r25, Z+
     dbe:	7f 01       	movw	r14, r30
     dc0:	bc 01       	movw	r22, r24
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__floatunsisf>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	c5 01       	movw	r24, r10
     dd0:	b4 01       	movw	r22, r8
     dd2:	0e 94 94 24 	call	0x4928	; 0x4928 <__addsf3>
     dd6:	4b 01       	movw	r8, r22
     dd8:	5c 01       	movw	r10, r24
		high_power = 0;

		for (int i = 0; i < lows; i++){
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     dda:	0f 5f       	subi	r16, 0xFF	; 255
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	0c 17       	cp	r16, r28
     de0:	1d 07       	cpc	r17, r29
     de2:	54 f3       	brlt	.-44     	; 0xdb8 <updateLEDs+0x132>
     de4:	60 93 17 21 	sts	0x2117, r22
     de8:	70 93 18 21 	sts	0x2118, r23
     dec:	80 93 19 21 	sts	0x2119, r24
     df0:	90 93 1a 21 	sts	0x211A, r25
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     df4:	e0 90 0b 20 	lds	r14, 0x200B
     df8:	f0 90 0c 20 	lds	r15, 0x200C
     dfc:	ec 0e       	add	r14, r28
     dfe:	fd 1e       	adc	r15, r29
     e00:	ce 15       	cp	r28, r14
     e02:	df 05       	cpc	r29, r15
     e04:	54 f5       	brge	.+84     	; 0xe5a <updateLEDs+0x1d4>
     e06:	80 90 13 21 	lds	r8, 0x2113
     e0a:	90 90 14 21 	lds	r9, 0x2114
     e0e:	a0 90 15 21 	lds	r10, 0x2115
     e12:	b0 90 16 21 	lds	r11, 0x2116
     e16:	8e 01       	movw	r16, r28
     e18:	00 0f       	add	r16, r16
     e1a:	11 1f       	adc	r17, r17
     e1c:	0d 54       	subi	r16, 0x4D	; 77
     e1e:	1a 4d       	sbci	r17, 0xDA	; 218
			high_power += fht_lin_out[i];
     e20:	f8 01       	movw	r30, r16
     e22:	81 91       	ld	r24, Z+
     e24:	91 91       	ld	r25, Z+
     e26:	8f 01       	movw	r16, r30
     e28:	bc 01       	movw	r22, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 90 25 	call	0x4b20	; 0x4b20 <__floatunsisf>
     e32:	9b 01       	movw	r18, r22
     e34:	ac 01       	movw	r20, r24
     e36:	c5 01       	movw	r24, r10
     e38:	b4 01       	movw	r22, r8
     e3a:	0e 94 94 24 	call	0x4928	; 0x4928 <__addsf3>
     e3e:	4b 01       	movw	r8, r22
     e40:	5c 01       	movw	r10, r24
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     e42:	21 96       	adiw	r28, 0x01	; 1
     e44:	ce 15       	cp	r28, r14
     e46:	df 05       	cpc	r29, r15
     e48:	5c f3       	brlt	.-42     	; 0xe20 <updateLEDs+0x19a>
     e4a:	60 93 13 21 	sts	0x2113, r22
     e4e:	70 93 14 21 	sts	0x2114, r23
     e52:	80 93 15 21 	sts	0x2115, r24
     e56:	90 93 16 21 	sts	0x2116, r25
		if (high_power < high_power_old*damp){
			high_power = high_power_old*damp;
		}*/

		// AGC - automatic gain control
		if ( low_power > maxim || mid_power > maxim || high_power > maxim)  {
     e5a:	10 91 1b 21 	lds	r17, 0x211B
     e5e:	d0 91 1c 21 	lds	r29, 0x211C
     e62:	c0 91 1d 21 	lds	r28, 0x211D
     e66:	00 91 1e 21 	lds	r16, 0x211E
     e6a:	80 90 07 20 	lds	r8, 0x2007
     e6e:	90 90 08 20 	lds	r9, 0x2008
     e72:	a0 90 09 20 	lds	r10, 0x2009
     e76:	b0 90 0a 20 	lds	r11, 0x200A
     e7a:	a5 01       	movw	r20, r10
     e7c:	94 01       	movw	r18, r8
     e7e:	61 2f       	mov	r22, r17
     e80:	7d 2f       	mov	r23, r29
     e82:	8c 2f       	mov	r24, r28
     e84:	90 2f       	mov	r25, r16
     e86:	0e 94 42 26 	call	0x4c84	; 0x4c84 <__gesf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	ec f0       	brlt	.+58     	; 0xec8 <updateLEDs+0x242>
     e8e:	20 91 17 21 	lds	r18, 0x2117
     e92:	30 91 18 21 	lds	r19, 0x2118
     e96:	40 91 19 21 	lds	r20, 0x2119
     e9a:	50 91 1a 21 	lds	r21, 0x211A
     e9e:	c5 01       	movw	r24, r10
     ea0:	b4 01       	movw	r22, r8
     ea2:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <__cmpsf2>
     ea6:	88 23       	and	r24, r24
     ea8:	7c f0       	brlt	.+30     	; 0xec8 <updateLEDs+0x242>
     eaa:	20 91 13 21 	lds	r18, 0x2113
     eae:	30 91 14 21 	lds	r19, 0x2114
     eb2:	40 91 15 21 	lds	r20, 0x2115
     eb6:	50 91 16 21 	lds	r21, 0x2116
     eba:	c5 01       	movw	r24, r10
     ebc:	b4 01       	movw	r22, r8
     ebe:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <__cmpsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	0c f0       	brlt	.+2      	; 0xec8 <updateLEDs+0x242>
     ec6:	45 c0       	rjmp	.+138    	; 0xf52 <updateLEDs+0x2cc>
	    	vrem = max(low_power, mid_power);
     ec8:	a0 90 17 21 	lds	r10, 0x2117
     ecc:	b0 90 18 21 	lds	r11, 0x2118
     ed0:	e0 90 19 21 	lds	r14, 0x2119
     ed4:	f0 90 1a 21 	lds	r15, 0x211A
     ed8:	2a 2d       	mov	r18, r10
     eda:	3b 2d       	mov	r19, r11
     edc:	4e 2d       	mov	r20, r14
     ede:	5f 2d       	mov	r21, r15
     ee0:	61 2f       	mov	r22, r17
     ee2:	7d 2f       	mov	r23, r29
     ee4:	8c 2f       	mov	r24, r28
     ee6:	90 2f       	mov	r25, r16
     ee8:	0e 94 42 26 	call	0x4c84	; 0x4c84 <__gesf2>
     eec:	18 16       	cp	r1, r24
     eee:	24 f0       	brlt	.+8      	; 0xef8 <updateLEDs+0x272>
     ef0:	1a 2d       	mov	r17, r10
     ef2:	db 2d       	mov	r29, r11
     ef4:	ce 2d       	mov	r28, r14
     ef6:	0f 2d       	mov	r16, r15
	    	vrem = max(vrem, high_power);
     ef8:	a0 90 13 21 	lds	r10, 0x2113
     efc:	b0 90 14 21 	lds	r11, 0x2114
     f00:	e0 90 15 21 	lds	r14, 0x2115
     f04:	f0 90 16 21 	lds	r15, 0x2116
     f08:	2a 2d       	mov	r18, r10
     f0a:	3b 2d       	mov	r19, r11
     f0c:	4e 2d       	mov	r20, r14
     f0e:	5f 2d       	mov	r21, r15
     f10:	61 2f       	mov	r22, r17
     f12:	7d 2f       	mov	r23, r29
     f14:	8c 2f       	mov	r24, r28
     f16:	90 2f       	mov	r25, r16
     f18:	0e 94 42 26 	call	0x4c84	; 0x4c84 <__gesf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	24 f0       	brlt	.+8      	; 0xf28 <updateLEDs+0x2a2>
     f20:	1a 2d       	mov	r17, r10
     f22:	db 2d       	mov	r29, r11
     f24:	ce 2d       	mov	r28, r14
     f26:	0f 2d       	mov	r16, r15
     f28:	81 2f       	mov	r24, r17
     f2a:	9d 2f       	mov	r25, r29
     f2c:	ac 2f       	mov	r26, r28
     f2e:	b0 2f       	mov	r27, r16
     f30:	80 93 72 29 	sts	0x2972, r24
     f34:	90 93 73 29 	sts	0x2973, r25
     f38:	a0 93 74 29 	sts	0x2974, r26
     f3c:	b0 93 75 29 	sts	0x2975, r27
	    	maxim = vrem;
     f40:	80 93 07 20 	sts	0x2007, r24
     f44:	90 93 08 20 	sts	0x2008, r25
     f48:	a0 93 09 20 	sts	0x2009, r26
     f4c:	b0 93 0a 20 	sts	0x200A, r27
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <updateLEDs+0x2f4>
	  	} 
	  	else {
	    	maxim *= agc;
     f52:	20 91 03 20 	lds	r18, 0x2003
     f56:	30 91 04 20 	lds	r19, 0x2004
     f5a:	40 91 05 20 	lds	r20, 0x2005
     f5e:	50 91 06 20 	lds	r21, 0x2006
     f62:	c5 01       	movw	r24, r10
     f64:	b4 01       	movw	r22, r8
     f66:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__mulsf3>
     f6a:	60 93 07 20 	sts	0x2007, r22
     f6e:	70 93 08 20 	sts	0x2008, r23
     f72:	80 93 09 20 	sts	0x2009, r24
     f76:	90 93 0a 20 	sts	0x200A, r25
	  	}
		// map values to agc adjusted
		float slope = 255/(maxim-min);
     f7a:	20 91 1f 21 	lds	r18, 0x211F
     f7e:	30 91 20 21 	lds	r19, 0x2120
     f82:	40 91 21 21 	lds	r20, 0x2121
     f86:	50 91 22 21 	lds	r21, 0x2122
     f8a:	60 91 07 20 	lds	r22, 0x2007
     f8e:	70 91 08 20 	lds	r23, 0x2008
     f92:	80 91 09 20 	lds	r24, 0x2009
     f96:	90 91 0a 20 	lds	r25, 0x200A
     f9a:	0e 94 93 24 	call	0x4926	; 0x4926 <__subsf3>
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	8f e7       	ldi	r24, 0x7F	; 127
     fa8:	93 e4       	ldi	r25, 0x43	; 67
     faa:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <__divsf3>
     fae:	4b 01       	movw	r8, r22
     fb0:	5c 01       	movw	r10, r24
		
	  	ledLevelLow = (uint8_t)(low_power*slope);
     fb2:	20 91 1b 21 	lds	r18, 0x211B
     fb6:	30 91 1c 21 	lds	r19, 0x211C
     fba:	40 91 1d 21 	lds	r20, 0x211D
     fbe:	50 91 1e 21 	lds	r21, 0x211E
     fc2:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__mulsf3>
     fc6:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__fixunssfsi>
     fca:	d6 2f       	mov	r29, r22
     fcc:	60 93 9d 25 	sts	0x259D, r22
	  	ledLevelMid = (uint8_t)(mid_power*slope);
     fd0:	20 91 17 21 	lds	r18, 0x2117
     fd4:	30 91 18 21 	lds	r19, 0x2118
     fd8:	40 91 19 21 	lds	r20, 0x2119
     fdc:	50 91 1a 21 	lds	r21, 0x211A
     fe0:	c5 01       	movw	r24, r10
     fe2:	b4 01       	movw	r22, r8
     fe4:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__mulsf3>
     fe8:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__fixunssfsi>
     fec:	c6 2f       	mov	r28, r22
     fee:	60 93 70 28 	sts	0x2870, r22
	  	ledLevelHigh = (uint8_t)(high_power*slope);
     ff2:	20 91 13 21 	lds	r18, 0x2113
     ff6:	30 91 14 21 	lds	r19, 0x2114
     ffa:	40 91 15 21 	lds	r20, 0x2115
     ffe:	50 91 16 21 	lds	r21, 0x2116
    1002:	c5 01       	movw	r24, r10
    1004:	b4 01       	movw	r22, r8
    1006:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <__mulsf3>
    100a:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__fixunssfsi>
    100e:	60 93 71 29 	sts	0x2971, r22
		
     lowf[point_low] = ledLevelLow;
    1012:	80 91 27 21 	lds	r24, 0x2127
    1016:	90 91 28 21 	lds	r25, 0x2128
    101a:	fc 01       	movw	r30, r24
    101c:	ea 54       	subi	r30, 0x4A	; 74
    101e:	ff 4d       	sbci	r31, 0xDF	; 223
    1020:	d0 83       	st	Z, r29
	 midf[point_mid] = ledLevelMid;
    1022:	e0 91 25 21 	lds	r30, 0x2125
    1026:	f0 91 26 21 	lds	r31, 0x2126
    102a:	df 01       	movw	r26, r30
    102c:	a0 5e       	subi	r26, 0xE0	; 224
    102e:	bf 4d       	sbci	r27, 0xDF	; 223
    1030:	cc 93       	st	X, r28
	 highf[point_high] = ledLevelHigh;
    1032:	20 91 23 21 	lds	r18, 0x2123
    1036:	30 91 24 21 	lds	r19, 0x2124
    103a:	d9 01       	movw	r26, r18
    103c:	af 5e       	subi	r26, 0xEF	; 239
    103e:	bf 4d       	sbci	r27, 0xDF	; 223
    1040:	6c 93       	st	X, r22
	 point_low++;
    1042:	01 96       	adiw	r24, 0x01	; 1
	 point_mid++;
	 point_high++;
	 point_low %= order_low;
    1044:	6e e1       	ldi	r22, 0x1E	; 30
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    104c:	80 93 27 21 	sts	0x2127, r24
    1050:	90 93 28 21 	sts	0x2128, r25
		
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
    1054:	cf 01       	movw	r24, r30
    1056:	01 96       	adiw	r24, 0x01	; 1
	 point_high++;
	 point_low %= order_low;
	 point_mid %= order_mid;
    1058:	66 e9       	ldi	r22, 0x96	; 150
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    1060:	80 93 25 21 	sts	0x2125, r24
    1064:	90 93 26 21 	sts	0x2126, r25
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
	 point_high++;
    1068:	c9 01       	movw	r24, r18
    106a:	01 96       	adiw	r24, 0x01	; 1
	 point_low %= order_low;
	 point_mid %= order_mid;
	 point_high %= order_high;
    106c:	6f e0       	ldi	r22, 0x0F	; 15
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    1074:	80 93 23 21 	sts	0x2123, r24
    1078:	90 93 24 21 	sts	0x2124, r25
	 
	ledLevelHigh = mean(highf, order_high);
    107c:	6f e0       	ldi	r22, 0x0F	; 15
    107e:	81 e1       	ldi	r24, 0x11	; 17
    1080:	90 e2       	ldi	r25, 0x20	; 32
    1082:	eb dd       	rcall	.-1066   	; 0xc5a <mean>
    1084:	d8 2f       	mov	r29, r24
    1086:	80 93 71 29 	sts	0x2971, r24
	ledLevelMid = mean(midf, order_mid);
    108a:	66 e9       	ldi	r22, 0x96	; 150
    108c:	80 e2       	ldi	r24, 0x20	; 32
    108e:	90 e2       	ldi	r25, 0x20	; 32
    1090:	e4 dd       	rcall	.-1080   	; 0xc5a <mean>
    1092:	c8 2f       	mov	r28, r24
    1094:	80 93 70 28 	sts	0x2870, r24
	ledLevelLow = mean(lowf, order_low);
    1098:	6e e1       	ldi	r22, 0x1E	; 30
    109a:	86 eb       	ldi	r24, 0xB6	; 182
    109c:	90 e2       	ldi	r25, 0x20	; 32
    109e:	dd dd       	rcall	.-1094   	; 0xc5a <mean>
		 
	ledLevelLow = 100*ledLevelLow/LOW_DIVIDER;
    10a0:	60 91 02 20 	lds	r22, 0x2002
    10a4:	24 e6       	ldi	r18, 0x64	; 100
    10a6:	28 9f       	mul	r18, r24
    10a8:	c0 01       	movw	r24, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    10b2:	16 2f       	mov	r17, r22
    10b4:	60 93 9d 25 	sts	0x259D, r22
	ledLevelMid = 100*ledLevelMid/MID_DIVIDER;
    10b8:	a0 91 01 20 	lds	r26, 0x2001
    10bc:	2c 9f       	mul	r18, r28
    10be:	c0 01       	movw	r24, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	6a 2f       	mov	r22, r26
    10c4:	70 e0       	ldi	r23, 0x00	; 0
    10c6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    10ca:	60 93 70 28 	sts	0x2870, r22
	ledLevelHigh = 100*ledLevelHigh/HIGH_DIVIDER;
    10ce:	30 91 00 20 	lds	r19, 0x2000
    10d2:	2d 9f       	mul	r18, r29
    10d4:	c0 01       	movw	r24, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	63 2f       	mov	r22, r19
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    10e0:	86 2f       	mov	r24, r22
    10e2:	60 93 71 29 	sts	0x2971, r22
	}
	if (ledLevelLow > 255){
		ledLevelLow = 255;
	}
	
	if (colors[0] <= colors[1] && colors[0] <= colors[2]) {
    10e6:	ef ed       	ldi	r30, 0xDF	; 223
    10e8:	f0 e2       	ldi	r31, 0x20	; 32
    10ea:	20 81       	ld	r18, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	92 17       	cp	r25, r18
    10f0:	48 f0       	brcs	.+18     	; 0x1104 <updateLEDs+0x47e>
    10f2:	20 81       	ld	r18, Z
    10f4:	92 81       	ldd	r25, Z+2	; 0x02
    10f6:	92 17       	cp	r25, r18
    10f8:	28 f0       	brcs	.+10     	; 0x1104 <updateLEDs+0x47e>
		twinkle(0, ledLevelHigh, ledLevelLow);
    10fa:	41 2f       	mov	r20, r17
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
    1102:	23 c0       	rjmp	.+70     	; 0x114a <updateLEDs+0x4c4>
	}
	else if (colors[1] <= colors[0] && colors[1] <= colors[2]) {
    1104:	ef ed       	ldi	r30, 0xDF	; 223
    1106:	f0 e2       	ldi	r31, 0x20	; 32
    1108:	21 81       	ldd	r18, Z+1	; 0x01
    110a:	90 81       	ld	r25, Z
    110c:	92 17       	cp	r25, r18
    110e:	48 f0       	brcs	.+18     	; 0x1122 <updateLEDs+0x49c>
    1110:	21 81       	ldd	r18, Z+1	; 0x01
    1112:	92 81       	ldd	r25, Z+2	; 0x02
    1114:	92 17       	cp	r25, r18
    1116:	28 f0       	brcs	.+10     	; 0x1122 <updateLEDs+0x49c>
		twinkle(ledLevelHigh, 0, ledLevelLow);
    1118:	41 2f       	mov	r20, r17
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
    1120:	14 c0       	rjmp	.+40     	; 0x114a <updateLEDs+0x4c4>
	}
	else if (colors[2] <= colors[0] && colors[2] <= colors[1]) {
    1122:	ef ed       	ldi	r30, 0xDF	; 223
    1124:	f0 e2       	ldi	r31, 0x20	; 32
    1126:	22 81       	ldd	r18, Z+2	; 0x02
    1128:	90 81       	ld	r25, Z
    112a:	92 17       	cp	r25, r18
    112c:	48 f0       	brcs	.+18     	; 0x1140 <updateLEDs+0x4ba>
    112e:	22 81       	ldd	r18, Z+2	; 0x02
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	92 17       	cp	r25, r18
    1134:	28 f0       	brcs	.+10     	; 0x1140 <updateLEDs+0x4ba>
		twinkle(ledLevelHigh, ledLevelLow, 0);
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	61 2f       	mov	r22, r17
    113a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
    113e:	05 c0       	rjmp	.+10     	; 0x114a <updateLEDs+0x4c4>
	}
	else {
		twinkle(0, ledLevelHigh, ledLevelLow);
    1140:	41 2f       	mov	r20, r17
    1142:	68 2f       	mov	r22, r24
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
	}
	
	// update LEDs

}
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	bf 90       	pop	r11
    1158:	af 90       	pop	r10
    115a:	9f 90       	pop	r9
    115c:	8f 90       	pop	r8
    115e:	08 95       	ret

00001160 <run>:

void run(){
    1160:	2f 92       	push	r2
    1162:	3f 92       	push	r3
    1164:	4f 92       	push	r4
    1166:	5f 92       	push	r5
    1168:	6f 92       	push	r6
    116a:	7f 92       	push	r7
    116c:	8f 92       	push	r8
    116e:	9f 92       	push	r9
    1170:	af 92       	push	r10
    1172:	bf 92       	push	r11
    1174:	cf 92       	push	r12
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
}

static inline void fht_window(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1184:	2f 92       	push	r2
    1186:	3f 92       	push	r3
    1188:	4f 92       	push	r4
    118a:	5f 92       	push	r5
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this applies a window to the data for better frequency resolution
  asm volatile (
    1196:	c6 e7       	ldi	r28, 0x76	; 118
    1198:	d9 e2       	ldi	r29, 0x29	; 41
    119a:	ee e2       	ldi	r30, 0x2E	; 46
    119c:	f3 e0       	ldi	r31, 0x03	; 3
    119e:	ff 24       	eor	r15, r15
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	65 91       	lpm	r22, Z+
    11a4:	75 91       	lpm	r23, Z+
    11a6:	08 81       	ld	r16, Y
    11a8:	19 81       	ldd	r17, Y+1	; 0x01
    11aa:	97 03       	fmuls	r17, r23
    11ac:	20 01       	movw	r4, r0
    11ae:	0e 03       	fmul	r16, r22
    11b0:	4f 1c       	adc	r4, r15
    11b2:	10 01       	movw	r2, r0
    11b4:	9e 03       	fmulsu	r17, r22
    11b6:	5f 08       	sbc	r5, r15
    11b8:	30 0c       	add	r3, r0
    11ba:	41 1c       	adc	r4, r1
    11bc:	5f 1c       	adc	r5, r15
    11be:	f8 03       	fmulsu	r23, r16
    11c0:	5f 08       	sbc	r5, r15
    11c2:	30 0c       	add	r3, r0
    11c4:	41 1c       	adc	r4, r1
    11c6:	5f 1c       	adc	r5, r15
    11c8:	49 92       	st	Y+, r4
    11ca:	59 92       	st	Y+, r5
    11cc:	4a 95       	dec	r20
    11ce:	49 f7       	brne	.-46     	; 0x11a2 <run+0x42>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r15", "r16", "r17", "r20", "r30", "r31",
   "r22", "r23", "r28", "r29"
  );

  // get the clobbers off the stack
  asm volatile (
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	5f 90       	pop	r5
    11dc:	4f 90       	pop	r4
    11de:	3f 90       	pop	r3
    11e0:	2f 90       	pop	r2
    11e2:	11 24       	eor	r1, r1
}

static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	6f 92       	push	r6
    11ea:	7f 92       	push	r7
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
  "push r29 \n"
  );


  // move values to bit reversed locations
  asm volatile (
    11f0:	ee e2       	ldi	r30, 0x2E	; 46
    11f2:	f7 e0       	ldi	r31, 0x07	; 7
    11f4:	48 e3       	ldi	r20, 0x38	; 56
    11f6:	a5 91       	lpm	r26, Z+
    11f8:	bb 27       	eor	r27, r27
    11fa:	aa 0f       	add	r26, r26
    11fc:	bb 1f       	adc	r27, r27
    11fe:	aa 58       	subi	r26, 0x8A	; 138
    1200:	b6 4d       	sbci	r27, 0xD6	; 214
    1202:	2d 90       	ld	r2, X+
    1204:	3c 90       	ld	r3, X
    1206:	c5 91       	lpm	r28, Z+
    1208:	dd 27       	eor	r29, r29
    120a:	cc 0f       	add	r28, r28
    120c:	dd 1f       	adc	r29, r29
    120e:	ca 58       	subi	r28, 0x8A	; 138
    1210:	d6 4d       	sbci	r29, 0xD6	; 214
    1212:	68 80       	ld	r6, Y
    1214:	79 80       	ldd	r7, Y+1	; 0x01
    1216:	7c 92       	st	X, r7
    1218:	6e 92       	st	-X, r6
    121a:	28 82       	st	Y, r2
    121c:	39 82       	std	Y+1, r3	; 0x01
    121e:	4a 95       	dec	r20
    1220:	51 f7       	brne	.-44     	; 0x11f6 <run+0x96>
  : "r2", "r3", "r6", "r7", "r20",
    "r26", "r27", "r28", "r29", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	7f 90       	pop	r7
    1228:	6f 90       	pop	r6
    122a:	3f 90       	pop	r3
    122c:	2f 90       	pop	r2


static inline void fht_run(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    122e:	2f 92       	push	r2
    1230:	3f 92       	push	r3
    1232:	4f 92       	push	r4
    1234:	5f 92       	push	r5
    1236:	6f 92       	push	r6
    1238:	7f 92       	push	r7
    123a:	8f 92       	push	r8
    123c:	9f 92       	push	r9
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
  "push r29 \n"
  );
 
  // do first 3 butterflies - only 1 multiply, minimizes data fetches
  // initialize
  asm volatile (
    1252:	ff 24       	eor	r15, r15
    1254:	00 e1       	ldi	r16, 0x10	; 16
    1256:	e0 2e       	mov	r14, r16
    1258:	c6 e7       	ldi	r28, 0x76	; 118
    125a:	d9 e2       	ldi	r29, 0x29	; 41
    125c:	68 80       	ld	r6, Y
    125e:	79 80       	ldd	r7, Y+1	; 0x01
    1260:	4a 80       	ldd	r4, Y+2	; 0x02
    1262:	5b 80       	ldd	r5, Y+3	; 0x03
    1264:	75 94       	asr	r7
    1266:	67 94       	ror	r6
    1268:	43 01       	movw	r8, r6
    126a:	55 94       	asr	r5
    126c:	47 94       	ror	r4
    126e:	64 0c       	add	r6, r4
    1270:	75 1c       	adc	r7, r5
    1272:	84 18       	sub	r8, r4
    1274:	95 08       	sbc	r9, r5
    1276:	ac 80       	ldd	r10, Y+4	; 0x04
    1278:	bd 80       	ldd	r11, Y+5	; 0x05
    127a:	4e 80       	ldd	r4, Y+6	; 0x06
    127c:	5f 80       	ldd	r5, Y+7	; 0x07
    127e:	b5 94       	asr	r11
    1280:	a7 94       	ror	r10
    1282:	65 01       	movw	r12, r10
    1284:	55 94       	asr	r5
    1286:	47 94       	ror	r4
    1288:	a4 0c       	add	r10, r4
    128a:	b5 1c       	adc	r11, r5
    128c:	c4 18       	sub	r12, r4
    128e:	d5 08       	sbc	r13, r5
    1290:	68 85       	ldd	r22, Y+8	; 0x08
    1292:	79 85       	ldd	r23, Y+9	; 0x09
    1294:	4a 84       	ldd	r4, Y+10	; 0x0a
    1296:	5b 84       	ldd	r5, Y+11	; 0x0b
    1298:	75 95       	asr	r23
    129a:	67 95       	ror	r22
    129c:	8b 01       	movw	r16, r22
    129e:	55 94       	asr	r5
    12a0:	47 94       	ror	r4
    12a2:	64 0d       	add	r22, r4
    12a4:	75 1d       	adc	r23, r5
    12a6:	04 19       	sub	r16, r4
    12a8:	15 09       	sbc	r17, r5
    12aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ae:	4e 84       	ldd	r4, Y+14	; 0x0e
    12b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b2:	95 95       	asr	r25
    12b4:	87 95       	ror	r24
    12b6:	9c 01       	movw	r18, r24
    12b8:	55 94       	asr	r5
    12ba:	47 94       	ror	r4
    12bc:	84 0d       	add	r24, r4
    12be:	95 1d       	adc	r25, r5
    12c0:	24 19       	sub	r18, r4
    12c2:	35 09       	sbc	r19, r5
    12c4:	75 94       	asr	r7
    12c6:	67 94       	ror	r6
    12c8:	23 01       	movw	r4, r6
    12ca:	b5 94       	asr	r11
    12cc:	a7 94       	ror	r10
    12ce:	6a 0c       	add	r6, r10
    12d0:	7b 1c       	adc	r7, r11
    12d2:	4a 18       	sub	r4, r10
    12d4:	5b 08       	sbc	r5, r11
    12d6:	95 94       	asr	r9
    12d8:	87 94       	ror	r8
    12da:	54 01       	movw	r10, r8
    12dc:	d5 94       	asr	r13
    12de:	c7 94       	ror	r12
    12e0:	8c 0c       	add	r8, r12
    12e2:	9d 1c       	adc	r9, r13
    12e4:	ac 18       	sub	r10, r12
    12e6:	bd 08       	sbc	r11, r13
    12e8:	75 95       	asr	r23
    12ea:	67 95       	ror	r22
    12ec:	6b 01       	movw	r12, r22
    12ee:	95 95       	asr	r25
    12f0:	87 95       	ror	r24
    12f2:	68 0f       	add	r22, r24
    12f4:	79 1f       	adc	r23, r25
    12f6:	c8 1a       	sub	r12, r24
    12f8:	d9 0a       	sbc	r13, r25
    12fa:	75 94       	asr	r7
    12fc:	67 94       	ror	r6
    12fe:	13 01       	movw	r2, r6
    1300:	75 95       	asr	r23
    1302:	67 95       	ror	r22
    1304:	66 0e       	add	r6, r22
    1306:	77 1e       	adc	r7, r23
    1308:	26 1a       	sub	r2, r22
    130a:	37 0a       	sbc	r3, r23
    130c:	42 e8       	ldi	r20, 0x82	; 130
    130e:	5a e5       	ldi	r21, 0x5A	; 90
    1310:	15 03       	mulsu	r17, r21
    1312:	c0 01       	movw	r24, r0
    1314:	04 9f       	mul	r16, r20
    1316:	b0 01       	movw	r22, r0
    1318:	14 03       	mulsu	r17, r20
    131a:	9f 09       	sbc	r25, r15
    131c:	70 0d       	add	r23, r0
    131e:	81 1d       	adc	r24, r1
    1320:	9f 1d       	adc	r25, r15
    1322:	50 9f       	mul	r21, r16
    1324:	70 0d       	add	r23, r0
    1326:	81 1d       	adc	r24, r1
    1328:	9f 1d       	adc	r25, r15
    132a:	95 94       	asr	r9
    132c:	87 94       	ror	r8
    132e:	84 01       	movw	r16, r8
    1330:	88 0e       	add	r8, r24
    1332:	99 1e       	adc	r9, r25
    1334:	08 1b       	sub	r16, r24
    1336:	19 0b       	sbc	r17, r25
    1338:	55 94       	asr	r5
    133a:	47 94       	ror	r4
    133c:	d2 01       	movw	r26, r4
    133e:	d5 94       	asr	r13
    1340:	c7 94       	ror	r12
    1342:	4c 0c       	add	r4, r12
    1344:	5d 1c       	adc	r5, r13
    1346:	ac 19       	sub	r26, r12
    1348:	bd 09       	sbc	r27, r13
    134a:	35 03       	mulsu	r19, r21
    134c:	c0 01       	movw	r24, r0
    134e:	24 9f       	mul	r18, r20
    1350:	b0 01       	movw	r22, r0
    1352:	34 03       	mulsu	r19, r20
    1354:	9f 09       	sbc	r25, r15
    1356:	70 0d       	add	r23, r0
    1358:	81 1d       	adc	r24, r1
    135a:	9f 1d       	adc	r25, r15
    135c:	52 9f       	mul	r21, r18
    135e:	70 0d       	add	r23, r0
    1360:	81 1d       	adc	r24, r1
    1362:	9f 1d       	adc	r25, r15
    1364:	b5 94       	asr	r11
    1366:	a7 94       	ror	r10
    1368:	65 01       	movw	r12, r10
    136a:	a8 0e       	add	r10, r24
    136c:	b9 1e       	adc	r11, r25
    136e:	c8 1a       	sub	r12, r24
    1370:	d9 0a       	sbc	r13, r25
    1372:	69 92       	st	Y+, r6
    1374:	79 92       	st	Y+, r7
    1376:	89 92       	st	Y+, r8
    1378:	99 92       	st	Y+, r9
    137a:	49 92       	st	Y+, r4
    137c:	59 92       	st	Y+, r5
    137e:	a9 92       	st	Y+, r10
    1380:	b9 92       	st	Y+, r11
    1382:	29 92       	st	Y+, r2
    1384:	39 92       	st	Y+, r3
    1386:	09 93       	st	Y+, r16
    1388:	19 93       	st	Y+, r17
    138a:	a9 93       	st	Y+, r26
    138c:	b9 93       	st	Y+, r27
    138e:	c9 92       	st	Y+, r12
    1390:	d9 92       	st	Y+, r13
    1392:	ea 94       	dec	r14
    1394:	09 f0       	breq	.+2      	; 0x1398 <run+0x238>
    1396:	62 cf       	rjmp	.-316    	; 0x125c <run+0xfc>
  "rjmp 1b \n"
  );

  // remainder of the butterflies (fourth and higher)
  // initialize
  asm volatile (
    1398:	00 e2       	ldi	r16, 0x20	; 32
    139a:	c0 2e       	mov	r12, r16
    139c:	dd 24       	eor	r13, r13
    139e:	0a e2       	ldi	r16, 0x2A	; 42
    13a0:	90 2e       	mov	r9, r16
    13a2:	ee e9       	ldi	r30, 0x9E	; 158
    13a4:	f7 e0       	ldi	r31, 0x07	; 7
    13a6:	00 e1       	ldi	r16, 0x10	; 16
    13a8:	a0 2e       	mov	r10, r16
    13aa:	bb 24       	eor	r11, r11
    13ac:	04 e0       	ldi	r16, 0x04	; 4
    13ae:	e0 2e       	mov	r14, r16
    13b0:	a6 e7       	ldi	r26, 0x76	; 118
    13b2:	b9 e2       	ldi	r27, 0x29	; 41
    13b4:	ed 01       	movw	r28, r26
    13b6:	ca 0d       	add	r28, r10
    13b8:	db 1d       	adc	r29, r11
    13ba:	8e 2c       	mov	r8, r14
    13bc:	2d 90       	ld	r2, X+
    13be:	3c 90       	ld	r3, X
    13c0:	48 80       	ld	r4, Y
    13c2:	59 80       	ldd	r5, Y+1	; 0x01
    13c4:	35 94       	asr	r3
    13c6:	27 94       	ror	r2
    13c8:	31 01       	movw	r6, r2
    13ca:	55 94       	asr	r5
    13cc:	47 94       	ror	r4
    13ce:	64 0c       	add	r6, r4
    13d0:	75 1c       	adc	r7, r5
    13d2:	24 18       	sub	r2, r4
    13d4:	35 08       	sbc	r3, r5
    13d6:	29 92       	st	Y+, r2
    13d8:	39 92       	st	Y+, r3
    13da:	7c 92       	st	X, r7
    13dc:	6e 92       	st	-X, r6
    13de:	ac 0d       	add	r26, r12
    13e0:	bd 1d       	adc	r27, r13
    13e2:	11 97       	sbiw	r26, 0x01	; 1
    13e4:	ea 94       	dec	r14
    13e6:	08 81       	ld	r16, Y
    13e8:	19 81       	ldd	r17, Y+1	; 0x01
    13ea:	3c 91       	ld	r19, X
    13ec:	2e 91       	ld	r18, -X
    13ee:	45 91       	lpm	r20, Z+
    13f0:	55 91       	lpm	r21, Z+
    13f2:	65 91       	lpm	r22, Z+
    13f4:	75 91       	lpm	r23, Z+
    13f6:	15 02       	muls	r17, r21
    13f8:	20 01       	movw	r4, r0
    13fa:	04 9f       	mul	r16, r20
    13fc:	10 01       	movw	r2, r0
    13fe:	14 03       	mulsu	r17, r20
    1400:	5f 08       	sbc	r5, r15
    1402:	30 0c       	add	r3, r0
    1404:	41 1c       	adc	r4, r1
    1406:	5f 1c       	adc	r5, r15
    1408:	50 9f       	mul	r21, r16
    140a:	30 0c       	add	r3, r0
    140c:	41 1c       	adc	r4, r1
    140e:	5f 1c       	adc	r5, r15
    1410:	37 02       	muls	r19, r23
    1412:	30 01       	movw	r6, r0
    1414:	26 9f       	mul	r18, r22
    1416:	20 0c       	add	r2, r0
    1418:	31 1c       	adc	r3, r1
    141a:	46 1c       	adc	r4, r6
    141c:	57 1c       	adc	r5, r7
    141e:	36 03       	mulsu	r19, r22
    1420:	5f 08       	sbc	r5, r15
    1422:	30 0c       	add	r3, r0
    1424:	41 1c       	adc	r4, r1
    1426:	5f 1c       	adc	r5, r15
    1428:	72 9f       	mul	r23, r18
    142a:	30 0c       	add	r3, r0
    142c:	41 1c       	adc	r4, r1
    142e:	5f 1c       	adc	r5, r15
    1430:	0e 01       	movw	r0, r28
    1432:	ca 19       	sub	r28, r10
    1434:	db 09       	sbc	r29, r11
    1436:	28 80       	ld	r2, Y
    1438:	39 80       	ldd	r3, Y+1	; 0x01
    143a:	35 94       	asr	r3
    143c:	27 94       	ror	r2
    143e:	31 01       	movw	r6, r2
    1440:	64 0c       	add	r6, r4
    1442:	75 1c       	adc	r7, r5
    1444:	24 18       	sub	r2, r4
    1446:	35 08       	sbc	r3, r5
    1448:	68 82       	st	Y, r6
    144a:	79 82       	std	Y+1, r7	; 0x01
    144c:	e0 01       	movw	r28, r0
    144e:	29 92       	st	Y+, r2
    1450:	39 92       	st	Y+, r3
    1452:	17 02       	muls	r17, r23
    1454:	20 01       	movw	r4, r0
    1456:	06 9f       	mul	r16, r22
    1458:	10 01       	movw	r2, r0
    145a:	16 03       	mulsu	r17, r22
    145c:	5f 08       	sbc	r5, r15
    145e:	30 0c       	add	r3, r0
    1460:	41 1c       	adc	r4, r1
    1462:	5f 1c       	adc	r5, r15
    1464:	70 9f       	mul	r23, r16
    1466:	30 0c       	add	r3, r0
    1468:	41 1c       	adc	r4, r1
    146a:	5f 1c       	adc	r5, r15
    146c:	35 02       	muls	r19, r21
    146e:	30 01       	movw	r6, r0
    1470:	24 9f       	mul	r18, r20
    1472:	20 18       	sub	r2, r0
    1474:	31 08       	sbc	r3, r1
    1476:	46 08       	sbc	r4, r6
    1478:	57 08       	sbc	r5, r7
    147a:	34 03       	mulsu	r19, r20
    147c:	5f 1c       	adc	r5, r15
    147e:	30 18       	sub	r3, r0
    1480:	41 08       	sbc	r4, r1
    1482:	5f 08       	sbc	r5, r15
    1484:	52 9f       	mul	r21, r18
    1486:	30 18       	sub	r3, r0
    1488:	41 08       	sbc	r4, r1
    148a:	5f 08       	sbc	r5, r15
    148c:	0d 01       	movw	r0, r26
    148e:	aa 19       	sub	r26, r10
    1490:	bb 09       	sbc	r27, r11
    1492:	2d 90       	ld	r2, X+
    1494:	3c 90       	ld	r3, X
    1496:	35 94       	asr	r3
    1498:	27 94       	ror	r2
    149a:	31 01       	movw	r6, r2
    149c:	64 0c       	add	r6, r4
    149e:	75 1c       	adc	r7, r5
    14a0:	24 18       	sub	r2, r4
    14a2:	35 08       	sbc	r3, r5
    14a4:	7c 92       	st	X, r7
    14a6:	6e 92       	st	-X, r6
    14a8:	d0 01       	movw	r26, r0
    14aa:	2d 92       	st	X+, r2
    14ac:	3c 92       	st	X, r3
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	ea 94       	dec	r14
    14b2:	09 f0       	breq	.+2      	; 0x14b6 <run+0x356>
    14b4:	98 cf       	rjmp	.-208    	; 0x13e6 <run+0x286>
    14b6:	de 01       	movw	r26, r28
    14b8:	aa 19       	sub	r26, r10
    14ba:	bb 09       	sbc	r27, r11
    14bc:	2d 90       	ld	r2, X+
    14be:	3c 90       	ld	r3, X
    14c0:	48 80       	ld	r4, Y
    14c2:	59 80       	ldd	r5, Y+1	; 0x01
    14c4:	35 94       	asr	r3
    14c6:	27 94       	ror	r2
    14c8:	31 01       	movw	r6, r2
    14ca:	55 94       	asr	r5
    14cc:	47 94       	ror	r4
    14ce:	64 0c       	add	r6, r4
    14d0:	75 1c       	adc	r7, r5
    14d2:	24 18       	sub	r2, r4
    14d4:	35 08       	sbc	r3, r5
    14d6:	28 82       	st	Y, r2
    14d8:	39 82       	std	Y+1, r3	; 0x01
    14da:	7c 92       	st	X, r7
    14dc:	6e 92       	st	-X, r6
    14de:	c5 01       	movw	r24, r10
    14e0:	96 95       	lsr	r25
    14e2:	87 95       	ror	r24
    14e4:	c8 0f       	add	r28, r24
    14e6:	d9 1f       	adc	r29, r25
    14e8:	c6 37       	cpi	r28, 0x76	; 118
    14ea:	d9 05       	cpc	r29, r9
    14ec:	40 f4       	brcc	.+16     	; 0x14fe <run+0x39e>
    14ee:	de 01       	movw	r26, r28
    14f0:	ca 0d       	add	r28, r10
    14f2:	db 1d       	adc	r29, r11
    14f4:	e8 2c       	mov	r14, r8
    14f6:	ea 19       	sub	r30, r10
    14f8:	fb 09       	sbc	r31, r11
    14fa:	34 96       	adiw	r30, 0x04	; 4
    14fc:	5f cf       	rjmp	.-322    	; 0x13bc <run+0x25c>
    14fe:	85 fc       	sbrc	r8, 5
    1500:	06 c0       	rjmp	.+12     	; 0x150e <run+0x3ae>
    1502:	ea 2c       	mov	r14, r10
    1504:	e6 94       	lsr	r14
    1506:	56 01       	movw	r10, r12
    1508:	cc 0c       	add	r12, r12
    150a:	dd 1c       	adc	r13, r13
    150c:	51 cf       	rjmp	.-350    	; 0x13b0 <run+0x250>
   "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "r24", "r25",
   "r26", "r27", "r28", "r29", "r30", "r31" // clobber list for whole thing
  );

  // get the clobbers off the stack
  asm volatile (
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	af 90       	pop	r10
    1522:	9f 90       	pop	r9
    1524:	8f 90       	pop	r8
    1526:	7f 90       	pop	r7
    1528:	6f 90       	pop	r6
    152a:	5f 90       	pop	r5
    152c:	4f 90       	pop	r4
    152e:	3f 90       	pop	r3
    1530:	2f 90       	pop	r2
    1532:	11 24       	eor	r1, r1
}

static inline void fht_mag_lin(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1534:	2f 92       	push	r2
    1536:	3f 92       	push	r3
    1538:	4f 92       	push	r4
    153a:	5f 92       	push	r5
    153c:	6f 92       	push	r6
    153e:	7f 92       	push	r7
    1540:	8f 92       	push	r8
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this returns an 16b unsigned value which is 16*((img^2 + real^2)^0.5)
  asm volatile (
    154c:	a6 e7       	ldi	r26, 0x76	; 118
    154e:	b9 e2       	ldi	r27, 0x29	; 41
    1550:	c3 eb       	ldi	r28, 0xB3	; 179
    1552:	d5 e2       	ldi	r29, 0x25	; 37
    1554:	e6 e7       	ldi	r30, 0x76	; 118
    1556:	fa e2       	ldi	r31, 0x2A	; 42
    1558:	4f 01       	movw	r8, r30
    155a:	ff 24       	eor	r15, r15
    155c:	40 e4       	ldi	r20, 0x40	; 64
    155e:	0d 91       	ld	r16, X+
    1560:	1d 91       	ld	r17, X+
    1562:	98 01       	movw	r18, r16
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <run+0x412>
    1566:	f4 01       	movw	r30, r8
    1568:	0d 91       	ld	r16, X+
    156a:	1d 91       	ld	r17, X+
    156c:	32 91       	ld	r19, -Z
    156e:	22 91       	ld	r18, -Z
    1570:	4f 01       	movw	r8, r30
    1572:	11 02       	muls	r17, r17
    1574:	20 01       	movw	r4, r0
    1576:	00 9f       	mul	r16, r16
    1578:	10 01       	movw	r2, r0
    157a:	98 03       	fmulsu	r17, r16
    157c:	5f 08       	sbc	r5, r15
    157e:	30 0c       	add	r3, r0
    1580:	41 1c       	adc	r4, r1
    1582:	5f 1c       	adc	r5, r15
    1584:	33 02       	muls	r19, r19
    1586:	30 01       	movw	r6, r0
    1588:	22 9f       	mul	r18, r18
    158a:	20 0c       	add	r2, r0
    158c:	31 1c       	adc	r3, r1
    158e:	46 1c       	adc	r4, r6
    1590:	57 1c       	adc	r5, r7
    1592:	ba 03       	fmulsu	r19, r18
    1594:	5f 08       	sbc	r5, r15
    1596:	30 0c       	add	r3, r0
    1598:	41 1c       	adc	r4, r1
    159a:	5f 1c       	adc	r5, r15
    159c:	11 27       	eor	r17, r17
    159e:	55 20       	and	r5, r5
    15a0:	61 f0       	breq	.+24     	; 0x15ba <run+0x45a>
    15a2:	18 e0       	ldi	r17, 0x08	; 8
    15a4:	f2 01       	movw	r30, r4
    15a6:	f0 34       	cpi	r31, 0x40	; 64
    15a8:	28 f5       	brcc	.+74     	; 0x15f4 <run+0x494>
    15aa:	33 0c       	add	r3, r3
    15ac:	ee 1f       	adc	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	33 0c       	add	r3, r3
    15b2:	ee 1f       	adc	r30, r30
    15b4:	ff 1f       	adc	r31, r31
    15b6:	1a 95       	dec	r17
    15b8:	1d c0       	rjmp	.+58     	; 0x15f4 <run+0x494>
    15ba:	44 20       	and	r4, r4
    15bc:	69 f0       	breq	.+26     	; 0x15d8 <run+0x478>
    15be:	14 e0       	ldi	r17, 0x04	; 4
    15c0:	f4 2d       	mov	r31, r4
    15c2:	e3 2d       	mov	r30, r3
    15c4:	f0 34       	cpi	r31, 0x40	; 64
    15c6:	b0 f4       	brcc	.+44     	; 0x15f4 <run+0x494>
    15c8:	22 0c       	add	r2, r2
    15ca:	ee 1f       	adc	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	22 0c       	add	r2, r2
    15d0:	ee 1f       	adc	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	1a 95       	dec	r17
    15d6:	f6 cf       	rjmp	.-20     	; 0x15c4 <run+0x464>
    15d8:	f1 01       	movw	r30, r2
    15da:	f0 34       	cpi	r31, 0x40	; 64
    15dc:	58 f4       	brcc	.+22     	; 0x15f4 <run+0x494>
    15de:	f0 31       	cpi	r31, 0x10	; 16
    15e0:	60 f4       	brcc	.+24     	; 0x15fa <run+0x49a>
    15e2:	f1 30       	cpi	r31, 0x01	; 1
    15e4:	78 f0       	brcs	.+30     	; 0x1604 <run+0x4a4>
    15e6:	f2 95       	swap	r31
    15e8:	e2 95       	swap	r30
    15ea:	ef 70       	andi	r30, 0x0F	; 15
    15ec:	ef 2b       	or	r30, r31
    15ee:	e6 95       	lsr	r30
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <run+0x4a4>
    15f4:	ef 2f       	mov	r30, r31
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <run+0x4a4>
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	ef 2f       	mov	r30, r31
    1600:	e0 68       	ori	r30, 0x80	; 128
    1602:	f1 e0       	ldi	r31, 0x01	; 1
    1604:	e2 5d       	subi	r30, 0xD2	; 210
    1606:	fb 4f       	sbci	r31, 0xFB	; 251
    1608:	04 91       	lpm	r16, Z
    160a:	22 27       	eor	r18, r18
    160c:	11 23       	and	r17, r17
    160e:	21 f0       	breq	.+8      	; 0x1618 <run+0x4b8>
    1610:	00 0f       	add	r16, r16
    1612:	22 1f       	adc	r18, r18
    1614:	1a 95       	dec	r17
    1616:	e1 f7       	brne	.-8      	; 0x1610 <run+0x4b0>
    1618:	09 93       	st	Y+, r16
    161a:	29 93       	st	Y+, r18
    161c:	4a 95       	dec	r20
    161e:	09 f0       	breq	.+2      	; 0x1622 <run+0x4c2>
    1620:	a2 cf       	rjmp	.-188    	; 0x1566 <run+0x406>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r16", "r17", "r26", "r27",
   "r28", "r29", "r30", "r31", "r15", "r18", "r19", "r20", "r8" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	8f 90       	pop	r8
    162e:	7f 90       	pop	r7
    1630:	6f 90       	pop	r6
    1632:	5f 90       	pop	r5
    1634:	4f 90       	pop	r4
    1636:	3f 90       	pop	r3
    1638:	2f 90       	pop	r2
    163a:	11 24       	eor	r1, r1
	fht_window(); // window the data for better frequency response
	fht_reorder(); // reorder the data before doing the fht
	fht_run(); // process the data in the fht
	fht_mag_lin(); // take the output of the fht
	
	updateLEDs();
    163c:	24 db       	rcall	.-2488   	; 0xc86 <updateLEDs>
	flag_fft = false;
    163e:	10 92 04 21 	sts	0x2104, r1
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	1f 91       	pop	r17
    1648:	0f 91       	pop	r16
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	bf 90       	pop	r11
    1654:	af 90       	pop	r10
    1656:	9f 90       	pop	r9
    1658:	8f 90       	pop	r8
    165a:	7f 90       	pop	r7
    165c:	6f 90       	pop	r6
    165e:	5f 90       	pop	r5
    1660:	4f 90       	pop	r4
    1662:	3f 90       	pop	r3
    1664:	2f 90       	pop	r2
    1666:	08 95       	ret

00001668 <write_byte_eeprom>:

/*
	return false when the procedure was failed, true when success
*/
bool write_byte_eeprom(uint8_t addr, uint8_t data)
{
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	16 2f       	mov	r17, r22
	uint8_t rev_data;
	
	nvm_eeprom_write_byte(addr, data);
    1670:	c8 2f       	mov	r28, r24
    1672:	d0 e0       	ldi	r29, 0x00	; 0
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	rev_data = nvm_eeprom_read_byte(addr);
    167a:	ce 01       	movw	r24, r28
    167c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	if (rev_data == data)
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	18 13       	cpse	r17, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else
	{
		return false;
	}	
    1686:	89 2f       	mov	r24, r25
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	1f 91       	pop	r17
    168e:	08 95       	ret

00001690 <init_i2c>:
{
	cmd_read_register(index, offset);
	wait_result();
	
	return REG_READ;
}
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	29 97       	sbiw	r28, 0x09	; 9
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	80 e8       	ldi	r24, 0x80	; 128
    16a0:	9a e1       	ldi	r25, 0x1A	; 26
    16a2:	a6 e0       	ldi	r26, 0x06	; 6
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	ab 83       	std	Y+3, r26	; 0x03
    16ac:	bc 83       	std	Y+4, r27	; 0x04
    16ae:	83 e2       	ldi	r24, 0x23	; 35
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	af 83       	std	Y+7, r26	; 0x07
    16bc:	b8 87       	std	Y+8, r27	; 0x08
    16be:	80 e5       	ldi	r24, 0x50	; 80
    16c0:	89 87       	std	Y+9, r24	; 0x09
    16c2:	60 e4       	ldi	r22, 0x40	; 64
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <sysclk_enable_module>
    16ca:	be 01       	movw	r22, r28
    16cc:	6f 5f       	subi	r22, 0xFF	; 255
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255
    16d0:	80 e8       	ldi	r24, 0x80	; 128
    16d2:	94 e0       	ldi	r25, 0x04	; 4
    16d4:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <twi_master_init>
    16d8:	e0 e8       	ldi	r30, 0x80	; 128
    16da:	f4 e0       	ldi	r31, 0x04	; 4
    16dc:	81 81       	ldd	r24, Z+1	; 0x01
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	81 83       	std	Z+1, r24	; 0x01
    16e2:	78 94       	sei
    16e4:	29 96       	adiw	r28, 0x09	; 9
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

000016f0 <init_mtch6301>:
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	59 e1       	ldi	r21, 0x19	; 25
    16f4:	60 e2       	ldi	r22, 0x20	; 32
    16f6:	80 e4       	ldi	r24, 0x40	; 64
    16f8:	96 e0       	ldi	r25, 0x06	; 6
    16fa:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	80 93 b0 00 	sts	0x00B0, r24
    1704:	e0 e4       	ldi	r30, 0x40	; 64
    1706:	f6 e0       	ldi	r31, 0x06	; 6
    1708:	82 87       	std	Z+10, r24	; 0x0a
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	81 87       	std	Z+9, r24	; 0x09
    170e:	e0 ea       	ldi	r30, 0xA0	; 160
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	81 60       	ori	r24, 0x01	; 1
    1716:	82 83       	std	Z+2, r24	; 0x02
    1718:	78 94       	sei
    171a:	08 95       	ret

0000171c <init_mtchio>:
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	60 e2       	ldi	r22, 0x20	; 32
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	96 e0       	ldi	r25, 0x06	; 6
    1726:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	60 e4       	ldi	r22, 0x40	; 64
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	96 e0       	ldi	r25, 0x06	; 6
    1734:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    1738:	41 e0       	ldi	r20, 0x01	; 1
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	60 e8       	ldi	r22, 0x80	; 128
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	96 e0       	ldi	r25, 0x06	; 6
    1742:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e4       	ldi	r22, 0x40	; 64
    174c:	80 e6       	ldi	r24, 0x60	; 96
    174e:	96 e0       	ldi	r25, 0x06	; 6
    1750:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	80 ee       	ldi	r24, 0xE0	; 224
    175c:	97 e0       	ldi	r25, 0x07	; 7
    175e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	80 e6       	ldi	r24, 0x60	; 96
    176a:	96 e0       	ldi	r25, 0x06	; 6
    176c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	80 e6       	ldi	r24, 0x60	; 96
    1778:	96 e0       	ldi	r25, 0x06	; 6
    177a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    177e:	08 95       	ret

00001780 <cmd_write_register>:
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	61 97       	sbiw	r28, 0x11	; 17
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	9a ef       	ldi	r25, 0xFA	; 250
    1790:	90 93 d4 20 	sts	0x20D4, r25
    1794:	95 e5       	ldi	r25, 0x55	; 85
    1796:	99 83       	std	Y+1, r25	; 0x01
    1798:	94 e0       	ldi	r25, 0x04	; 4
    179a:	9a 83       	std	Y+2, r25	; 0x02
    179c:	95 e1       	ldi	r25, 0x15	; 21
    179e:	9b 83       	std	Y+3, r25	; 0x03
    17a0:	8c 83       	std	Y+4, r24	; 0x04
    17a2:	6d 83       	std	Y+5, r22	; 0x05
    17a4:	4e 83       	std	Y+6, r20	; 0x06
    17a6:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <wdt_kick>
    17aa:	be 01       	movw	r22, r28
    17ac:	69 5f       	subi	r22, 0xF9	; 249
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	8b e0       	ldi	r24, 0x0B	; 11
    17b2:	fb 01       	movw	r30, r22
    17b4:	11 92       	st	Z+, r1
    17b6:	8a 95       	dec	r24
    17b8:	e9 f7       	brne	.-6      	; 0x17b4 <cmd_write_register+0x34>
    17ba:	85 e2       	ldi	r24, 0x25	; 37
    17bc:	8f 83       	std	Y+7, r24	; 0x07
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	8d 87       	std	Y+13, r24	; 0x0d
    17c4:	9e 87       	std	Y+14, r25	; 0x0e
    17c6:	86 e0       	ldi	r24, 0x06	; 6
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	8f 87       	std	Y+15, r24	; 0x0f
    17cc:	98 8b       	std	Y+16, r25	; 0x10
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	94 e0       	ldi	r25, 0x04	; 4
    17d4:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_master_transfer>
    17d8:	80 93 d4 20 	sts	0x20D4, r24
    17dc:	91 e0       	ldi	r25, 0x01	; 1
    17de:	90 93 34 21 	sts	0x2134, r25
    17e2:	81 11       	cpse	r24, r1
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <cmd_write_register+0x68>
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	89 2f       	mov	r24, r25
    17ea:	61 96       	adiw	r28, 0x11	; 17
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <cmd_mtch6301>:
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}

void cmd_mtch6301(uint8_t cmd)
{
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	2e 97       	sbiw	r28, 0x0e	; 14
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	de bf       	out	0x3e, r29	; 62
	status_res = ERR_UNSUPPORTED_DEV;
    1806:	9a ef       	ldi	r25, 0xFA	; 250
    1808:	90 93 d4 20 	sts	0x20D4, r25
	uint8_t cmd_slaver[3]={0x55,0x01,cmd};
    180c:	95 e5       	ldi	r25, 0x55	; 85
    180e:	99 83       	std	Y+1, r25	; 0x01
    1810:	11 e0       	ldi	r17, 0x01	; 1
    1812:	1a 83       	std	Y+2, r17	; 0x02
    1814:	8b 83       	std	Y+3, r24	; 0x03
		
	#ifdef ENABLE_WDT
		wdt_kick();
    1816:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <wdt_kick>
	#endif
	
	twi_package_t package = {
    181a:	be 01       	movw	r22, r28
    181c:	6c 5f       	subi	r22, 0xFC	; 252
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	8b e0       	ldi	r24, 0x0B	; 11
    1822:	fb 01       	movw	r30, r22
    1824:	11 92       	st	Z+, r1
    1826:	8a 95       	dec	r24
    1828:	e9 f7       	brne	.-6      	; 0x1824 <cmd_mtch6301+0x2e>
    182a:	85 e2       	ldi	r24, 0x25	; 37
    182c:	8c 83       	std	Y+4, r24	; 0x04
    182e:	ce 01       	movw	r24, r28
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	8a 87       	std	Y+10, r24	; 0x0a
    1834:	9b 87       	std	Y+11, r25	; 0x0b
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	8c 87       	std	Y+12, r24	; 0x0c
    183c:	9d 87       	std	Y+13, r25	; 0x0d
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	80 e8       	ldi	r24, 0x80	; 128
    1842:	94 e0       	ldi	r25, 0x04	; 4
    1844:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_master_transfer>
		.buffer			= (void *)cmd_slaver,
		.length			= 3,
		.no_wait		= false
	};
	
	status_res = twi_master_write(&TWI_MASTER, &package);
    1848:	80 93 d4 20 	sts	0x20D4, r24
	cmd_status = 1;
    184c:	10 93 34 21 	sts	0x2134, r17
}
    1850:	2e 96       	adiw	r28, 0x0e	; 14
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	08 95       	ret

0000185e <write_mtch_settings>:
	}
	
	cmd_res = 0x01;
}	

bool write_mtch_settings(void) {
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
    1862:	85 e5       	ldi	r24, 0x55	; 85
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    186a:	88 23       	and	r24, r24
    186c:	09 f4       	brne	.+2      	; 0x1870 <write_mtch_settings+0x12>
    186e:	26 c5       	rjmp	.+2636   	; 0x22bc <write_mtch_settings+0xa5e>
		return true;
	}
	#ifdef ENABLE_WDT
		wdt_kick();
    1870:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <wdt_kick>
	#endif
	
	twinkle(255, 0, 0);
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    187e:	2f ef       	ldi	r18, 0xFF	; 255
    1880:	83 ed       	ldi	r24, 0xD3	; 211
    1882:	90 e3       	ldi	r25, 0x30	; 48
    1884:	21 50       	subi	r18, 0x01	; 1
    1886:	80 40       	sbci	r24, 0x00	; 0
    1888:	90 40       	sbci	r25, 0x00	; 0
    188a:	e1 f7       	brne	.-8      	; 0x1884 <write_mtch_settings+0x26>
    188c:	00 c0       	rjmp	.+0      	; 0x188e <write_mtch_settings+0x30>
    188e:	00 00       	nop
	
	_delay_ms(16000);
	
	//turn off touch and save to NVRAM first
	cmd_mtch6301(0x01);
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	b1 df       	rcall	.-158    	; 0x17f6 <cmd_mtch6301>
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	83 ed       	ldi	r24, 0xD3	; 211
    1898:	90 e3       	ldi	r25, 0x30	; 48
    189a:	21 50       	subi	r18, 0x01	; 1
    189c:	80 40       	sbci	r24, 0x00	; 0
    189e:	90 40       	sbci	r25, 0x00	; 0
    18a0:	e1 f7       	brne	.-8      	; 0x189a <write_mtch_settings+0x3c>
    18a2:	00 c0       	rjmp	.+0      	; 0x18a4 <write_mtch_settings+0x46>
    18a4:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x17);
    18a6:	87 e1       	ldi	r24, 0x17	; 23
    18a8:	a6 df       	rcall	.-180    	; 0x17f6 <cmd_mtch6301>
    18aa:	2f ef       	ldi	r18, 0xFF	; 255
    18ac:	83 ed       	ldi	r24, 0xD3	; 211
    18ae:	90 e3       	ldi	r25, 0x30	; 48
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	80 40       	sbci	r24, 0x00	; 0
    18b4:	90 40       	sbci	r25, 0x00	; 0
    18b6:	e1 f7       	brne	.-8      	; 0x18b0 <write_mtch_settings+0x52>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <write_mtch_settings+0x5c>
    18ba:	00 00       	nop
	_delay_ms(16000);

	//GENERAL - INDEX 0x00
	if (EEPROM_GENERAL_UPDATE_BOOL) {
    18bc:	8d e4       	ldi	r24, 0x4D	; 77
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    18c4:	88 23       	and	r24, r24
    18c6:	09 f4       	brne	.+2      	; 0x18ca <write_mtch_settings+0x6c>
    18c8:	bc c0       	rjmp	.+376    	; 0x1a42 <write_mtch_settings+0x1e4>
		twinkle(255, 255, 0);
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	6f ef       	ldi	r22, 0xFF	; 255
    18ce:	8f ef       	ldi	r24, 0xFF	; 255
    18d0:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x00, 0x01, EEPROM_NUMRXCHANNELS); //NUM RX CHANNELS
    18d4:	8a e0       	ldi	r24, 0x0A	; 10
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    18dc:	48 2f       	mov	r20, r24
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	4e df       	rcall	.-356    	; 0x1780 <cmd_write_register>
    18e4:	c8 2f       	mov	r28, r24
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	89 e6       	ldi	r24, 0x69	; 105
    18ea:	98 e1       	ldi	r25, 0x18	; 24
    18ec:	21 50       	subi	r18, 0x01	; 1
    18ee:	80 40       	sbci	r24, 0x00	; 0
    18f0:	90 40       	sbci	r25, 0x00	; 0
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <write_mtch_settings+0x8e>
    18f4:	00 c0       	rjmp	.+0      	; 0x18f6 <write_mtch_settings+0x98>
    18f6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x02, EEPROM_NUMTXCHANNELS); //NUM TX CHANNELS
    18f8:	8b e0       	ldi	r24, 0x0B	; 11
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1900:	48 2f       	mov	r20, r24
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	3c df       	rcall	.-392    	; 0x1780 <cmd_write_register>
    1908:	c8 2b       	or	r28, r24
    190a:	2f ef       	ldi	r18, 0xFF	; 255
    190c:	89 e6       	ldi	r24, 0x69	; 105
    190e:	98 e1       	ldi	r25, 0x18	; 24
    1910:	21 50       	subi	r18, 0x01	; 1
    1912:	80 40       	sbci	r24, 0x00	; 0
    1914:	90 40       	sbci	r25, 0x00	; 0
    1916:	e1 f7       	brne	.-8      	; 0x1910 <write_mtch_settings+0xb2>
    1918:	00 c0       	rjmp	.+0      	; 0x191a <write_mtch_settings+0xbc>
    191a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x04, EEPROM_RXSCALE_7_0); //RX SCALING [7:0]
    191c:	8c e0       	ldi	r24, 0x0C	; 12
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1924:	48 2f       	mov	r20, r24
    1926:	64 e0       	ldi	r22, 0x04	; 4
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	2a df       	rcall	.-428    	; 0x1780 <cmd_write_register>
    192c:	c8 2b       	or	r28, r24
    192e:	2f ef       	ldi	r18, 0xFF	; 255
    1930:	89 e6       	ldi	r24, 0x69	; 105
    1932:	98 e1       	ldi	r25, 0x18	; 24
    1934:	21 50       	subi	r18, 0x01	; 1
    1936:	80 40       	sbci	r24, 0x00	; 0
    1938:	90 40       	sbci	r25, 0x00	; 0
    193a:	e1 f7       	brne	.-8      	; 0x1934 <write_mtch_settings+0xd6>
    193c:	00 c0       	rjmp	.+0      	; 0x193e <write_mtch_settings+0xe0>
    193e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
    1940:	8d e0       	ldi	r24, 0x0D	; 13
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1948:	48 2f       	mov	r20, r24
    194a:	65 e0       	ldi	r22, 0x05	; 5
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	18 df       	rcall	.-464    	; 0x1780 <cmd_write_register>
    1950:	c8 2b       	or	r28, r24
    1952:	2f ef       	ldi	r18, 0xFF	; 255
    1954:	89 e6       	ldi	r24, 0x69	; 105
    1956:	98 e1       	ldi	r25, 0x18	; 24
    1958:	21 50       	subi	r18, 0x01	; 1
    195a:	80 40       	sbci	r24, 0x00	; 0
    195c:	90 40       	sbci	r25, 0x00	; 0
    195e:	e1 f7       	brne	.-8      	; 0x1958 <write_mtch_settings+0xfa>
    1960:	00 c0       	rjmp	.+0      	; 0x1962 <write_mtch_settings+0x104>
    1962:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
    1964:	8e e0       	ldi	r24, 0x0E	; 14
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    196c:	48 2f       	mov	r20, r24
    196e:	66 e0       	ldi	r22, 0x06	; 6
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	06 df       	rcall	.-500    	; 0x1780 <cmd_write_register>
    1974:	c8 2b       	or	r28, r24
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	89 e6       	ldi	r24, 0x69	; 105
    197a:	98 e1       	ldi	r25, 0x18	; 24
    197c:	21 50       	subi	r18, 0x01	; 1
    197e:	80 40       	sbci	r24, 0x00	; 0
    1980:	90 40       	sbci	r25, 0x00	; 0
    1982:	e1 f7       	brne	.-8      	; 0x197c <write_mtch_settings+0x11e>
    1984:	00 c0       	rjmp	.+0      	; 0x1986 <write_mtch_settings+0x128>
    1986:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
    1988:	8f e0       	ldi	r24, 0x0F	; 15
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1990:	48 2f       	mov	r20, r24
    1992:	67 e0       	ldi	r22, 0x07	; 7
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	f4 de       	rcall	.-536    	; 0x1780 <cmd_write_register>
    1998:	c8 2b       	or	r28, r24
    199a:	2f ef       	ldi	r18, 0xFF	; 255
    199c:	89 e6       	ldi	r24, 0x69	; 105
    199e:	98 e1       	ldi	r25, 0x18	; 24
    19a0:	21 50       	subi	r18, 0x01	; 1
    19a2:	80 40       	sbci	r24, 0x00	; 0
    19a4:	90 40       	sbci	r25, 0x00	; 0
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <write_mtch_settings+0x142>
    19a8:	00 c0       	rjmp	.+0      	; 0x19aa <write_mtch_settings+0x14c>
    19aa:	00 00       	nop
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x00, 0x00, 0x00); //flag1
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	e6 de       	rcall	.-564    	; 0x1780 <cmd_write_register>
    19b4:	c8 2b       	or	r28, r24
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	89 e6       	ldi	r24, 0x69	; 105
    19ba:	98 e1       	ldi	r25, 0x18	; 24
    19bc:	21 50       	subi	r18, 0x01	; 1
    19be:	80 40       	sbci	r24, 0x00	; 0
    19c0:	90 40       	sbci	r25, 0x00	; 0
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <write_mtch_settings+0x15e>
    19c4:	00 c0       	rjmp	.+0      	; 0x19c6 <write_mtch_settings+0x168>
    19c6:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x03, 0xd0); //customFlag
    19c8:	40 ed       	ldi	r20, 0xD0	; 208
    19ca:	63 e0       	ldi	r22, 0x03	; 3
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	d8 de       	rcall	.-592    	; 0x1780 <cmd_write_register>
    19d0:	c8 2b       	or	r28, r24
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	89 e6       	ldi	r24, 0x69	; 105
    19d6:	98 e1       	ldi	r25, 0x18	; 24
    19d8:	21 50       	subi	r18, 0x01	; 1
    19da:	80 40       	sbci	r24, 0x00	; 0
    19dc:	90 40       	sbci	r25, 0x00	; 0
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <write_mtch_settings+0x17a>
    19e0:	00 c0       	rjmp	.+0      	; 0x19e2 <write_mtch_settings+0x184>
    19e2:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x08, 0x00); //rxDiagChannel
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	68 e0       	ldi	r22, 0x08	; 8
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	ca de       	rcall	.-620    	; 0x1780 <cmd_write_register>
    19ec:	c8 2b       	or	r28, r24
    19ee:	2f ef       	ldi	r18, 0xFF	; 255
    19f0:	89 e6       	ldi	r24, 0x69	; 105
    19f2:	98 e1       	ldi	r25, 0x18	; 24
    19f4:	21 50       	subi	r18, 0x01	; 1
    19f6:	80 40       	sbci	r24, 0x00	; 0
    19f8:	90 40       	sbci	r25, 0x00	; 0
    19fa:	e1 f7       	brne	.-8      	; 0x19f4 <write_mtch_settings+0x196>
    19fc:	00 c0       	rjmp	.+0      	; 0x19fe <write_mtch_settings+0x1a0>
    19fe:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x09, 0x00); //txDiagChannel
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	69 e0       	ldi	r22, 0x09	; 9
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	bc de       	rcall	.-648    	; 0x1780 <cmd_write_register>
    1a08:	d8 2f       	mov	r29, r24
    1a0a:	2f ef       	ldi	r18, 0xFF	; 255
    1a0c:	89 e6       	ldi	r24, 0x69	; 105
    1a0e:	98 e1       	ldi	r25, 0x18	; 24
    1a10:	21 50       	subi	r18, 0x01	; 1
    1a12:	80 40       	sbci	r24, 0x00	; 0
    1a14:	90 40       	sbci	r25, 0x00	; 0
    1a16:	e1 f7       	brne	.-8      	; 0x1a10 <write_mtch_settings+0x1b2>
    1a18:	00 c0       	rjmp	.+0      	; 0x1a1a <write_mtch_settings+0x1bc>
    1a1a:	00 00       	nop
		write_status |= cmd_write_register(0x00, 0x0c, 0x70); //stuckTimeout [7:0]
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x0d, 0x17); //stuckTimeout [15:8]
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
    1a1c:	87 e1       	ldi	r24, 0x17	; 23
    1a1e:	eb de       	rcall	.-554    	; 0x17f6 <cmd_mtch6301>
    1a20:	2f ef       	ldi	r18, 0xFF	; 255
    1a22:	83 ed       	ldi	r24, 0xD3	; 211
    1a24:	90 e3       	ldi	r25, 0x30	; 48
    1a26:	21 50       	subi	r18, 0x01	; 1
    1a28:	80 40       	sbci	r24, 0x00	; 0
    1a2a:	90 40       	sbci	r25, 0x00	; 0
    1a2c:	e1 f7       	brne	.-8      	; 0x1a26 <write_mtch_settings+0x1c8>
    1a2e:	00 c0       	rjmp	.+0      	; 0x1a30 <write_mtch_settings+0x1d2>
    1a30:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x03, 0xd0); //customFlag
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x08, 0x00); //rxDiagChannel
		_delay_ms(8000);
		write_status |= cmd_write_register(0x00, 0x09, 0x00); //txDiagChannel
    1a32:	cd 2b       	or	r28, r29
		write_status |= cmd_write_register(0x00, 0x0d, 0x17); //stuckTimeout [15:8]
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, STATUS_OK != write_status);
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <write_mtch_settings+0x1dc>
    1a38:	60 e0       	ldi	r22, 0x00	; 0
    1a3a:	8d e4       	ldi	r24, 0x4D	; 77
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//RXMAP - INDEX 0x01
	if (EEPROM_RXMAP_UPDATE_BOOL) {
    1a42:	8e e4       	ldi	r24, 0x4E	; 78
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <write_mtch_settings+0x1f2>
    1a4e:	96 c0       	rjmp	.+300    	; 0x1b7c <write_mtch_settings+0x31e>
		twinkle(0, 255, 0);
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x01, 0x00, EEPROM_RXPIN0);
    1a5a:	80 e1       	ldi	r24, 0x10	; 16
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1a62:	48 2f       	mov	r20, r24
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	8b de       	rcall	.-746    	; 0x1780 <cmd_write_register>
    1a6a:	c8 2f       	mov	r28, r24
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	89 e6       	ldi	r24, 0x69	; 105
    1a70:	98 e1       	ldi	r25, 0x18	; 24
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	80 40       	sbci	r24, 0x00	; 0
    1a76:	90 40       	sbci	r25, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <write_mtch_settings+0x214>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <write_mtch_settings+0x21e>
    1a7c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x01, EEPROM_RXPIN1);
    1a7e:	81 e1       	ldi	r24, 0x11	; 17
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1a86:	48 2f       	mov	r20, r24
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	79 de       	rcall	.-782    	; 0x1780 <cmd_write_register>
    1a8e:	c8 2b       	or	r28, r24
    1a90:	2f ef       	ldi	r18, 0xFF	; 255
    1a92:	89 e6       	ldi	r24, 0x69	; 105
    1a94:	98 e1       	ldi	r25, 0x18	; 24
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	80 40       	sbci	r24, 0x00	; 0
    1a9a:	90 40       	sbci	r25, 0x00	; 0
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <write_mtch_settings+0x238>
    1a9e:	00 c0       	rjmp	.+0      	; 0x1aa0 <write_mtch_settings+0x242>
    1aa0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x02, EEPROM_RXPIN2);
    1aa2:	82 e1       	ldi	r24, 0x12	; 18
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1aaa:	48 2f       	mov	r20, r24
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	67 de       	rcall	.-818    	; 0x1780 <cmd_write_register>
    1ab2:	c8 2b       	or	r28, r24
    1ab4:	2f ef       	ldi	r18, 0xFF	; 255
    1ab6:	89 e6       	ldi	r24, 0x69	; 105
    1ab8:	98 e1       	ldi	r25, 0x18	; 24
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	80 40       	sbci	r24, 0x00	; 0
    1abe:	90 40       	sbci	r25, 0x00	; 0
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <write_mtch_settings+0x25c>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <write_mtch_settings+0x266>
    1ac4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x03, EEPROM_RXPIN3);
    1ac6:	83 e1       	ldi	r24, 0x13	; 19
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1ace:	48 2f       	mov	r20, r24
    1ad0:	63 e0       	ldi	r22, 0x03	; 3
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	55 de       	rcall	.-854    	; 0x1780 <cmd_write_register>
    1ad6:	c8 2b       	or	r28, r24
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	89 e6       	ldi	r24, 0x69	; 105
    1adc:	98 e1       	ldi	r25, 0x18	; 24
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	80 40       	sbci	r24, 0x00	; 0
    1ae2:	90 40       	sbci	r25, 0x00	; 0
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <write_mtch_settings+0x280>
    1ae6:	00 c0       	rjmp	.+0      	; 0x1ae8 <write_mtch_settings+0x28a>
    1ae8:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
    1aea:	84 e1       	ldi	r24, 0x14	; 20
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1af2:	48 2f       	mov	r20, r24
    1af4:	64 e0       	ldi	r22, 0x04	; 4
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	43 de       	rcall	.-890    	; 0x1780 <cmd_write_register>
    1afa:	c8 2b       	or	r28, r24
    1afc:	2f ef       	ldi	r18, 0xFF	; 255
    1afe:	89 e6       	ldi	r24, 0x69	; 105
    1b00:	98 e1       	ldi	r25, 0x18	; 24
    1b02:	21 50       	subi	r18, 0x01	; 1
    1b04:	80 40       	sbci	r24, 0x00	; 0
    1b06:	90 40       	sbci	r25, 0x00	; 0
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <write_mtch_settings+0x2a4>
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <write_mtch_settings+0x2ae>
    1b0c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
    1b0e:	85 e1       	ldi	r24, 0x15	; 21
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1b16:	48 2f       	mov	r20, r24
    1b18:	65 e0       	ldi	r22, 0x05	; 5
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	31 de       	rcall	.-926    	; 0x1780 <cmd_write_register>
    1b1e:	c8 2b       	or	r28, r24
    1b20:	2f ef       	ldi	r18, 0xFF	; 255
    1b22:	89 e6       	ldi	r24, 0x69	; 105
    1b24:	98 e1       	ldi	r25, 0x18	; 24
    1b26:	21 50       	subi	r18, 0x01	; 1
    1b28:	80 40       	sbci	r24, 0x00	; 0
    1b2a:	90 40       	sbci	r25, 0x00	; 0
    1b2c:	e1 f7       	brne	.-8      	; 0x1b26 <write_mtch_settings+0x2c8>
    1b2e:	00 c0       	rjmp	.+0      	; 0x1b30 <write_mtch_settings+0x2d2>
    1b30:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
    1b32:	86 e1       	ldi	r24, 0x16	; 22
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	66 e0       	ldi	r22, 0x06	; 6
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	1f de       	rcall	.-962    	; 0x1780 <cmd_write_register>
    1b42:	d8 2f       	mov	r29, r24
    1b44:	2f ef       	ldi	r18, 0xFF	; 255
    1b46:	89 e6       	ldi	r24, 0x69	; 105
    1b48:	98 e1       	ldi	r25, 0x18	; 24
    1b4a:	21 50       	subi	r18, 0x01	; 1
    1b4c:	80 40       	sbci	r24, 0x00	; 0
    1b4e:	90 40       	sbci	r25, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <write_mtch_settings+0x2ec>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <write_mtch_settings+0x2f6>
    1b54:	00 00       	nop
		 write_status |= cmd_write_register(0x01, 0x0b, EEPROM_RXPIN11);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
    1b56:	87 e1       	ldi	r24, 0x17	; 23
    1b58:	4e de       	rcall	.-868    	; 0x17f6 <cmd_mtch6301>
    1b5a:	2f ef       	ldi	r18, 0xFF	; 255
    1b5c:	83 ed       	ldi	r24, 0xD3	; 211
    1b5e:	90 e3       	ldi	r25, 0x30	; 48
    1b60:	21 50       	subi	r18, 0x01	; 1
    1b62:	80 40       	sbci	r24, 0x00	; 0
    1b64:	90 40       	sbci	r25, 0x00	; 0
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <write_mtch_settings+0x302>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <write_mtch_settings+0x30c>
    1b6a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
    1b6c:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, STATUS_OK != write_status);
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <write_mtch_settings+0x316>
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	8e e4       	ldi	r24, 0x4E	; 78
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//TXMAP - INDEX 0x02
	if (EEPROM_TXMAP_UPDATE_BOOL) {
    1b7c:	8f e4       	ldi	r24, 0x4F	; 79
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1b84:	88 23       	and	r24, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <write_mtch_settings+0x32c>
    1b88:	72 c0       	rjmp	.+228    	; 0x1c6e <write_mtch_settings+0x410>
		twinkle(0, 255, 255);
    1b8a:	4f ef       	ldi	r20, 0xFF	; 255
    1b8c:	6f ef       	ldi	r22, 0xFF	; 255
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x02, 0x00, EEPROM_TXPIN0);
    1b94:	8d e1       	ldi	r24, 0x1D	; 29
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	ee dd       	rcall	.-1060   	; 0x1780 <cmd_write_register>
    1ba4:	c8 2f       	mov	r28, r24
    1ba6:	2f ef       	ldi	r18, 0xFF	; 255
    1ba8:	89 e6       	ldi	r24, 0x69	; 105
    1baa:	98 e1       	ldi	r25, 0x18	; 24
    1bac:	21 50       	subi	r18, 0x01	; 1
    1bae:	80 40       	sbci	r24, 0x00	; 0
    1bb0:	90 40       	sbci	r25, 0x00	; 0
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <write_mtch_settings+0x34e>
    1bb4:	00 c0       	rjmp	.+0      	; 0x1bb6 <write_mtch_settings+0x358>
    1bb6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x01, EEPROM_TXPIN1);
    1bb8:	8e e1       	ldi	r24, 0x1E	; 30
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	82 e0       	ldi	r24, 0x02	; 2
    1bc6:	dc dd       	rcall	.-1096   	; 0x1780 <cmd_write_register>
    1bc8:	c8 2b       	or	r28, r24
    1bca:	2f ef       	ldi	r18, 0xFF	; 255
    1bcc:	89 e6       	ldi	r24, 0x69	; 105
    1bce:	98 e1       	ldi	r25, 0x18	; 24
    1bd0:	21 50       	subi	r18, 0x01	; 1
    1bd2:	80 40       	sbci	r24, 0x00	; 0
    1bd4:	90 40       	sbci	r25, 0x00	; 0
    1bd6:	e1 f7       	brne	.-8      	; 0x1bd0 <write_mtch_settings+0x372>
    1bd8:	00 c0       	rjmp	.+0      	; 0x1bda <write_mtch_settings+0x37c>
    1bda:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
    1bdc:	8f e1       	ldi	r24, 0x1F	; 31
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1be4:	48 2f       	mov	r20, r24
    1be6:	62 e0       	ldi	r22, 0x02	; 2
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	ca dd       	rcall	.-1132   	; 0x1780 <cmd_write_register>
    1bec:	c8 2b       	or	r28, r24
    1bee:	2f ef       	ldi	r18, 0xFF	; 255
    1bf0:	89 e6       	ldi	r24, 0x69	; 105
    1bf2:	98 e1       	ldi	r25, 0x18	; 24
    1bf4:	21 50       	subi	r18, 0x01	; 1
    1bf6:	80 40       	sbci	r24, 0x00	; 0
    1bf8:	90 40       	sbci	r25, 0x00	; 0
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <write_mtch_settings+0x396>
    1bfc:	00 c0       	rjmp	.+0      	; 0x1bfe <write_mtch_settings+0x3a0>
    1bfe:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1c08:	48 2f       	mov	r20, r24
    1c0a:	63 e0       	ldi	r22, 0x03	; 3
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	b8 dd       	rcall	.-1168   	; 0x1780 <cmd_write_register>
    1c10:	c8 2b       	or	r28, r24
    1c12:	2f ef       	ldi	r18, 0xFF	; 255
    1c14:	89 e6       	ldi	r24, 0x69	; 105
    1c16:	98 e1       	ldi	r25, 0x18	; 24
    1c18:	21 50       	subi	r18, 0x01	; 1
    1c1a:	80 40       	sbci	r24, 0x00	; 0
    1c1c:	90 40       	sbci	r25, 0x00	; 0
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <write_mtch_settings+0x3ba>
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <write_mtch_settings+0x3c4>
    1c22:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
    1c24:	81 e2       	ldi	r24, 0x21	; 33
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	64 e0       	ldi	r22, 0x04	; 4
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	a6 dd       	rcall	.-1204   	; 0x1780 <cmd_write_register>
    1c34:	d8 2f       	mov	r29, r24
    1c36:	2f ef       	ldi	r18, 0xFF	; 255
    1c38:	89 e6       	ldi	r24, 0x69	; 105
    1c3a:	98 e1       	ldi	r25, 0x18	; 24
    1c3c:	21 50       	subi	r18, 0x01	; 1
    1c3e:	80 40       	sbci	r24, 0x00	; 0
    1c40:	90 40       	sbci	r25, 0x00	; 0
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <write_mtch_settings+0x3de>
    1c44:	00 c0       	rjmp	.+0      	; 0x1c46 <write_mtch_settings+0x3e8>
    1c46:	00 00       	nop
		 write_status |= cmd_write_register(0x02, 0x10, EEPROM_TXPIN16);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
    1c48:	87 e1       	ldi	r24, 0x17	; 23
    1c4a:	d5 dd       	rcall	.-1110   	; 0x17f6 <cmd_mtch6301>
    1c4c:	2f ef       	ldi	r18, 0xFF	; 255
    1c4e:	83 ed       	ldi	r24, 0xD3	; 211
    1c50:	90 e3       	ldi	r25, 0x30	; 48
    1c52:	21 50       	subi	r18, 0x01	; 1
    1c54:	80 40       	sbci	r24, 0x00	; 0
    1c56:	90 40       	sbci	r25, 0x00	; 0
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <write_mtch_settings+0x3f4>
    1c5a:	00 c0       	rjmp	.+0      	; 0x1c5c <write_mtch_settings+0x3fe>
    1c5c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
    1c5e:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, STATUS_OK != write_status);
    1c60:	61 e0       	ldi	r22, 0x01	; 1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <write_mtch_settings+0x408>
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	8f e4       	ldi	r24, 0x4F	; 79
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//SELF - INDEX 0x10
	if (EEPROM_SELF_UPDATE_BOOL) {
    1c6e:	80 e5       	ldi	r24, 0x50	; 80
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <write_mtch_settings+0x41e>
    1c7a:	57 c0       	rjmp	.+174    	; 0x1d2a <write_mtch_settings+0x4cc>
		twinkle(0, 0, 255);
    1c7c:	4f ef       	ldi	r20, 0xFF	; 255
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	fb d7       	rcall	.+4086   	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
    1c84:	8f e2       	ldi	r24, 0x2F	; 47
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1c8c:	48 2f       	mov	r20, r24
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	76 dd       	rcall	.-1300   	; 0x1780 <cmd_write_register>
    1c94:	c8 2f       	mov	r28, r24
    1c96:	2f ef       	ldi	r18, 0xFF	; 255
    1c98:	89 e6       	ldi	r24, 0x69	; 105
    1c9a:	98 e1       	ldi	r25, 0x18	; 24
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	80 40       	sbci	r24, 0x00	; 0
    1ca0:	90 40       	sbci	r25, 0x00	; 0
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <write_mtch_settings+0x43e>
    1ca4:	00 c0       	rjmp	.+0      	; 0x1ca6 <write_mtch_settings+0x448>
    1ca6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
    1ca8:	80 e3       	ldi	r24, 0x30	; 48
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	64 dd       	rcall	.-1336   	; 0x1780 <cmd_write_register>
    1cb8:	c8 2b       	or	r28, r24
    1cba:	2f ef       	ldi	r18, 0xFF	; 255
    1cbc:	89 e6       	ldi	r24, 0x69	; 105
    1cbe:	98 e1       	ldi	r25, 0x18	; 24
    1cc0:	21 50       	subi	r18, 0x01	; 1
    1cc2:	80 40       	sbci	r24, 0x00	; 0
    1cc4:	90 40       	sbci	r25, 0x00	; 0
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <write_mtch_settings+0x462>
    1cc8:	00 c0       	rjmp	.+0      	; 0x1cca <write_mtch_settings+0x46c>
    1cca:	00 00       	nop
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x10, 0x02, 0x01); //selfSampleFreq
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	80 e1       	ldi	r24, 0x10	; 16
    1cd2:	56 dd       	rcall	.-1364   	; 0x1780 <cmd_write_register>
    1cd4:	c8 2b       	or	r28, r24
    1cd6:	2f ef       	ldi	r18, 0xFF	; 255
    1cd8:	89 e6       	ldi	r24, 0x69	; 105
    1cda:	98 e1       	ldi	r25, 0x18	; 24
    1cdc:	21 50       	subi	r18, 0x01	; 1
    1cde:	80 40       	sbci	r24, 0x00	; 0
    1ce0:	90 40       	sbci	r25, 0x00	; 0
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <write_mtch_settings+0x47e>
    1ce4:	00 c0       	rjmp	.+0      	; 0x1ce6 <write_mtch_settings+0x488>
    1ce6:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x10, 0x03, 0x01); //stutterMult
    1ce8:	41 e0       	ldi	r20, 0x01	; 1
    1cea:	63 e0       	ldi	r22, 0x03	; 3
    1cec:	80 e1       	ldi	r24, 0x10	; 16
    1cee:	48 dd       	rcall	.-1392   	; 0x1780 <cmd_write_register>
    1cf0:	d8 2f       	mov	r29, r24
    1cf2:	2f ef       	ldi	r18, 0xFF	; 255
    1cf4:	89 e6       	ldi	r24, 0x69	; 105
    1cf6:	98 e1       	ldi	r25, 0x18	; 24
    1cf8:	21 50       	subi	r18, 0x01	; 1
    1cfa:	80 40       	sbci	r24, 0x00	; 0
    1cfc:	90 40       	sbci	r25, 0x00	; 0
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <write_mtch_settings+0x49a>
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <write_mtch_settings+0x4a4>
    1d02:	00 00       	nop
		_delay_ms(8000);
		//cmd_write_register(0x11, 0x00, 0x00); //selfscanfinetune...
		//_delay_ms(8000);
		
		
		cmd_mtch6301(0x17);
    1d04:	87 e1       	ldi	r24, 0x17	; 23
    1d06:	77 dd       	rcall	.-1298   	; 0x17f6 <cmd_mtch6301>
    1d08:	2f ef       	ldi	r18, 0xFF	; 255
    1d0a:	83 ed       	ldi	r24, 0xD3	; 211
    1d0c:	90 e3       	ldi	r25, 0x30	; 48
    1d0e:	21 50       	subi	r18, 0x01	; 1
    1d10:	80 40       	sbci	r24, 0x00	; 0
    1d12:	90 40       	sbci	r25, 0x00	; 0
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <write_mtch_settings+0x4b0>
    1d16:	00 c0       	rjmp	.+0      	; 0x1d18 <write_mtch_settings+0x4ba>
    1d18:	00 00       	nop
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
		_delay_ms(8000);
		
		write_status |= cmd_write_register(0x10, 0x02, 0x01); //selfSampleFreq
		_delay_ms(8000);
		write_status |= cmd_write_register(0x10, 0x03, 0x01); //stutterMult
    1d1a:	cd 2b       	or	r28, r29
		//_delay_ms(8000);
		
		
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_SELF, STATUS_OK != write_status);
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <write_mtch_settings+0x4c4>
    1d20:	60 e0       	ldi	r22, 0x00	; 0
    1d22:	80 e5       	ldi	r24, 0x50	; 80
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//MUTUAL - INDEX 0x20
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
    1d2a:	81 e5       	ldi	r24, 0x51	; 81
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <write_mtch_settings+0x4da>
    1d36:	73 c0       	rjmp	.+230    	; 0x1e1e <write_mtch_settings+0x5c0>
		twinkle(255, 0, 255);
    1d38:	4f ef       	ldi	r20, 0xFF	; 255
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	9d d7       	rcall	.+3898   	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
    1d40:	81 e3       	ldi	r24, 0x31	; 49
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1d48:	48 2f       	mov	r20, r24
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	18 dd       	rcall	.-1488   	; 0x1780 <cmd_write_register>
    1d50:	c8 2f       	mov	r28, r24
    1d52:	2f ef       	ldi	r18, 0xFF	; 255
    1d54:	89 e6       	ldi	r24, 0x69	; 105
    1d56:	98 e1       	ldi	r25, 0x18	; 24
    1d58:	21 50       	subi	r18, 0x01	; 1
    1d5a:	80 40       	sbci	r24, 0x00	; 0
    1d5c:	90 40       	sbci	r25, 0x00	; 0
    1d5e:	e1 f7       	brne	.-8      	; 0x1d58 <write_mtch_settings+0x4fa>
    1d60:	00 c0       	rjmp	.+0      	; 0x1d62 <write_mtch_settings+0x504>
    1d62:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
    1d64:	82 e3       	ldi	r24, 0x32	; 50
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	80 e2       	ldi	r24, 0x20	; 32
    1d72:	06 dd       	rcall	.-1524   	; 0x1780 <cmd_write_register>
    1d74:	c8 2b       	or	r28, r24
    1d76:	2f ef       	ldi	r18, 0xFF	; 255
    1d78:	89 e6       	ldi	r24, 0x69	; 105
    1d7a:	98 e1       	ldi	r25, 0x18	; 24
    1d7c:	21 50       	subi	r18, 0x01	; 1
    1d7e:	80 40       	sbci	r24, 0x00	; 0
    1d80:	90 40       	sbci	r25, 0x00	; 0
    1d82:	e1 f7       	brne	.-8      	; 0x1d7c <write_mtch_settings+0x51e>
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <write_mtch_settings+0x528>
    1d86:	00 00       	nop
		_delay_ms(8000);
		
		 write_status |= cmd_write_register(0x20, 0x02, 0x16); //mutSampleFreq
    1d88:	46 e1       	ldi	r20, 0x16	; 22
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	80 e2       	ldi	r24, 0x20	; 32
    1d8e:	f8 dc       	rcall	.-1552   	; 0x1780 <cmd_write_register>
    1d90:	c8 2b       	or	r28, r24
    1d92:	2f ef       	ldi	r18, 0xFF	; 255
    1d94:	89 e6       	ldi	r24, 0x69	; 105
    1d96:	98 e1       	ldi	r25, 0x18	; 24
    1d98:	21 50       	subi	r18, 0x01	; 1
    1d9a:	80 40       	sbci	r24, 0x00	; 0
    1d9c:	90 40       	sbci	r25, 0x00	; 0
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <write_mtch_settings+0x53a>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <write_mtch_settings+0x544>
    1da2:	00 00       	nop
		_delay_ms(8000);
		//cmd_write_register(0x21, 0x00, 0x00); //mutscanfinetune...
		//_delay_ms(8000);
		
		write_status |= cmd_write_register(0x30, 0x02, 0x05); //minCuspDelta
    1da4:	45 e0       	ldi	r20, 0x05	; 5
    1da6:	62 e0       	ldi	r22, 0x02	; 2
    1da8:	80 e3       	ldi	r24, 0x30	; 48
    1daa:	ea dc       	rcall	.-1580   	; 0x1780 <cmd_write_register>
    1dac:	c8 2b       	or	r28, r24
    1dae:	2f ef       	ldi	r18, 0xFF	; 255
    1db0:	89 e6       	ldi	r24, 0x69	; 105
    1db2:	98 e1       	ldi	r25, 0x18	; 24
    1db4:	21 50       	subi	r18, 0x01	; 1
    1db6:	80 40       	sbci	r24, 0x00	; 0
    1db8:	90 40       	sbci	r25, 0x00	; 0
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <write_mtch_settings+0x556>
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <write_mtch_settings+0x560>
    1dbe:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x03, 0xff); //weightThreshold
    1dc0:	4f ef       	ldi	r20, 0xFF	; 255
    1dc2:	63 e0       	ldi	r22, 0x03	; 3
    1dc4:	80 e3       	ldi	r24, 0x30	; 48
    1dc6:	dc dc       	rcall	.-1608   	; 0x1780 <cmd_write_register>
    1dc8:	c8 2b       	or	r28, r24
    1dca:	2f ef       	ldi	r18, 0xFF	; 255
    1dcc:	89 e6       	ldi	r24, 0x69	; 105
    1dce:	98 e1       	ldi	r25, 0x18	; 24
    1dd0:	21 50       	subi	r18, 0x01	; 1
    1dd2:	80 40       	sbci	r24, 0x00	; 0
    1dd4:	90 40       	sbci	r25, 0x00	; 0
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <write_mtch_settings+0x572>
    1dd8:	00 c0       	rjmp	.+0      	; 0x1dda <write_mtch_settings+0x57c>
    1dda:	00 00       	nop
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x09, 0x96); //largeActThres
    1ddc:	46 e9       	ldi	r20, 0x96	; 150
    1dde:	69 e0       	ldi	r22, 0x09	; 9
    1de0:	80 e3       	ldi	r24, 0x30	; 48
    1de2:	ce dc       	rcall	.-1636   	; 0x1780 <cmd_write_register>
    1de4:	d8 2f       	mov	r29, r24
    1de6:	2f ef       	ldi	r18, 0xFF	; 255
    1de8:	89 e6       	ldi	r24, 0x69	; 105
    1dea:	98 e1       	ldi	r25, 0x18	; 24
    1dec:	21 50       	subi	r18, 0x01	; 1
    1dee:	80 40       	sbci	r24, 0x00	; 0
    1df0:	90 40       	sbci	r25, 0x00	; 0
    1df2:	e1 f7       	brne	.-8      	; 0x1dec <write_mtch_settings+0x58e>
    1df4:	00 c0       	rjmp	.+0      	; 0x1df6 <write_mtch_settings+0x598>
    1df6:	00 00       	nop
		_delay_ms(8000);
		
		cmd_mtch6301(0x17);
    1df8:	87 e1       	ldi	r24, 0x17	; 23
    1dfa:	fd dc       	rcall	.-1542   	; 0x17f6 <cmd_mtch6301>
    1dfc:	2f ef       	ldi	r18, 0xFF	; 255
    1dfe:	83 ed       	ldi	r24, 0xD3	; 211
    1e00:	90 e3       	ldi	r25, 0x30	; 48
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	80 40       	sbci	r24, 0x00	; 0
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <write_mtch_settings+0x5a4>
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <write_mtch_settings+0x5ae>
    1e0c:	00 00       	nop
		
		write_status |= cmd_write_register(0x30, 0x02, 0x05); //minCuspDelta
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x03, 0xff); //weightThreshold
		_delay_ms(8000);
		write_status |= cmd_write_register(0x30, 0x09, 0x96); //largeActThres
    1e0e:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, STATUS_OK != write_status);
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <write_mtch_settings+0x5b8>
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	81 e5       	ldi	r24, 0x51	; 81
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//DECODING - INDEX 0x30
	if (EEPROM_DECODING_UPDATE_BOOL) {
    1e1e:	82 e5       	ldi	r24, 0x52	; 82
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1e26:	88 23       	and	r24, r24
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <write_mtch_settings+0x5ce>
    1e2a:	83 c0       	rjmp	.+262    	; 0x1f32 <write_mtch_settings+0x6d4>
		twinkle(0, 0, 255);
    1e2c:	4f ef       	ldi	r20, 0xFF	; 255
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	23 d7       	rcall	.+3654   	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
    1e34:	83 e3       	ldi	r24, 0x33	; 51
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	80 e3       	ldi	r24, 0x30	; 48
    1e42:	9e dc       	rcall	.-1732   	; 0x1780 <cmd_write_register>
    1e44:	c8 2f       	mov	r28, r24
    1e46:	2f ef       	ldi	r18, 0xFF	; 255
    1e48:	89 e6       	ldi	r24, 0x69	; 105
    1e4a:	98 e1       	ldi	r25, 0x18	; 24
    1e4c:	21 50       	subi	r18, 0x01	; 1
    1e4e:	80 40       	sbci	r24, 0x00	; 0
    1e50:	90 40       	sbci	r25, 0x00	; 0
    1e52:	e1 f7       	brne	.-8      	; 0x1e4c <write_mtch_settings+0x5ee>
    1e54:	00 c0       	rjmp	.+0      	; 0x1e56 <write_mtch_settings+0x5f8>
    1e56:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x01, EEPROM_NUMAVG); //NUM AVERAGES
    1e58:	84 e3       	ldi	r24, 0x34	; 52
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1e60:	48 2f       	mov	r20, r24
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	8c dc       	rcall	.-1768   	; 0x1780 <cmd_write_register>
    1e68:	c8 2b       	or	r28, r24
    1e6a:	2f ef       	ldi	r18, 0xFF	; 255
    1e6c:	89 e6       	ldi	r24, 0x69	; 105
    1e6e:	98 e1       	ldi	r25, 0x18	; 24
    1e70:	21 50       	subi	r18, 0x01	; 1
    1e72:	80 40       	sbci	r24, 0x00	; 0
    1e74:	90 40       	sbci	r25, 0x00	; 0
    1e76:	e1 f7       	brne	.-8      	; 0x1e70 <write_mtch_settings+0x612>
    1e78:	00 c0       	rjmp	.+0      	; 0x1e7a <write_mtch_settings+0x61c>
    1e7a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x04, EEPROM_MINTOUCHDIST); //MIN TOUCH DISTANCE
    1e7c:	85 e3       	ldi	r24, 0x35	; 53
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1e84:	48 2f       	mov	r20, r24
    1e86:	64 e0       	ldi	r22, 0x04	; 4
    1e88:	80 e3       	ldi	r24, 0x30	; 48
    1e8a:	7a dc       	rcall	.-1804   	; 0x1780 <cmd_write_register>
    1e8c:	c8 2b       	or	r28, r24
    1e8e:	2f ef       	ldi	r18, 0xFF	; 255
    1e90:	89 e6       	ldi	r24, 0x69	; 105
    1e92:	98 e1       	ldi	r25, 0x18	; 24
    1e94:	21 50       	subi	r18, 0x01	; 1
    1e96:	80 40       	sbci	r24, 0x00	; 0
    1e98:	90 40       	sbci	r25, 0x00	; 0
    1e9a:	e1 f7       	brne	.-8      	; 0x1e94 <write_mtch_settings+0x636>
    1e9c:	00 c0       	rjmp	.+0      	; 0x1e9e <write_mtch_settings+0x640>
    1e9e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
    1ea0:	86 e3       	ldi	r24, 0x36	; 54
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1ea8:	48 2f       	mov	r20, r24
    1eaa:	65 e0       	ldi	r22, 0x05	; 5
    1eac:	80 e3       	ldi	r24, 0x30	; 48
    1eae:	68 dc       	rcall	.-1840   	; 0x1780 <cmd_write_register>
    1eb0:	c8 2b       	or	r28, r24
    1eb2:	2f ef       	ldi	r18, 0xFF	; 255
    1eb4:	89 e6       	ldi	r24, 0x69	; 105
    1eb6:	98 e1       	ldi	r25, 0x18	; 24
    1eb8:	21 50       	subi	r18, 0x01	; 1
    1eba:	80 40       	sbci	r24, 0x00	; 0
    1ebc:	90 40       	sbci	r25, 0x00	; 0
    1ebe:	e1 f7       	brne	.-8      	; 0x1eb8 <write_mtch_settings+0x65a>
    1ec0:	00 c0       	rjmp	.+0      	; 0x1ec2 <write_mtch_settings+0x664>
    1ec2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
    1ec4:	87 e3       	ldi	r24, 0x37	; 55
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1ecc:	48 2f       	mov	r20, r24
    1ece:	66 e0       	ldi	r22, 0x06	; 6
    1ed0:	80 e3       	ldi	r24, 0x30	; 48
    1ed2:	56 dc       	rcall	.-1876   	; 0x1780 <cmd_write_register>
    1ed4:	c8 2b       	or	r28, r24
    1ed6:	2f ef       	ldi	r18, 0xFF	; 255
    1ed8:	89 e6       	ldi	r24, 0x69	; 105
    1eda:	98 e1       	ldi	r25, 0x18	; 24
    1edc:	21 50       	subi	r18, 0x01	; 1
    1ede:	80 40       	sbci	r24, 0x00	; 0
    1ee0:	90 40       	sbci	r25, 0x00	; 0
    1ee2:	e1 f7       	brne	.-8      	; 0x1edc <write_mtch_settings+0x67e>
    1ee4:	00 c0       	rjmp	.+0      	; 0x1ee6 <write_mtch_settings+0x688>
    1ee6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
    1ee8:	88 e3       	ldi	r24, 0x38	; 56
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1ef0:	48 2f       	mov	r20, r24
    1ef2:	67 e0       	ldi	r22, 0x07	; 7
    1ef4:	80 e3       	ldi	r24, 0x30	; 48
    1ef6:	44 dc       	rcall	.-1912   	; 0x1780 <cmd_write_register>
    1ef8:	d8 2f       	mov	r29, r24
    1efa:	2f ef       	ldi	r18, 0xFF	; 255
    1efc:	89 e6       	ldi	r24, 0x69	; 105
    1efe:	98 e1       	ldi	r25, 0x18	; 24
    1f00:	21 50       	subi	r18, 0x01	; 1
    1f02:	80 40       	sbci	r24, 0x00	; 0
    1f04:	90 40       	sbci	r25, 0x00	; 0
    1f06:	e1 f7       	brne	.-8      	; 0x1f00 <write_mtch_settings+0x6a2>
    1f08:	00 c0       	rjmp	.+0      	; 0x1f0a <write_mtch_settings+0x6ac>
    1f0a:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    1f0c:	87 e1       	ldi	r24, 0x17	; 23
    1f0e:	73 dc       	rcall	.-1818   	; 0x17f6 <cmd_mtch6301>
    1f10:	2f ef       	ldi	r18, 0xFF	; 255
    1f12:	83 ed       	ldi	r24, 0xD3	; 211
    1f14:	90 e3       	ldi	r25, 0x30	; 48
    1f16:	21 50       	subi	r18, 0x01	; 1
    1f18:	80 40       	sbci	r24, 0x00	; 0
    1f1a:	90 40       	sbci	r25, 0x00	; 0
    1f1c:	e1 f7       	brne	.-8      	; 0x1f16 <write_mtch_settings+0x6b8>
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <write_mtch_settings+0x6c2>
    1f20:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
    1f22:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, STATUS_OK != write_status);
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <write_mtch_settings+0x6cc>
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	82 e5       	ldi	r24, 0x52	; 82
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//GESTURES - INDEX 0x50
	if (EEPROM_GESTURES_UPDATE_BOOL) {
    1f32:	83 e5       	ldi	r24, 0x53	; 83
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <write_mtch_settings+0x6e2>
    1f3e:	01 c1       	rjmp	.+514    	; 0x2142 <write_mtch_settings+0x8e4>
		twinkle(255, 0, 255);
    1f40:	4f ef       	ldi	r20, 0xFF	; 255
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	8f ef       	ldi	r24, 0xFF	; 255
    1f46:	99 d6       	rcall	.+3378   	; 0x2c7a <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x50, 0x00, EEPROM_RXSWIPELEN); //RX SWIPE LENGTH
    1f48:	89 e3       	ldi	r24, 0x39	; 57
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1f50:	48 2f       	mov	r20, r24
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	80 e5       	ldi	r24, 0x50	; 80
    1f56:	14 dc       	rcall	.-2008   	; 0x1780 <cmd_write_register>
    1f58:	c8 2f       	mov	r28, r24
    1f5a:	2f ef       	ldi	r18, 0xFF	; 255
    1f5c:	89 e6       	ldi	r24, 0x69	; 105
    1f5e:	98 e1       	ldi	r25, 0x18	; 24
    1f60:	21 50       	subi	r18, 0x01	; 1
    1f62:	80 40       	sbci	r24, 0x00	; 0
    1f64:	90 40       	sbci	r25, 0x00	; 0
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <write_mtch_settings+0x702>
    1f68:	00 c0       	rjmp	.+0      	; 0x1f6a <write_mtch_settings+0x70c>
    1f6a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x01, EEPROM_TXSWIPELEN); //TX SWIPE LENGTH
    1f6c:	8a e3       	ldi	r24, 0x3A	; 58
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1f74:	48 2f       	mov	r20, r24
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	80 e5       	ldi	r24, 0x50	; 80
    1f7a:	02 dc       	rcall	.-2044   	; 0x1780 <cmd_write_register>
    1f7c:	c8 2b       	or	r28, r24
    1f7e:	2f ef       	ldi	r18, 0xFF	; 255
    1f80:	89 e6       	ldi	r24, 0x69	; 105
    1f82:	98 e1       	ldi	r25, 0x18	; 24
    1f84:	21 50       	subi	r18, 0x01	; 1
    1f86:	80 40       	sbci	r24, 0x00	; 0
    1f88:	90 40       	sbci	r25, 0x00	; 0
    1f8a:	e1 f7       	brne	.-8      	; 0x1f84 <write_mtch_settings+0x726>
    1f8c:	00 c0       	rjmp	.+0      	; 0x1f8e <write_mtch_settings+0x730>
    1f8e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x02, EEPROM_SWIPEBOUNDARY); //SWIPE BOUNDARY
    1f90:	8b e3       	ldi	r24, 0x3B	; 59
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1f98:	48 2f       	mov	r20, r24
    1f9a:	62 e0       	ldi	r22, 0x02	; 2
    1f9c:	80 e5       	ldi	r24, 0x50	; 80
    1f9e:	f0 db       	rcall	.-2080   	; 0x1780 <cmd_write_register>
    1fa0:	c8 2b       	or	r28, r24
    1fa2:	2f ef       	ldi	r18, 0xFF	; 255
    1fa4:	89 e6       	ldi	r24, 0x69	; 105
    1fa6:	98 e1       	ldi	r25, 0x18	; 24
    1fa8:	21 50       	subi	r18, 0x01	; 1
    1faa:	80 40       	sbci	r24, 0x00	; 0
    1fac:	90 40       	sbci	r25, 0x00	; 0
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <write_mtch_settings+0x74a>
    1fb0:	00 c0       	rjmp	.+0      	; 0x1fb2 <write_mtch_settings+0x754>
    1fb2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x03, EEPROM_SWIPEHOLDTHRES); //SWIPE HOLD THRESHOLD
    1fb4:	8c e3       	ldi	r24, 0x3C	; 60
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	63 e0       	ldi	r22, 0x03	; 3
    1fc0:	80 e5       	ldi	r24, 0x50	; 80
    1fc2:	de db       	rcall	.-2116   	; 0x1780 <cmd_write_register>
    1fc4:	c8 2b       	or	r28, r24
    1fc6:	2f ef       	ldi	r18, 0xFF	; 255
    1fc8:	89 e6       	ldi	r24, 0x69	; 105
    1fca:	98 e1       	ldi	r25, 0x18	; 24
    1fcc:	21 50       	subi	r18, 0x01	; 1
    1fce:	80 40       	sbci	r24, 0x00	; 0
    1fd0:	90 40       	sbci	r25, 0x00	; 0
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <write_mtch_settings+0x76e>
    1fd4:	00 c0       	rjmp	.+0      	; 0x1fd6 <write_mtch_settings+0x778>
    1fd6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x04, EEPROM_SWIPETIME_7_0); //SWIPE TIME [7:0]
    1fd8:	8d e3       	ldi	r24, 0x3D	; 61
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	80 e5       	ldi	r24, 0x50	; 80
    1fe6:	cc db       	rcall	.-2152   	; 0x1780 <cmd_write_register>
    1fe8:	c8 2b       	or	r28, r24
    1fea:	2f ef       	ldi	r18, 0xFF	; 255
    1fec:	89 e6       	ldi	r24, 0x69	; 105
    1fee:	98 e1       	ldi	r25, 0x18	; 24
    1ff0:	21 50       	subi	r18, 0x01	; 1
    1ff2:	80 40       	sbci	r24, 0x00	; 0
    1ff4:	90 40       	sbci	r25, 0x00	; 0
    1ff6:	e1 f7       	brne	.-8      	; 0x1ff0 <write_mtch_settings+0x792>
    1ff8:	00 c0       	rjmp	.+0      	; 0x1ffa <write_mtch_settings+0x79c>
    1ffa:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x05, EEPROM_SWIPETIME_15_8); //SWIPE TIME [15:8]
    1ffc:	8e e3       	ldi	r24, 0x3E	; 62
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2004:	48 2f       	mov	r20, r24
    2006:	65 e0       	ldi	r22, 0x05	; 5
    2008:	80 e5       	ldi	r24, 0x50	; 80
    200a:	ba db       	rcall	.-2188   	; 0x1780 <cmd_write_register>
    200c:	c8 2b       	or	r28, r24
    200e:	2f ef       	ldi	r18, 0xFF	; 255
    2010:	89 e6       	ldi	r24, 0x69	; 105
    2012:	98 e1       	ldi	r25, 0x18	; 24
    2014:	21 50       	subi	r18, 0x01	; 1
    2016:	80 40       	sbci	r24, 0x00	; 0
    2018:	90 40       	sbci	r25, 0x00	; 0
    201a:	e1 f7       	brne	.-8      	; 0x2014 <write_mtch_settings+0x7b6>
    201c:	00 c0       	rjmp	.+0      	; 0x201e <write_mtch_settings+0x7c0>
    201e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x06, EEPROM_TAPTIME_7_0); //TAP TIME [7:0]
    2020:	8f e3       	ldi	r24, 0x3F	; 63
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2028:	48 2f       	mov	r20, r24
    202a:	66 e0       	ldi	r22, 0x06	; 6
    202c:	80 e5       	ldi	r24, 0x50	; 80
    202e:	a8 db       	rcall	.-2224   	; 0x1780 <cmd_write_register>
    2030:	c8 2b       	or	r28, r24
    2032:	2f ef       	ldi	r18, 0xFF	; 255
    2034:	89 e6       	ldi	r24, 0x69	; 105
    2036:	98 e1       	ldi	r25, 0x18	; 24
    2038:	21 50       	subi	r18, 0x01	; 1
    203a:	80 40       	sbci	r24, 0x00	; 0
    203c:	90 40       	sbci	r25, 0x00	; 0
    203e:	e1 f7       	brne	.-8      	; 0x2038 <write_mtch_settings+0x7da>
    2040:	00 c0       	rjmp	.+0      	; 0x2042 <write_mtch_settings+0x7e4>
    2042:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x07, EEPROM_TAPTIME_15_8); //TAP TIME [15:8]
    2044:	80 e4       	ldi	r24, 0x40	; 64
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    204c:	48 2f       	mov	r20, r24
    204e:	67 e0       	ldi	r22, 0x07	; 7
    2050:	80 e5       	ldi	r24, 0x50	; 80
    2052:	96 db       	rcall	.-2260   	; 0x1780 <cmd_write_register>
    2054:	c8 2b       	or	r28, r24
    2056:	2f ef       	ldi	r18, 0xFF	; 255
    2058:	89 e6       	ldi	r24, 0x69	; 105
    205a:	98 e1       	ldi	r25, 0x18	; 24
    205c:	21 50       	subi	r18, 0x01	; 1
    205e:	80 40       	sbci	r24, 0x00	; 0
    2060:	90 40       	sbci	r25, 0x00	; 0
    2062:	e1 f7       	brne	.-8      	; 0x205c <write_mtch_settings+0x7fe>
    2064:	00 c0       	rjmp	.+0      	; 0x2066 <write_mtch_settings+0x808>
    2066:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x08, EEPROM_TAPTHRES); //TAP THRESHOLD
    2068:	81 e4       	ldi	r24, 0x41	; 65
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2070:	48 2f       	mov	r20, r24
    2072:	68 e0       	ldi	r22, 0x08	; 8
    2074:	80 e5       	ldi	r24, 0x50	; 80
    2076:	84 db       	rcall	.-2296   	; 0x1780 <cmd_write_register>
    2078:	c8 2b       	or	r28, r24
    207a:	2f ef       	ldi	r18, 0xFF	; 255
    207c:	89 e6       	ldi	r24, 0x69	; 105
    207e:	98 e1       	ldi	r25, 0x18	; 24
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	80 40       	sbci	r24, 0x00	; 0
    2084:	90 40       	sbci	r25, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <write_mtch_settings+0x822>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <write_mtch_settings+0x82c>
    208a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x09, EEPROM_MINSWIPEVELOCITY); //MIN SWIPE VELOCITY
    208c:	82 e4       	ldi	r24, 0x42	; 66
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2094:	48 2f       	mov	r20, r24
    2096:	69 e0       	ldi	r22, 0x09	; 9
    2098:	80 e5       	ldi	r24, 0x50	; 80
    209a:	72 db       	rcall	.-2332   	; 0x1780 <cmd_write_register>
    209c:	c8 2b       	or	r28, r24
    209e:	2f ef       	ldi	r18, 0xFF	; 255
    20a0:	89 e6       	ldi	r24, 0x69	; 105
    20a2:	98 e1       	ldi	r25, 0x18	; 24
    20a4:	21 50       	subi	r18, 0x01	; 1
    20a6:	80 40       	sbci	r24, 0x00	; 0
    20a8:	90 40       	sbci	r25, 0x00	; 0
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <write_mtch_settings+0x846>
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <write_mtch_settings+0x850>
    20ae:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
    20b0:	83 e4       	ldi	r24, 0x43	; 67
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    20b8:	48 2f       	mov	r20, r24
    20ba:	6a e0       	ldi	r22, 0x0A	; 10
    20bc:	80 e5       	ldi	r24, 0x50	; 80
    20be:	60 db       	rcall	.-2368   	; 0x1780 <cmd_write_register>
    20c0:	c8 2b       	or	r28, r24
    20c2:	2f ef       	ldi	r18, 0xFF	; 255
    20c4:	89 e6       	ldi	r24, 0x69	; 105
    20c6:	98 e1       	ldi	r25, 0x18	; 24
    20c8:	21 50       	subi	r18, 0x01	; 1
    20ca:	80 40       	sbci	r24, 0x00	; 0
    20cc:	90 40       	sbci	r25, 0x00	; 0
    20ce:	e1 f7       	brne	.-8      	; 0x20c8 <write_mtch_settings+0x86a>
    20d0:	00 c0       	rjmp	.+0      	; 0x20d2 <write_mtch_settings+0x874>
    20d2:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
    20d4:	84 e4       	ldi	r24, 0x44	; 68
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    20dc:	48 2f       	mov	r20, r24
    20de:	6b e0       	ldi	r22, 0x0B	; 11
    20e0:	80 e5       	ldi	r24, 0x50	; 80
    20e2:	4e db       	rcall	.-2404   	; 0x1780 <cmd_write_register>
    20e4:	c8 2b       	or	r28, r24
    20e6:	2f ef       	ldi	r18, 0xFF	; 255
    20e8:	89 e6       	ldi	r24, 0x69	; 105
    20ea:	98 e1       	ldi	r25, 0x18	; 24
    20ec:	21 50       	subi	r18, 0x01	; 1
    20ee:	80 40       	sbci	r24, 0x00	; 0
    20f0:	90 40       	sbci	r25, 0x00	; 0
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <write_mtch_settings+0x88e>
    20f4:	00 c0       	rjmp	.+0      	; 0x20f6 <write_mtch_settings+0x898>
    20f6:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
    20f8:	85 e4       	ldi	r24, 0x45	; 69
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2100:	48 2f       	mov	r20, r24
    2102:	6c e0       	ldi	r22, 0x0C	; 12
    2104:	80 e5       	ldi	r24, 0x50	; 80
    2106:	3c db       	rcall	.-2440   	; 0x1780 <cmd_write_register>
    2108:	d8 2f       	mov	r29, r24
    210a:	2f ef       	ldi	r18, 0xFF	; 255
    210c:	89 e6       	ldi	r24, 0x69	; 105
    210e:	98 e1       	ldi	r25, 0x18	; 24
    2110:	21 50       	subi	r18, 0x01	; 1
    2112:	80 40       	sbci	r24, 0x00	; 0
    2114:	90 40       	sbci	r25, 0x00	; 0
    2116:	e1 f7       	brne	.-8      	; 0x2110 <write_mtch_settings+0x8b2>
    2118:	00 c0       	rjmp	.+0      	; 0x211a <write_mtch_settings+0x8bc>
    211a:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    211c:	87 e1       	ldi	r24, 0x17	; 23
    211e:	6b db       	rcall	.-2346   	; 0x17f6 <cmd_mtch6301>
    2120:	2f ef       	ldi	r18, 0xFF	; 255
    2122:	83 ed       	ldi	r24, 0xD3	; 211
    2124:	90 e3       	ldi	r25, 0x30	; 48
    2126:	21 50       	subi	r18, 0x01	; 1
    2128:	80 40       	sbci	r24, 0x00	; 0
    212a:	90 40       	sbci	r25, 0x00	; 0
    212c:	e1 f7       	brne	.-8      	; 0x2126 <write_mtch_settings+0x8c8>
    212e:	00 c0       	rjmp	.+0      	; 0x2130 <write_mtch_settings+0x8d2>
    2130:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
    2132:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, STATUS_OK != write_status);
    2134:	61 e0       	ldi	r22, 0x01	; 1
    2136:	09 f4       	brne	.+2      	; 0x213a <write_mtch_settings+0x8dc>
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	83 e5       	ldi	r24, 0x53	; 83
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	}
	
	
	//CONFIG - INDEX 0xf0
	if (EEPROM_CONFIG_UPDATE_BOOL) {
    2142:	84 e5       	ldi	r24, 0x54	; 84
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    214a:	88 23       	and	r24, r24
    214c:	09 f4       	brne	.+2      	; 0x2150 <write_mtch_settings+0x8f2>
    214e:	5f c0       	rjmp	.+190    	; 0x220e <write_mtch_settings+0x9b0>
		twinkle(255, 255, 255);
    2150:	4f ef       	ldi	r20, 0xFF	; 255
    2152:	6f ef       	ldi	r22, 0xFF	; 255
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	91 d5       	rcall	.+2850   	; 0x2c7a <twinkle>
		 write_status |= cmd_write_register(0xf0, 0x02, EEPROM_SLEEP_23_16); //SLEEP TIMEOUT [23:16]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x03, EEPROM_SLEEP_31_24); //SLEEP TIMEOUT [31:24]
		_delay_ms(8000);
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
    2158:	8a e4       	ldi	r24, 0x4A	; 74
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2160:	48 2f       	mov	r20, r24
    2162:	67 e0       	ldi	r22, 0x07	; 7
    2164:	80 ef       	ldi	r24, 0xF0	; 240
    2166:	0c db       	rcall	.-2536   	; 0x1780 <cmd_write_register>
    2168:	c8 2f       	mov	r28, r24
    216a:	2f ef       	ldi	r18, 0xFF	; 255
    216c:	89 e6       	ldi	r24, 0x69	; 105
    216e:	98 e1       	ldi	r25, 0x18	; 24
    2170:	21 50       	subi	r18, 0x01	; 1
    2172:	80 40       	sbci	r24, 0x00	; 0
    2174:	90 40       	sbci	r25, 0x00	; 0
    2176:	e1 f7       	brne	.-8      	; 0x2170 <write_mtch_settings+0x912>
    2178:	00 c0       	rjmp	.+0      	; 0x217a <write_mtch_settings+0x91c>
    217a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
    217c:	8b e4       	ldi	r24, 0x4B	; 75
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2184:	48 2f       	mov	r20, r24
    2186:	69 e0       	ldi	r22, 0x09	; 9
    2188:	80 ef       	ldi	r24, 0xF0	; 240
    218a:	fa da       	rcall	.-2572   	; 0x1780 <cmd_write_register>
    218c:	c8 2b       	or	r28, r24
    218e:	2f ef       	ldi	r18, 0xFF	; 255
    2190:	89 e6       	ldi	r24, 0x69	; 105
    2192:	98 e1       	ldi	r25, 0x18	; 24
    2194:	21 50       	subi	r18, 0x01	; 1
    2196:	80 40       	sbci	r24, 0x00	; 0
    2198:	90 40       	sbci	r25, 0x00	; 0
    219a:	e1 f7       	brne	.-8      	; 0x2194 <write_mtch_settings+0x936>
    219c:	00 c0       	rjmp	.+0      	; 0x219e <write_mtch_settings+0x940>
    219e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
    21a0:	8c e4       	ldi	r24, 0x4C	; 76
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    21a8:	48 2f       	mov	r20, r24
    21aa:	6a e0       	ldi	r22, 0x0A	; 10
    21ac:	80 ef       	ldi	r24, 0xF0	; 240
    21ae:	e8 da       	rcall	.-2608   	; 0x1780 <cmd_write_register>
    21b0:	c8 2b       	or	r28, r24
    21b2:	2f ef       	ldi	r18, 0xFF	; 255
    21b4:	89 e6       	ldi	r24, 0x69	; 105
    21b6:	98 e1       	ldi	r25, 0x18	; 24
    21b8:	21 50       	subi	r18, 0x01	; 1
    21ba:	80 40       	sbci	r24, 0x00	; 0
    21bc:	90 40       	sbci	r25, 0x00	; 0
    21be:	e1 f7       	brne	.-8      	; 0x21b8 <write_mtch_settings+0x95a>
    21c0:	00 c0       	rjmp	.+0      	; 0x21c2 <write_mtch_settings+0x964>
    21c2:	00 00       	nop
		_delay_ms(8000);
		cmd_write_register(0xf0, 0x08, 0x81); //commandPacketConfig
		_delay_ms(8000);
		*/
				
		write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
    21c4:	83 e3       	ldi	r24, 0x33	; 51
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    21cc:	48 2f       	mov	r20, r24
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	80 e3       	ldi	r24, 0x30	; 48
    21d2:	d6 da       	rcall	.-2644   	; 0x1780 <cmd_write_register>
    21d4:	d8 2f       	mov	r29, r24
    21d6:	2f ef       	ldi	r18, 0xFF	; 255
    21d8:	89 e6       	ldi	r24, 0x69	; 105
    21da:	98 e1       	ldi	r25, 0x18	; 24
    21dc:	21 50       	subi	r18, 0x01	; 1
    21de:	80 40       	sbci	r24, 0x00	; 0
    21e0:	90 40       	sbci	r25, 0x00	; 0
    21e2:	e1 f7       	brne	.-8      	; 0x21dc <write_mtch_settings+0x97e>
    21e4:	00 c0       	rjmp	.+0      	; 0x21e6 <write_mtch_settings+0x988>
    21e6:	00 00       	nop
		_delay_ms(8000);
		
		cmd_mtch6301(0x17);
    21e8:	87 e1       	ldi	r24, 0x17	; 23
    21ea:	05 db       	rcall	.-2550   	; 0x17f6 <cmd_mtch6301>
    21ec:	2f ef       	ldi	r18, 0xFF	; 255
    21ee:	83 ed       	ldi	r24, 0xD3	; 211
    21f0:	90 e3       	ldi	r25, 0x30	; 48
    21f2:	21 50       	subi	r18, 0x01	; 1
    21f4:	80 40       	sbci	r24, 0x00	; 0
    21f6:	90 40       	sbci	r25, 0x00	; 0
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <write_mtch_settings+0x994>
    21fa:	00 c0       	rjmp	.+0      	; 0x21fc <write_mtch_settings+0x99e>
    21fc:	00 00       	nop
		_delay_ms(8000);
		cmd_write_register(0xf0, 0x08, 0x81); //commandPacketConfig
		_delay_ms(8000);
		*/
				
		write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
    21fe:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, STATUS_OK != write_status);
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	09 f4       	brne	.+2      	; 0x2206 <write_mtch_settings+0x9a8>
    2204:	60 e0       	ldi	r22, 0x00	; 0
    2206:	84 e5       	ldi	r24, 0x54	; 84
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	cmd_write_register(0x40, 0x07, 0x02); //filterCoeff
	_delay_ms(8000);
	*/
	
	//Restore touch functionality and save to NVRAM
	cmd_mtch6301(0x00);
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	f2 da       	rcall	.-2588   	; 0x17f6 <cmd_mtch6301>
    2212:	2f ef       	ldi	r18, 0xFF	; 255
    2214:	83 ed       	ldi	r24, 0xD3	; 211
    2216:	90 e3       	ldi	r25, 0x30	; 48
    2218:	21 50       	subi	r18, 0x01	; 1
    221a:	80 40       	sbci	r24, 0x00	; 0
    221c:	90 40       	sbci	r25, 0x00	; 0
    221e:	e1 f7       	brne	.-8      	; 0x2218 <write_mtch_settings+0x9ba>
    2220:	00 c0       	rjmp	.+0      	; 0x2222 <write_mtch_settings+0x9c4>
    2222:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x17);
    2224:	87 e1       	ldi	r24, 0x17	; 23
    2226:	e7 da       	rcall	.-2610   	; 0x17f6 <cmd_mtch6301>
    2228:	2f ef       	ldi	r18, 0xFF	; 255
    222a:	83 ed       	ldi	r24, 0xD3	; 211
    222c:	90 e3       	ldi	r25, 0x30	; 48
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	80 40       	sbci	r24, 0x00	; 0
    2232:	90 40       	sbci	r25, 0x00	; 0
    2234:	e1 f7       	brne	.-8      	; 0x222e <write_mtch_settings+0x9d0>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <write_mtch_settings+0x9da>
    2238:	00 00       	nop
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
		EEPROM_GENERAL_UPDATE_BOOL	|
    223a:	8d e4       	ldi	r24, 0x4D	; 77
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    2242:	c8 2f       	mov	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
    2244:	8d e4       	ldi	r24, 0x4D	; 77
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    224c:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
    224e:	8e e4       	ldi	r24, 0x4E	; 78
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2256:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
    2258:	8f e4       	ldi	r24, 0x4F	; 79
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2260:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
    2262:	80 e5       	ldi	r24, 0x50	; 80
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    226a:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
    226c:	81 e5       	ldi	r24, 0x51	; 81
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2274:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
    2276:	82 e5       	ldi	r24, 0x52	; 82
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    227e:	c8 2b       	or	r28, r24
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
    2280:	83 e5       	ldi	r24, 0x53	; 83
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2288:	c8 2b       	or	r28, r24
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
    228a:	84 e5       	ldi	r24, 0x54	; 84
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x00);
	_delay_ms(16000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2292:	6c 2f       	mov	r22, r28
    2294:	68 2b       	or	r22, r24
    2296:	85 e5       	ldi	r24, 0x55	; 85
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
	));
	
	if (EEPROM_MTCH_UPDATE_BOOL) {
    229e:	85 e5       	ldi	r24, 0x55	; 85
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <nvm_eeprom_read_byte>
    22a6:	88 23       	and	r24, r24
    22a8:	31 f0       	breq	.+12     	; 0x22b6 <write_mtch_settings+0xa58>
		twinkle(255, 0, 0);
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	8f ef       	ldi	r24, 0xFF	; 255
    22b0:	e4 d4       	rcall	.+2504   	; 0x2c7a <twinkle>
		return false;
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	04 c0       	rjmp	.+8      	; 0x22be <write_mtch_settings+0xa60>
	}
	
	else {
		rainbow();
    22b6:	f7 d4       	rcall	.+2542   	; 0x2ca6 <rainbow>
		return true;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	01 c0       	rjmp	.+2      	; 0x22be <write_mtch_settings+0xa60>
}	

bool write_mtch_settings(void) {
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
		return true;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
	
	else {
		rainbow();
		return true;
	}
}
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
    22c4:	1f 92       	push	r1
    22c6:	0f 92       	push	r0
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	0f 92       	push	r0
    22cc:	11 24       	eor	r1, r1
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	cd b7       	in	r28, 0x3d	; 61
    22f0:	de b7       	in	r29, 0x3e	; 62
    22f2:	61 97       	sbiw	r28, 0x11	; 17
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
    22f8:	80 e2       	ldi	r24, 0x20	; 32
    22fa:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
    22fe:	80 91 34 21 	lds	r24, 0x2134
    2302:	88 23       	and	r24, r24
    2304:	21 f0       	breq	.+8      	; 0x230e <__vector_9+0x4a>
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	09 f4       	brne	.+2      	; 0x230c <__vector_9+0x48>
    230a:	7f c0       	rjmp	.+254    	; 0x240a <__vector_9+0x146>
    230c:	9c c0       	rjmp	.+312    	; 0x2446 <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
    230e:	fe 01       	movw	r30, r28
    2310:	3c 96       	adiw	r30, 0x0c	; 12
    2312:	86 e0       	ldi	r24, 0x06	; 6
    2314:	df 01       	movw	r26, r30
    2316:	1d 92       	st	X+, r1
    2318:	8a 95       	dec	r24
    231a:	e9 f7       	brne	.-6      	; 0x2316 <__vector_9+0x52>
	
	twi_package_t package = {
    231c:	be 01       	movw	r22, r28
    231e:	6f 5f       	subi	r22, 0xFF	; 255
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	8b e0       	ldi	r24, 0x0B	; 11
    2324:	db 01       	movw	r26, r22
    2326:	1d 92       	st	X+, r1
    2328:	8a 95       	dec	r24
    232a:	e9 f7       	brne	.-6      	; 0x2326 <__vector_9+0x62>
    232c:	85 e2       	ldi	r24, 0x25	; 37
    232e:	89 83       	std	Y+1, r24	; 0x01
    2330:	ef 83       	std	Y+7, r30	; 0x07
    2332:	f8 87       	std	Y+8, r31	; 0x08
    2334:	86 e0       	ldi	r24, 0x06	; 6
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	89 87       	std	Y+9, r24	; 0x09
    233a:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	80 e8       	ldi	r24, 0x80	; 128
    2340:	94 e0       	ldi	r25, 0x04	; 4
    2342:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	82 fb       	bst	r24, 2
    234a:	00 27       	eor	r16, r16
    234c:	00 f9       	bld	r16, 0
    234e:	10 e0       	ldi	r17, 0x00	; 0
    2350:	00 93 77 2a 	sts	0x2A77, r16
	
	if (m_touch_pkg->tch == 0)
    2354:	01 2b       	or	r16, r17
    2356:	09 f4       	brne	.+2      	; 0x235a <__vector_9+0x96>
    2358:	76 c0       	rjmp	.+236    	; 0x2446 <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    235a:	a6 e7       	ldi	r26, 0x76	; 118
    235c:	ba e2       	ldi	r27, 0x2A	; 42
    235e:	88 77       	andi	r24, 0x78	; 120
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	95 95       	asr	r25
    2364:	87 95       	ror	r24
    2366:	95 95       	asr	r25
    2368:	87 95       	ror	r24
    236a:	95 95       	asr	r25
    236c:	87 95       	ror	r24
    236e:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    2370:	8e 85       	ldd	r24, Y+14	; 0x0e
    2372:	e8 2f       	mov	r30, r24
    2374:	ef 77       	andi	r30, 0x7F	; 127
    2376:	17 96       	adiw	r26, 0x07	; 7
    2378:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    237a:	8e 2f       	mov	r24, r30
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	fc 01       	movw	r30, r24
    2380:	70 97       	sbiw	r30, 0x10	; 16
    2382:	e3 35       	cpi	r30, 0x53	; 83
    2384:	f1 05       	cpc	r31, r1
    2386:	d8 f5       	brcc	.+118    	; 0x23fe <__vector_9+0x13a>
    2388:	ea 5a       	subi	r30, 0xAA	; 170
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    2390:	80 ea       	ldi	r24, 0xA0	; 160
    2392:	80 93 29 21 	sts	0x2129, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	35 c0       	rjmp	.+106    	; 0x2404 <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    239a:	81 ea       	ldi	r24, 0xA1	; 161
    239c:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	30 c0       	rjmp	.+96     	; 0x2404 <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    23a4:	82 ea       	ldi	r24, 0xA2	; 162
    23a6:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	2b c0       	rjmp	.+86     	; 0x2404 <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    23ae:	83 ea       	ldi	r24, 0xA3	; 163
    23b0:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    23b4:	84 e0       	ldi	r24, 0x04	; 4
    23b6:	26 c0       	rjmp	.+76     	; 0x2404 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    23b8:	83 ea       	ldi	r24, 0xA3	; 163
    23ba:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    23be:	84 e0       	ldi	r24, 0x04	; 4
    23c0:	21 c0       	rjmp	.+66     	; 0x2404 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    23c2:	84 ea       	ldi	r24, 0xA4	; 164
    23c4:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    23c8:	85 e0       	ldi	r24, 0x05	; 5
    23ca:	1c c0       	rjmp	.+56     	; 0x2404 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    23cc:	84 ea       	ldi	r24, 0xA4	; 164
    23ce:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    23d2:	85 e0       	ldi	r24, 0x05	; 5
    23d4:	17 c0       	rjmp	.+46     	; 0x2404 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    23d6:	85 ea       	ldi	r24, 0xA5	; 165
    23d8:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    23dc:	86 e0       	ldi	r24, 0x06	; 6
    23de:	12 c0       	rjmp	.+36     	; 0x2404 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    23e0:	85 ea       	ldi	r24, 0xA5	; 165
    23e2:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    23e6:	86 e0       	ldi	r24, 0x06	; 6
    23e8:	0d c0       	rjmp	.+26     	; 0x2404 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    23ea:	86 ea       	ldi	r24, 0xA6	; 166
    23ec:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    23f0:	87 e0       	ldi	r24, 0x07	; 7
    23f2:	08 c0       	rjmp	.+16     	; 0x2404 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    23f4:	86 ea       	ldi	r24, 0xA6	; 166
    23f6:	80 93 29 21 	sts	0x2129, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    23fa:	87 e0       	ldi	r24, 0x07	; 7
    23fc:	03 c0       	rjmp	.+6      	; 0x2404 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    23fe:	10 92 29 21 	sts	0x2129, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    2402:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    2404:	80 93 33 21 	sts	0x2133, r24
    2408:	1e c0       	rjmp	.+60     	; 0x2446 <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    240a:	be 01       	movw	r22, r28
    240c:	6f 5f       	subi	r22, 0xFF	; 255
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8b e0       	ldi	r24, 0x0B	; 11
    2412:	fb 01       	movw	r30, r22
    2414:	11 92       	st	Z+, r1
    2416:	8a 95       	dec	r24
    2418:	e9 f7       	brne	.-6      	; 0x2414 <__vector_9+0x150>
    241a:	85 e2       	ldi	r24, 0x25	; 37
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	0a e2       	ldi	r16, 0x2A	; 42
    2420:	11 e2       	ldi	r17, 0x21	; 33
    2422:	0f 83       	std	Y+7, r16	; 0x07
    2424:	18 87       	std	Y+8, r17	; 0x08
    2426:	89 e0       	ldi	r24, 0x09	; 9
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	89 87       	std	Y+9, r24	; 0x09
    242c:	9a 87       	std	Y+10, r25	; 0x0a
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	80 e8       	ldi	r24, 0x80	; 128
    2432:	94 e0       	ldi	r25, 0x04	; 4
    2434:	0e 94 6f 22 	call	0x44de	; 0x44de <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    2438:	10 92 34 21 	sts	0x2134, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    243c:	d8 01       	movw	r26, r16
    243e:	13 96       	adiw	r26, 0x03	; 3
    2440:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    2442:	80 93 d5 20 	sts	0x20D5, r24
			break;
		default:
			return;
	}
    2446:	61 96       	adiw	r28, 0x11	; 17
    2448:	cd bf       	out	0x3d, r28	; 61
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	df 91       	pop	r29
    244e:	cf 91       	pop	r28
    2450:	ff 91       	pop	r31
    2452:	ef 91       	pop	r30
    2454:	bf 91       	pop	r27
    2456:	af 91       	pop	r26
    2458:	9f 91       	pop	r25
    245a:	8f 91       	pop	r24
    245c:	7f 91       	pop	r23
    245e:	6f 91       	pop	r22
    2460:	5f 91       	pop	r21
    2462:	4f 91       	pop	r20
    2464:	3f 91       	pop	r19
    2466:	2f 91       	pop	r18
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	0f 90       	pop	r0
    2472:	1f 90       	pop	r1
    2474:	18 95       	reti

00002476 <timer4_overflow_interrupt_callback>:
 * \note  OVFIF is cleared
 */
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
    2476:	e0 e0       	ldi	r30, 0x00	; 0
    2478:	f8 e0       	ldi	r31, 0x08	; 8
    247a:	84 85       	ldd	r24, Z+12	; 0x0c
    247c:	81 60       	ori	r24, 0x01	; 1
    247e:	84 87       	std	Z+12, r24	; 0x0c

static inline void timer4_overflow_interrupt_callback(void)
{
	tc45_clear_overflow(&TCC4);

	flag_timer4 = true;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	80 93 7f 2a 	sts	0x2A7F, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2486:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2488:	f8 94       	cli
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    248a:	e0 e0       	ldi	r30, 0x00	; 0
    248c:	f2 e0       	ldi	r31, 0x02	; 2
    248e:	80 81       	ld	r24, Z
    2490:	84 60       	ori	r24, 0x04	; 4
    2492:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2494:	9f bf       	out	0x3f, r25	; 63
    2496:	08 95       	ret

00002498 <timerD5_overflow_interrupt_callback>:
     tempPulseDisabled=1;
}

static inline timerD5_overflow_interrupt_callback(void)
{
	flag_timerd5 = true;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	80 93 80 2a 	sts	0x2A80, r24
	//wdt_reset(); // kick the watchdog - DEPRECATED
	
	if(disablePulseCount>=1)
    249e:	80 91 d6 20 	lds	r24, 0x20D6
    24a2:	90 91 d7 20 	lds	r25, 0x20D7
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	49 f0       	breq	.+18     	; 0x24bc <timerD5_overflow_interrupt_callback+0x24>
	{
	    disablePulseCount--;
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	80 93 d6 20 	sts	0x20D6, r24
    24b0:	90 93 d7 20 	sts	0x20D7, r25
	    if(disablePulseCount==0)
    24b4:	89 2b       	or	r24, r25
    24b6:	11 f4       	brne	.+4      	; 0x24bc <timerD5_overflow_interrupt_callback+0x24>
	        tempPulseDisabled=0;
    24b8:	10 92 35 21 	sts	0x2135, r1
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTFLAGS |= TC5_OVFIF_bm;
    24bc:	e0 e4       	ldi	r30, 0x40	; 64
    24be:	f9 e0       	ldi	r31, 0x09	; 9
    24c0:	84 85       	ldd	r24, Z+12	; 0x0c
    24c2:	81 60       	ori	r24, 0x01	; 1
    24c4:	84 87       	std	Z+12, r24	; 0x0c
	}
	tc45_clear_overflow(&TCD5);
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}
    24c6:	08 95       	ret

000024c8 <timer5_overflow_interrupt_callback>:
	adc_start_conversion(&ADCA, ADC_CH0);
}

static inline void timer5_overflow_interrupt_callback(void)
{
	flag_timer5 = true;/*
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	80 93 7e 2a 	sts	0x2A7E, r24
    24ce:	e0 e4       	ldi	r30, 0x40	; 64
    24d0:	f8 e0       	ldi	r31, 0x08	; 8
    24d2:	84 85       	ldd	r24, Z+12	; 0x0c
    24d4:	81 60       	ori	r24, 0x01	; 1
    24d6:	84 87       	std	Z+12, r24	; 0x0c
	if (flag_initcharge) {
		flag_initcharge = false;
		init_charge();
	}*/
	tc45_clear_overflow(&TCC5);
	update_led_charge();
    24d8:	5f c4       	rjmp	.+2238   	; 0x2d98 <update_led_charge>
    24da:	08 95       	ret

000024dc <resetDisablePulseCount>:

static U16 disablePulseCount=200;

void resetDisablePulseCount(void)
{
     disablePulseCount=200;
    24dc:	88 ec       	ldi	r24, 0xC8	; 200
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	80 93 d6 20 	sts	0x20D6, r24
    24e4:	90 93 d7 20 	sts	0x20D7, r25
     tempPulseDisabled=1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	80 93 35 21 	sts	0x2135, r24
    24ee:	08 95       	ret

000024f0 <init_timer4>:
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}

void init_timer4(void)
{
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
	/*
	 * Configure TCC4 to generate 50ms overflow interrupt
	 * using 4MHz (0.25us) resolution clock (20us = 80 * 0.25us)
	 */
	/* Unmask clock for TCC4 */
	tc45_enable(&TCC4);
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	98 e0       	ldi	r25, 0x08	; 8
    24f8:	0e 94 12 21 	call	0x4224	; 0x4224 <tc45_enable>
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    24fc:	c0 e0       	ldi	r28, 0x00	; 0
    24fe:	d8 e0       	ldi	r29, 0x08	; 8
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	8c 7f       	andi	r24, 0xFC	; 252
    2504:	8e 83       	std	Y+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    2506:	8e 81       	ldd	r24, Y+6	; 0x06
    2508:	81 60       	ori	r24, 0x01	; 1
    250a:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	88 7f       	andi	r24, 0xF8	; 248
    2510:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC4,	timer4_overflow_interrupt_callback);
    2512:	6b e3       	ldi	r22, 0x3B	; 59
    2514:	72 e1       	ldi	r23, 0x12	; 18
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	98 e0       	ldi	r25, 0x08	; 8
    251a:	0e 94 76 21 	call	0x42ec	; 0x42ec <tc45_set_overflow_interrupt_callback>
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    251e:	80 e5       	ldi	r24, 0x50	; 80
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	8e a3       	std	Y+38, r24	; 0x26
    2524:	9f a3       	std	Y+39, r25	; 0x27
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    2526:	88 81       	ld	r24, Y
    2528:	80 7f       	andi	r24, 0xF0	; 240
    252a:	84 60       	ori	r24, 0x04	; 4
    252c:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    252e:	e0 ea       	ldi	r30, 0xA0	; 160
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	81 60       	ori	r24, 0x01	; 1
    2536:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCC4, 80);
	tc45_set_resolution(&TCC4, 4000000);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    2538:	78 94       	sei
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <init_timer5>:

void init_timer5(void)
{
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    2544:	c0 e4       	ldi	r28, 0x40	; 64
    2546:	d8 e0       	ldi	r29, 0x08	; 8
    2548:	8e 81       	ldd	r24, Y+6	; 0x06
    254a:	8c 7f       	andi	r24, 0xFC	; 252
    254c:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    254e:	8e 81       	ldd	r24, Y+6	; 0x06
    2550:	82 60       	ori	r24, 0x02	; 2
    2552:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	88 7f       	andi	r24, 0xF8	; 248
    2558:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC5, TC45_INT_LVL_MED);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC5,	timer5_overflow_interrupt_callback);
    255a:	64 e6       	ldi	r22, 0x64	; 100
    255c:	72 e1       	ldi	r23, 0x12	; 18
    255e:	80 e4       	ldi	r24, 0x40	; 64
    2560:	98 e0       	ldi	r25, 0x08	; 8
    2562:	0e 94 76 21 	call	0x42ec	; 0x42ec <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    2566:	84 e2       	ldi	r24, 0x24	; 36
    2568:	94 ef       	ldi	r25, 0xF4	; 244
    256a:	8e a3       	std	Y+38, r24	; 0x26
    256c:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    256e:	88 81       	ld	r24, Y
    2570:	80 7f       	andi	r24, 0xF0	; 240
    2572:	86 60       	ori	r24, 0x06	; 6
    2574:	88 83       	st	Y, r24
    2576:	e0 ea       	ldi	r30, 0xA0	; 160
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	82 60       	ori	r24, 0x02	; 2
    257e:	82 83       	std	Z+2, r24	; 0x02
//	tc45_set_resolution(&TCC5, 500000);
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
    2580:	78 94       	sei
}
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	08 95       	ret

00002588 <init_timerd5>:

void init_timerd5(void)
{
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
	tc45_enable(&TCD5);
    258c:	80 e4       	ldi	r24, 0x40	; 64
    258e:	99 e0       	ldi	r25, 0x09	; 9
    2590:	0e 94 12 21 	call	0x4224	; 0x4224 <tc45_enable>
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    2594:	c0 e4       	ldi	r28, 0x40	; 64
    2596:	d9 e0       	ldi	r29, 0x09	; 9
    2598:	8e 81       	ldd	r24, Y+6	; 0x06
    259a:	8c 7f       	andi	r24, 0xFC	; 252
    259c:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	81 60       	ori	r24, 0x01	; 1
    25a2:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	88 7f       	andi	r24, 0xF8	; 248
    25a8:	89 83       	std	Y+1, r24	; 0x01
	tc45_set_overflow_interrupt_level(&TCD5, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCD5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCD5,	timerD5_overflow_interrupt_callback);
    25aa:	6c e4       	ldi	r22, 0x4C	; 76
    25ac:	72 e1       	ldi	r23, 0x12	; 18
    25ae:	80 e4       	ldi	r24, 0x40	; 64
    25b0:	99 e0       	ldi	r25, 0x09	; 9
    25b2:	0e 94 76 21 	call	0x42ec	; 0x42ec <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    25b6:	82 ea       	ldi	r24, 0xA2	; 162
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	8e a3       	std	Y+38, r24	; 0x26
    25bc:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    25be:	88 81       	ld	r24, Y
    25c0:	80 7f       	andi	r24, 0xF0	; 240
    25c2:	87 60       	ori	r24, 0x07	; 7
    25c4:	88 83       	st	Y, r24
    25c6:	e0 ea       	ldi	r30, 0xA0	; 160
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	81 60       	ori	r24, 0x01	; 1
    25ce:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCD5, 162);//EVERY 5ms
	tc45_set_resolution(&TCD5, 31250);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    25d0:	78 94       	sei
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <init_uart>:
    if(*p+num<=UART_BUFF_SIZE-1)
  	*p+=num;
    else
    {
  	*p+=num;
	*p-=UART_BUFF_SIZE;
    25d8:	43 e0       	ldi	r20, 0x03	; 3
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	68 e0       	ldi	r22, 0x08	; 8
    25de:	80 e6       	ldi	r24, 0x60	; 96
    25e0:	96 e0       	ldi	r25, 0x06	; 6
    25e2:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	64 e0       	ldi	r22, 0x04	; 4
    25ec:	80 e6       	ldi	r24, 0x60	; 96
    25ee:	96 e0       	ldi	r25, 0x06	; 6
    25f0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <ioport_configure_port_pin>
    25f4:	68 ed       	ldi	r22, 0xD8	; 216
    25f6:	70 e2       	ldi	r23, 0x20	; 32
    25f8:	80 ec       	ldi	r24, 0xC0	; 192
    25fa:	99 e0       	ldi	r25, 0x09	; 9
    25fc:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <usart_init_rs232>
    2600:	e0 ec       	ldi	r30, 0xC0	; 192
    2602:	f9 e0       	ldi	r31, 0x09	; 9
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	80 63       	ori	r24, 0x30	; 48
    2608:	82 83       	std	Z+2, r24	; 0x02
    260a:	e0 ea       	ldi	r30, 0xA0	; 160
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	84 60       	ori	r24, 0x04	; 4
    2612:	82 83       	std	Z+2, r24	; 0x02
    2614:	78 94       	sei
    2616:	10 92 01 2b 	sts	0x2B01, r1
    261a:	10 92 02 2b 	sts	0x2B02, r1
    261e:	08 95       	ret

00002620 <uart_send_status>:
    2620:	68 2f       	mov	r22, r24
    2622:	80 ec       	ldi	r24, 0xC0	; 192
    2624:	98 e0       	ldi	r25, 0x08	; 8
    2626:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <usart_putchar>
    262a:	08 95       	ret

0000262c <led_set_from_colors>:
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	af ed       	ldi	r26, 0xDF	; 223
    2632:	b0 e2       	ldi	r27, 0x20	; 32
    2634:	8c 91       	ld	r24, X
    2636:	eb e1       	ldi	r30, 0x1B	; 27
    2638:	fb e2       	ldi	r31, 0x2B	; 43
    263a:	80 83       	st	Z, r24
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	8c 91       	ld	r24, X
    2640:	11 97       	sbiw	r26, 0x01	; 1
    2642:	81 83       	std	Z+1, r24	; 0x01
    2644:	12 96       	adiw	r26, 0x02	; 2
    2646:	8c 91       	ld	r24, X
    2648:	12 97       	sbiw	r26, 0x02	; 2
    264a:	82 83       	std	Z+2, r24	; 0x02
    264c:	8c 91       	ld	r24, X
    264e:	81 87       	std	Z+9, r24	; 0x09
    2650:	11 96       	adiw	r26, 0x01	; 1
    2652:	8c 91       	ld	r24, X
    2654:	11 97       	sbiw	r26, 0x01	; 1
    2656:	82 87       	std	Z+10, r24	; 0x0a
    2658:	12 96       	adiw	r26, 0x02	; 2
    265a:	8c 91       	ld	r24, X
    265c:	12 97       	sbiw	r26, 0x02	; 2
    265e:	83 87       	std	Z+11, r24	; 0x0b
    2660:	13 96       	adiw	r26, 0x03	; 3
    2662:	8c 91       	ld	r24, X
    2664:	13 97       	sbiw	r26, 0x03	; 3
    2666:	83 83       	std	Z+3, r24	; 0x03
    2668:	14 96       	adiw	r26, 0x04	; 4
    266a:	8c 91       	ld	r24, X
    266c:	14 97       	sbiw	r26, 0x04	; 4
    266e:	84 83       	std	Z+4, r24	; 0x04
    2670:	15 96       	adiw	r26, 0x05	; 5
    2672:	8c 91       	ld	r24, X
    2674:	15 97       	sbiw	r26, 0x05	; 5
    2676:	85 83       	std	Z+5, r24	; 0x05
    2678:	13 96       	adiw	r26, 0x03	; 3
    267a:	8c 91       	ld	r24, X
    267c:	13 97       	sbiw	r26, 0x03	; 3
    267e:	84 87       	std	Z+12, r24	; 0x0c
    2680:	14 96       	adiw	r26, 0x04	; 4
    2682:	8c 91       	ld	r24, X
    2684:	14 97       	sbiw	r26, 0x04	; 4
    2686:	85 87       	std	Z+13, r24	; 0x0d
    2688:	15 96       	adiw	r26, 0x05	; 5
    268a:	8c 91       	ld	r24, X
    268c:	15 97       	sbiw	r26, 0x05	; 5
    268e:	86 87       	std	Z+14, r24	; 0x0e
    2690:	16 96       	adiw	r26, 0x06	; 6
    2692:	8c 91       	ld	r24, X
    2694:	16 97       	sbiw	r26, 0x06	; 6
    2696:	86 83       	std	Z+6, r24	; 0x06
    2698:	17 96       	adiw	r26, 0x07	; 7
    269a:	8c 91       	ld	r24, X
    269c:	17 97       	sbiw	r26, 0x07	; 7
    269e:	87 83       	std	Z+7, r24	; 0x07
    26a0:	18 96       	adiw	r26, 0x08	; 8
    26a2:	8c 91       	ld	r24, X
    26a4:	18 97       	sbiw	r26, 0x08	; 8
    26a6:	80 87       	std	Z+8, r24	; 0x08
    26a8:	16 96       	adiw	r26, 0x06	; 6
    26aa:	8c 91       	ld	r24, X
    26ac:	16 97       	sbiw	r26, 0x06	; 6
    26ae:	87 87       	std	Z+15, r24	; 0x0f
    26b0:	17 96       	adiw	r26, 0x07	; 7
    26b2:	8c 91       	ld	r24, X
    26b4:	17 97       	sbiw	r26, 0x07	; 7
    26b6:	80 8b       	std	Z+16, r24	; 0x10
    26b8:	18 96       	adiw	r26, 0x08	; 8
    26ba:	8c 91       	ld	r24, X
    26bc:	81 8b       	std	Z+17, r24	; 0x11
    26be:	c0 e0       	ldi	r28, 0x00	; 0
    26c0:	d0 e0       	ldi	r29, 0x00	; 0
    26c2:	fe 01       	movw	r30, r28
    26c4:	e1 52       	subi	r30, 0x21	; 33
    26c6:	ff 4d       	sbci	r31, 0xDF	; 223
    26c8:	60 81       	ld	r22, Z
    26ca:	21 96       	adiw	r28, 0x01	; 1
    26cc:	ce 01       	movw	r24, r28
    26ce:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    26d2:	c9 30       	cpi	r28, 0x09	; 9
    26d4:	d1 05       	cpc	r29, r1
    26d6:	a9 f7       	brne	.-22     	; 0x26c2 <led_set_from_colors+0x96>
    26d8:	cb d2       	rcall	.+1430   	; 0x2c70 <ischarging>
    26da:	81 11       	cpse	r24, r1
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <led_set_from_colors+0xba>
    26de:	66 e0       	ldi	r22, 0x06	; 6
    26e0:	8b e1       	ldi	r24, 0x1B	; 27
    26e2:	9b e2       	ldi	r25, 0x2B	; 43
    26e4:	91 d7       	rcall	.+3874   	; 0x3608 <set_flash_ws2812>
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <get_pulse_state>:
    26ec:	80 91 38 21 	lds	r24, 0x2138
    26f0:	08 95       	ret

000026f2 <get_and_clear_pulse_state_changed>:
    26f2:	80 91 37 21 	lds	r24, 0x2137
    26f6:	10 92 37 21 	sts	0x2137, r1
    26fa:	08 95       	ret

000026fc <trigger_pulse_state_changed>:
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	80 93 37 21 	sts	0x2137, r24
    2702:	08 95       	ret

00002704 <__vector_23>:
    2704:	1f 92       	push	r1
    2706:	0f 92       	push	r0
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	0f 92       	push	r0
    270c:	11 24       	eor	r1, r1
    270e:	2f 93       	push	r18
    2710:	3f 93       	push	r19
    2712:	4f 93       	push	r20
    2714:	5f 93       	push	r21
    2716:	6f 93       	push	r22
    2718:	7f 93       	push	r23
    271a:	8f 93       	push	r24
    271c:	9f 93       	push	r25
    271e:	af 93       	push	r26
    2720:	bf 93       	push	r27
    2722:	ef 93       	push	r30
    2724:	ff 93       	push	r31
    2726:	80 ec       	ldi	r24, 0xC0	; 192
    2728:	98 e0       	ldi	r25, 0x08	; 8
    272a:	0e 94 d0 22 	call	0x45a0	; 0x45a0 <usart_getchar>
    272e:	90 91 3a 21 	lds	r25, 0x213A
    2732:	91 11       	cpse	r25, r1
    2734:	0e c0       	rjmp	.+28     	; 0x2752 <__vector_23+0x4e>
    2736:	8f 30       	cpi	r24, 0x0F	; 15
    2738:	49 f4       	brne	.+18     	; 0x274c <__vector_23+0x48>
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	80 93 3a 21 	sts	0x213A, r24
    2740:	96 e0       	ldi	r25, 0x06	; 6
    2742:	90 93 f5 20 	sts	0x20F5, r25
    2746:	80 93 39 21 	sts	0x2139, r24
    274a:	38 c0       	rjmp	.+112    	; 0x27bc <__vector_23+0xb8>
    274c:	10 92 3a 21 	sts	0x213A, r1
    2750:	35 c0       	rjmp	.+106    	; 0x27bc <__vector_23+0xb8>
    2752:	29 2f       	mov	r18, r25
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	60 91 f5 20 	lds	r22, 0x20F5
    275a:	46 2f       	mov	r20, r22
    275c:	50 e0       	ldi	r21, 0x00	; 0
    275e:	4f 5f       	subi	r20, 0xFF	; 255
    2760:	5f 4f       	sbci	r21, 0xFF	; 255
    2762:	24 17       	cp	r18, r20
    2764:	35 07       	cpc	r19, r21
    2766:	f1 f4       	brne	.+60     	; 0x27a4 <__vector_23+0xa0>
    2768:	10 92 3a 21 	sts	0x213A, r1
    276c:	80 3f       	cpi	r24, 0xF0	; 240
    276e:	a9 f4       	brne	.+42     	; 0x279a <__vector_23+0x96>
    2770:	20 91 03 2b 	lds	r18, 0x2B03
    2774:	22 23       	and	r18, r18
    2776:	61 f0       	breq	.+24     	; 0x2790 <__vector_23+0x8c>
    2778:	43 e0       	ldi	r20, 0x03	; 3
    277a:	5b e2       	ldi	r21, 0x2B	; 43
    277c:	fa 01       	movw	r30, r20
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	91 91       	ld	r25, Z+
    2782:	89 0f       	add	r24, r25
    2784:	9e 2f       	mov	r25, r30
    2786:	94 1b       	sub	r25, r20
    2788:	92 17       	cp	r25, r18
    278a:	d0 f3       	brcs	.-12     	; 0x2780 <__vector_23+0x7c>
    278c:	81 11       	cpse	r24, r1
    278e:	05 c0       	rjmp	.+10     	; 0x279a <__vector_23+0x96>
    2790:	10 92 39 21 	sts	0x2139, r1
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	44 df       	rcall	.-376    	; 0x2620 <uart_send_status>
    2798:	11 c0       	rjmp	.+34     	; 0x27bc <__vector_23+0xb8>
    279a:	10 92 39 21 	sts	0x2139, r1
    279e:	8c e0       	ldi	r24, 0x0C	; 12
    27a0:	3f df       	rcall	.-386    	; 0x2620 <uart_send_status>
    27a2:	0c c0       	rjmp	.+24     	; 0x27bc <__vector_23+0xb8>
    27a4:	f9 01       	movw	r30, r18
    27a6:	ee 5f       	subi	r30, 0xFE	; 254
    27a8:	f4 4d       	sbci	r31, 0xD4	; 212
    27aa:	80 83       	st	Z, r24
    27ac:	9f 5f       	subi	r25, 0xFF	; 255
    27ae:	90 93 3a 21 	sts	0x213A, r25
    27b2:	80 91 03 2b 	lds	r24, 0x2B03
    27b6:	68 13       	cpse	r22, r24
    27b8:	80 93 f5 20 	sts	0x20F5, r24
    27bc:	ff 91       	pop	r31
    27be:	ef 91       	pop	r30
    27c0:	bf 91       	pop	r27
    27c2:	af 91       	pop	r26
    27c4:	9f 91       	pop	r25
    27c6:	8f 91       	pop	r24
    27c8:	7f 91       	pop	r23
    27ca:	6f 91       	pop	r22
    27cc:	5f 91       	pop	r21
    27ce:	4f 91       	pop	r20
    27d0:	3f 91       	pop	r19
    27d2:	2f 91       	pop	r18
    27d4:	0f 90       	pop	r0
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	0f 90       	pop	r0
    27da:	1f 90       	pop	r1
    27dc:	18 95       	reti

000027de <uartCmdValid>:
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	fc 01       	movw	r30, r24
    27e2:	31 97       	sbiw	r30, 0x01	; 1
    27e4:	e0 37       	cpi	r30, 0x70	; 112
    27e6:	f1 05       	cpc	r31, r1
    27e8:	30 f4       	brcc	.+12     	; 0x27f6 <uartCmdValid+0x18>
    27ea:	e7 55       	subi	r30, 0x57	; 87
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__tablejump2__>
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	08 95       	ret
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	08 95       	ret

000027fa <uart_buffPosInc>:
    27fa:	fc 01       	movw	r30, r24
    27fc:	90 81       	ld	r25, Z
    27fe:	9f 37       	cpi	r25, 0x7F	; 127
    2800:	18 f4       	brcc	.+6      	; 0x2808 <uart_buffPosInc+0xe>
    2802:	9f 5f       	subi	r25, 0xFF	; 255
    2804:	90 83       	st	Z, r25
    2806:	08 95       	ret
    2808:	10 82       	st	Z, r1
    280a:	08 95       	ret

0000280c <uart_buffGetData>:
    }
}

unsigned char uart_buffGetData(unsigned char p,unsigned char shift)
{
    if(p+shift<=UART_BUFF_SIZE-1)
    280c:	26 2f       	mov	r18, r22
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	28 0f       	add	r18, r24
    2812:	31 1d       	adc	r19, r1
    2814:	20 38       	cpi	r18, 0x80	; 128
    2816:	31 05       	cpc	r19, r1
    2818:	2c f4       	brge	.+10     	; 0x2824 <uart_buffGetData+0x18>
  	return g_uartBuff.uart_RxBuff[p+shift];
    281a:	f9 01       	movw	r30, r18
    281c:	ef 57       	subi	r30, 0x7F	; 127
    281e:	f5 4d       	sbci	r31, 0xD5	; 213
    2820:	80 81       	ld	r24, Z
    2822:	08 95       	ret
    else
    {
  	p+=shift;
    2824:	68 0f       	add	r22, r24
	return g_uartBuff.uart_RxBuff[p-UART_BUFF_SIZE];
    2826:	e6 2f       	mov	r30, r22
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	ef 5f       	subi	r30, 0xFF	; 255
    282c:	f5 4d       	sbci	r31, 0xD5	; 213
    282e:	80 81       	ld	r24, Z
    }

}
    2830:	08 95       	ret

00002832 <uart_buffDataSize>:


unsigned char uart_buffDataSize(void)
{
    unsigned char len;
    if(g_uartBuff.headp>=g_uartBuff.tailp)
    2832:	80 91 01 2b 	lds	r24, 0x2B01
    2836:	90 91 02 2b 	lds	r25, 0x2B02
    283a:	89 17       	cp	r24, r25
    283c:	10 f0       	brcs	.+4      	; 0x2842 <uart_buffDataSize+0x10>
    {
        len= g_uartBuff.headp-g_uartBuff.tailp;
    283e:	89 1b       	sub	r24, r25
    2840:	08 95       	ret
    2842:	80 58       	subi	r24, 0x80	; 128
    }
    else
    {
        len= g_uartBuff.headp+UART_BUFF_SIZE-g_uartBuff.tailp;
    2844:	89 1b       	sub	r24, r25
    }
    return len;	
}
    2846:	08 95       	ret

00002848 <uart_receivedData>:

//received data packet : cmd+ len + data
unsigned char uart_receivedData(void)
{
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    unsigned char temp;

    //no data received.
    if(g_uartBuff.tailp==g_uartBuff.headp)
    284c:	90 91 02 2b 	lds	r25, 0x2B02
    2850:	80 91 01 2b 	lds	r24, 0x2B01
    2854:	98 17       	cp	r25, r24
    2856:	99 f0       	breq	.+38     	; 0x287e <uart_receivedData+0x36>
        return false;
	
    //sync with packet header and discard any invalid data.
    while(uartCmdValid(g_uartBuff.uart_RxBuff[g_uartBuff.tailp])==0)
    2858:	c2 e0       	ldi	r28, 0x02	; 2
    285a:	db e2       	ldi	r29, 0x2B	; 43
    285c:	02 c0       	rjmp	.+4      	; 0x2862 <uart_receivedData+0x1a>
    {
        uart_buffPosInc(&g_uartBuff.tailp);
    285e:	ce 01       	movw	r24, r28
    2860:	cc df       	rcall	.-104    	; 0x27fa <uart_buffPosInc>
    //no data received.
    if(g_uartBuff.tailp==g_uartBuff.headp)
        return false;
	
    //sync with packet header and discard any invalid data.
    while(uartCmdValid(g_uartBuff.uart_RxBuff[g_uartBuff.tailp])==0)
    2862:	e8 81       	ld	r30, Y
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	ef 57       	subi	r30, 0x7F	; 127
    2868:	f5 4d       	sbci	r31, 0xD5	; 213
    286a:	80 81       	ld	r24, Z
    286c:	b8 df       	rcall	.-144    	; 0x27de <uartCmdValid>
    286e:	88 23       	and	r24, r24
    2870:	b1 f3       	breq	.-20     	; 0x285e <uart_receivedData+0x16>
    {
        uart_buffPosInc(&g_uartBuff.tailp);
    }

    //received enough data?
    temp=uart_buffDataSize();
    2872:	df df       	rcall	.-66     	; 0x2832 <uart_buffDataSize>
   // if(temp > 2)
    if(temp >= 11)	//BT will send 11 bytes each time.	
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	8b 30       	cpi	r24, 0x0B	; 11
    2878:	18 f4       	brcc	.+6      	; 0x2880 <uart_receivedData+0x38>
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <uart_receivedData+0x38>
{
    unsigned char temp;

    //no data received.
    if(g_uartBuff.tailp==g_uartBuff.headp)
        return false;
    287e:	90 e0       	ldi	r25, 0x00	; 0
        //if(temp>=uart_buffGetData(g_uartBuff.tailp,1)+2)
           return true;
    }
	
    return false; 
} 
    2880:	89 2f       	mov	r24, r25
    2882:	df 91       	pop	r29
    2884:	cf 91       	pop	r28
    2886:	08 95       	ret

00002888 <uart_Task>:

//handle the received data.
void uart_Task(void)
{
    2888:	0f 93       	push	r16
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    unsigned char i,temp;
    if(uart_receivedData())
    2890:	db df       	rcall	.-74     	; 0x2848 <uart_receivedData>
    2892:	88 23       	and	r24, r24
    2894:	09 f4       	brne	.+2      	; 0x2898 <uart_Task+0x10>
    2896:	7b c1       	rjmp	.+758    	; 0x2b8e <uart_Task+0x306>
    2898:	c0 e0       	ldi	r28, 0x00	; 0
    289a:	d0 e0       	ldi	r29, 0x00	; 0
    {
        //temp=uart_buffGetData(g_uartBuff.tailp,1)+2;
	  temp=11; //BT will send 11 bytes each time.
	  for(i=0;i<temp;i++)
	  {
            buffer_data[i]=uart_buffGetData(g_uartBuff.tailp,0);
    289c:	02 e0       	ldi	r16, 0x02	; 2
    289e:	1b e2       	ldi	r17, 0x2B	; 43
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 81       	ld	r24, Z
    28a6:	b2 df       	rcall	.-156    	; 0x280c <uart_buffGetData>
    28a8:	fe 01       	movw	r30, r28
    28aa:	e8 51       	subi	r30, 0x18	; 24
    28ac:	ff 4d       	sbci	r31, 0xDF	; 223
    28ae:	80 83       	st	Z, r24
	      uart_buffPosInc(&g_uartBuff.tailp);
    28b0:	c8 01       	movw	r24, r16
    28b2:	a3 df       	rcall	.-186    	; 0x27fa <uart_buffPosInc>
    28b4:	21 96       	adiw	r28, 0x01	; 1
    unsigned char i,temp;
    if(uart_receivedData())
    {
        //temp=uart_buffGetData(g_uartBuff.tailp,1)+2;
	  temp=11; //BT will send 11 bytes each time.
	  for(i=0;i<temp;i++)
    28b6:	cb 30       	cpi	r28, 0x0B	; 11
    28b8:	d1 05       	cpc	r29, r1
    28ba:	91 f7       	brne	.-28     	; 0x28a0 <uart_Task+0x18>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    28bc:	80 91 e8 20 	lds	r24, 0x20E8
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	fc 01       	movw	r30, r24
    28c4:	31 97       	sbiw	r30, 0x01	; 1
    28c6:	e0 37       	cpi	r30, 0x70	; 112
    28c8:	f1 05       	cpc	r31, r1
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <uart_Task+0x46>
    28cc:	60 c1       	rjmp	.+704    	; 0x2b8e <uart_Task+0x306>
    28ce:	e7 5e       	subi	r30, 0xE7	; 231
    28d0:	fe 4f       	sbci	r31, 0xFE	; 254
    28d2:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__tablejump2__>
		case UART_SET_COLOR:
	#ifdef LIMIT_LOOP //only handle correct format	
			if(buffer_data[1]!=UART_COLOR_LEN)
    28d6:	80 91 e9 20 	lds	r24, 0x20E9
    28da:	89 30       	cpi	r24, 0x09	; 9
    28dc:	09 f0       	breq	.+2      	; 0x28e0 <uart_Task+0x58>
    28de:	57 c1       	rjmp	.+686    	; 0x2b8e <uart_Task+0x306>
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
    28e0:	6f ef       	ldi	r22, 0xFF	; 255
    28e2:	83 e4       	ldi	r24, 0x43	; 67
    28e4:	88 d4       	rcall	.+2320   	; 0x31f6 <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    28e6:	a8 ee       	ldi	r26, 0xE8	; 232
    28e8:	b0 e2       	ldi	r27, 0x20	; 32
    28ea:	12 96       	adiw	r26, 0x02	; 2
    28ec:	8c 91       	ld	r24, X
    28ee:	12 97       	sbiw	r26, 0x02	; 2
    28f0:	eb e1       	ldi	r30, 0x1B	; 27
    28f2:	fb e2       	ldi	r31, 0x2B	; 43
    28f4:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    28f6:	13 96       	adiw	r26, 0x03	; 3
    28f8:	8c 91       	ld	r24, X
    28fa:	13 97       	sbiw	r26, 0x03	; 3
    28fc:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    28fe:	14 96       	adiw	r26, 0x04	; 4
    2900:	8c 91       	ld	r24, X
    2902:	14 97       	sbiw	r26, 0x04	; 4
    2904:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    2906:	12 96       	adiw	r26, 0x02	; 2
    2908:	8c 91       	ld	r24, X
    290a:	12 97       	sbiw	r26, 0x02	; 2
    290c:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    290e:	13 96       	adiw	r26, 0x03	; 3
    2910:	8c 91       	ld	r24, X
    2912:	13 97       	sbiw	r26, 0x03	; 3
    2914:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    2916:	14 96       	adiw	r26, 0x04	; 4
    2918:	8c 91       	ld	r24, X
    291a:	14 97       	sbiw	r26, 0x04	; 4
    291c:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    291e:	15 96       	adiw	r26, 0x05	; 5
    2920:	8c 91       	ld	r24, X
    2922:	15 97       	sbiw	r26, 0x05	; 5
    2924:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    2926:	16 96       	adiw	r26, 0x06	; 6
    2928:	8c 91       	ld	r24, X
    292a:	16 97       	sbiw	r26, 0x06	; 6
    292c:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    292e:	17 96       	adiw	r26, 0x07	; 7
    2930:	8c 91       	ld	r24, X
    2932:	17 97       	sbiw	r26, 0x07	; 7
    2934:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    2936:	15 96       	adiw	r26, 0x05	; 5
    2938:	8c 91       	ld	r24, X
    293a:	15 97       	sbiw	r26, 0x05	; 5
    293c:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    293e:	16 96       	adiw	r26, 0x06	; 6
    2940:	8c 91       	ld	r24, X
    2942:	16 97       	sbiw	r26, 0x06	; 6
    2944:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    2946:	17 96       	adiw	r26, 0x07	; 7
    2948:	8c 91       	ld	r24, X
    294a:	17 97       	sbiw	r26, 0x07	; 7
    294c:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    294e:	18 96       	adiw	r26, 0x08	; 8
    2950:	8c 91       	ld	r24, X
    2952:	18 97       	sbiw	r26, 0x08	; 8
    2954:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    2956:	19 96       	adiw	r26, 0x09	; 9
    2958:	8c 91       	ld	r24, X
    295a:	19 97       	sbiw	r26, 0x09	; 9
    295c:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    295e:	1a 96       	adiw	r26, 0x0a	; 10
    2960:	8c 91       	ld	r24, X
    2962:	1a 97       	sbiw	r26, 0x0a	; 10
    2964:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    2966:	18 96       	adiw	r26, 0x08	; 8
    2968:	8c 91       	ld	r24, X
    296a:	18 97       	sbiw	r26, 0x08	; 8
    296c:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    296e:	19 96       	adiw	r26, 0x09	; 9
    2970:	8c 91       	ld	r24, X
    2972:	19 97       	sbiw	r26, 0x09	; 9
    2974:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    2976:	1a 96       	adiw	r26, 0x0a	; 10
    2978:	8c 91       	ld	r24, X
    297a:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    297c:	c0 e0       	ldi	r28, 0x00	; 0
    297e:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    2980:	fe 01       	movw	r30, r28
    2982:	e6 51       	subi	r30, 0x16	; 22
    2984:	ff 4d       	sbci	r31, 0xDF	; 223
    2986:	80 81       	ld	r24, Z
    2988:	fe 01       	movw	r30, r28
    298a:	e1 52       	subi	r30, 0x21	; 33
    298c:	ff 4d       	sbci	r31, 0xDF	; 223
    298e:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    2990:	60 81       	ld	r22, Z
    2992:	21 96       	adiw	r28, 0x01	; 1
    2994:	ce 01       	movw	r24, r28
    2996:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    299a:	c9 30       	cpi	r28, 0x09	; 9
    299c:	d1 05       	cpc	r29, r1
    299e:	81 f7       	brne	.-32     	; 0x2980 <uart_Task+0xf8>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    29a0:	67 d1       	rcall	.+718    	; 0x2c70 <ischarging>
    29a2:	81 11       	cpse	r24, r1
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <uart_Task+0x126>
		set_flash_ws2812(m_led_struct, 6);
    29a6:	66 e0       	ldi	r22, 0x06	; 6
    29a8:	8b e1       	ldi	r24, 0x1B	; 27
    29aa:	9b e2       	ldi	r25, 0x2B	; 43
    29ac:	2d d6       	rcall	.+3162   	; 0x3608 <set_flash_ws2812>
			if(buffer_data[1]!=UART_COLOR_LEN)
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			resetDisablePulseCount();
    29ae:	96 dd       	rcall	.-1236   	; 0x24dc <resetDisablePulseCount>
    29b0:	ee c0       	rjmp	.+476    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    29b2:	6f ef       	ldi	r22, 0xFF	; 255
    29b4:	80 e5       	ldi	r24, 0x50	; 80
    29b6:	1f d4       	rcall	.+2110   	; 0x31f6 <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    29b8:	80 91 ea 20 	lds	r24, 0x20EA
    29bc:	88 23       	and	r24, r24
    29be:	19 f0       	breq	.+6      	; 0x29c6 <uart_Task+0x13e>
    29c0:	81 30       	cpi	r24, 0x01	; 1
    29c2:	39 f0       	breq	.+14     	; 0x29d2 <uart_Task+0x14a>
    29c4:	0c c0       	rjmp	.+24     	; 0x29de <uart_Task+0x156>
		case 0x00:
			pulse_state = false;
    29c6:	10 92 38 21 	sts	0x2138, r1
			pulse_state_changed = true;
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	80 93 37 21 	sts	0x2137, r24
    29d0:	de c0       	rjmp	.+444    	; 0x2b8e <uart_Task+0x306>
			break;
		case 0x01:
			pulse_state = true;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	80 93 38 21 	sts	0x2138, r24
			pulse_state_changed = true;
    29d8:	80 93 37 21 	sts	0x2137, r24
    29dc:	d8 c0       	rjmp	.+432    	; 0x2b8e <uart_Task+0x306>
			break;
		default:
			pulse_state = true;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	80 93 38 21 	sts	0x2138, r24
			pulse_state_changed = true;
    29e4:	80 93 37 21 	sts	0x2137, r24
    29e8:	d2 c0       	rjmp	.+420    	; 0x2b8e <uart_Task+0x306>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    29ea:	80 91 38 21 	lds	r24, 0x2138
    29ee:	88 23       	and	r24, r24
    29f0:	29 f0       	breq	.+10     	; 0x29fc <uart_Task+0x174>
				pulse_state = false;
    29f2:	10 92 38 21 	sts	0x2138, r1
				pulse_state_changed = true;	
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	80 93 37 21 	sts	0x2137, r24
			}
			shutdown_received = true;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	80 93 36 21 	sts	0x2136, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    2a02:	6f ef       	ldi	r22, 0xFF	; 255
    2a04:	f8 d3       	rcall	.+2032   	; 0x31f6 <send_response>
    2a06:	c3 c0       	rjmp	.+390    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    2a08:	80 91 ea 20 	lds	r24, 0x20EA
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	87 30       	cpi	r24, 0x07	; 7
    2a10:	91 05       	cpc	r25, r1
    2a12:	08 f0       	brcs	.+2      	; 0x2a16 <uart_Task+0x18e>
    2a14:	bc c0       	rjmp	.+376    	; 0x2b8e <uart_Task+0x306>
    2a16:	fc 01       	movw	r30, r24
    2a18:	e7 57       	subi	r30, 0x77	; 119
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    2a20:	80 91 eb 20 	lds	r24, 0x20EB
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	80 93 46 21 	sts	0x2146, r24
    2a2a:	90 93 47 21 	sts	0x2147, r25
    2a2e:	af c0       	rjmp	.+350    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    2a30:	80 91 eb 20 	lds	r24, 0x20EB
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	80 93 01 21 	sts	0x2101, r24
    2a3a:	90 93 02 21 	sts	0x2102, r25
    2a3e:	a7 c0       	rjmp	.+334    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    2a40:	80 91 eb 20 	lds	r24, 0x20EB
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	80 93 ff 20 	sts	0x20FF, r24
    2a4a:	90 93 00 21 	sts	0x2100, r25
    2a4e:	9f c0       	rjmp	.+318    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    2a50:	80 91 eb 20 	lds	r24, 0x20EB
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	80 93 fd 20 	sts	0x20FD, r24
    2a5a:	90 93 fe 20 	sts	0x20FE, r25
    2a5e:	97 c0       	rjmp	.+302    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    2a60:	80 91 eb 20 	lds	r24, 0x20EB
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	80 93 fb 20 	sts	0x20FB, r24
    2a6a:	90 93 fc 20 	sts	0x20FC, r25
    2a6e:	8f c0       	rjmp	.+286    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    2a70:	80 91 eb 20 	lds	r24, 0x20EB
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	80 93 f9 20 	sts	0x20F9, r24
    2a7a:	90 93 fa 20 	sts	0x20FA, r25
    2a7e:	87 c0       	rjmp	.+270    	; 0x2b8e <uart_Task+0x306>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    2a80:	80 91 eb 20 	lds	r24, 0x20EB
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	80 93 f7 20 	sts	0x20F7, r24
    2a8a:	90 93 f8 20 	sts	0x20F8, r25
    2a8e:	7f c0       	rjmp	.+254    	; 0x2b8e <uart_Task+0x306>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    2a90:	80 91 ea 20 	lds	r24, 0x20EA
    2a94:	80 93 f6 20 	sts	0x20F6, r24
    2a98:	7a c0       	rjmp	.+244    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    2a9a:	80 91 ea 20 	lds	r24, 0x20EA
    2a9e:	80 93 02 20 	sts	0x2002, r24
    2aa2:	75 c0       	rjmp	.+234    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    2aa4:	80 91 ea 20 	lds	r24, 0x20EA
    2aa8:	80 93 01 20 	sts	0x2001, r24
    2aac:	70 c0       	rjmp	.+224    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    2aae:	80 91 ea 20 	lds	r24, 0x20EA
    2ab2:	80 93 00 20 	sts	0x2000, r24
    2ab6:	6b c0       	rjmp	.+214    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    2ab8:	af d3       	rcall	.+1886   	; 0x3218 <send_light_data>
    2aba:	69 c0       	rjmp	.+210    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    2abc:	c6 d3       	rcall	.+1932   	; 0x324a <send_battery_data>
    2abe:	67 c0       	rjmp	.+206    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    2ac0:	31 d4       	rcall	.+2146   	; 0x3324 <send_pulse_data>
    2ac2:	65 c0       	rjmp	.+202    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    2ac4:	08 d4       	rcall	.+2064   	; 0x32d6 <send_color_data>
    2ac6:	63 c0       	rjmp	.+198    	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    2ac8:	da d3       	rcall	.+1972   	; 0x327e <send_charging_data>
    2aca:	61 c0       	rjmp	.+194    	; 0x2b8e <uart_Task+0x306>
			break;		
			
		case UART_SET_MTCH:
			nvm_eeprom_write_byte(buffer_data[2], buffer_data[3]);
    2acc:	c8 ee       	ldi	r28, 0xE8	; 232
    2ace:	d0 e2       	ldi	r29, 0x20	; 32
    2ad0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
			
			if (buffer_data[2] <= 15) {
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	80 31       	cpi	r24, 0x10	; 16
    2ade:	30 f4       	brcc	.+12     	; 0x2aec <uart_Task+0x264>
				nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	8d e4       	ldi	r24, 0x4D	; 77
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2aea:	45 c0       	rjmp	.+138    	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 28) {
    2aec:	80 91 ea 20 	lds	r24, 0x20EA
    2af0:	8d 31       	cpi	r24, 0x1D	; 29
    2af2:	30 f4       	brcc	.+12     	; 0x2b00 <uart_Task+0x278>
				nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    2af4:	61 e0       	ldi	r22, 0x01	; 1
    2af6:	8e e4       	ldi	r24, 0x4E	; 78
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2afe:	3b c0       	rjmp	.+118    	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 46) {
    2b00:	80 91 ea 20 	lds	r24, 0x20EA
    2b04:	8f 32       	cpi	r24, 0x2F	; 47
    2b06:	30 f4       	brcc	.+12     	; 0x2b14 <uart_Task+0x28c>
				nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	8f e4       	ldi	r24, 0x4F	; 79
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b12:	31 c0       	rjmp	.+98     	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 48) {
    2b14:	80 91 ea 20 	lds	r24, 0x20EA
    2b18:	81 33       	cpi	r24, 0x31	; 49
    2b1a:	30 f4       	brcc	.+12     	; 0x2b28 <uart_Task+0x2a0>
				nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	80 e5       	ldi	r24, 0x50	; 80
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b26:	27 c0       	rjmp	.+78     	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 50) {
    2b28:	80 91 ea 20 	lds	r24, 0x20EA
    2b2c:	83 33       	cpi	r24, 0x33	; 51
    2b2e:	30 f4       	brcc	.+12     	; 0x2b3c <uart_Task+0x2b4>
				nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	81 e5       	ldi	r24, 0x51	; 81
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b3a:	1d c0       	rjmp	.+58     	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 56) {
    2b3c:	80 91 ea 20 	lds	r24, 0x20EA
    2b40:	89 33       	cpi	r24, 0x39	; 57
    2b42:	30 f4       	brcc	.+12     	; 0x2b50 <uart_Task+0x2c8>
				nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 1);
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	82 e5       	ldi	r24, 0x52	; 82
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b4e:	13 c0       	rjmp	.+38     	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 69) {
    2b50:	80 91 ea 20 	lds	r24, 0x20EA
    2b54:	86 34       	cpi	r24, 0x46	; 70
    2b56:	30 f4       	brcc	.+12     	; 0x2b64 <uart_Task+0x2dc>
				nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	83 e5       	ldi	r24, 0x53	; 83
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b62:	09 c0       	rjmp	.+18     	; 0x2b76 <uart_Task+0x2ee>
			}
			else if (buffer_data[2] <= 76) {
    2b64:	80 91 ea 20 	lds	r24, 0x20EA
    2b68:	8d 34       	cpi	r24, 0x4D	; 77
    2b6a:	28 f4       	brcc	.+10     	; 0x2b76 <uart_Task+0x2ee>
				nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    2b6c:	61 e0       	ldi	r22, 0x01	; 1
    2b6e:	84 e5       	ldi	r24, 0x54	; 84
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
			}
			nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	85 e5       	ldi	r24, 0x55	; 85
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <nvm_eeprom_write_byte>
    2b80:	06 c0       	rjmp	.+12     	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_GET_MTCH:
			send_mtch_update_status();
    2b82:	92 d3       	rcall	.+1828   	; 0x32a8 <send_mtch_update_status>
    2b84:	04 c0       	rjmp	.+8      	; 0x2b8e <uart_Task+0x306>
			break;
			
		case UART_SET_RESTART:
			while(1) {barrier();}
    2b86:	ff cf       	rjmp	.-2      	; 0x2b86 <uart_Task+0x2fe>
			break;
			
		case UART_WRITE_MTCH:
			write_mtch_settings();
    2b88:	0e 94 2f 0c 	call	0x185e	; 0x185e <write_mtch_settings>
			send_mtch_update_status();
    2b8c:	8d d3       	rcall	.+1818   	; 0x32a8 <send_mtch_update_status>
            buffer_data[i]=uart_buffGetData(g_uartBuff.tailp,0);
	      uart_buffPosInc(&g_uartBuff.tailp);
	  }
	   interpret_message();
    }
}
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	08 95       	ret

00002b98 <__vector_40>:


ISR(USARTD0_RXC_vect)
{
    2b98:	1f 92       	push	r1
    2b9a:	0f 92       	push	r0
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	0f 92       	push	r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	2f 93       	push	r18
    2ba8:	3f 93       	push	r19
    2baa:	4f 93       	push	r20
    2bac:	5f 93       	push	r21
    2bae:	6f 93       	push	r22
    2bb0:	7f 93       	push	r23
    2bb2:	8f 93       	push	r24
    2bb4:	9f 93       	push	r25
    2bb6:	af 93       	push	r26
    2bb8:	bf 93       	push	r27
    2bba:	cf 93       	push	r28
    2bbc:	df 93       	push	r29
    2bbe:	ef 93       	push	r30
    2bc0:	ff 93       	push	r31
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    2bc2:	80 91 c1 09 	lds	r24, 0x09C1
#if 1
    while(usart_rx_is_complete(&USARTD0) ) {
    2bc6:	88 23       	and	r24, r24
    2bc8:	8c f4       	brge	.+34     	; 0x2bec <__vector_40+0x54>
        g_uartBuff.uart_RxBuff[g_uartBuff.headp] =((uint8_t)(&USARTD0)->DATA);
    2bca:	00 ec       	ldi	r16, 0xC0	; 192
    2bcc:	19 e0       	ldi	r17, 0x09	; 9
    2bce:	c1 e0       	ldi	r28, 0x01	; 1
    2bd0:	db e2       	ldi	r29, 0x2B	; 43
    2bd2:	f8 01       	movw	r30, r16
    2bd4:	80 81       	ld	r24, Z
    2bd6:	e8 81       	ld	r30, Y
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	ef 57       	subi	r30, 0x7F	; 127
    2bdc:	f5 4d       	sbci	r31, 0xD5	; 213
    2bde:	80 83       	st	Z, r24
	  uart_buffPosInc(&g_uartBuff.headp);
    2be0:	ce 01       	movw	r24, r28
    2be2:	0b de       	rcall	.-1002   	; 0x27fa <uart_buffPosInc>
    2be4:	f8 01       	movw	r30, r16
    2be6:	81 81       	ldd	r24, Z+1	; 0x01


ISR(USARTD0_RXC_vect)
{
#if 1
    while(usart_rx_is_complete(&USARTD0) ) {
    2be8:	88 23       	and	r24, r24
    2bea:	9c f3       	brlt	.-26     	; 0x2bd2 <__vector_40+0x3a>
	}
	
	uart_done_flag = true;
	
#endif
}
    2bec:	ff 91       	pop	r31
    2bee:	ef 91       	pop	r30
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	bf 91       	pop	r27
    2bf6:	af 91       	pop	r26
    2bf8:	9f 91       	pop	r25
    2bfa:	8f 91       	pop	r24
    2bfc:	7f 91       	pop	r23
    2bfe:	6f 91       	pop	r22
    2c00:	5f 91       	pop	r21
    2c02:	4f 91       	pop	r20
    2c04:	3f 91       	pop	r19
    2c06:	2f 91       	pop	r18
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	0f 90       	pop	r0
    2c0e:	0f be       	out	0x3f, r0	; 63
    2c10:	0f 90       	pop	r0
    2c12:	1f 90       	pop	r1
    2c14:	18 95       	reti

00002c16 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    2c16:	0f 93       	push	r16
    2c18:	1f 93       	push	r17
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    2c1e:	61 15       	cp	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	61 f0       	breq	.+24     	; 0x2c3c <uart_send_bytes+0x26>
    2c24:	8c 01       	movw	r16, r24
    2c26:	ec 01       	movw	r28, r24
    2c28:	06 0f       	add	r16, r22
    2c2a:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    2c2c:	69 91       	ld	r22, Y+
    2c2e:	80 ec       	ldi	r24, 0xC0	; 192
    2c30:	99 e0       	ldi	r25, 0x09	; 9
    2c32:	0e 94 c2 22 	call	0x4584	; 0x4584 <usart_putchar>
#endif
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    2c36:	c0 17       	cp	r28, r16
    2c38:	d1 07       	cpc	r29, r17
    2c3a:	c1 f7       	brne	.-16     	; 0x2c2c <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <init_chargingpin>:
	}
	/* If visualization wasn't on then load solid colors that are saved including no color saved */
	else 
	{
		fht_flag = false;
		restore_led_from_eeprom();
    2c46:	98 2f       	mov	r25, r24
    2c48:	97 70       	andi	r25, 0x07	; 7
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <init_chargingpin+0xe>
    2c50:	66 0f       	add	r22, r22
    2c52:	77 1f       	adc	r23, r23
    2c54:	9a 95       	dec	r25
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <init_chargingpin+0xa>
    2c58:	86 95       	lsr	r24
    2c5a:	86 95       	lsr	r24
    2c5c:	86 95       	lsr	r24
    2c5e:	20 e2       	ldi	r18, 0x20	; 32
    2c60:	82 9f       	mul	r24, r18
    2c62:	c0 01       	movw	r24, r0
    2c64:	11 24       	eor	r1, r1
    2c66:	42 e0       	ldi	r20, 0x02	; 2
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	9a 5f       	subi	r25, 0xFA	; 250
    2c6c:	e9 c6       	rjmp	.+3538   	; 0x3a40 <ioport_configure_port_pin>
    2c6e:	08 95       	ret

00002c70 <ischarging>:
    2c70:	80 91 e8 07 	lds	r24, 0x07E8
    2c74:	86 95       	lsr	r24
    2c76:	81 70       	andi	r24, 0x01	; 1
    2c78:	08 95       	ret

00002c7a <twinkle>:
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	f9 01       	movw	r30, r18
    2c80:	ee 0f       	add	r30, r30
    2c82:	ff 1f       	adc	r31, r31
    2c84:	e2 0f       	add	r30, r18
    2c86:	f3 1f       	adc	r31, r19
    2c88:	e5 5e       	subi	r30, 0xE5	; 229
    2c8a:	f4 4d       	sbci	r31, 0xD4	; 212
    2c8c:	80 83       	st	Z, r24
    2c8e:	61 83       	std	Z+1, r22	; 0x01
    2c90:	42 83       	std	Z+2, r20	; 0x02
    2c92:	2f 5f       	subi	r18, 0xFF	; 255
    2c94:	3f 4f       	sbci	r19, 0xFF	; 255
    2c96:	26 30       	cpi	r18, 0x06	; 6
    2c98:	31 05       	cpc	r19, r1
    2c9a:	89 f7       	brne	.-30     	; 0x2c7e <twinkle+0x4>
    2c9c:	66 e0       	ldi	r22, 0x06	; 6
    2c9e:	8b e1       	ldi	r24, 0x1B	; 27
    2ca0:	9b e2       	ldi	r25, 0x2B	; 43
    2ca2:	b2 c4       	rjmp	.+2404   	; 0x3608 <set_flash_ws2812>
    2ca4:	08 95       	ret

00002ca6 <rainbow>:
    2ca6:	eb e1       	ldi	r30, 0x1B	; 27
    2ca8:	fb e2       	ldi	r31, 0x2B	; 43
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	80 83       	st	Z, r24
    2cae:	11 82       	std	Z+1, r1	; 0x01
    2cb0:	12 82       	std	Z+2, r1	; 0x02
    2cb2:	13 82       	std	Z+3, r1	; 0x03
    2cb4:	84 83       	std	Z+4, r24	; 0x04
    2cb6:	15 82       	std	Z+5, r1	; 0x05
    2cb8:	16 82       	std	Z+6, r1	; 0x06
    2cba:	17 82       	std	Z+7, r1	; 0x07
    2cbc:	80 87       	std	Z+8, r24	; 0x08
    2cbe:	81 87       	std	Z+9, r24	; 0x09
    2cc0:	12 86       	std	Z+10, r1	; 0x0a
    2cc2:	13 86       	std	Z+11, r1	; 0x0b
    2cc4:	14 86       	std	Z+12, r1	; 0x0c
    2cc6:	85 87       	std	Z+13, r24	; 0x0d
    2cc8:	16 86       	std	Z+14, r1	; 0x0e
    2cca:	17 86       	std	Z+15, r1	; 0x0f
    2ccc:	10 8a       	std	Z+16, r1	; 0x10
    2cce:	81 8b       	std	Z+17, r24	; 0x11
    2cd0:	66 e0       	ldi	r22, 0x06	; 6
    2cd2:	cf 01       	movw	r24, r30
    2cd4:	99 c4       	rjmp	.+2354   	; 0x3608 <set_flash_ws2812>
    2cd6:	08 95       	ret

00002cd8 <clear_led>:
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	e8 2f       	mov	r30, r24
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	9f 01       	movw	r18, r30
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	e2 0f       	add	r30, r18
    2ce6:	f3 1f       	adc	r31, r19
    2ce8:	e5 5e       	subi	r30, 0xE5	; 229
    2cea:	f4 4d       	sbci	r31, 0xD4	; 212
    2cec:	10 82       	st	Z, r1
    2cee:	11 82       	std	Z+1, r1	; 0x01
    2cf0:	12 82       	std	Z+2, r1	; 0x02
    2cf2:	8f 5f       	subi	r24, 0xFF	; 255
    2cf4:	86 30       	cpi	r24, 0x06	; 6
    2cf6:	89 f7       	brne	.-30     	; 0x2cda <clear_led+0x2>
    2cf8:	66 e0       	ldi	r22, 0x06	; 6
    2cfa:	8b e1       	ldi	r24, 0x1B	; 27
    2cfc:	9b e2       	ldi	r25, 0x2B	; 43
    2cfe:	84 c4       	rjmp	.+2312   	; 0x3608 <set_flash_ws2812>
    2d00:	08 95       	ret

00002d02 <load_data_color_led>:
    2d02:	af ed       	ldi	r26, 0xDF	; 223
    2d04:	b0 e2       	ldi	r27, 0x20	; 32
    2d06:	8c 91       	ld	r24, X
    2d08:	eb e1       	ldi	r30, 0x1B	; 27
    2d0a:	fb e2       	ldi	r31, 0x2B	; 43
    2d0c:	80 83       	st	Z, r24
    2d0e:	11 96       	adiw	r26, 0x01	; 1
    2d10:	8c 91       	ld	r24, X
    2d12:	11 97       	sbiw	r26, 0x01	; 1
    2d14:	81 83       	std	Z+1, r24	; 0x01
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	8c 91       	ld	r24, X
    2d1a:	12 97       	sbiw	r26, 0x02	; 2
    2d1c:	82 83       	std	Z+2, r24	; 0x02
    2d1e:	13 96       	adiw	r26, 0x03	; 3
    2d20:	8c 91       	ld	r24, X
    2d22:	13 97       	sbiw	r26, 0x03	; 3
    2d24:	83 83       	std	Z+3, r24	; 0x03
    2d26:	14 96       	adiw	r26, 0x04	; 4
    2d28:	8c 91       	ld	r24, X
    2d2a:	14 97       	sbiw	r26, 0x04	; 4
    2d2c:	84 83       	std	Z+4, r24	; 0x04
    2d2e:	15 96       	adiw	r26, 0x05	; 5
    2d30:	8c 91       	ld	r24, X
    2d32:	15 97       	sbiw	r26, 0x05	; 5
    2d34:	85 83       	std	Z+5, r24	; 0x05
    2d36:	16 96       	adiw	r26, 0x06	; 6
    2d38:	8c 91       	ld	r24, X
    2d3a:	16 97       	sbiw	r26, 0x06	; 6
    2d3c:	86 83       	std	Z+6, r24	; 0x06
    2d3e:	17 96       	adiw	r26, 0x07	; 7
    2d40:	8c 91       	ld	r24, X
    2d42:	17 97       	sbiw	r26, 0x07	; 7
    2d44:	87 83       	std	Z+7, r24	; 0x07
    2d46:	18 96       	adiw	r26, 0x08	; 8
    2d48:	8c 91       	ld	r24, X
    2d4a:	18 97       	sbiw	r26, 0x08	; 8
    2d4c:	80 87       	std	Z+8, r24	; 0x08
    2d4e:	8c 91       	ld	r24, X
    2d50:	81 87       	std	Z+9, r24	; 0x09
    2d52:	11 96       	adiw	r26, 0x01	; 1
    2d54:	8c 91       	ld	r24, X
    2d56:	11 97       	sbiw	r26, 0x01	; 1
    2d58:	82 87       	std	Z+10, r24	; 0x0a
    2d5a:	12 96       	adiw	r26, 0x02	; 2
    2d5c:	8c 91       	ld	r24, X
    2d5e:	12 97       	sbiw	r26, 0x02	; 2
    2d60:	83 87       	std	Z+11, r24	; 0x0b
    2d62:	13 96       	adiw	r26, 0x03	; 3
    2d64:	8c 91       	ld	r24, X
    2d66:	13 97       	sbiw	r26, 0x03	; 3
    2d68:	84 87       	std	Z+12, r24	; 0x0c
    2d6a:	14 96       	adiw	r26, 0x04	; 4
    2d6c:	8c 91       	ld	r24, X
    2d6e:	14 97       	sbiw	r26, 0x04	; 4
    2d70:	85 87       	std	Z+13, r24	; 0x0d
    2d72:	15 96       	adiw	r26, 0x05	; 5
    2d74:	8c 91       	ld	r24, X
    2d76:	15 97       	sbiw	r26, 0x05	; 5
    2d78:	86 87       	std	Z+14, r24	; 0x0e
    2d7a:	16 96       	adiw	r26, 0x06	; 6
    2d7c:	8c 91       	ld	r24, X
    2d7e:	16 97       	sbiw	r26, 0x06	; 6
    2d80:	87 87       	std	Z+15, r24	; 0x0f
    2d82:	17 96       	adiw	r26, 0x07	; 7
    2d84:	8c 91       	ld	r24, X
    2d86:	17 97       	sbiw	r26, 0x07	; 7
    2d88:	80 8b       	std	Z+16, r24	; 0x10
    2d8a:	18 96       	adiw	r26, 0x08	; 8
    2d8c:	8c 91       	ld	r24, X
    2d8e:	81 8b       	std	Z+17, r24	; 0x11
    2d90:	66 e0       	ldi	r22, 0x06	; 6
    2d92:	cf 01       	movw	r24, r30
    2d94:	39 c4       	rjmp	.+2162   	; 0x3608 <set_flash_ws2812>
    2d96:	08 95       	ret

00002d98 <update_led_charge>:
    2d98:	10 92 7e 2a 	sts	0x2A7E, r1
    2d9c:	80 91 3b 21 	lds	r24, 0x213B
    2da0:	88 23       	and	r24, r24
    2da2:	c1 f1       	breq	.+112    	; 0x2e14 <update_led_charge+0x7c>
    2da4:	80 91 3e 21 	lds	r24, 0x213E
    2da8:	90 91 3f 21 	lds	r25, 0x213F
    2dac:	9c 01       	movw	r18, r24
    2dae:	20 56       	subi	r18, 0x60	; 96
    2db0:	35 40       	sbci	r19, 0x05	; 5
    2db2:	2f 35       	cpi	r18, 0x5F	; 95
    2db4:	31 05       	cpc	r19, r1
    2db6:	48 f4       	brcc	.+18     	; 0x2dca <update_led_charge+0x32>
    2db8:	80 91 ff 20 	lds	r24, 0x20FF
    2dbc:	90 91 00 21 	lds	r25, 0x2100
    2dc0:	80 93 42 21 	sts	0x2142, r24
    2dc4:	90 93 43 21 	sts	0x2143, r25
    2dc8:	23 c0       	rjmp	.+70     	; 0x2e10 <update_led_charge+0x78>
    2dca:	81 5b       	subi	r24, 0xB1	; 177
    2dcc:	94 40       	sbci	r25, 0x04	; 4
    2dce:	8f 3a       	cpi	r24, 0xAF	; 175
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	48 f4       	brcc	.+18     	; 0x2de6 <update_led_charge+0x4e>
    2dd4:	80 91 fb 20 	lds	r24, 0x20FB
    2dd8:	90 91 fc 20 	lds	r25, 0x20FC
    2ddc:	80 93 42 21 	sts	0x2142, r24
    2de0:	90 93 43 21 	sts	0x2143, r25
    2de4:	15 c0       	rjmp	.+42     	; 0x2e10 <update_led_charge+0x78>
    2de6:	80 91 46 21 	lds	r24, 0x2146
    2dea:	90 91 47 21 	lds	r25, 0x2147
    2dee:	89 2b       	or	r24, r25
    2df0:	39 f4       	brne	.+14     	; 0x2e00 <update_led_charge+0x68>
    2df2:	80 e2       	ldi	r24, 0x20	; 32
    2df4:	93 e0       	ldi	r25, 0x03	; 3
    2df6:	80 93 42 21 	sts	0x2142, r24
    2dfa:	90 93 43 21 	sts	0x2143, r25
    2dfe:	08 c0       	rjmp	.+16     	; 0x2e10 <update_led_charge+0x78>
    2e00:	80 91 46 21 	lds	r24, 0x2146
    2e04:	90 91 47 21 	lds	r25, 0x2147
    2e08:	80 93 42 21 	sts	0x2142, r24
    2e0c:	90 93 43 21 	sts	0x2143, r25
    2e10:	10 92 3b 21 	sts	0x213B, r1
    2e14:	2d df       	rcall	.-422    	; 0x2c70 <ischarging>
    2e16:	81 11       	cpse	r24, r1
    2e18:	14 c0       	rjmp	.+40     	; 0x2e42 <update_led_charge+0xaa>
    2e1a:	80 91 45 21 	lds	r24, 0x2145
    2e1e:	80 93 44 21 	sts	0x2144, r24
    2e22:	86 e0       	ldi	r24, 0x06	; 6
    2e24:	80 93 45 21 	sts	0x2145, r24
    2e28:	80 91 45 21 	lds	r24, 0x2145
    2e2c:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	98 e0       	ldi	r25, 0x08	; 8
    2e34:	0e 94 12 21 	call	0x4224	; 0x4224 <tc45_enable>
    2e38:	80 e4       	ldi	r24, 0x40	; 64
    2e3a:	98 e0       	ldi	r25, 0x08	; 8
    2e3c:	0e 94 44 21 	call	0x4288	; 0x4288 <tc45_disable>
    2e40:	60 df       	rcall	.-320    	; 0x2d02 <load_data_color_led>
    2e42:	80 91 42 21 	lds	r24, 0x2142
    2e46:	90 91 43 21 	lds	r25, 0x2143
    2e4a:	20 91 01 21 	lds	r18, 0x2101
    2e4e:	30 91 02 21 	lds	r19, 0x2102
    2e52:	82 17       	cp	r24, r18
    2e54:	93 07       	cpc	r25, r19
    2e56:	b8 f5       	brcc	.+110    	; 0x2ec6 <update_led_charge+0x12e>
    2e58:	3f df       	rcall	.-386    	; 0x2cd8 <clear_led>
    2e5a:	40 91 f6 20 	lds	r20, 0x20F6
    2e5e:	20 91 42 21 	lds	r18, 0x2142
    2e62:	30 91 43 21 	lds	r19, 0x2143
    2e66:	60 91 01 21 	lds	r22, 0x2101
    2e6a:	70 91 02 21 	lds	r23, 0x2102
    2e6e:	42 9f       	mul	r20, r18
    2e70:	c0 01       	movw	r24, r0
    2e72:	43 9f       	mul	r20, r19
    2e74:	90 0d       	add	r25, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2e7c:	eb e1       	ldi	r30, 0x1B	; 27
    2e7e:	fb e2       	ldi	r31, 0x2B	; 43
    2e80:	60 83       	st	Z, r22
    2e82:	11 82       	std	Z+1, r1	; 0x01
    2e84:	12 82       	std	Z+2, r1	; 0x02
    2e86:	13 82       	std	Z+3, r1	; 0x03
    2e88:	14 82       	std	Z+4, r1	; 0x04
    2e8a:	15 82       	std	Z+5, r1	; 0x05
    2e8c:	16 82       	std	Z+6, r1	; 0x06
    2e8e:	17 82       	std	Z+7, r1	; 0x07
    2e90:	10 86       	std	Z+8, r1	; 0x08
    2e92:	40 91 f6 20 	lds	r20, 0x20F6
    2e96:	60 91 01 21 	lds	r22, 0x2101
    2e9a:	70 91 02 21 	lds	r23, 0x2102
    2e9e:	42 9f       	mul	r20, r18
    2ea0:	c0 01       	movw	r24, r0
    2ea2:	43 9f       	mul	r20, r19
    2ea4:	90 0d       	add	r25, r0
    2ea6:	11 24       	eor	r1, r1
    2ea8:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2eac:	61 87       	std	Z+9, r22	; 0x09
    2eae:	12 86       	std	Z+10, r1	; 0x0a
    2eb0:	13 86       	std	Z+11, r1	; 0x0b
    2eb2:	14 86       	std	Z+12, r1	; 0x0c
    2eb4:	15 86       	std	Z+13, r1	; 0x0d
    2eb6:	16 86       	std	Z+14, r1	; 0x0e
    2eb8:	17 86       	std	Z+15, r1	; 0x0f
    2eba:	10 8a       	std	Z+16, r1	; 0x10
    2ebc:	11 8a       	std	Z+17, r1	; 0x11
    2ebe:	66 e0       	ldi	r22, 0x06	; 6
    2ec0:	cf 01       	movw	r24, r30
    2ec2:	a2 d3       	rcall	.+1860   	; 0x3608 <set_flash_ws2812>
    2ec4:	64 c1       	rjmp	.+712    	; 0x318e <__stack+0x18f>
    2ec6:	20 91 fd 20 	lds	r18, 0x20FD
    2eca:	30 91 fe 20 	lds	r19, 0x20FE
    2ece:	82 17       	cp	r24, r18
    2ed0:	93 07       	cpc	r25, r19
    2ed2:	08 f0       	brcs	.+2      	; 0x2ed6 <update_led_charge+0x13e>
    2ed4:	48 c0       	rjmp	.+144    	; 0x2f66 <update_led_charge+0x1ce>
    2ed6:	00 df       	rcall	.-512    	; 0x2cd8 <clear_led>
    2ed8:	80 91 f6 20 	lds	r24, 0x20F6
    2edc:	eb e1       	ldi	r30, 0x1B	; 27
    2ede:	fb e2       	ldi	r31, 0x2B	; 43
    2ee0:	80 83       	st	Z, r24
    2ee2:	11 82       	std	Z+1, r1	; 0x01
    2ee4:	12 82       	std	Z+2, r1	; 0x02
    2ee6:	13 82       	std	Z+3, r1	; 0x03
    2ee8:	14 82       	std	Z+4, r1	; 0x04
    2eea:	15 82       	std	Z+5, r1	; 0x05
    2eec:	20 91 42 21 	lds	r18, 0x2142
    2ef0:	30 91 43 21 	lds	r19, 0x2143
    2ef4:	80 91 01 21 	lds	r24, 0x2101
    2ef8:	90 91 02 21 	lds	r25, 0x2102
    2efc:	a0 91 f6 20 	lds	r26, 0x20F6
    2f00:	60 91 fd 20 	lds	r22, 0x20FD
    2f04:	70 91 fe 20 	lds	r23, 0x20FE
    2f08:	a9 01       	movw	r20, r18
    2f0a:	48 1b       	sub	r20, r24
    2f0c:	59 0b       	sbc	r21, r25
    2f0e:	a4 9f       	mul	r26, r20
    2f10:	c0 01       	movw	r24, r0
    2f12:	a5 9f       	mul	r26, r21
    2f14:	90 0d       	add	r25, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2f1c:	66 83       	std	Z+6, r22	; 0x06
    2f1e:	17 82       	std	Z+7, r1	; 0x07
    2f20:	10 86       	std	Z+8, r1	; 0x08
    2f22:	80 91 f6 20 	lds	r24, 0x20F6
    2f26:	81 87       	std	Z+9, r24	; 0x09
    2f28:	12 86       	std	Z+10, r1	; 0x0a
    2f2a:	13 86       	std	Z+11, r1	; 0x0b
    2f2c:	14 86       	std	Z+12, r1	; 0x0c
    2f2e:	15 86       	std	Z+13, r1	; 0x0d
    2f30:	16 86       	std	Z+14, r1	; 0x0e
    2f32:	80 91 01 21 	lds	r24, 0x2101
    2f36:	90 91 02 21 	lds	r25, 0x2102
    2f3a:	40 91 f6 20 	lds	r20, 0x20F6
    2f3e:	60 91 fd 20 	lds	r22, 0x20FD
    2f42:	70 91 fe 20 	lds	r23, 0x20FE
    2f46:	28 1b       	sub	r18, r24
    2f48:	39 0b       	sbc	r19, r25
    2f4a:	42 9f       	mul	r20, r18
    2f4c:	c0 01       	movw	r24, r0
    2f4e:	43 9f       	mul	r20, r19
    2f50:	90 0d       	add	r25, r0
    2f52:	11 24       	eor	r1, r1
    2f54:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2f58:	67 87       	std	Z+15, r22	; 0x0f
    2f5a:	10 8a       	std	Z+16, r1	; 0x10
    2f5c:	11 8a       	std	Z+17, r1	; 0x11
    2f5e:	66 e0       	ldi	r22, 0x06	; 6
    2f60:	cf 01       	movw	r24, r30
    2f62:	52 d3       	rcall	.+1700   	; 0x3608 <set_flash_ws2812>
    2f64:	14 c1       	rjmp	.+552    	; 0x318e <__stack+0x18f>
    2f66:	20 91 f9 20 	lds	r18, 0x20F9
    2f6a:	30 91 fa 20 	lds	r19, 0x20FA
    2f6e:	82 17       	cp	r24, r18
    2f70:	93 07       	cpc	r25, r19
    2f72:	08 f0       	brcs	.+2      	; 0x2f76 <update_led_charge+0x1de>
    2f74:	4c c0       	rjmp	.+152    	; 0x300e <__stack+0xf>
    2f76:	b0 de       	rcall	.-672    	; 0x2cd8 <clear_led>
    2f78:	80 91 f6 20 	lds	r24, 0x20F6
    2f7c:	eb e1       	ldi	r30, 0x1B	; 27
    2f7e:	fb e2       	ldi	r31, 0x2B	; 43
    2f80:	80 83       	st	Z, r24
    2f82:	11 82       	std	Z+1, r1	; 0x01
    2f84:	12 82       	std	Z+2, r1	; 0x02
    2f86:	20 91 42 21 	lds	r18, 0x2142
    2f8a:	30 91 43 21 	lds	r19, 0x2143
    2f8e:	80 91 fd 20 	lds	r24, 0x20FD
    2f92:	90 91 fe 20 	lds	r25, 0x20FE
    2f96:	a0 91 f6 20 	lds	r26, 0x20F6
    2f9a:	60 91 f9 20 	lds	r22, 0x20F9
    2f9e:	70 91 fa 20 	lds	r23, 0x20FA
    2fa2:	a9 01       	movw	r20, r18
    2fa4:	48 1b       	sub	r20, r24
    2fa6:	59 0b       	sbc	r21, r25
    2fa8:	a4 9f       	mul	r26, r20
    2faa:	c0 01       	movw	r24, r0
    2fac:	a5 9f       	mul	r26, r21
    2fae:	90 0d       	add	r25, r0
    2fb0:	11 24       	eor	r1, r1
    2fb2:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2fb6:	63 83       	std	Z+3, r22	; 0x03
    2fb8:	14 82       	std	Z+4, r1	; 0x04
    2fba:	15 82       	std	Z+5, r1	; 0x05
    2fbc:	80 91 f6 20 	lds	r24, 0x20F6
    2fc0:	86 83       	std	Z+6, r24	; 0x06
    2fc2:	17 82       	std	Z+7, r1	; 0x07
    2fc4:	10 86       	std	Z+8, r1	; 0x08
    2fc6:	80 91 f6 20 	lds	r24, 0x20F6
    2fca:	81 87       	std	Z+9, r24	; 0x09
    2fcc:	12 86       	std	Z+10, r1	; 0x0a
    2fce:	13 86       	std	Z+11, r1	; 0x0b
    2fd0:	80 91 fd 20 	lds	r24, 0x20FD
    2fd4:	90 91 fe 20 	lds	r25, 0x20FE
    2fd8:	40 91 f6 20 	lds	r20, 0x20F6
    2fdc:	60 91 f9 20 	lds	r22, 0x20F9
    2fe0:	70 91 fa 20 	lds	r23, 0x20FA
    2fe4:	28 1b       	sub	r18, r24
    2fe6:	39 0b       	sbc	r19, r25
    2fe8:	42 9f       	mul	r20, r18
    2fea:	c0 01       	movw	r24, r0
    2fec:	43 9f       	mul	r20, r19
    2fee:	90 0d       	add	r25, r0
    2ff0:	11 24       	eor	r1, r1
    2ff2:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    2ff6:	64 87       	std	Z+12, r22	; 0x0c
    2ff8:	15 86       	std	Z+13, r1	; 0x0d
    2ffa:	16 86       	std	Z+14, r1	; 0x0e
    2ffc:	80 91 f6 20 	lds	r24, 0x20F6
    3000:	87 87       	std	Z+15, r24	; 0x0f
    3002:	10 8a       	std	Z+16, r1	; 0x10
    3004:	11 8a       	std	Z+17, r1	; 0x11
    3006:	66 e0       	ldi	r22, 0x06	; 6
    3008:	cf 01       	movw	r24, r30
    300a:	fe d2       	rcall	.+1532   	; 0x3608 <set_flash_ws2812>
    300c:	c0 c0       	rjmp	.+384    	; 0x318e <__stack+0x18f>
    300e:	20 91 f7 20 	lds	r18, 0x20F7
    3012:	30 91 f8 20 	lds	r19, 0x20F8
    3016:	82 17       	cp	r24, r18
    3018:	93 07       	cpc	r25, r19
    301a:	08 f0       	brcs	.+2      	; 0x301e <__stack+0x1f>
    301c:	94 c0       	rjmp	.+296    	; 0x3146 <__stack+0x147>
    301e:	5c de       	rcall	.-840    	; 0x2cd8 <clear_led>
    3020:	eb e1       	ldi	r30, 0x1B	; 27
    3022:	fb e2       	ldi	r31, 0x2B	; 43
    3024:	10 82       	st	Z, r1
    3026:	20 91 42 21 	lds	r18, 0x2142
    302a:	30 91 43 21 	lds	r19, 0x2143
    302e:	80 91 fb 20 	lds	r24, 0x20FB
    3032:	90 91 fc 20 	lds	r25, 0x20FC
    3036:	a0 91 f6 20 	lds	r26, 0x20F6
    303a:	60 91 f7 20 	lds	r22, 0x20F7
    303e:	70 91 f8 20 	lds	r23, 0x20F8
    3042:	a9 01       	movw	r20, r18
    3044:	48 1b       	sub	r20, r24
    3046:	59 0b       	sbc	r21, r25
    3048:	a4 9f       	mul	r26, r20
    304a:	c0 01       	movw	r24, r0
    304c:	a5 9f       	mul	r26, r21
    304e:	90 0d       	add	r25, r0
    3050:	11 24       	eor	r1, r1
    3052:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    3056:	61 83       	std	Z+1, r22	; 0x01
    3058:	12 82       	std	Z+2, r1	; 0x02
    305a:	13 82       	std	Z+3, r1	; 0x03
    305c:	80 91 fb 20 	lds	r24, 0x20FB
    3060:	90 91 fc 20 	lds	r25, 0x20FC
    3064:	a0 91 f6 20 	lds	r26, 0x20F6
    3068:	60 91 f7 20 	lds	r22, 0x20F7
    306c:	70 91 f8 20 	lds	r23, 0x20F8
    3070:	a9 01       	movw	r20, r18
    3072:	48 1b       	sub	r20, r24
    3074:	59 0b       	sbc	r21, r25
    3076:	a4 9f       	mul	r26, r20
    3078:	c0 01       	movw	r24, r0
    307a:	a5 9f       	mul	r26, r21
    307c:	90 0d       	add	r25, r0
    307e:	11 24       	eor	r1, r1
    3080:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    3084:	64 83       	std	Z+4, r22	; 0x04
    3086:	15 82       	std	Z+5, r1	; 0x05
    3088:	16 82       	std	Z+6, r1	; 0x06
    308a:	80 91 fb 20 	lds	r24, 0x20FB
    308e:	90 91 fc 20 	lds	r25, 0x20FC
    3092:	a0 91 f6 20 	lds	r26, 0x20F6
    3096:	60 91 f7 20 	lds	r22, 0x20F7
    309a:	70 91 f8 20 	lds	r23, 0x20F8
    309e:	a9 01       	movw	r20, r18
    30a0:	48 1b       	sub	r20, r24
    30a2:	59 0b       	sbc	r21, r25
    30a4:	a4 9f       	mul	r26, r20
    30a6:	c0 01       	movw	r24, r0
    30a8:	a5 9f       	mul	r26, r21
    30aa:	90 0d       	add	r25, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    30b2:	67 83       	std	Z+7, r22	; 0x07
    30b4:	10 86       	std	Z+8, r1	; 0x08
    30b6:	11 86       	std	Z+9, r1	; 0x09
    30b8:	80 91 fb 20 	lds	r24, 0x20FB
    30bc:	90 91 fc 20 	lds	r25, 0x20FC
    30c0:	a0 91 f6 20 	lds	r26, 0x20F6
    30c4:	60 91 f7 20 	lds	r22, 0x20F7
    30c8:	70 91 f8 20 	lds	r23, 0x20F8
    30cc:	a9 01       	movw	r20, r18
    30ce:	48 1b       	sub	r20, r24
    30d0:	59 0b       	sbc	r21, r25
    30d2:	a4 9f       	mul	r26, r20
    30d4:	c0 01       	movw	r24, r0
    30d6:	a5 9f       	mul	r26, r21
    30d8:	90 0d       	add	r25, r0
    30da:	11 24       	eor	r1, r1
    30dc:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    30e0:	62 87       	std	Z+10, r22	; 0x0a
    30e2:	13 86       	std	Z+11, r1	; 0x0b
    30e4:	14 86       	std	Z+12, r1	; 0x0c
    30e6:	80 91 fb 20 	lds	r24, 0x20FB
    30ea:	90 91 fc 20 	lds	r25, 0x20FC
    30ee:	a0 91 f6 20 	lds	r26, 0x20F6
    30f2:	60 91 f7 20 	lds	r22, 0x20F7
    30f6:	70 91 f8 20 	lds	r23, 0x20F8
    30fa:	a9 01       	movw	r20, r18
    30fc:	48 1b       	sub	r20, r24
    30fe:	59 0b       	sbc	r21, r25
    3100:	a4 9f       	mul	r26, r20
    3102:	c0 01       	movw	r24, r0
    3104:	a5 9f       	mul	r26, r21
    3106:	90 0d       	add	r25, r0
    3108:	11 24       	eor	r1, r1
    310a:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    310e:	65 87       	std	Z+13, r22	; 0x0d
    3110:	16 86       	std	Z+14, r1	; 0x0e
    3112:	17 86       	std	Z+15, r1	; 0x0f
    3114:	80 91 fb 20 	lds	r24, 0x20FB
    3118:	90 91 fc 20 	lds	r25, 0x20FC
    311c:	40 91 f6 20 	lds	r20, 0x20F6
    3120:	60 91 f7 20 	lds	r22, 0x20F7
    3124:	70 91 f8 20 	lds	r23, 0x20F8
    3128:	28 1b       	sub	r18, r24
    312a:	39 0b       	sbc	r19, r25
    312c:	42 9f       	mul	r20, r18
    312e:	c0 01       	movw	r24, r0
    3130:	43 9f       	mul	r20, r19
    3132:	90 0d       	add	r25, r0
    3134:	11 24       	eor	r1, r1
    3136:	0e 94 a9 26 	call	0x4d52	; 0x4d52 <__udivmodhi4>
    313a:	60 8b       	std	Z+16, r22	; 0x10
    313c:	11 8a       	std	Z+17, r1	; 0x11
    313e:	66 e0       	ldi	r22, 0x06	; 6
    3140:	cf 01       	movw	r24, r30
    3142:	62 d2       	rcall	.+1220   	; 0x3608 <set_flash_ws2812>
    3144:	24 c0       	rjmp	.+72     	; 0x318e <__stack+0x18f>
    3146:	c8 dd       	rcall	.-1136   	; 0x2cd8 <clear_led>
    3148:	eb e1       	ldi	r30, 0x1B	; 27
    314a:	fb e2       	ldi	r31, 0x2B	; 43
    314c:	10 82       	st	Z, r1
    314e:	80 91 f6 20 	lds	r24, 0x20F6
    3152:	81 83       	std	Z+1, r24	; 0x01
    3154:	12 82       	std	Z+2, r1	; 0x02
    3156:	13 82       	std	Z+3, r1	; 0x03
    3158:	80 91 f6 20 	lds	r24, 0x20F6
    315c:	84 83       	std	Z+4, r24	; 0x04
    315e:	15 82       	std	Z+5, r1	; 0x05
    3160:	16 82       	std	Z+6, r1	; 0x06
    3162:	80 91 f6 20 	lds	r24, 0x20F6
    3166:	87 83       	std	Z+7, r24	; 0x07
    3168:	10 86       	std	Z+8, r1	; 0x08
    316a:	11 86       	std	Z+9, r1	; 0x09
    316c:	80 91 f6 20 	lds	r24, 0x20F6
    3170:	82 87       	std	Z+10, r24	; 0x0a
    3172:	13 86       	std	Z+11, r1	; 0x0b
    3174:	14 86       	std	Z+12, r1	; 0x0c
    3176:	80 91 f6 20 	lds	r24, 0x20F6
    317a:	85 87       	std	Z+13, r24	; 0x0d
    317c:	16 86       	std	Z+14, r1	; 0x0e
    317e:	17 86       	std	Z+15, r1	; 0x0f
    3180:	80 91 f6 20 	lds	r24, 0x20F6
    3184:	80 8b       	std	Z+16, r24	; 0x10
    3186:	11 8a       	std	Z+17, r1	; 0x11
    3188:	66 e0       	ldi	r22, 0x06	; 6
    318a:	cf 01       	movw	r24, r30
    318c:	3d d2       	rcall	.+1146   	; 0x3608 <set_flash_ws2812>
    318e:	80 91 42 21 	lds	r24, 0x2142
    3192:	90 91 43 21 	lds	r25, 0x2143
    3196:	01 96       	adiw	r24, 0x01	; 1
    3198:	80 93 42 21 	sts	0x2142, r24
    319c:	90 93 43 21 	sts	0x2143, r25
    31a0:	08 95       	ret

000031a2 <__vector_35>:
    31a2:	1f 92       	push	r1
    31a4:	0f 92       	push	r0
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	0f 92       	push	r0
    31aa:	11 24       	eor	r1, r1
    31ac:	2f 93       	push	r18
    31ae:	3f 93       	push	r19
    31b0:	4f 93       	push	r20
    31b2:	5f 93       	push	r21
    31b4:	6f 93       	push	r22
    31b6:	7f 93       	push	r23
    31b8:	8f 93       	push	r24
    31ba:	9f 93       	push	r25
    31bc:	af 93       	push	r26
    31be:	bf 93       	push	r27
    31c0:	ef 93       	push	r30
    31c2:	ff 93       	push	r31
    31c4:	80 e2       	ldi	r24, 0x20	; 32
    31c6:	80 93 6c 06 	sts	0x066C, r24
    31ca:	86 dd       	rcall	.-1268   	; 0x2cd8 <clear_led>
    31cc:	82 e1       	ldi	r24, 0x12	; 18
    31ce:	97 e2       	ldi	r25, 0x27	; 39
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	f1 f7       	brne	.-4      	; 0x31d0 <__vector_35+0x2e>
    31d4:	ff 91       	pop	r31
    31d6:	ef 91       	pop	r30
    31d8:	bf 91       	pop	r27
    31da:	af 91       	pop	r26
    31dc:	9f 91       	pop	r25
    31de:	8f 91       	pop	r24
    31e0:	7f 91       	pop	r23
    31e2:	6f 91       	pop	r22
    31e4:	5f 91       	pop	r21
    31e6:	4f 91       	pop	r20
    31e8:	3f 91       	pop	r19
    31ea:	2f 91       	pop	r18
    31ec:	0f 90       	pop	r0
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	0f 90       	pop	r0
    31f2:	1f 90       	pop	r1
    31f4:	18 95       	reti

000031f6 <send_response>:
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <send_response+0x6>
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	6a 83       	std	Y+2, r22	; 0x02
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	04 dd       	rcall	.-1528   	; 0x2c16 <uart_send_bytes>
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	08 95       	ret

00003218 <send_light_data>:
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	00 d0       	rcall	.+0      	; 0x321e <send_light_data+0x6>
    321e:	1f 92       	push	r1
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	90 91 40 21 	lds	r25, 0x2140
    3228:	80 91 41 21 	lds	r24, 0x2141
    322c:	9b 83       	std	Y+3, r25	; 0x03
    322e:	8a 83       	std	Y+2, r24	; 0x02
    3230:	8d e4       	ldi	r24, 0x4D	; 77
    3232:	89 83       	std	Y+1, r24	; 0x01
    3234:	63 e0       	ldi	r22, 0x03	; 3
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	ce 01       	movw	r24, r28
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	ec dc       	rcall	.-1576   	; 0x2c16 <uart_send_bytes>
    323e:	23 96       	adiw	r28, 0x03	; 3
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	08 95       	ret

0000324a <send_battery_data>:
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	00 d0       	rcall	.+0      	; 0x3250 <send_battery_data+0x6>
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	80 91 3e 21 	lds	r24, 0x213E
    3258:	90 91 3f 21 	lds	r25, 0x213F
    325c:	6a e0       	ldi	r22, 0x0A	; 10
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <__divmodhi4>
    3264:	6a 83       	std	Y+2, r22	; 0x02
    3266:	82 e4       	ldi	r24, 0x42	; 66
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	62 e0       	ldi	r22, 0x02	; 2
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	ce 01       	movw	r24, r28
    3270:	01 96       	adiw	r24, 0x01	; 1
    3272:	d1 dc       	rcall	.-1630   	; 0x2c16 <uart_send_bytes>
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	df 91       	pop	r29
    327a:	cf 91       	pop	r28
    327c:	08 95       	ret

0000327e <send_charging_data>:
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	00 d0       	rcall	.+0      	; 0x3284 <send_charging_data+0x6>
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
    3288:	19 82       	std	Y+1, r1	; 0x01
    328a:	1a 82       	std	Y+2, r1	; 0x02
    328c:	f1 dc       	rcall	.-1566   	; 0x2c70 <ischarging>
    328e:	8a 83       	std	Y+2, r24	; 0x02
    3290:	87 e4       	ldi	r24, 0x47	; 71
    3292:	89 83       	std	Y+1, r24	; 0x01
    3294:	62 e0       	ldi	r22, 0x02	; 2
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	bc dc       	rcall	.-1672   	; 0x2c16 <uart_send_bytes>
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	08 95       	ret

000032a8 <send_mtch_update_status>:
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <send_mtch_update_status+0x6>
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	19 82       	std	Y+1, r1	; 0x01
    32b4:	1a 82       	std	Y+2, r1	; 0x02
    32b6:	85 e5       	ldi	r24, 0x55	; 85
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	22 d5       	rcall	.+2628   	; 0x3d00 <nvm_eeprom_read_byte>
    32bc:	8a 83       	std	Y+2, r24	; 0x02
    32be:	88 e4       	ldi	r24, 0x48	; 72
    32c0:	89 83       	std	Y+1, r24	; 0x01
    32c2:	62 e0       	ldi	r22, 0x02	; 2
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	ce 01       	movw	r24, r28
    32c8:	01 96       	adiw	r24, 0x01	; 1
    32ca:	a5 dc       	rcall	.-1718   	; 0x2c16 <uart_send_bytes>
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	08 95       	ret

000032d6 <send_color_data>:
    32d6:	cf 93       	push	r28
    32d8:	df 93       	push	r29
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	2a 97       	sbiw	r28, 0x0a	; 10
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	fe 01       	movw	r30, r28
    32e6:	31 96       	adiw	r30, 0x01	; 1
    32e8:	8a e0       	ldi	r24, 0x0A	; 10
    32ea:	df 01       	movw	r26, r30
    32ec:	1d 92       	st	X+, r1
    32ee:	8a 95       	dec	r24
    32f0:	e9 f7       	brne	.-6      	; 0x32ec <send_color_data+0x16>
    32f2:	83 e6       	ldi	r24, 0x63	; 99
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	31 96       	adiw	r30, 0x01	; 1
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	dc 01       	movw	r26, r24
    32fe:	a1 52       	subi	r26, 0x21	; 33
    3300:	bf 4d       	sbci	r27, 0xDF	; 223
    3302:	2c 91       	ld	r18, X
    3304:	21 93       	st	Z+, r18
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	89 30       	cpi	r24, 0x09	; 9
    330a:	91 05       	cpc	r25, r1
    330c:	b9 f7       	brne	.-18     	; 0x32fc <send_color_data+0x26>
    330e:	6a e0       	ldi	r22, 0x0A	; 10
    3310:	70 e0       	ldi	r23, 0x00	; 0
    3312:	ce 01       	movw	r24, r28
    3314:	01 96       	adiw	r24, 0x01	; 1
    3316:	7f dc       	rcall	.-1794   	; 0x2c16 <uart_send_bytes>
    3318:	2a 96       	adiw	r28, 0x0a	; 10
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	08 95       	ret

00003324 <send_pulse_data>:
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	00 d0       	rcall	.+0      	; 0x332a <send_pulse_data+0x6>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	19 82       	std	Y+1, r1	; 0x01
    3330:	1a 82       	std	Y+2, r1	; 0x02
    3332:	dc d9       	rcall	.-3144   	; 0x26ec <get_pulse_state>
    3334:	8a 83       	std	Y+2, r24	; 0x02
    3336:	80 e7       	ldi	r24, 0x70	; 112
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	62 e0       	ldi	r22, 0x02	; 2
    333c:	70 e0       	ldi	r23, 0x00	; 0
    333e:	ce 01       	movw	r24, r28
    3340:	01 96       	adiw	r24, 0x01	; 1
    3342:	69 dc       	rcall	.-1838   	; 0x2c16 <uart_send_bytes>
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	df 91       	pop	r29
    334a:	cf 91       	pop	r28
    334c:	08 95       	ret

0000334e <restore_led_from_eeprom>:
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	d4 d4       	rcall	.+2472   	; 0x3d00 <nvm_eeprom_read_byte>
    3358:	cf ed       	ldi	r28, 0xDF	; 223
    335a:	d0 e2       	ldi	r29, 0x20	; 32
    335c:	88 83       	st	Y, r24
    335e:	82 e0       	ldi	r24, 0x02	; 2
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	ce d4       	rcall	.+2460   	; 0x3d00 <nvm_eeprom_read_byte>
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	83 e0       	ldi	r24, 0x03	; 3
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	ca d4       	rcall	.+2452   	; 0x3d00 <nvm_eeprom_read_byte>
    336c:	8a 83       	std	Y+2, r24	; 0x02
    336e:	84 e0       	ldi	r24, 0x04	; 4
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	c6 d4       	rcall	.+2444   	; 0x3d00 <nvm_eeprom_read_byte>
    3374:	8b 83       	std	Y+3, r24	; 0x03
    3376:	85 e0       	ldi	r24, 0x05	; 5
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	c2 d4       	rcall	.+2436   	; 0x3d00 <nvm_eeprom_read_byte>
    337c:	8c 83       	std	Y+4, r24	; 0x04
    337e:	86 e0       	ldi	r24, 0x06	; 6
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	be d4       	rcall	.+2428   	; 0x3d00 <nvm_eeprom_read_byte>
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	87 e0       	ldi	r24, 0x07	; 7
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	ba d4       	rcall	.+2420   	; 0x3d00 <nvm_eeprom_read_byte>
    338c:	8e 83       	std	Y+6, r24	; 0x06
    338e:	88 e0       	ldi	r24, 0x08	; 8
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	b6 d4       	rcall	.+2412   	; 0x3d00 <nvm_eeprom_read_byte>
    3394:	8f 83       	std	Y+7, r24	; 0x07
    3396:	89 e0       	ldi	r24, 0x09	; 9
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	b2 d4       	rcall	.+2404   	; 0x3d00 <nvm_eeprom_read_byte>
    339c:	88 87       	std	Y+8, r24	; 0x08
    339e:	46 d9       	rcall	.-3444   	; 0x262c <led_set_from_colors>
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <save_led_to_eeprom>:
    33a6:	08 95       	ret

000033a8 <wdt_kick>:
	}
}

void wdt_kick(void) {
	if (flag_timerd5) {
    33a8:	80 91 80 2a 	lds	r24, 0x2A80
    33ac:	88 23       	and	r24, r24
    33ae:	19 f0       	breq	.+6      	; 0x33b6 <wdt_kick+0xe>
		flag_timerd5 = false;
    33b0:	10 92 80 2a 	sts	0x2A80, r1
		wdt_reset();
    33b4:	a8 95       	wdr
    33b6:	08 95       	ret

000033b8 <init_ws2812>:
    33b8:	98 2f       	mov	r25, r24
    33ba:	97 70       	andi	r25, 0x07	; 7
    33bc:	61 e0       	ldi	r22, 0x01	; 1
    33be:	70 e0       	ldi	r23, 0x00	; 0
    33c0:	02 c0       	rjmp	.+4      	; 0x33c6 <init_ws2812+0xe>
    33c2:	66 0f       	add	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	9a 95       	dec	r25
    33c8:	e2 f7       	brpl	.-8      	; 0x33c2 <init_ws2812+0xa>
    33ca:	86 95       	lsr	r24
    33cc:	86 95       	lsr	r24
    33ce:	86 95       	lsr	r24
    33d0:	20 e2       	ldi	r18, 0x20	; 32
    33d2:	82 9f       	mul	r24, r18
    33d4:	c0 01       	movw	r24, r0
    33d6:	11 24       	eor	r1, r1
    33d8:	41 e0       	ldi	r20, 0x01	; 1
    33da:	50 e0       	ldi	r21, 0x00	; 0
    33dc:	9a 5f       	subi	r25, 0xFA	; 250
    33de:	30 c3       	rjmp	.+1632   	; 0x3a40 <ioport_configure_port_pin>
    33e0:	08 95       	ret

000033e2 <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    33e2:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    33e4:	11 96       	adiw	r26, 0x01	; 1
    33e6:	2c 91       	ld	r18, X
    33e8:	11 97       	sbiw	r26, 0x01	; 1
    33ea:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    33ec:	e0 e4       	ldi	r30, 0x40	; 64
    33ee:	f6 e0       	ldi	r31, 0x06	; 6
    33f0:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    33f2:	22 23       	and	r18, r18
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <set_led_ws2812+0x16>
    33f6:	28 c0       	rjmp	.+80     	; 0x3448 <set_led_ws2812+0x66>
    33f8:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    342a:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3444:	00 00       	nop
    3446:	26 c0       	rjmp	.+76     	; 0x3494 <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3448:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    345e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3460:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3492:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    3494:	22 0f       	add	r18, r18
    3496:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    3498:	09 f0       	breq	.+2      	; 0x349c <set_led_ws2812+0xba>
    349a:	ab cf       	rjmp	.-170    	; 0x33f2 <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    349c:	2c 91       	ld	r18, X
    349e:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    34a0:	e0 e4       	ldi	r30, 0x40	; 64
    34a2:	f6 e0       	ldi	r31, 0x06	; 6
    34a4:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    34a6:	22 23       	and	r18, r18
    34a8:	0c f0       	brlt	.+2      	; 0x34ac <set_led_ws2812+0xca>
    34aa:	28 c0       	rjmp	.+80     	; 0x34fc <set_led_ws2812+0x11a>
    34ac:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    34de:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    34f8:	00 00       	nop
    34fa:	26 c0       	rjmp	.+76     	; 0x3548 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    34fc:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3512:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3514:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3546:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    3548:	22 0f       	add	r18, r18
    354a:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    354c:	09 f0       	breq	.+2      	; 0x3550 <set_led_ws2812+0x16e>
    354e:	ab cf       	rjmp	.-170    	; 0x34a6 <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    3550:	12 96       	adiw	r26, 0x02	; 2
    3552:	9c 91       	ld	r25, X
    3554:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3556:	e0 e4       	ldi	r30, 0x40	; 64
    3558:	f6 e0       	ldi	r31, 0x06	; 6
    355a:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    355c:	99 23       	and	r25, r25
    355e:	0c f0       	brlt	.+2      	; 0x3562 <set_led_ws2812+0x180>
    3560:	28 c0       	rjmp	.+80     	; 0x35b2 <set_led_ws2812+0x1d0>
    3562:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3594:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    35ae:	00 00       	nop
    35b0:	26 c0       	rjmp	.+76     	; 0x35fe <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    35b2:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    35c8:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    35ca:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    35fc:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    35fe:	99 0f       	add	r25, r25
    3600:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    3602:	09 f0       	breq	.+2      	; 0x3606 <set_led_ws2812+0x224>
    3604:	ab cf       	rjmp	.-170    	; 0x355c <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    3606:	08 95       	ret

00003608 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    3610:	66 23       	and	r22, r22
    3612:	51 f0       	breq	.+20     	; 0x3628 <set_flash_ws2812+0x20>
    3614:	06 2f       	mov	r16, r22
    3616:	c8 2f       	mov	r28, r24
    3618:	d9 2f       	mov	r29, r25
    361a:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    361c:	ce 01       	movw	r24, r28
    361e:	e1 de       	rcall	.-574    	; 0x33e2 <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    3620:	1f 5f       	subi	r17, 0xFF	; 255
    3622:	23 96       	adiw	r28, 0x03	; 3
    3624:	10 13       	cpse	r17, r16
    3626:	fa cf       	rjmp	.-12     	; 0x361c <set_flash_ws2812+0x14>
    3628:	80 e4       	ldi	r24, 0x40	; 64
    362a:	80 93 46 06 	sts	0x0646, r24
    362e:	89 ef       	ldi	r24, 0xF9	; 249
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <set_flash_ws2812+0x2a>
    3636:	00 c0       	rjmp	.+0      	; 0x3638 <set_flash_ws2812+0x30>
    3638:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    363a:	df 91       	pop	r29
    363c:	cf 91       	pop	r28
    363e:	1f 91       	pop	r17
    3640:	0f 91       	pop	r16
    3642:	08 95       	ret

00003644 <main>:
int main(void)
{
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    3644:	bf d1       	rcall	.+894    	; 0x39c4 <sysclk_init>
	nvm_eeprom_write_byte(76, 0x01);
	*/
	
		/* Charging and watchdog timer - Using two compare channels with single timer */
	#ifdef ENABLE_WDT
		wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    3646:	88 e0       	ldi	r24, 0x08	; 8
    3648:	0e 94 5d 04 	call	0x8ba	; 0x8ba <wdt_set_timeout_period>
		wdt_reset();
    364c:	a8 95       	wdr
		wdt_enable();
    364e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <wdt_enable>
		init_timerd5();
    3652:	0e 94 c4 12 	call	0x2588	; 0x2588 <init_timerd5>
	#endif
	
	tc45_disable(&TCC4);
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	98 e0       	ldi	r25, 0x08	; 8
    365a:	16 d6       	rcall	.+3116   	; 0x4288 <tc45_disable>
	tc45_enable(&TCC5);
    365c:	80 e4       	ldi	r24, 0x40	; 64
    365e:	98 e0       	ldi	r25, 0x08	; 8
    3660:	e1 d5       	rcall	.+3010   	; 0x4224 <tc45_enable>
	
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    3662:	86 e1       	ldi	r24, 0x16	; 22
    3664:	a9 de       	rcall	.-686    	; 0x33b8 <init_ws2812>
	clear_led();
    3666:	38 db       	rcall	.-2448   	; 0x2cd8 <clear_led>
	
	// init the mtch 6301
	init_mtchio();
    3668:	0e 94 8e 0b 	call	0x171c	; 0x171c <init_mtchio>
	init_i2c();
    366c:	0e 94 48 0b 	call	0x1690	; 0x1690 <init_i2c>
	init_mtch6301();
    3670:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <init_mtch6301>
	
	write_mtch_settings();
    3674:	0e 94 2f 0c 	call	0x185e	; 0x185e <write_mtch_settings>
	}
	*/
	//board_init();
//	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);

	init_uart();
    3678:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <init_uart>
	
	init_chargingpin(IOPORT_CREATE_PIN(PORTR, 1));
    367c:	89 e7       	ldi	r24, 0x79	; 121
    367e:	e3 da       	rcall	.-2618   	; 0x2c46 <init_chargingpin>
	nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
	nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
	*/
	
	restore_led_from_eeprom();
    3680:	66 de       	rcall	.-820    	; 0x334e <restore_led_from_eeprom>
	
	core_status = STATUS_CHARGE;
    3682:	c1 e0       	ldi	r28, 0x01	; 1
    3684:	c0 93 45 21 	sts	0x2145, r28
	change_adc_channel(core_status);
    3688:	80 91 45 21 	lds	r24, 0x2145
    368c:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
	flag_initcharge = true;
    3690:	c0 93 3b 21 	sts	0x213B, r28
	init_adc(core_status);
    3694:	80 91 45 21 	lds	r24, 0x2145
    3698:	0e 94 88 04 	call	0x910	; 0x910 <init_adc>
	adc_enable_interrupt();
    369c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <adc_enable_interrupt>
	init_timer5();
    36a0:	0e 94 a0 12 	call	0x2540	; 0x2540 <init_timer5>
	init_timer4();		
    36a4:	0e 94 78 12 	call	0x24f0	; 0x24f0 <init_timer4>
		flag_initcharge = true;
		tc45_disable(&TCC4);
		tc45_enable(&TCC5);
	}
	else*/
	(!ischarging())
    36a8:	e3 da       	rcall	.-2618   	; 0x2c70 <ischarging>
    36aa:	81 11       	cpse	r24, r1
    36ac:	11 c0       	rjmp	.+34     	; 0x36d0 <main+0x8c>
	{
		old_core_status = core_status;
    36ae:	80 91 45 21 	lds	r24, 0x2145
    36b2:	80 93 44 21 	sts	0x2144, r24
		core_status = STATUS_BATT_READ;
    36b6:	86 e0       	ldi	r24, 0x06	; 6
    36b8:	80 93 45 21 	sts	0x2145, r24
		change_adc_channel(core_status);
    36bc:	80 91 45 21 	lds	r24, 0x2145
    36c0:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
		tc45_disable(&TCC5);
    36c4:	80 e4       	ldi	r24, 0x40	; 64
    36c6:	98 e0       	ldi	r25, 0x08	; 8
    36c8:	df d5       	rcall	.+3006   	; 0x4288 <tc45_disable>
		tc45_enable(&TCC4);
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	98 e0       	ldi	r25, 0x08	; 8
    36ce:	aa d5       	rcall	.+2900   	; 0x4224 <tc45_enable>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    36d0:	0f 2e       	mov	r0, r31
    36d2:	f0 e6       	ldi	r31, 0x60	; 96
    36d4:	ef 2e       	mov	r14, r31
    36d6:	f6 e0       	ldi	r31, 0x06	; 6
    36d8:	ff 2e       	mov	r15, r31
    36da:	f0 2d       	mov	r31, r0
    36dc:	68 94       	set
    36de:	cc 24       	eor	r12, r12
    36e0:	c1 f8       	bld	r12, 1
    36e2:	d1 e0       	ldi	r29, 0x01	; 1
    36e4:	0f 2e       	mov	r0, r31
    36e6:	f0 ee       	ldi	r31, 0xE0	; 224
    36e8:	6f 2e       	mov	r6, r31
    36ea:	f7 e0       	ldi	r31, 0x07	; 7
    36ec:	7f 2e       	mov	r7, r31
    36ee:	f0 2d       	mov	r31, r0
    36f0:	68 94       	set
    36f2:	dd 24       	eor	r13, r13
    36f4:	d6 f8       	bld	r13, 6
    36f6:	00 e0       	ldi	r16, 0x00	; 0
    36f8:	16 e0       	ldi	r17, 0x06	; 6
    36fa:	68 94       	set
    36fc:	aa 24       	eor	r10, r10
    36fe:	a7 f8       	bld	r10, 7
    3700:	bc 2c       	mov	r11, r12
    3702:	cd 2f       	mov	r28, r29
    3704:	68 94       	set
    3706:	88 24       	eor	r8, r8
    3708:	85 f8       	bld	r8, 5
						{
							//	usart_putchar(M_USART, 0x55);

							run();
							old_core_status = core_status;
							core_status = STATUS_FFT_R;
    370a:	68 94       	set
    370c:	55 24       	eor	r5, r5
    370e:	52 f8       	bld	r5, 2
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
					old_core_status = core_status;
					core_status = STATUS_BATT_READ;
    3710:	0f 2e       	mov	r0, r31
    3712:	f6 e0       	ldi	r31, 0x06	; 6
    3714:	9f 2e       	mov	r9, r31
    3716:	f0 2d       	mov	r31, r0
	
	// Insert application code here, after the board has been initialized.
	while(1)
	{

		if (latest_gesture) {
    3718:	80 91 29 21 	lds	r24, 0x2129
    371c:	88 23       	and	r24, r24
    371e:	09 f4       	brne	.+2      	; 0x3722 <main+0xde>
    3720:	71 c0       	rjmp	.+226    	; 0x3804 <main+0x1c0>
			//twinkle(255, 0, 255);
			switch (latest_gesture) {
    3722:	80 91 29 21 	lds	r24, 0x2129
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	fc 01       	movw	r30, r24
    372a:	e0 5a       	subi	r30, 0xA0	; 160
    372c:	f1 09       	sbc	r31, r1
    372e:	e7 30       	cpi	r30, 0x07	; 7
    3730:	f1 05       	cpc	r31, r1
    3732:	08 f0       	brcs	.+2      	; 0x3736 <main+0xf2>
    3734:	65 c0       	rjmp	.+202    	; 0x3800 <main+0x1bc>
    3736:	e0 57       	subi	r30, 0x70	; 112
    3738:	fe 4f       	sbci	r31, 0xFE	; 254
    373a:	0c 94 f2 26 	jmp	0x4de4	; 0x4de4 <__tablejump2__>
    373e:	f8 01       	movw	r30, r16
    3740:	85 82       	std	Z+5, r8	; 0x05
    3742:	ff e7       	ldi	r31, 0x7F	; 127
    3744:	2a e1       	ldi	r18, 0x1A	; 26
    3746:	86 e0       	ldi	r24, 0x06	; 6
    3748:	f1 50       	subi	r31, 0x01	; 1
    374a:	20 40       	sbci	r18, 0x00	; 0
    374c:	80 40       	sbci	r24, 0x00	; 0
    374e:	e1 f7       	brne	.-8      	; 0x3748 <main+0x104>
    3750:	00 c0       	rjmp	.+0      	; 0x3752 <main+0x10e>
    3752:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3754:	f8 01       	movw	r30, r16
    3756:	86 82       	std	Z+6, r8	; 0x06
    3758:	53 c0       	rjmp	.+166    	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    375a:	f8 01       	movw	r30, r16
    375c:	d5 82       	std	Z+5, r13	; 0x05
    375e:	ff e7       	ldi	r31, 0x7F	; 127
    3760:	2a e1       	ldi	r18, 0x1A	; 26
    3762:	86 e0       	ldi	r24, 0x06	; 6
    3764:	f1 50       	subi	r31, 0x01	; 1
    3766:	20 40       	sbci	r18, 0x00	; 0
    3768:	80 40       	sbci	r24, 0x00	; 0
    376a:	e1 f7       	brne	.-8      	; 0x3764 <main+0x120>
    376c:	00 c0       	rjmp	.+0      	; 0x376e <main+0x12a>
    376e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3770:	f8 01       	movw	r30, r16
    3772:	d6 82       	std	Z+6, r13	; 0x06
    3774:	45 c0       	rjmp	.+138    	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3776:	f8 01       	movw	r30, r16
    3778:	a5 82       	std	Z+5, r10	; 0x05
    377a:	ff e7       	ldi	r31, 0x7F	; 127
    377c:	2a e1       	ldi	r18, 0x1A	; 26
    377e:	86 e0       	ldi	r24, 0x06	; 6
    3780:	f1 50       	subi	r31, 0x01	; 1
    3782:	20 40       	sbci	r18, 0x00	; 0
    3784:	80 40       	sbci	r24, 0x00	; 0
    3786:	e1 f7       	brne	.-8      	; 0x3780 <main+0x13c>
    3788:	00 c0       	rjmp	.+0      	; 0x378a <main+0x146>
    378a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    378c:	f8 01       	movw	r30, r16
    378e:	a6 82       	std	Z+6, r10	; 0x06
    3790:	37 c0       	rjmp	.+110    	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3792:	f7 01       	movw	r30, r14
    3794:	d5 82       	std	Z+5, r13	; 0x05
    3796:	ff e7       	ldi	r31, 0x7F	; 127
    3798:	2a e1       	ldi	r18, 0x1A	; 26
    379a:	86 e0       	ldi	r24, 0x06	; 6
    379c:	f1 50       	subi	r31, 0x01	; 1
    379e:	20 40       	sbci	r18, 0x00	; 0
    37a0:	80 40       	sbci	r24, 0x00	; 0
    37a2:	e1 f7       	brne	.-8      	; 0x379c <main+0x158>
    37a4:	00 c0       	rjmp	.+0      	; 0x37a6 <main+0x162>
    37a6:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    37a8:	f7 01       	movw	r30, r14
    37aa:	d6 82       	std	Z+6, r13	; 0x06
    37ac:	29 c0       	rjmp	.+82     	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    37ae:	f3 01       	movw	r30, r6
    37b0:	d5 83       	std	Z+5, r29	; 0x05
    37b2:	ff e7       	ldi	r31, 0x7F	; 127
    37b4:	2a e1       	ldi	r18, 0x1A	; 26
    37b6:	86 e0       	ldi	r24, 0x06	; 6
    37b8:	f1 50       	subi	r31, 0x01	; 1
    37ba:	20 40       	sbci	r18, 0x00	; 0
    37bc:	80 40       	sbci	r24, 0x00	; 0
    37be:	e1 f7       	brne	.-8      	; 0x37b8 <main+0x174>
    37c0:	00 c0       	rjmp	.+0      	; 0x37c2 <main+0x17e>
    37c2:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    37c4:	f3 01       	movw	r30, r6
    37c6:	d6 83       	std	Z+6, r29	; 0x06
    37c8:	1b c0       	rjmp	.+54     	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    37ca:	f7 01       	movw	r30, r14
    37cc:	d5 83       	std	Z+5, r29	; 0x05
    37ce:	ff e7       	ldi	r31, 0x7F	; 127
    37d0:	2a e1       	ldi	r18, 0x1A	; 26
    37d2:	86 e0       	ldi	r24, 0x06	; 6
    37d4:	f1 50       	subi	r31, 0x01	; 1
    37d6:	20 40       	sbci	r18, 0x00	; 0
    37d8:	80 40       	sbci	r24, 0x00	; 0
    37da:	e1 f7       	brne	.-8      	; 0x37d4 <main+0x190>
    37dc:	00 c0       	rjmp	.+0      	; 0x37de <main+0x19a>
    37de:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    37e0:	f7 01       	movw	r30, r14
    37e2:	d6 83       	std	Z+6, r29	; 0x06
    37e4:	0d c0       	rjmp	.+26     	; 0x3800 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    37e6:	f7 01       	movw	r30, r14
    37e8:	c5 82       	std	Z+5, r12	; 0x05
    37ea:	ff e7       	ldi	r31, 0x7F	; 127
    37ec:	2a e1       	ldi	r18, 0x1A	; 26
    37ee:	86 e0       	ldi	r24, 0x06	; 6
    37f0:	f1 50       	subi	r31, 0x01	; 1
    37f2:	20 40       	sbci	r18, 0x00	; 0
    37f4:	80 40       	sbci	r24, 0x00	; 0
    37f6:	e1 f7       	brne	.-8      	; 0x37f0 <main+0x1ac>
    37f8:	00 c0       	rjmp	.+0      	; 0x37fa <main+0x1b6>
    37fa:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    37fc:	f7 01       	movw	r30, r14
    37fe:	c6 82       	std	Z+6, r12	; 0x06
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 1));
					break;
				default:
				break;
			}
			latest_gesture = NONE;
    3800:	10 92 29 21 	sts	0x2129, r1
			//twinkle(0, 0, 0);
		}
		
	        uart_Task();
    3804:	41 d8       	rcall	.-3966   	; 0x2888 <uart_Task>
	
		if (ischarging()) 
    3806:	34 da       	rcall	.-2968   	; 0x2c70 <ischarging>
    3808:	88 23       	and	r24, r24
    380a:	f1 f0       	breq	.+60     	; 0x3848 <main+0x204>
		{
			if (core_status != STATUS_CHARGE)
    380c:	80 91 45 21 	lds	r24, 0x2145
    3810:	81 30       	cpi	r24, 0x01	; 1
    3812:	09 f4       	brne	.+2      	; 0x3816 <main+0x1d2>
    3814:	ce c0       	rjmp	.+412    	; 0x39b2 <main+0x36e>
			{
				twinkle(0, 0, 255);
    3816:	4f ef       	ldi	r20, 0xFF	; 255
    3818:	60 e0       	ldi	r22, 0x00	; 0
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	2e da       	rcall	.-2980   	; 0x2c7a <twinkle>
				shutdown_received = false;
    381e:	10 92 36 21 	sts	0x2136, r1
				old_core_status = core_status;
    3822:	80 91 45 21 	lds	r24, 0x2145
    3826:	80 93 44 21 	sts	0x2144, r24
				core_status = STATUS_CHARGE;
    382a:	c0 93 45 21 	sts	0x2145, r28
				change_adc_channel(core_status);
    382e:	80 91 45 21 	lds	r24, 0x2145
    3832:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
				flag_initcharge = true;
    3836:	c0 93 3b 21 	sts	0x213B, r28
				tc45_disable(&TCC4);
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	98 e0       	ldi	r25, 0x08	; 8
    383e:	24 d5       	rcall	.+2632   	; 0x4288 <tc45_disable>
				tc45_enable(&TCC5);
    3840:	80 e4       	ldi	r24, 0x40	; 64
    3842:	98 e0       	ldi	r25, 0x08	; 8
    3844:	ef d4       	rcall	.+2526   	; 0x4224 <tc45_enable>
    3846:	b5 c0       	rjmp	.+362    	; 0x39b2 <main+0x36e>
			}
		}
		else 	
		{
			if (core_status == STATUS_CHARGE) {
    3848:	80 91 45 21 	lds	r24, 0x2145
    384c:	81 30       	cpi	r24, 0x01	; 1
    384e:	89 f4       	brne	.+34     	; 0x3872 <main+0x22e>
				old_core_status = core_status;
    3850:	80 91 45 21 	lds	r24, 0x2145
    3854:	80 93 44 21 	sts	0x2144, r24
				core_status = STATUS_BATT_READ;
    3858:	90 92 45 21 	sts	0x2145, r9
				change_adc_channel(core_status);
    385c:	80 91 45 21 	lds	r24, 0x2145
    3860:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
				tc45_disable(&TCC5);
    3864:	80 e4       	ldi	r24, 0x40	; 64
    3866:	98 e0       	ldi	r25, 0x08	; 8
    3868:	0f d5       	rcall	.+2590   	; 0x4288 <tc45_disable>
				tc45_enable(&TCC4);
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	98 e0       	ldi	r25, 0x08	; 8
    386e:	da d4       	rcall	.+2484   	; 0x4224 <tc45_enable>
				load_data_color_led();
    3870:	48 da       	rcall	.-2928   	; 0x2d02 <load_data_color_led>
			}
			
			if (get_pulse_state() && core_status != STATUS_FFT_L && core_status != STATUS_FFT_R) {
    3872:	0e 94 76 13 	call	0x26ec	; 0x26ec <get_pulse_state>
    3876:	88 23       	and	r24, r24
    3878:	51 f0       	breq	.+20     	; 0x388e <main+0x24a>
    387a:	80 91 45 21 	lds	r24, 0x2145
    387e:	82 30       	cpi	r24, 0x02	; 2
    3880:	31 f0       	breq	.+12     	; 0x388e <main+0x24a>
    3882:	80 91 45 21 	lds	r24, 0x2145
    3886:	84 30       	cpi	r24, 0x04	; 4
    3888:	11 f0       	breq	.+4      	; 0x388e <main+0x24a>
				trigger_pulse_state_changed();
    388a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <trigger_pulse_state_changed>
			}
			
			if (shutdown_received) {
    388e:	80 91 36 21 	lds	r24, 0x2136
    3892:	88 23       	and	r24, r24
    3894:	91 f0       	breq	.+36     	; 0x38ba <main+0x276>
				old_core_status = core_status;
    3896:	80 91 45 21 	lds	r24, 0x2145
    389a:	80 93 44 21 	sts	0x2144, r24
				core_status = STATUS_NULL;
    389e:	10 92 45 21 	sts	0x2145, r1
				tc45_disable(&TCC4);
    38a2:	80 e0       	ldi	r24, 0x00	; 0
    38a4:	98 e0       	ldi	r25, 0x08	; 8
    38a6:	f0 d4       	rcall	.+2528   	; 0x4288 <tc45_disable>
				save_led_to_eeprom();
    38a8:	7e dd       	rcall	.-1284   	; 0x33a6 <save_led_to_eeprom>
				twinkle(0, 0, 0);
    38aa:	40 e0       	ldi	r20, 0x00	; 0
    38ac:	60 e0       	ldi	r22, 0x00	; 0
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	e4 d9       	rcall	.-3128   	; 0x2c7a <twinkle>
				//turn off watch dog.
				wdt_disable();
    38b2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <wdt_disable>
				cpu_irq_disable();
    38b6:	f8 94       	cli
				while(1);
    38b8:	ff cf       	rjmp	.-2      	; 0x38b8 <main+0x274>
			}
			else if (get_and_clear_pulse_state_changed()) {
    38ba:	0e 94 79 13 	call	0x26f2	; 0x26f2 <get_and_clear_pulse_state_changed>
    38be:	88 23       	and	r24, r24
    38c0:	59 f1       	breq	.+86     	; 0x3918 <main+0x2d4>
				if (get_pulse_state()) {
    38c2:	0e 94 76 13 	call	0x26ec	; 0x26ec <get_pulse_state>
    38c6:	88 23       	and	r24, r24
    38c8:	a1 f0       	breq	.+40     	; 0x38f2 <main+0x2ae>
					// If new message is to turn on visualization and if it is already on then ignore it
					
					// Initialize the ADC by changing to correct channel
					fht_flag = true;
    38ca:	c0 93 48 21 	sts	0x2148, r28
					
					old_core_status = core_status;
    38ce:	80 91 45 21 	lds	r24, 0x2145
    38d2:	80 93 44 21 	sts	0x2144, r24
					core_status = STATUS_FFT_L;
    38d6:	b0 92 45 21 	sts	0x2145, r11
					change_adc_channel(core_status);
    38da:	80 91 45 21 	lds	r24, 0x2145
    38de:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
					// Switch on visualization interrupt
					tc45_enable(&TCC4);
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	98 e0       	ldi	r25, 0x08	; 8
    38e6:	9e d4       	rcall	.+2364   	; 0x4224 <tc45_enable>
					// save state to CSR- the fact that visualization is on
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x01);
    38e8:	6c 2f       	mov	r22, r28
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	0e 94 34 0b 	call	0x1668	; 0x1668 <write_byte_eeprom>
    38f0:	60 c0       	rjmp	.+192    	; 0x39b2 <main+0x36e>
					// respond to CSR
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
    38f2:	10 92 48 21 	sts	0x2148, r1
					old_core_status = core_status;
    38f6:	80 91 45 21 	lds	r24, 0x2145
    38fa:	80 93 44 21 	sts	0x2144, r24
					core_status = STATUS_BATT_READ;
    38fe:	90 92 45 21 	sts	0x2145, r9
					change_adc_channel(core_status);
    3902:	80 91 45 21 	lds	r24, 0x2145
    3906:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
					clear_led();
    390a:	e6 d9       	rcall	.-3124   	; 0x2cd8 <clear_led>
					// save the state to eeprom (Clear visualization was on)
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x00);
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	0e 94 34 0b 	call	0x1668	; 0x1668 <write_byte_eeprom>
					// Update LED from led_color_buf_data to last saved state
					load_data_color_led();
    3914:	f6 d9       	rcall	.-3092   	; 0x2d02 <load_data_color_led>
    3916:	4d c0       	rjmp	.+154    	; 0x39b2 <main+0x36e>
					//send_response(new_message_ID, 0x01);
				}
			}
			else {
				// if the fht led function was turned on
				if (fht_flag == true&&tempPulseDisabled==false)
    3918:	80 91 48 21 	lds	r24, 0x2148
    391c:	81 30       	cpi	r24, 0x01	; 1
    391e:	09 f0       	breq	.+2      	; 0x3922 <main+0x2de>
    3920:	48 c0       	rjmp	.+144    	; 0x39b2 <main+0x36e>
    3922:	80 91 35 21 	lds	r24, 0x2135
    3926:	81 11       	cpse	r24, r1
    3928:	44 c0       	rjmp	.+136    	; 0x39b2 <main+0x36e>
				{
					if (flag_fft == true)
    392a:	80 91 04 21 	lds	r24, 0x2104
    392e:	88 23       	and	r24, r24
    3930:	09 f4       	brne	.+2      	; 0x3934 <main+0x2f0>
    3932:	3f c0       	rjmp	.+126    	; 0x39b2 <main+0x36e>
					{
						
						if (core_status == STATUS_FFT_L)
    3934:	80 91 45 21 	lds	r24, 0x2145
    3938:	82 30       	cpi	r24, 0x02	; 2
    393a:	81 f4       	brne	.+32     	; 0x395c <main+0x318>
						{
							//	usart_putchar(M_USART, 0x55);

							run();
    393c:	0e 94 b0 08 	call	0x1160	; 0x1160 <run>
							old_core_status = core_status;
    3940:	80 91 45 21 	lds	r24, 0x2145
    3944:	80 93 44 21 	sts	0x2144, r24
							core_status = STATUS_FFT_R;
    3948:	50 92 45 21 	sts	0x2145, r5
							change_adc_channel(core_status);
    394c:	80 91 45 21 	lds	r24, 0x2145
    3950:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
							tc45_enable(&TCC4);
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	98 e0       	ldi	r25, 0x08	; 8
    3958:	65 d4       	rcall	.+2250   	; 0x4224 <tc45_enable>
    395a:	29 c0       	rjmp	.+82     	; 0x39ae <main+0x36a>
						}
						else if (core_status == STATUS_FFT_R)
    395c:	80 91 45 21 	lds	r24, 0x2145
    3960:	84 30       	cpi	r24, 0x04	; 4
    3962:	29 f5       	brne	.+74     	; 0x39ae <main+0x36a>
						{
							//	usart_putchar(M_USART, 0x66);

							run();
    3964:	0e 94 b0 08 	call	0x1160	; 0x1160 <run>
							
							if (ischarging())
    3968:	83 d9       	rcall	.-3322   	; 0x2c70 <ischarging>
    396a:	88 23       	and	r24, r24
    396c:	99 f0       	breq	.+38     	; 0x3994 <main+0x350>
							{
								old_core_status = core_status;
    396e:	80 91 45 21 	lds	r24, 0x2145
    3972:	80 93 44 21 	sts	0x2144, r24
								core_status = STATUS_CHARGE;
    3976:	c0 93 45 21 	sts	0x2145, r28
								change_adc_channel(core_status);
    397a:	80 91 45 21 	lds	r24, 0x2145
    397e:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
								flag_initcharge = true;
    3982:	c0 93 3b 21 	sts	0x213B, r28
								tc45_disable(&TCC4);
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	98 e0       	ldi	r25, 0x08	; 8
    398a:	7e d4       	rcall	.+2300   	; 0x4288 <tc45_disable>
								tc45_enable(&TCC5);
    398c:	80 e4       	ldi	r24, 0x40	; 64
    398e:	98 e0       	ldi	r25, 0x08	; 8
    3990:	49 d4       	rcall	.+2194   	; 0x4224 <tc45_enable>
    3992:	0d c0       	rjmp	.+26     	; 0x39ae <main+0x36a>
							}
							else
							{
								old_core_status = core_status;
    3994:	80 91 45 21 	lds	r24, 0x2145
    3998:	80 93 44 21 	sts	0x2144, r24
								core_status = STATUS_FFT_L;
    399c:	b0 92 45 21 	sts	0x2145, r11
								change_adc_channel(core_status);
    39a0:	80 91 45 21 	lds	r24, 0x2145
    39a4:	0e 94 06 05 	call	0xa0c	; 0xa0c <change_adc_channel>
								tc45_enable(&TCC4);
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	98 e0       	ldi	r25, 0x08	; 8
    39ac:	3b d4       	rcall	.+2166   	; 0x4224 <tc45_enable>
							}
							
						}
						
						flag_fft = false;
    39ae:	10 92 04 21 	sts	0x2104, r1
				}
			}
		}

	#ifdef ENABLE_WDT
		if (flag_timerd5) {
    39b2:	80 91 80 2a 	lds	r24, 0x2A80
    39b6:	88 23       	and	r24, r24
    39b8:	09 f4       	brne	.+2      	; 0x39bc <main+0x378>
    39ba:	ae ce       	rjmp	.-676    	; 0x3718 <main+0xd4>
			flag_timerd5 = false;
    39bc:	10 92 80 2a 	sts	0x2A80, r1
			wdt_reset(); 
    39c0:	a8 95       	wdr
    39c2:	a0 ce       	rjmp	.-704    	; 0x3704 <main+0xc0>

000039c4 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    39c4:	8f ef       	ldi	r24, 0xFF	; 255
    39c6:	80 93 70 00 	sts	0x0070, r24
    39ca:	80 93 71 00 	sts	0x0071, r24
    39ce:	80 93 72 00 	sts	0x0072, r24
    39d2:	80 93 73 00 	sts	0x0073, r24
    39d6:	80 93 74 00 	sts	0x0074, r24
    39da:	80 93 75 00 	sts	0x0075, r24
    39de:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    39e2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    39e4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    39e6:	e0 e5       	ldi	r30, 0x50	; 80
    39e8:	f0 e0       	ldi	r31, 0x00	; 0
    39ea:	80 81       	ld	r24, Z
    39ec:	82 60       	ori	r24, 0x02	; 2
    39ee:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39f0:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    39f2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    39f4:	81 ff       	sbrs	r24, 1
    39f6:	fd cf       	rjmp	.-6      	; 0x39f2 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    39f8:	61 e0       	ldi	r22, 0x01	; 1
    39fa:	80 e4       	ldi	r24, 0x40	; 64
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	7a d1       	rcall	.+756    	; 0x3cf4 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a00:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3a02:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    3a04:	e0 e5       	ldi	r30, 0x50	; 80
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	8e 7f       	andi	r24, 0xFE	; 254
    3a0c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a0e:	9f bf       	out	0x3f, r25	; 63
    3a10:	08 95       	ret

00003a12 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a12:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3a14:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    3a16:	e8 2f       	mov	r30, r24
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	e0 59       	subi	r30, 0x90	; 144
    3a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1e:	60 95       	com	r22
    3a20:	80 81       	ld	r24, Z
    3a22:	68 23       	and	r22, r24
    3a24:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a26:	9f bf       	out	0x3f, r25	; 63
    3a28:	08 95       	ret

00003a2a <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a2a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3a2c:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    3a2e:	e8 2f       	mov	r30, r24
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	e0 59       	subi	r30, 0x90	; 144
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	80 81       	ld	r24, Z
    3a38:	68 2b       	or	r22, r24
    3a3a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a3c:	9f bf       	out	0x3f, r25	; 63
    3a3e:	08 95       	ret

00003a40 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	fc 01       	movw	r30, r24
    3a46:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3a4c:	c6 2f       	mov	r28, r22
    3a4e:	d0 e0       	ldi	r29, 0x00	; 0
    3a50:	de 01       	movw	r26, r28
    3a52:	02 2e       	mov	r0, r18
    3a54:	02 c0       	rjmp	.+4      	; 0x3a5a <ioport_configure_port_pin+0x1a>
    3a56:	b5 95       	asr	r27
    3a58:	a7 95       	ror	r26
    3a5a:	0a 94       	dec	r0
    3a5c:	e2 f7       	brpl	.-8      	; 0x3a56 <ioport_configure_port_pin+0x16>
    3a5e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3a60:	50 83       	st	Z, r21
    3a62:	2f 5f       	subi	r18, 0xFF	; 255
    3a64:	3f 4f       	sbci	r19, 0xFF	; 255
    3a66:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3a68:	28 30       	cpi	r18, 0x08	; 8
    3a6a:	31 05       	cpc	r19, r1
    3a6c:	89 f7       	brne	.-30     	; 0x3a50 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3a6e:	40 ff       	sbrs	r20, 0
    3a70:	0a c0       	rjmp	.+20     	; 0x3a86 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    3a72:	41 ff       	sbrs	r20, 1
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    3a76:	fc 01       	movw	r30, r24
    3a78:	65 83       	std	Z+5, r22	; 0x05
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3a80:	fc 01       	movw	r30, r24
    3a82:	61 83       	std	Z+1, r22	; 0x01
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    3a86:	fc 01       	movw	r30, r24
    3a88:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3a8a:	df 91       	pop	r29
    3a8c:	cf 91       	pop	r28
    3a8e:	08 95       	ret

00003a90 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    3a90:	9c 01       	movw	r18, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a92:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3a94:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3a96:	21 15       	cp	r18, r1
    3a98:	32 40       	sbci	r19, 0x02	; 2
    3a9a:	21 f4       	brne	.+8      	; 0x3aa4 <adc_set_callback+0x14>
		adca_callback = callback;
    3a9c:	60 93 33 2b 	sts	0x2B33, r22
    3aa0:	70 93 34 2b 	sts	0x2B34, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3aa4:	9f bf       	out	0x3f, r25	; 63
    3aa6:	08 95       	ret

00003aa8 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3aa8:	81 15       	cp	r24, r1
    3aaa:	92 40       	sbci	r25, 0x02	; 2
    3aac:	59 f4       	brne	.+22     	; 0x3ac4 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    3aae:	80 91 49 21 	lds	r24, 0x2149
    3ab2:	91 e0       	ldi	r25, 0x01	; 1
    3ab4:	98 0f       	add	r25, r24
    3ab6:	90 93 49 21 	sts	0x2149, r25
    3aba:	81 11       	cpse	r24, r1
    3abc:	03 c0       	rjmp	.+6      	; 0x3ac4 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3abe:	62 e0       	ldi	r22, 0x02	; 2
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	a7 cf       	rjmp	.-178    	; 0x3a12 <sysclk_enable_module>
    3ac4:	08 95       	ret

00003ac6 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3ac6:	81 15       	cp	r24, r1
    3ac8:	92 40       	sbci	r25, 0x02	; 2
    3aca:	51 f4       	brne	.+20     	; 0x3ae0 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    3acc:	80 91 49 21 	lds	r24, 0x2149
    3ad0:	81 50       	subi	r24, 0x01	; 1
    3ad2:	80 93 49 21 	sts	0x2149, r24
    3ad6:	81 11       	cpse	r24, r1
    3ad8:	03 c0       	rjmp	.+6      	; 0x3ae0 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3ada:	62 e0       	ldi	r22, 0x02	; 2
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	a5 cf       	rjmp	.-182    	; 0x3a2a <sysclk_disable_module>
    3ae0:	08 95       	ret

00003ae2 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    3ae2:	1f 93       	push	r17
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3aea:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    3aec:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    3aee:	dc df       	rcall	.-72     	; 0x3aa8 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    3af0:	88 81       	ld	r24, Y
    3af2:	81 60       	ori	r24, 0x01	; 1
    3af4:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3af6:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3af8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3afa:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3afc:	ed e2       	ldi	r30, 0x2D	; 45
    3afe:	fb e2       	ldi	r31, 0x2B	; 43
    3b00:	81 81       	ldd	r24, Z+1	; 0x01
    3b02:	8f 5f       	subi	r24, 0xFF	; 255
    3b04:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b06:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	08 95       	ret

00003b10 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    3b10:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3b12:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3b14:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    3b16:	fc 01       	movw	r30, r24
    3b18:	20 81       	ld	r18, Z
    3b1a:	2e 7f       	andi	r18, 0xFE	; 254
    3b1c:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    3b1e:	d3 df       	rcall	.-90     	; 0x3ac6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b20:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3b22:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3b24:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3b26:	ed e2       	ldi	r30, 0x2D	; 45
    3b28:	fb e2       	ldi	r31, 0x2B	; 43
    3b2a:	81 81       	ldd	r24, Z+1	; 0x01
    3b2c:	81 50       	subi	r24, 0x01	; 1
    3b2e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3b30:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    3b32:	cf 91       	pop	r28
    3b34:	08 95       	ret

00003b36 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    3b36:	1f 92       	push	r1
    3b38:	0f 92       	push	r0
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	0f 92       	push	r0
    3b3e:	11 24       	eor	r1, r1
    3b40:	2f 93       	push	r18
    3b42:	3f 93       	push	r19
    3b44:	4f 93       	push	r20
    3b46:	5f 93       	push	r21
    3b48:	6f 93       	push	r22
    3b4a:	7f 93       	push	r23
    3b4c:	8f 93       	push	r24
    3b4e:	9f 93       	push	r25
    3b50:	af 93       	push	r26
    3b52:	bf 93       	push	r27
    3b54:	ef 93       	push	r30
    3b56:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    3b58:	40 91 24 02 	lds	r20, 0x0224
    3b5c:	50 91 25 02 	lds	r21, 0x0225
    3b60:	e0 91 33 2b 	lds	r30, 0x2B33
    3b64:	f0 91 34 2b 	lds	r31, 0x2B34
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	92 e0       	ldi	r25, 0x02	; 2
    3b6e:	09 95       	icall
}
    3b70:	ff 91       	pop	r31
    3b72:	ef 91       	pop	r30
    3b74:	bf 91       	pop	r27
    3b76:	af 91       	pop	r26
    3b78:	9f 91       	pop	r25
    3b7a:	8f 91       	pop	r24
    3b7c:	7f 91       	pop	r23
    3b7e:	6f 91       	pop	r22
    3b80:	5f 91       	pop	r21
    3b82:	4f 91       	pop	r20
    3b84:	3f 91       	pop	r19
    3b86:	2f 91       	pop	r18
    3b88:	0f 90       	pop	r0
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	0f 90       	pop	r0
    3b8e:	1f 90       	pop	r1
    3b90:	18 95       	reti

00003b92 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3b92:	df 92       	push	r13
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3ba0:	81 15       	cp	r24, r1
    3ba2:	22 e0       	ldi	r18, 0x02	; 2
    3ba4:	92 07       	cpc	r25, r18
    3ba6:	61 f5       	brne	.+88     	; 0x3c00 <adc_write_configuration+0x6e>
    3ba8:	8b 01       	movw	r16, r22
    3baa:	ec 01       	movw	r28, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3bac:	61 e2       	ldi	r22, 0x21	; 33
    3bae:	70 e0       	ldi	r23, 0x00	; 0
    3bb0:	82 e0       	ldi	r24, 0x02	; 2
    3bb2:	f0 d0       	rcall	.+480    	; 0x3d94 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    3bb4:	e8 2e       	mov	r14, r24
    3bb6:	f1 2c       	mov	r15, r1
    3bb8:	60 e2       	ldi	r22, 0x20	; 32
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	82 e0       	ldi	r24, 0x02	; 2
    3bbe:	ea d0       	rcall	.+468    	; 0x3d94 <nvm_read_byte>
		data <<= 8;
    3bc0:	fe 2c       	mov	r15, r14
    3bc2:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    3bc4:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3bc6:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    3bc8:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3bca:	ce 01       	movw	r24, r28
    3bcc:	6d df       	rcall	.-294    	; 0x3aa8 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3bce:	88 81       	ld	r24, Y
    3bd0:	81 70       	andi	r24, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    3bd2:	92 e0       	ldi	r25, 0x02	; 2
    3bd4:	98 83       	st	Y, r25
	adc->CAL = cal;
    3bd6:	ec 86       	std	Y+12, r14	; 0x0c
    3bd8:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    3bda:	f8 01       	movw	r30, r16
    3bdc:	24 81       	ldd	r18, Z+4	; 0x04
    3bde:	35 81       	ldd	r19, Z+5	; 0x05
    3be0:	28 8f       	std	Y+24, r18	; 0x18
    3be2:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    3be8:	93 81       	ldd	r25, Z+3	; 0x03
    3bea:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    3bec:	92 81       	ldd	r25, Z+2	; 0x02
    3bee:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    3bf0:	90 81       	ld	r25, Z
    3bf2:	99 83       	std	Y+1, r25	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    3bf4:	96 81       	ldd	r25, Z+6	; 0x06
    3bf6:	98 87       	std	Y+8, r25	; 0x08

	adc->CTRLA = enable;
    3bf8:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	64 df       	rcall	.-312    	; 0x3ac6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3bfe:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    3c00:	df 91       	pop	r29
    3c02:	cf 91       	pop	r28
    3c04:	1f 91       	pop	r17
    3c06:	0f 91       	pop	r16
    3c08:	ff 90       	pop	r15
    3c0a:	ef 90       	pop	r14
    3c0c:	df 90       	pop	r13
    3c0e:	08 95       	ret

00003c10 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    3c10:	ff 92       	push	r15
    3c12:	0f 93       	push	r16
    3c14:	1f 93       	push	r17
    3c16:	cf 93       	push	r28
    3c18:	df 93       	push	r29
    3c1a:	ec 01       	movw	r28, r24
    3c1c:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c1e:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3c20:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    3c22:	42 df       	rcall	.-380    	; 0x3aa8 <adc_enable_clock>

	conf->cmp = adc->CMP;
    3c24:	88 8d       	ldd	r24, Y+24	; 0x18
    3c26:	99 8d       	ldd	r25, Y+25	; 0x19
    3c28:	f8 01       	movw	r30, r16
    3c2a:	84 83       	std	Z+4, r24	; 0x04
    3c2c:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    3c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c30:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    3c32:	8c 81       	ldd	r24, Y+4	; 0x04
    3c34:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    3c36:	8b 81       	ldd	r24, Y+3	; 0x03
    3c38:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    3c3a:	89 81       	ldd	r24, Y+1	; 0x01
    3c3c:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    3c3e:	88 85       	ldd	r24, Y+8	; 0x08
    3c40:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    3c42:	ce 01       	movw	r24, r28
    3c44:	40 df       	rcall	.-384    	; 0x3ac6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c46:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	1f 91       	pop	r17
    3c4e:	0f 91       	pop	r16
    3c50:	ff 90       	pop	r15
    3c52:	08 95       	ret

00003c54 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3c54:	ff 92       	push	r15
    3c56:	0f 93       	push	r16
    3c58:	1f 93       	push	r17
    3c5a:	cf 93       	push	r28
    3c5c:	df 93       	push	r29
    3c5e:	ec 01       	movw	r28, r24
    3c60:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c62:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3c64:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3c66:	20 df       	rcall	.-448    	; 0x3aa8 <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    3c68:	f8 01       	movw	r30, r16
    3c6a:	80 81       	ld	r24, Z
    3c6c:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    3c6e:	82 81       	ldd	r24, Z+2	; 0x02
    3c70:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3c72:	81 81       	ldd	r24, Z+1	; 0x01
    3c74:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    3c76:	83 81       	ldd	r24, Z+3	; 0x03
    3c78:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    3c7a:	84 81       	ldd	r24, Z+4	; 0x04
    3c7c:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    3c7e:	85 81       	ldd	r24, Z+5	; 0x05
    3c80:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    3c82:	86 81       	ldd	r24, Z+6	; 0x06
    3c84:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    3c86:	87 81       	ldd	r24, Z+7	; 0x07
    3c88:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    3c8a:	80 85       	ldd	r24, Z+8	; 0x08
    3c8c:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    3c8e:	81 85       	ldd	r24, Z+9	; 0x09
    3c90:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    3c92:	ce 01       	movw	r24, r28
    3c94:	18 df       	rcall	.-464    	; 0x3ac6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c96:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	ff 90       	pop	r15
    3ca2:	08 95       	ret

00003ca4 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3ca4:	ff 92       	push	r15
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
    3cae:	ec 01       	movw	r28, r24
    3cb0:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3cb2:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3cb4:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3cb6:	f8 de       	rcall	.-528    	; 0x3aa8 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3cb8:	88 a1       	ldd	r24, Y+32	; 0x20
    3cba:	f8 01       	movw	r30, r16
    3cbc:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3cbe:	8a a1       	ldd	r24, Y+34	; 0x22
    3cc0:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc4:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    3cc6:	8e a1       	ldd	r24, Y+38	; 0x26
    3cc8:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    3cca:	8f a1       	ldd	r24, Y+39	; 0x27
    3ccc:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    3cce:	88 a5       	ldd	r24, Y+40	; 0x28
    3cd0:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    3cd2:	89 a5       	ldd	r24, Y+41	; 0x29
    3cd4:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    3cd6:	8a a5       	ldd	r24, Y+42	; 0x2a
    3cd8:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    3cda:	8b a5       	ldd	r24, Y+43	; 0x2b
    3cdc:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    3cde:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ce0:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    3ce2:	ce 01       	movw	r24, r28
    3ce4:	f0 de       	rcall	.-544    	; 0x3ac6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3ce6:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	1f 91       	pop	r17
    3cee:	0f 91       	pop	r16
    3cf0:	ff 90       	pop	r15
    3cf2:	08 95       	ret

00003cf4 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3cf4:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3cf6:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3cf8:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3cfa:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3cfc:	60 83       	st	Z, r22
	ret                             // Return to caller
    3cfe:	08 95       	ret

00003d00 <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    3d00:	9c 01       	movw	r18, r24
    3d02:	e0 ec       	ldi	r30, 0xC0	; 192
    3d04:	f1 e0       	ldi	r31, 0x01	; 1
    3d06:	97 85       	ldd	r25, Z+15	; 0x0f
    3d08:	99 23       	and	r25, r25
    3d0a:	ec f3       	brlt	.-6      	; 0x3d06 <nvm_eeprom_read_byte+0x6>
    3d0c:	f9 01       	movw	r30, r18
    3d0e:	f0 5f       	subi	r31, 0xF0	; 240
    3d10:	80 81       	ld	r24, Z
    3d12:	08 95       	ret

00003d14 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3d14:	e0 ec       	ldi	r30, 0xC0	; 192
    3d16:	f1 e0       	ldi	r31, 0x01	; 1
    3d18:	87 85       	ldd	r24, Z+15	; 0x0f
    3d1a:	88 23       	and	r24, r24
    3d1c:	ec f3       	brlt	.-6      	; 0x3d18 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3d1e:	80 91 cf 01 	lds	r24, 0x01CF
    3d22:	81 ff       	sbrs	r24, 1
    3d24:	07 c0       	rjmp	.+14     	; 0x3d34 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3d26:	86 e3       	ldi	r24, 0x36	; 54
    3d28:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3d2c:	61 e0       	ldi	r22, 0x01	; 1
    3d2e:	8b ec       	ldi	r24, 0xCB	; 203
    3d30:	91 e0       	ldi	r25, 0x01	; 1
    3d32:	e0 cf       	rjmp	.-64     	; 0x3cf4 <ccp_write_io>
    3d34:	08 95       	ret

00003d36 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3d36:	e0 ec       	ldi	r30, 0xC0	; 192
    3d38:	f1 e0       	ldi	r31, 0x01	; 1
    3d3a:	97 85       	ldd	r25, Z+15	; 0x0f
    3d3c:	99 23       	and	r25, r25
    3d3e:	ec f3       	brlt	.-6      	; 0x3d3a <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    3d40:	e8 2f       	mov	r30, r24
    3d42:	f0 e0       	ldi	r31, 0x00	; 0
    3d44:	f0 5f       	subi	r31, 0xF0	; 240
    3d46:	60 83       	st	Z, r22
    3d48:	08 95       	ret

00003d4a <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	18 2f       	mov	r17, r24
    3d56:	f9 2e       	mov	r15, r25
    3d58:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    3d5a:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    3d5e:	da df       	rcall	.-76     	; 0x3d14 <nvm_eeprom_flush_buffer>
    3d60:	e0 ec       	ldi	r30, 0xC0	; 192
    3d62:	f1 e0       	ldi	r31, 0x01	; 1
    3d64:	27 85       	ldd	r18, Z+15	; 0x0f
    3d66:	22 23       	and	r18, r18
    3d68:	ec f3       	brlt	.-6      	; 0x3d64 <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    3d6a:	6c 2f       	mov	r22, r28
    3d6c:	81 2f       	mov	r24, r17
    3d6e:	e3 df       	rcall	.-58     	; 0x3d36 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    3d70:	c0 ec       	ldi	r28, 0xC0	; 192
    3d72:	d1 e0       	ldi	r29, 0x01	; 1
    3d74:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    3d76:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    3d78:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3d7a:	85 e3       	ldi	r24, 0x35	; 53
    3d7c:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3d7e:	61 e0       	ldi	r22, 0x01	; 1
    3d80:	8b ec       	ldi	r24, 0xCB	; 203
    3d82:	91 e0       	ldi	r25, 0x01	; 1
    3d84:	b7 df       	rcall	.-146    	; 0x3cf4 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    3d86:	0a 87       	std	Y+10, r16	; 0x0a
}
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	1f 91       	pop	r17
    3d8e:	0f 91       	pop	r16
    3d90:	ff 90       	pop	r15
    3d92:	08 95       	ret

00003d94 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3d94:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3d98:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3d9a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3d9c:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3da0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3da2:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3da6:	08 95       	ret

00003da8 <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    3da8:	1f 92       	push	r1
    3daa:	0f 92       	push	r0
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	0f 92       	push	r0
    3db0:	11 24       	eor	r1, r1
    3db2:	2f 93       	push	r18
    3db4:	3f 93       	push	r19
    3db6:	4f 93       	push	r20
    3db8:	5f 93       	push	r21
    3dba:	6f 93       	push	r22
    3dbc:	7f 93       	push	r23
    3dbe:	8f 93       	push	r24
    3dc0:	9f 93       	push	r25
    3dc2:	af 93       	push	r26
    3dc4:	bf 93       	push	r27
    3dc6:	ef 93       	push	r30
    3dc8:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    3dca:	e0 91 64 21 	lds	r30, 0x2164
    3dce:	f0 91 65 21 	lds	r31, 0x2165
    3dd2:	30 97       	sbiw	r30, 0x00	; 0
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    3dd6:	09 95       	icall
	}
}
    3dd8:	ff 91       	pop	r31
    3dda:	ef 91       	pop	r30
    3ddc:	bf 91       	pop	r27
    3dde:	af 91       	pop	r26
    3de0:	9f 91       	pop	r25
    3de2:	8f 91       	pop	r24
    3de4:	7f 91       	pop	r23
    3de6:	6f 91       	pop	r22
    3de8:	5f 91       	pop	r21
    3dea:	4f 91       	pop	r20
    3dec:	3f 91       	pop	r19
    3dee:	2f 91       	pop	r18
    3df0:	0f 90       	pop	r0
    3df2:	0f be       	out	0x3f, r0	; 63
    3df4:	0f 90       	pop	r0
    3df6:	1f 90       	pop	r1
    3df8:	18 95       	reti

00003dfa <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    3dfa:	1f 92       	push	r1
    3dfc:	0f 92       	push	r0
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	0f 92       	push	r0
    3e02:	11 24       	eor	r1, r1
    3e04:	2f 93       	push	r18
    3e06:	3f 93       	push	r19
    3e08:	4f 93       	push	r20
    3e0a:	5f 93       	push	r21
    3e0c:	6f 93       	push	r22
    3e0e:	7f 93       	push	r23
    3e10:	8f 93       	push	r24
    3e12:	9f 93       	push	r25
    3e14:	af 93       	push	r26
    3e16:	bf 93       	push	r27
    3e18:	ef 93       	push	r30
    3e1a:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    3e1c:	e0 91 62 21 	lds	r30, 0x2162
    3e20:	f0 91 63 21 	lds	r31, 0x2163
    3e24:	30 97       	sbiw	r30, 0x00	; 0
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <__vector_13+0x30>
		tc45_tcc4_err_callback();
    3e28:	09 95       	icall
	}
}
    3e2a:	ff 91       	pop	r31
    3e2c:	ef 91       	pop	r30
    3e2e:	bf 91       	pop	r27
    3e30:	af 91       	pop	r26
    3e32:	9f 91       	pop	r25
    3e34:	8f 91       	pop	r24
    3e36:	7f 91       	pop	r23
    3e38:	6f 91       	pop	r22
    3e3a:	5f 91       	pop	r21
    3e3c:	4f 91       	pop	r20
    3e3e:	3f 91       	pop	r19
    3e40:	2f 91       	pop	r18
    3e42:	0f 90       	pop	r0
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	0f 90       	pop	r0
    3e48:	1f 90       	pop	r1
    3e4a:	18 95       	reti

00003e4c <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    3e4c:	1f 92       	push	r1
    3e4e:	0f 92       	push	r0
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	0f 92       	push	r0
    3e54:	11 24       	eor	r1, r1
    3e56:	2f 93       	push	r18
    3e58:	3f 93       	push	r19
    3e5a:	4f 93       	push	r20
    3e5c:	5f 93       	push	r21
    3e5e:	6f 93       	push	r22
    3e60:	7f 93       	push	r23
    3e62:	8f 93       	push	r24
    3e64:	9f 93       	push	r25
    3e66:	af 93       	push	r26
    3e68:	bf 93       	push	r27
    3e6a:	ef 93       	push	r30
    3e6c:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    3e6e:	e0 91 60 21 	lds	r30, 0x2160
    3e72:	f0 91 61 21 	lds	r31, 0x2161
    3e76:	30 97       	sbiw	r30, 0x00	; 0
    3e78:	09 f0       	breq	.+2      	; 0x3e7c <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    3e7a:	09 95       	icall
	}
}
    3e7c:	ff 91       	pop	r31
    3e7e:	ef 91       	pop	r30
    3e80:	bf 91       	pop	r27
    3e82:	af 91       	pop	r26
    3e84:	9f 91       	pop	r25
    3e86:	8f 91       	pop	r24
    3e88:	7f 91       	pop	r23
    3e8a:	6f 91       	pop	r22
    3e8c:	5f 91       	pop	r21
    3e8e:	4f 91       	pop	r20
    3e90:	3f 91       	pop	r19
    3e92:	2f 91       	pop	r18
    3e94:	0f 90       	pop	r0
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	0f 90       	pop	r0
    3e9a:	1f 90       	pop	r1
    3e9c:	18 95       	reti

00003e9e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    3e9e:	1f 92       	push	r1
    3ea0:	0f 92       	push	r0
    3ea2:	0f b6       	in	r0, 0x3f	; 63
    3ea4:	0f 92       	push	r0
    3ea6:	11 24       	eor	r1, r1
    3ea8:	2f 93       	push	r18
    3eaa:	3f 93       	push	r19
    3eac:	4f 93       	push	r20
    3eae:	5f 93       	push	r21
    3eb0:	6f 93       	push	r22
    3eb2:	7f 93       	push	r23
    3eb4:	8f 93       	push	r24
    3eb6:	9f 93       	push	r25
    3eb8:	af 93       	push	r26
    3eba:	bf 93       	push	r27
    3ebc:	ef 93       	push	r30
    3ebe:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    3ec0:	e0 91 5e 21 	lds	r30, 0x215E
    3ec4:	f0 91 5f 21 	lds	r31, 0x215F
    3ec8:	30 97       	sbiw	r30, 0x00	; 0
    3eca:	09 f0       	breq	.+2      	; 0x3ece <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    3ecc:	09 95       	icall
	}
}
    3ece:	ff 91       	pop	r31
    3ed0:	ef 91       	pop	r30
    3ed2:	bf 91       	pop	r27
    3ed4:	af 91       	pop	r26
    3ed6:	9f 91       	pop	r25
    3ed8:	8f 91       	pop	r24
    3eda:	7f 91       	pop	r23
    3edc:	6f 91       	pop	r22
    3ede:	5f 91       	pop	r21
    3ee0:	4f 91       	pop	r20
    3ee2:	3f 91       	pop	r19
    3ee4:	2f 91       	pop	r18
    3ee6:	0f 90       	pop	r0
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	0f 90       	pop	r0
    3eec:	1f 90       	pop	r1
    3eee:	18 95       	reti

00003ef0 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    3ef0:	1f 92       	push	r1
    3ef2:	0f 92       	push	r0
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	0f 92       	push	r0
    3ef8:	11 24       	eor	r1, r1
    3efa:	2f 93       	push	r18
    3efc:	3f 93       	push	r19
    3efe:	4f 93       	push	r20
    3f00:	5f 93       	push	r21
    3f02:	6f 93       	push	r22
    3f04:	7f 93       	push	r23
    3f06:	8f 93       	push	r24
    3f08:	9f 93       	push	r25
    3f0a:	af 93       	push	r26
    3f0c:	bf 93       	push	r27
    3f0e:	ef 93       	push	r30
    3f10:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    3f12:	e0 91 5c 21 	lds	r30, 0x215C
    3f16:	f0 91 5d 21 	lds	r31, 0x215D
    3f1a:	30 97       	sbiw	r30, 0x00	; 0
    3f1c:	09 f0       	breq	.+2      	; 0x3f20 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    3f1e:	09 95       	icall
	}
}
    3f20:	ff 91       	pop	r31
    3f22:	ef 91       	pop	r30
    3f24:	bf 91       	pop	r27
    3f26:	af 91       	pop	r26
    3f28:	9f 91       	pop	r25
    3f2a:	8f 91       	pop	r24
    3f2c:	7f 91       	pop	r23
    3f2e:	6f 91       	pop	r22
    3f30:	5f 91       	pop	r21
    3f32:	4f 91       	pop	r20
    3f34:	3f 91       	pop	r19
    3f36:	2f 91       	pop	r18
    3f38:	0f 90       	pop	r0
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	0f 90       	pop	r0
    3f3e:	1f 90       	pop	r1
    3f40:	18 95       	reti

00003f42 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    3f42:	1f 92       	push	r1
    3f44:	0f 92       	push	r0
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	0f 92       	push	r0
    3f4a:	11 24       	eor	r1, r1
    3f4c:	2f 93       	push	r18
    3f4e:	3f 93       	push	r19
    3f50:	4f 93       	push	r20
    3f52:	5f 93       	push	r21
    3f54:	6f 93       	push	r22
    3f56:	7f 93       	push	r23
    3f58:	8f 93       	push	r24
    3f5a:	9f 93       	push	r25
    3f5c:	af 93       	push	r26
    3f5e:	bf 93       	push	r27
    3f60:	ef 93       	push	r30
    3f62:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    3f64:	e0 91 5a 21 	lds	r30, 0x215A
    3f68:	f0 91 5b 21 	lds	r31, 0x215B
    3f6c:	30 97       	sbiw	r30, 0x00	; 0
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    3f70:	09 95       	icall
	}
}
    3f72:	ff 91       	pop	r31
    3f74:	ef 91       	pop	r30
    3f76:	bf 91       	pop	r27
    3f78:	af 91       	pop	r26
    3f7a:	9f 91       	pop	r25
    3f7c:	8f 91       	pop	r24
    3f7e:	7f 91       	pop	r23
    3f80:	6f 91       	pop	r22
    3f82:	5f 91       	pop	r21
    3f84:	4f 91       	pop	r20
    3f86:	3f 91       	pop	r19
    3f88:	2f 91       	pop	r18
    3f8a:	0f 90       	pop	r0
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	0f 90       	pop	r0
    3f90:	1f 90       	pop	r1
    3f92:	18 95       	reti

00003f94 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    3f94:	1f 92       	push	r1
    3f96:	0f 92       	push	r0
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	0f 92       	push	r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	2f 93       	push	r18
    3fa0:	3f 93       	push	r19
    3fa2:	4f 93       	push	r20
    3fa4:	5f 93       	push	r21
    3fa6:	6f 93       	push	r22
    3fa8:	7f 93       	push	r23
    3faa:	8f 93       	push	r24
    3fac:	9f 93       	push	r25
    3fae:	af 93       	push	r26
    3fb0:	bf 93       	push	r27
    3fb2:	ef 93       	push	r30
    3fb4:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    3fb6:	e0 91 58 21 	lds	r30, 0x2158
    3fba:	f0 91 59 21 	lds	r31, 0x2159
    3fbe:	30 97       	sbiw	r30, 0x00	; 0
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    3fc2:	09 95       	icall
	}
}
    3fc4:	ff 91       	pop	r31
    3fc6:	ef 91       	pop	r30
    3fc8:	bf 91       	pop	r27
    3fca:	af 91       	pop	r26
    3fcc:	9f 91       	pop	r25
    3fce:	8f 91       	pop	r24
    3fd0:	7f 91       	pop	r23
    3fd2:	6f 91       	pop	r22
    3fd4:	5f 91       	pop	r21
    3fd6:	4f 91       	pop	r20
    3fd8:	3f 91       	pop	r19
    3fda:	2f 91       	pop	r18
    3fdc:	0f 90       	pop	r0
    3fde:	0f be       	out	0x3f, r0	; 63
    3fe0:	0f 90       	pop	r0
    3fe2:	1f 90       	pop	r1
    3fe4:	18 95       	reti

00003fe6 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    3fe6:	1f 92       	push	r1
    3fe8:	0f 92       	push	r0
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	0f 92       	push	r0
    3fee:	11 24       	eor	r1, r1
    3ff0:	2f 93       	push	r18
    3ff2:	3f 93       	push	r19
    3ff4:	4f 93       	push	r20
    3ff6:	5f 93       	push	r21
    3ff8:	6f 93       	push	r22
    3ffa:	7f 93       	push	r23
    3ffc:	8f 93       	push	r24
    3ffe:	9f 93       	push	r25
    4000:	af 93       	push	r26
    4002:	bf 93       	push	r27
    4004:	ef 93       	push	r30
    4006:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    4008:	e0 91 56 21 	lds	r30, 0x2156
    400c:	f0 91 57 21 	lds	r31, 0x2157
    4010:	30 97       	sbiw	r30, 0x00	; 0
    4012:	09 f0       	breq	.+2      	; 0x4016 <__vector_19+0x30>
		tc45_tcc5_err_callback();
    4014:	09 95       	icall
	}
}
    4016:	ff 91       	pop	r31
    4018:	ef 91       	pop	r30
    401a:	bf 91       	pop	r27
    401c:	af 91       	pop	r26
    401e:	9f 91       	pop	r25
    4020:	8f 91       	pop	r24
    4022:	7f 91       	pop	r23
    4024:	6f 91       	pop	r22
    4026:	5f 91       	pop	r21
    4028:	4f 91       	pop	r20
    402a:	3f 91       	pop	r19
    402c:	2f 91       	pop	r18
    402e:	0f 90       	pop	r0
    4030:	0f be       	out	0x3f, r0	; 63
    4032:	0f 90       	pop	r0
    4034:	1f 90       	pop	r1
    4036:	18 95       	reti

00004038 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    4038:	1f 92       	push	r1
    403a:	0f 92       	push	r0
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	0f 92       	push	r0
    4040:	11 24       	eor	r1, r1
    4042:	2f 93       	push	r18
    4044:	3f 93       	push	r19
    4046:	4f 93       	push	r20
    4048:	5f 93       	push	r21
    404a:	6f 93       	push	r22
    404c:	7f 93       	push	r23
    404e:	8f 93       	push	r24
    4050:	9f 93       	push	r25
    4052:	af 93       	push	r26
    4054:	bf 93       	push	r27
    4056:	ef 93       	push	r30
    4058:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    405a:	e0 91 54 21 	lds	r30, 0x2154
    405e:	f0 91 55 21 	lds	r31, 0x2155
    4062:	30 97       	sbiw	r30, 0x00	; 0
    4064:	09 f0       	breq	.+2      	; 0x4068 <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    4066:	09 95       	icall
	}
}
    4068:	ff 91       	pop	r31
    406a:	ef 91       	pop	r30
    406c:	bf 91       	pop	r27
    406e:	af 91       	pop	r26
    4070:	9f 91       	pop	r25
    4072:	8f 91       	pop	r24
    4074:	7f 91       	pop	r23
    4076:	6f 91       	pop	r22
    4078:	5f 91       	pop	r21
    407a:	4f 91       	pop	r20
    407c:	3f 91       	pop	r19
    407e:	2f 91       	pop	r18
    4080:	0f 90       	pop	r0
    4082:	0f be       	out	0x3f, r0	; 63
    4084:	0f 90       	pop	r0
    4086:	1f 90       	pop	r1
    4088:	18 95       	reti

0000408a <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    408a:	1f 92       	push	r1
    408c:	0f 92       	push	r0
    408e:	0f b6       	in	r0, 0x3f	; 63
    4090:	0f 92       	push	r0
    4092:	11 24       	eor	r1, r1
    4094:	2f 93       	push	r18
    4096:	3f 93       	push	r19
    4098:	4f 93       	push	r20
    409a:	5f 93       	push	r21
    409c:	6f 93       	push	r22
    409e:	7f 93       	push	r23
    40a0:	8f 93       	push	r24
    40a2:	9f 93       	push	r25
    40a4:	af 93       	push	r26
    40a6:	bf 93       	push	r27
    40a8:	ef 93       	push	r30
    40aa:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    40ac:	e0 91 52 21 	lds	r30, 0x2152
    40b0:	f0 91 53 21 	lds	r31, 0x2153
    40b4:	30 97       	sbiw	r30, 0x00	; 0
    40b6:	09 f0       	breq	.+2      	; 0x40ba <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    40b8:	09 95       	icall
	}
}
    40ba:	ff 91       	pop	r31
    40bc:	ef 91       	pop	r30
    40be:	bf 91       	pop	r27
    40c0:	af 91       	pop	r26
    40c2:	9f 91       	pop	r25
    40c4:	8f 91       	pop	r24
    40c6:	7f 91       	pop	r23
    40c8:	6f 91       	pop	r22
    40ca:	5f 91       	pop	r21
    40cc:	4f 91       	pop	r20
    40ce:	3f 91       	pop	r19
    40d0:	2f 91       	pop	r18
    40d2:	0f 90       	pop	r0
    40d4:	0f be       	out	0x3f, r0	; 63
    40d6:	0f 90       	pop	r0
    40d8:	1f 90       	pop	r1
    40da:	18 95       	reti

000040dc <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    40dc:	1f 92       	push	r1
    40de:	0f 92       	push	r0
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	0f 92       	push	r0
    40e4:	11 24       	eor	r1, r1
    40e6:	2f 93       	push	r18
    40e8:	3f 93       	push	r19
    40ea:	4f 93       	push	r20
    40ec:	5f 93       	push	r21
    40ee:	6f 93       	push	r22
    40f0:	7f 93       	push	r23
    40f2:	8f 93       	push	r24
    40f4:	9f 93       	push	r25
    40f6:	af 93       	push	r26
    40f8:	bf 93       	push	r27
    40fa:	ef 93       	push	r30
    40fc:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    40fe:	e0 91 50 21 	lds	r30, 0x2150
    4102:	f0 91 51 21 	lds	r31, 0x2151
    4106:	30 97       	sbiw	r30, 0x00	; 0
    4108:	09 f0       	breq	.+2      	; 0x410c <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    410a:	09 95       	icall
	}
}
    410c:	ff 91       	pop	r31
    410e:	ef 91       	pop	r30
    4110:	bf 91       	pop	r27
    4112:	af 91       	pop	r26
    4114:	9f 91       	pop	r25
    4116:	8f 91       	pop	r24
    4118:	7f 91       	pop	r23
    411a:	6f 91       	pop	r22
    411c:	5f 91       	pop	r21
    411e:	4f 91       	pop	r20
    4120:	3f 91       	pop	r19
    4122:	2f 91       	pop	r18
    4124:	0f 90       	pop	r0
    4126:	0f be       	out	0x3f, r0	; 63
    4128:	0f 90       	pop	r0
    412a:	1f 90       	pop	r1
    412c:	18 95       	reti

0000412e <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    412e:	1f 92       	push	r1
    4130:	0f 92       	push	r0
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	0f 92       	push	r0
    4136:	11 24       	eor	r1, r1
    4138:	2f 93       	push	r18
    413a:	3f 93       	push	r19
    413c:	4f 93       	push	r20
    413e:	5f 93       	push	r21
    4140:	6f 93       	push	r22
    4142:	7f 93       	push	r23
    4144:	8f 93       	push	r24
    4146:	9f 93       	push	r25
    4148:	af 93       	push	r26
    414a:	bf 93       	push	r27
    414c:	ef 93       	push	r30
    414e:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    4150:	e0 91 4e 21 	lds	r30, 0x214E
    4154:	f0 91 4f 21 	lds	r31, 0x214F
    4158:	30 97       	sbiw	r30, 0x00	; 0
    415a:	09 f0       	breq	.+2      	; 0x415e <__vector_37+0x30>
		tc45_tcd5_err_callback();
    415c:	09 95       	icall
	}
}
    415e:	ff 91       	pop	r31
    4160:	ef 91       	pop	r30
    4162:	bf 91       	pop	r27
    4164:	af 91       	pop	r26
    4166:	9f 91       	pop	r25
    4168:	8f 91       	pop	r24
    416a:	7f 91       	pop	r23
    416c:	6f 91       	pop	r22
    416e:	5f 91       	pop	r21
    4170:	4f 91       	pop	r20
    4172:	3f 91       	pop	r19
    4174:	2f 91       	pop	r18
    4176:	0f 90       	pop	r0
    4178:	0f be       	out	0x3f, r0	; 63
    417a:	0f 90       	pop	r0
    417c:	1f 90       	pop	r1
    417e:	18 95       	reti

00004180 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    4180:	1f 92       	push	r1
    4182:	0f 92       	push	r0
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	0f 92       	push	r0
    4188:	11 24       	eor	r1, r1
    418a:	2f 93       	push	r18
    418c:	3f 93       	push	r19
    418e:	4f 93       	push	r20
    4190:	5f 93       	push	r21
    4192:	6f 93       	push	r22
    4194:	7f 93       	push	r23
    4196:	8f 93       	push	r24
    4198:	9f 93       	push	r25
    419a:	af 93       	push	r26
    419c:	bf 93       	push	r27
    419e:	ef 93       	push	r30
    41a0:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    41a2:	e0 91 4c 21 	lds	r30, 0x214C
    41a6:	f0 91 4d 21 	lds	r31, 0x214D
    41aa:	30 97       	sbiw	r30, 0x00	; 0
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    41ae:	09 95       	icall
	}
}
    41b0:	ff 91       	pop	r31
    41b2:	ef 91       	pop	r30
    41b4:	bf 91       	pop	r27
    41b6:	af 91       	pop	r26
    41b8:	9f 91       	pop	r25
    41ba:	8f 91       	pop	r24
    41bc:	7f 91       	pop	r23
    41be:	6f 91       	pop	r22
    41c0:	5f 91       	pop	r21
    41c2:	4f 91       	pop	r20
    41c4:	3f 91       	pop	r19
    41c6:	2f 91       	pop	r18
    41c8:	0f 90       	pop	r0
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	0f 90       	pop	r0
    41ce:	1f 90       	pop	r1
    41d0:	18 95       	reti

000041d2 <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    41d2:	1f 92       	push	r1
    41d4:	0f 92       	push	r0
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	0f 92       	push	r0
    41da:	11 24       	eor	r1, r1
    41dc:	2f 93       	push	r18
    41de:	3f 93       	push	r19
    41e0:	4f 93       	push	r20
    41e2:	5f 93       	push	r21
    41e4:	6f 93       	push	r22
    41e6:	7f 93       	push	r23
    41e8:	8f 93       	push	r24
    41ea:	9f 93       	push	r25
    41ec:	af 93       	push	r26
    41ee:	bf 93       	push	r27
    41f0:	ef 93       	push	r30
    41f2:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    41f4:	e0 91 4a 21 	lds	r30, 0x214A
    41f8:	f0 91 4b 21 	lds	r31, 0x214B
    41fc:	30 97       	sbiw	r30, 0x00	; 0
    41fe:	09 f0       	breq	.+2      	; 0x4202 <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    4200:	09 95       	icall
	}
}
    4202:	ff 91       	pop	r31
    4204:	ef 91       	pop	r30
    4206:	bf 91       	pop	r27
    4208:	af 91       	pop	r26
    420a:	9f 91       	pop	r25
    420c:	8f 91       	pop	r24
    420e:	7f 91       	pop	r23
    4210:	6f 91       	pop	r22
    4212:	5f 91       	pop	r21
    4214:	4f 91       	pop	r20
    4216:	3f 91       	pop	r19
    4218:	2f 91       	pop	r18
    421a:	0f 90       	pop	r0
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	0f 90       	pop	r0
    4220:	1f 90       	pop	r1
    4222:	18 95       	reti

00004224 <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    4224:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4226:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    4228:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    422a:	28 2f       	mov	r18, r24
    422c:	39 2f       	mov	r19, r25
    422e:	21 15       	cp	r18, r1
    4230:	88 e0       	ldi	r24, 0x08	; 8
    4232:	38 07       	cpc	r19, r24
    4234:	39 f4       	brne	.+14     	; 0x4244 <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    4236:	61 e0       	ldi	r22, 0x01	; 1
    4238:	83 e0       	ldi	r24, 0x03	; 3
    423a:	eb db       	rcall	.-2090   	; 0x3a12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    423c:	64 e0       	ldi	r22, 0x04	; 4
    423e:	83 e0       	ldi	r24, 0x03	; 3
    4240:	e8 db       	rcall	.-2096   	; 0x3a12 <sysclk_enable_module>
    4242:	17 c0       	rjmp	.+46     	; 0x4272 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    4244:	20 34       	cpi	r18, 0x40	; 64
    4246:	88 e0       	ldi	r24, 0x08	; 8
    4248:	38 07       	cpc	r19, r24
    424a:	39 f4       	brne	.+14     	; 0x425a <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    424c:	62 e0       	ldi	r22, 0x02	; 2
    424e:	83 e0       	ldi	r24, 0x03	; 3
    4250:	e0 db       	rcall	.-2112   	; 0x3a12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4252:	64 e0       	ldi	r22, 0x04	; 4
    4254:	83 e0       	ldi	r24, 0x03	; 3
    4256:	dd db       	rcall	.-2118   	; 0x3a12 <sysclk_enable_module>
    4258:	0c c0       	rjmp	.+24     	; 0x4272 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    425a:	20 34       	cpi	r18, 0x40	; 64
    425c:	39 40       	sbci	r19, 0x09	; 9
    425e:	39 f4       	brne	.+14     	; 0x426e <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    4260:	62 e0       	ldi	r22, 0x02	; 2
    4262:	84 e0       	ldi	r24, 0x04	; 4
    4264:	d6 db       	rcall	.-2132   	; 0x3a12 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4266:	64 e0       	ldi	r22, 0x04	; 4
    4268:	84 e0       	ldi	r24, 0x04	; 4
    426a:	d3 db       	rcall	.-2138   	; 0x3a12 <sysclk_enable_module>
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    426e:	cf bf       	out	0x3f, r28	; 63
    4270:	09 c0       	rjmp	.+18     	; 0x4284 <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4272:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    4274:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    4276:	ed e2       	ldi	r30, 0x2D	; 45
    4278:	fb e2       	ldi	r31, 0x2B	; 43
    427a:	81 81       	ldd	r24, Z+1	; 0x01
    427c:	8f 5f       	subi	r24, 0xFF	; 255
    427e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4280:	9f bf       	out	0x3f, r25	; 63
    4282:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    4284:	cf 91       	pop	r28
    4286:	08 95       	ret

00004288 <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    4288:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    428a:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    428c:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    428e:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    4290:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    4292:	ed e2       	ldi	r30, 0x2D	; 45
    4294:	fb e2       	ldi	r31, 0x2B	; 43
    4296:	21 81       	ldd	r18, Z+1	; 0x01
    4298:	21 50       	subi	r18, 0x01	; 1
    429a:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    429c:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    429e:	28 2f       	mov	r18, r24
    42a0:	39 2f       	mov	r19, r25
    42a2:	21 15       	cp	r18, r1
    42a4:	88 e0       	ldi	r24, 0x08	; 8
    42a6:	38 07       	cpc	r19, r24
    42a8:	39 f4       	brne	.+14     	; 0x42b8 <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    42aa:	61 e0       	ldi	r22, 0x01	; 1
    42ac:	83 e0       	ldi	r24, 0x03	; 3
    42ae:	bd db       	rcall	.-2182   	; 0x3a2a <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    42b0:	64 e0       	ldi	r22, 0x04	; 4
    42b2:	83 e0       	ldi	r24, 0x03	; 3
    42b4:	ba db       	rcall	.-2188   	; 0x3a2a <sysclk_disable_module>
    42b6:	17 c0       	rjmp	.+46     	; 0x42e6 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    42b8:	20 34       	cpi	r18, 0x40	; 64
    42ba:	88 e0       	ldi	r24, 0x08	; 8
    42bc:	38 07       	cpc	r19, r24
    42be:	39 f4       	brne	.+14     	; 0x42ce <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    42c0:	62 e0       	ldi	r22, 0x02	; 2
    42c2:	83 e0       	ldi	r24, 0x03	; 3
    42c4:	b2 db       	rcall	.-2204   	; 0x3a2a <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    42c6:	64 e0       	ldi	r22, 0x04	; 4
    42c8:	83 e0       	ldi	r24, 0x03	; 3
    42ca:	af db       	rcall	.-2210   	; 0x3a2a <sysclk_disable_module>
    42cc:	0c c0       	rjmp	.+24     	; 0x42e6 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    42ce:	20 34       	cpi	r18, 0x40	; 64
    42d0:	39 40       	sbci	r19, 0x09	; 9
    42d2:	39 f4       	brne	.+14     	; 0x42e2 <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    42d4:	61 e0       	ldi	r22, 0x01	; 1
    42d6:	84 e0       	ldi	r24, 0x04	; 4
    42d8:	a8 db       	rcall	.-2224   	; 0x3a2a <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    42da:	64 e0       	ldi	r22, 0x04	; 4
    42dc:	84 e0       	ldi	r24, 0x04	; 4
    42de:	a5 db       	rcall	.-2230   	; 0x3a2a <sysclk_disable_module>
    42e0:	02 c0       	rjmp	.+4      	; 0x42e6 <tc45_disable+0x5e>
    42e2:	cf bf       	out	0x3f, r28	; 63
    42e4:	01 c0       	rjmp	.+2      	; 0x42e8 <tc45_disable+0x60>
    42e6:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    42e8:	cf 91       	pop	r28
    42ea:	08 95       	ret

000042ec <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    42ec:	81 15       	cp	r24, r1
    42ee:	28 e0       	ldi	r18, 0x08	; 8
    42f0:	92 07       	cpc	r25, r18
    42f2:	29 f4       	brne	.+10     	; 0x42fe <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    42f4:	60 93 64 21 	sts	0x2164, r22
    42f8:	70 93 65 21 	sts	0x2165, r23
    42fc:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    42fe:	80 34       	cpi	r24, 0x40	; 64
    4300:	28 e0       	ldi	r18, 0x08	; 8
    4302:	92 07       	cpc	r25, r18
    4304:	29 f4       	brne	.+10     	; 0x4310 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    4306:	60 93 58 21 	sts	0x2158, r22
    430a:	70 93 59 21 	sts	0x2159, r23
    430e:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    4310:	80 34       	cpi	r24, 0x40	; 64
    4312:	99 40       	sbci	r25, 0x09	; 9
    4314:	21 f4       	brne	.+8      	; 0x431e <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    4316:	60 93 50 21 	sts	0x2150, r22
    431a:	70 93 51 21 	sts	0x2151, r23
    431e:	08 95       	ret

00004320 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    4320:	1f 92       	push	r1
    4322:	0f 92       	push	r0
    4324:	0f b6       	in	r0, 0x3f	; 63
    4326:	0f 92       	push	r0
    4328:	11 24       	eor	r1, r1
    432a:	2f 93       	push	r18
    432c:	3f 93       	push	r19
    432e:	4f 93       	push	r20
    4330:	5f 93       	push	r21
    4332:	6f 93       	push	r22
    4334:	7f 93       	push	r23
    4336:	8f 93       	push	r24
    4338:	9f 93       	push	r25
    433a:	af 93       	push	r26
    433c:	bf 93       	push	r27
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	ef 93       	push	r30
    4344:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    4346:	e0 91 66 21 	lds	r30, 0x2166
    434a:	f0 91 67 21 	lds	r31, 0x2167
    434e:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    4350:	83 ff       	sbrs	r24, 3
    4352:	08 c0       	rjmp	.+16     	; 0x4364 <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    4354:	88 60       	ori	r24, 0x08	; 8
    4356:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    4358:	83 e0       	ldi	r24, 0x03	; 3
    435a:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    435c:	86 ef       	ldi	r24, 0xF6	; 246
    435e:	80 93 70 21 	sts	0x2170, r24
    4362:	95 c0       	rjmp	.+298    	; 0x448e <__vector_11+0x16e>
    4364:	98 2f       	mov	r25, r24
    4366:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    4368:	31 f0       	breq	.+12     	; 0x4376 <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    436a:	83 e0       	ldi	r24, 0x03	; 3
    436c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    436e:	8f ef       	ldi	r24, 0xFF	; 255
    4370:	80 93 70 21 	sts	0x2170, r24
    4374:	8c c0       	rjmp	.+280    	; 0x448e <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    4376:	86 ff       	sbrs	r24, 6
    4378:	43 c0       	rjmp	.+134    	; 0x4400 <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    437a:	c6 e6       	ldi	r28, 0x66	; 102
    437c:	d1 e2       	ldi	r29, 0x21	; 33
    437e:	aa 81       	ldd	r26, Y+2	; 0x02
    4380:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    4382:	8c 81       	ldd	r24, Y+4	; 0x04
    4384:	9d 81       	ldd	r25, Y+5	; 0x05
    4386:	14 96       	adiw	r26, 0x04	; 4
    4388:	2d 91       	ld	r18, X+
    438a:	3c 91       	ld	r19, X
    438c:	15 97       	sbiw	r26, 0x05	; 5
    438e:	82 17       	cp	r24, r18
    4390:	93 07       	cpc	r25, r19
    4392:	6c f4       	brge	.+26     	; 0x43ae <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    4394:	9c 01       	movw	r18, r24
    4396:	2f 5f       	subi	r18, 0xFF	; 255
    4398:	3f 4f       	sbci	r19, 0xFF	; 255
    439a:	20 93 6a 21 	sts	0x216A, r18
    439e:	30 93 6b 21 	sts	0x216B, r19
    43a2:	a8 0f       	add	r26, r24
    43a4:	b9 1f       	adc	r27, r25
    43a6:	11 96       	adiw	r26, 0x01	; 1
    43a8:	8c 91       	ld	r24, X
    43aa:	87 83       	std	Z+7, r24	; 0x07
    43ac:	70 c0       	rjmp	.+224    	; 0x448e <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    43ae:	80 91 6c 21 	lds	r24, 0x216C
    43b2:	90 91 6d 21 	lds	r25, 0x216D
    43b6:	18 96       	adiw	r26, 0x08	; 8
    43b8:	2d 91       	ld	r18, X+
    43ba:	3c 91       	ld	r19, X
    43bc:	19 97       	sbiw	r26, 0x09	; 9
    43be:	82 17       	cp	r24, r18
    43c0:	93 07       	cpc	r25, r19
    43c2:	c8 f4       	brcc	.+50     	; 0x43f6 <__vector_11+0xd6>

		if (transfer.read) {
    43c4:	20 91 6e 21 	lds	r18, 0x216E
    43c8:	22 23       	and	r18, r18
    43ca:	21 f0       	breq	.+8      	; 0x43d4 <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    43cc:	86 81       	ldd	r24, Z+6	; 0x06
    43ce:	81 60       	ori	r24, 0x01	; 1
    43d0:	86 83       	std	Z+6, r24	; 0x06
    43d2:	5d c0       	rjmp	.+186    	; 0x448e <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    43d4:	16 96       	adiw	r26, 0x06	; 6
    43d6:	2d 91       	ld	r18, X+
    43d8:	3c 91       	ld	r19, X
    43da:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    43dc:	ac 01       	movw	r20, r24
    43de:	4f 5f       	subi	r20, 0xFF	; 255
    43e0:	5f 4f       	sbci	r21, 0xFF	; 255
    43e2:	40 93 6c 21 	sts	0x216C, r20
    43e6:	50 93 6d 21 	sts	0x216D, r21
    43ea:	d9 01       	movw	r26, r18
    43ec:	a8 0f       	add	r26, r24
    43ee:	b9 1f       	adc	r27, r25
    43f0:	8c 91       	ld	r24, X
    43f2:	87 83       	std	Z+7, r24	; 0x07
    43f4:	4c c0       	rjmp	.+152    	; 0x448e <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    43f6:	83 e0       	ldi	r24, 0x03	; 3
    43f8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    43fa:	10 92 70 21 	sts	0x2170, r1
    43fe:	47 c0       	rjmp	.+142    	; 0x448e <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    4400:	88 23       	and	r24, r24
    4402:	0c f0       	brlt	.+2      	; 0x4406 <__vector_11+0xe6>
    4404:	41 c0       	rjmp	.+130    	; 0x4488 <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4406:	c6 e6       	ldi	r28, 0x66	; 102
    4408:	d1 e2       	ldi	r29, 0x21	; 33
    440a:	aa 81       	ldd	r26, Y+2	; 0x02
    440c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    440e:	8e 81       	ldd	r24, Y+6	; 0x06
    4410:	9f 81       	ldd	r25, Y+7	; 0x07
    4412:	18 96       	adiw	r26, 0x08	; 8
    4414:	2d 91       	ld	r18, X+
    4416:	3c 91       	ld	r19, X
    4418:	19 97       	sbiw	r26, 0x09	; 9
    441a:	82 17       	cp	r24, r18
    441c:	93 07       	cpc	r25, r19
    441e:	70 f5       	brcc	.+92     	; 0x447c <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    4420:	16 96       	adiw	r26, 0x06	; 6
    4422:	6d 91       	ld	r22, X+
    4424:	7c 91       	ld	r23, X
    4426:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    4428:	9c 01       	movw	r18, r24
    442a:	2f 5f       	subi	r18, 0xFF	; 255
    442c:	3f 4f       	sbci	r19, 0xFF	; 255
    442e:	20 93 6c 21 	sts	0x216C, r18
    4432:	30 93 6d 21 	sts	0x216D, r19
    4436:	47 81       	ldd	r20, Z+7	; 0x07
    4438:	86 0f       	add	r24, r22
    443a:	97 1f       	adc	r25, r23
    443c:	ec 01       	movw	r28, r24
    443e:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    4440:	eb 01       	movw	r28, r22
    4442:	88 81       	ld	r24, Y
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	01 96       	adiw	r24, 0x01	; 1
    4448:	18 96       	adiw	r26, 0x08	; 8
    444a:	4d 91       	ld	r20, X+
    444c:	5c 91       	ld	r21, X
    444e:	19 97       	sbiw	r26, 0x09	; 9
    4450:	48 17       	cp	r20, r24
    4452:	59 07       	cpc	r21, r25
    4454:	21 f0       	breq	.+8      	; 0x445e <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    4456:	18 96       	adiw	r26, 0x08	; 8
    4458:	8d 93       	st	X+, r24
    445a:	9c 93       	st	X, r25
    445c:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    445e:	18 96       	adiw	r26, 0x08	; 8
    4460:	8d 91       	ld	r24, X+
    4462:	9c 91       	ld	r25, X
    4464:	19 97       	sbiw	r26, 0x09	; 9
    4466:	28 17       	cp	r18, r24
    4468:	39 07       	cpc	r19, r25
    446a:	18 f4       	brcc	.+6      	; 0x4472 <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    446c:	82 e0       	ldi	r24, 0x02	; 2
    446e:	83 83       	std	Z+3, r24	; 0x03
    4470:	0e c0       	rjmp	.+28     	; 0x448e <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    4472:	87 e0       	ldi	r24, 0x07	; 7
    4474:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    4476:	10 92 70 21 	sts	0x2170, r1
    447a:	09 c0       	rjmp	.+18     	; 0x448e <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    447c:	83 e0       	ldi	r24, 0x03	; 3
    447e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    4480:	89 ef       	ldi	r24, 0xF9	; 249
    4482:	80 93 70 21 	sts	0x2170, r24
    4486:	03 c0       	rjmp	.+6      	; 0x448e <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    4488:	8b ef       	ldi	r24, 0xFB	; 251
    448a:	80 93 70 21 	sts	0x2170, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    448e:	ff 91       	pop	r31
    4490:	ef 91       	pop	r30
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	bf 91       	pop	r27
    4498:	af 91       	pop	r26
    449a:	9f 91       	pop	r25
    449c:	8f 91       	pop	r24
    449e:	7f 91       	pop	r23
    44a0:	6f 91       	pop	r22
    44a2:	5f 91       	pop	r21
    44a4:	4f 91       	pop	r20
    44a6:	3f 91       	pop	r19
    44a8:	2f 91       	pop	r18
    44aa:	0f 90       	pop	r0
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	0f 90       	pop	r0
    44b0:	1f 90       	pop	r1
    44b2:	18 95       	reti

000044b4 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    44b4:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    44b6:	db 01       	movw	r26, r22
    44b8:	14 96       	adiw	r26, 0x04	; 4
    44ba:	8c 91       	ld	r24, X
    44bc:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    44be:	88 eb       	ldi	r24, 0xB8	; 184
    44c0:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    44c6:	e6 e6       	ldi	r30, 0x66	; 102
    44c8:	f1 e2       	ldi	r31, 0x21	; 33
    44ca:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    44cc:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    44ce:	e0 ea       	ldi	r30, 0xA0	; 160
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	82 81       	ldd	r24, Z+2	; 0x02
    44d4:	82 60       	ori	r24, 0x02	; 2
    44d6:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    44d8:	78 94       	sei

	return STATUS_OK;
}
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	08 95       	ret

000044de <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    44de:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    44e0:	89 2b       	or	r24, r25
    44e2:	09 f4       	brne	.+2      	; 0x44e6 <twi_master_transfer+0x8>
    44e4:	49 c0       	rjmp	.+146    	; 0x4578 <twi_master_transfer+0x9a>
    44e6:	61 15       	cp	r22, r1
    44e8:	71 05       	cpc	r23, r1
    44ea:	09 f4       	brne	.+2      	; 0x44ee <twi_master_transfer+0x10>
    44ec:	47 c0       	rjmp	.+142    	; 0x457c <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    44ee:	fb 01       	movw	r30, r22
    44f0:	92 85       	ldd	r25, Z+10	; 0x0a
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {
    44f2:	80 91 6f 21 	lds	r24, 0x216F
    44f6:	88 23       	and	r24, r24
    44f8:	19 f0       	breq	.+6      	; 0x4500 <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    44fa:	99 23       	and	r25, r25
    44fc:	f1 f3       	breq	.-4      	; 0x44fa <twi_master_transfer+0x1c>
    44fe:	40 c0       	rjmp	.+128    	; 0x4580 <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4500:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    4502:	f8 94       	cli
		#endif
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    4504:	e6 e6       	ldi	r30, 0x66	; 102
    4506:	f1 e2       	ldi	r31, 0x21	; 33
    4508:	91 e0       	ldi	r25, 0x01	; 1
    450a:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    450c:	90 e8       	ldi	r25, 0x80	; 128
    450e:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4510:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    4512:	a0 83       	st	Z, r26
    4514:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    4516:	62 83       	std	Z+2, r22	; 0x02
    4518:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    451a:	14 82       	std	Z+4, r1	; 0x04
    451c:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    451e:	16 82       	std	Z+6, r1	; 0x06
    4520:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    4522:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    4524:	fb 01       	movw	r30, r22
    4526:	80 81       	ld	r24, Z
    4528:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    452a:	24 81       	ldd	r18, Z+4	; 0x04
    452c:	35 81       	ldd	r19, Z+5	; 0x05
    452e:	23 2b       	or	r18, r19
    4530:	11 f4       	brne	.+4      	; 0x4536 <twi_master_transfer+0x58>
    4532:	41 11       	cpse	r20, r1
    4534:	03 c0       	rjmp	.+6      	; 0x453c <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    4536:	16 96       	adiw	r26, 0x06	; 6
    4538:	8c 93       	st	X, r24
    453a:	03 c0       	rjmp	.+6      	; 0x4542 <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    453c:	81 60       	ori	r24, 0x01	; 1
    453e:	16 96       	adiw	r26, 0x06	; 6
    4540:	8c 93       	st	X, r24
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	int count=0;
	while (OPERATION_IN_PROGRESS == transfer.status) {
    4542:	e6 e6       	ldi	r30, 0x66	; 102
    4544:	f1 e2       	ldi	r31, 0x21	; 33
    4546:	82 85       	ldd	r24, Z+10	; 0x0a
    4548:	80 38       	cpi	r24, 0x80	; 128
    454a:	e9 f3       	breq	.-6      	; 0x4546 <twi_master_transfer+0x68>
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    454c:	e0 91 66 21 	lds	r30, 0x2166
    4550:	f0 91 67 21 	lds	r31, 0x2167
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4554:	84 81       	ldd	r24, Z+4	; 0x04
    4556:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    4558:	81 30       	cpi	r24, 0x01	; 1
    455a:	49 f0       	breq	.+18     	; 0x456e <twi_master_transfer+0x90>
    455c:	a6 e6       	ldi	r26, 0x66	; 102
    455e:	b1 e2       	ldi	r27, 0x21	; 33
    4560:	ed 91       	ld	r30, X+
    4562:	fc 91       	ld	r31, X
    4564:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    4566:	84 81       	ldd	r24, Z+4	; 0x04
    4568:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    456a:	81 30       	cpi	r24, 0x01	; 1
    456c:	c9 f7       	brne	.-14     	; 0x4560 <twi_master_transfer+0x82>
			if(count++>10000)
			return ERR_BUSY;
		#endif
	}

	status_code_t const status = transfer.status;
    456e:	e6 e6       	ldi	r30, 0x66	; 102
    4570:	f1 e2       	ldi	r31, 0x21	; 33
    4572:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    4574:	11 86       	std	Z+9, r1	; 0x09
    4576:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    4578:	88 ef       	ldi	r24, 0xF8	; 248
    457a:	08 95       	ret
    457c:	88 ef       	ldi	r24, 0xF8	; 248
    457e:	08 95       	ret
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    4580:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    4582:	08 95       	ret

00004584 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    4584:	fc 01       	movw	r30, r24
    4586:	22 e1       	ldi	r18, 0x12	; 18
    4588:	37 e2       	ldi	r19, 0x27	; 39
    458a:	03 c0       	rjmp	.+6      	; 0x4592 <usart_putchar+0xe>
    458c:	21 50       	subi	r18, 0x01	; 1
    458e:	31 09       	sbc	r19, r1
    4590:	19 f0       	breq	.+6      	; 0x4598 <usart_putchar+0x14>
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	95 ff       	sbrs	r25, 5
    4596:	fa cf       	rjmp	.-12     	; 0x458c <usart_putchar+0x8>
    4598:	60 83       	st	Z, r22
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	08 95       	ret

000045a0 <usart_getchar>:
    45a0:	fc 01       	movw	r30, r24
    45a2:	22 e1       	ldi	r18, 0x12	; 18
    45a4:	37 e2       	ldi	r19, 0x27	; 39
    45a6:	03 c0       	rjmp	.+6      	; 0x45ae <usart_getchar+0xe>
    45a8:	21 50       	subi	r18, 0x01	; 1
    45aa:	31 09       	sbc	r19, r1
    45ac:	19 f0       	breq	.+6      	; 0x45b4 <usart_getchar+0x14>
    45ae:	91 81       	ldd	r25, Z+1	; 0x01
    45b0:	99 23       	and	r25, r25
    45b2:	d4 f7       	brge	.-12     	; 0x45a8 <usart_getchar+0x8>
    45b4:	80 81       	ld	r24, Z
    45b6:	08 95       	ret

000045b8 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    45b8:	2f 92       	push	r2
    45ba:	3f 92       	push	r3
    45bc:	4f 92       	push	r4
    45be:	5f 92       	push	r5
    45c0:	6f 92       	push	r6
    45c2:	7f 92       	push	r7
    45c4:	8f 92       	push	r8
    45c6:	9f 92       	push	r9
    45c8:	af 92       	push	r10
    45ca:	bf 92       	push	r11
    45cc:	cf 92       	push	r12
    45ce:	df 92       	push	r13
    45d0:	ef 92       	push	r14
    45d2:	ff 92       	push	r15
    45d4:	0f 93       	push	r16
    45d6:	1f 93       	push	r17
    45d8:	cf 93       	push	r28
    45da:	1c 01       	movw	r2, r24
    45dc:	2a 01       	movw	r4, r20
    45de:	3b 01       	movw	r6, r22
    45e0:	48 01       	movw	r8, r16
    45e2:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    45e4:	d9 01       	movw	r26, r18
    45e6:	c8 01       	movw	r24, r16
    45e8:	68 94       	set
    45ea:	12 f8       	bld	r1, 2
    45ec:	b6 95       	lsr	r27
    45ee:	a7 95       	ror	r26
    45f0:	97 95       	ror	r25
    45f2:	87 95       	ror	r24
    45f4:	16 94       	lsr	r1
    45f6:	d1 f7       	brne	.-12     	; 0x45ec <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    45f8:	b9 01       	movw	r22, r18
    45fa:	a8 01       	movw	r20, r16
    45fc:	03 2e       	mov	r0, r19
    45fe:	36 e1       	ldi	r19, 0x16	; 22
    4600:	76 95       	lsr	r23
    4602:	67 95       	ror	r22
    4604:	57 95       	ror	r21
    4606:	47 95       	ror	r20
    4608:	3a 95       	dec	r19
    460a:	d1 f7       	brne	.-12     	; 0x4600 <usart_set_baudrate+0x48>
    460c:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    460e:	f1 01       	movw	r30, r2
    4610:	23 81       	ldd	r18, Z+3	; 0x03
    4612:	22 fd       	sbrc	r18, 2
    4614:	08 c0       	rjmp	.+16     	; 0x4626 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    4616:	b6 95       	lsr	r27
    4618:	a7 95       	ror	r26
    461a:	97 95       	ror	r25
    461c:	87 95       	ror	r24
		min_rate /= 2;
    461e:	76 95       	lsr	r23
    4620:	67 95       	ror	r22
    4622:	57 95       	ror	r21
    4624:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    4626:	84 15       	cp	r24, r4
    4628:	95 05       	cpc	r25, r5
    462a:	a6 05       	cpc	r26, r6
    462c:	b7 05       	cpc	r27, r7
    462e:	08 f4       	brcc	.+2      	; 0x4632 <usart_set_baudrate+0x7a>
    4630:	aa c0       	rjmp	.+340    	; 0x4786 <usart_set_baudrate+0x1ce>
    4632:	44 16       	cp	r4, r20
    4634:	55 06       	cpc	r5, r21
    4636:	66 06       	cpc	r6, r22
    4638:	77 06       	cpc	r7, r23
    463a:	08 f4       	brcc	.+2      	; 0x463e <usart_set_baudrate+0x86>
    463c:	a6 c0       	rjmp	.+332    	; 0x478a <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    463e:	f1 01       	movw	r30, r2
    4640:	83 81       	ldd	r24, Z+3	; 0x03
    4642:	82 fd       	sbrc	r24, 2
    4644:	04 c0       	rjmp	.+8      	; 0x464e <usart_set_baudrate+0x96>
		baud *= 2;
    4646:	44 0c       	add	r4, r4
    4648:	55 1c       	adc	r5, r5
    464a:	66 1c       	adc	r6, r6
    464c:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    464e:	c5 01       	movw	r24, r10
    4650:	b4 01       	movw	r22, r8
    4652:	a3 01       	movw	r20, r6
    4654:	92 01       	movw	r18, r4
    4656:	a4 d3       	rcall	.+1864   	; 0x4da0 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    4658:	2f 3f       	cpi	r18, 0xFF	; 255
    465a:	31 05       	cpc	r19, r1
    465c:	41 05       	cpc	r20, r1
    465e:	51 05       	cpc	r21, r1
    4660:	08 f4       	brcc	.+2      	; 0x4664 <usart_set_baudrate+0xac>
    4662:	95 c0       	rjmp	.+298    	; 0x478e <usart_set_baudrate+0x1d6>
    4664:	c1 2c       	mov	r12, r1
    4666:	d1 2c       	mov	r13, r1
    4668:	76 01       	movw	r14, r12
    466a:	ca 94       	dec	r12
    466c:	c9 ef       	ldi	r28, 0xF9	; 249
    466e:	05 c0       	rjmp	.+10     	; 0x467a <usart_set_baudrate+0xc2>
    4670:	2c 15       	cp	r18, r12
    4672:	3d 05       	cpc	r19, r13
    4674:	4e 05       	cpc	r20, r14
    4676:	5f 05       	cpc	r21, r15
    4678:	68 f0       	brcs	.+26     	; 0x4694 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    467a:	cc 0c       	add	r12, r12
    467c:	dd 1c       	adc	r13, r13
    467e:	ee 1c       	adc	r14, r14
    4680:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    4682:	cd 3f       	cpi	r28, 0xFD	; 253
    4684:	14 f4       	brge	.+4      	; 0x468a <usart_set_baudrate+0xd2>
			limit |= 1;
    4686:	68 94       	set
    4688:	c0 f8       	bld	r12, 0
    468a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    468c:	c7 30       	cpi	r28, 0x07	; 7
    468e:	81 f7       	brne	.-32     	; 0x4670 <usart_set_baudrate+0xb8>
    4690:	8c 2f       	mov	r24, r28
    4692:	54 c0       	rjmp	.+168    	; 0x473c <usart_set_baudrate+0x184>
    4694:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    4696:	cc 23       	and	r28, r28
    4698:	0c f0       	brlt	.+2      	; 0x469c <usart_set_baudrate+0xe4>
    469a:	50 c0       	rjmp	.+160    	; 0x473c <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    469c:	d3 01       	movw	r26, r6
    469e:	c2 01       	movw	r24, r4
    46a0:	88 0f       	add	r24, r24
    46a2:	99 1f       	adc	r25, r25
    46a4:	aa 1f       	adc	r26, r26
    46a6:	bb 1f       	adc	r27, r27
    46a8:	88 0f       	add	r24, r24
    46aa:	99 1f       	adc	r25, r25
    46ac:	aa 1f       	adc	r26, r26
    46ae:	bb 1f       	adc	r27, r27
    46b0:	88 0f       	add	r24, r24
    46b2:	99 1f       	adc	r25, r25
    46b4:	aa 1f       	adc	r26, r26
    46b6:	bb 1f       	adc	r27, r27
    46b8:	85 01       	movw	r16, r10
    46ba:	74 01       	movw	r14, r8
    46bc:	e8 1a       	sub	r14, r24
    46be:	f9 0a       	sbc	r15, r25
    46c0:	0a 0b       	sbc	r16, r26
    46c2:	1b 0b       	sbc	r17, r27
    46c4:	d8 01       	movw	r26, r16
    46c6:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    46c8:	ce 3f       	cpi	r28, 0xFE	; 254
    46ca:	ec f4       	brge	.+58     	; 0x4706 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    46cc:	2d ef       	ldi	r18, 0xFD	; 253
    46ce:	3f ef       	ldi	r19, 0xFF	; 255
    46d0:	2c 1b       	sub	r18, r28
    46d2:	31 09       	sbc	r19, r1
    46d4:	c7 fd       	sbrc	r28, 7
    46d6:	33 95       	inc	r19
    46d8:	04 c0       	rjmp	.+8      	; 0x46e2 <usart_set_baudrate+0x12a>
    46da:	88 0f       	add	r24, r24
    46dc:	99 1f       	adc	r25, r25
    46de:	aa 1f       	adc	r26, r26
    46e0:	bb 1f       	adc	r27, r27
    46e2:	2a 95       	dec	r18
    46e4:	d2 f7       	brpl	.-12     	; 0x46da <usart_set_baudrate+0x122>
    46e6:	73 01       	movw	r14, r6
    46e8:	62 01       	movw	r12, r4
    46ea:	f6 94       	lsr	r15
    46ec:	e7 94       	ror	r14
    46ee:	d7 94       	ror	r13
    46f0:	c7 94       	ror	r12
    46f2:	bc 01       	movw	r22, r24
    46f4:	cd 01       	movw	r24, r26
    46f6:	6c 0d       	add	r22, r12
    46f8:	7d 1d       	adc	r23, r13
    46fa:	8e 1d       	adc	r24, r14
    46fc:	9f 1d       	adc	r25, r15
    46fe:	a3 01       	movw	r20, r6
    4700:	92 01       	movw	r18, r4
    4702:	4e d3       	rcall	.+1692   	; 0x4da0 <__udivmodsi4>
    4704:	36 c0       	rjmp	.+108    	; 0x4772 <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    4706:	23 e0       	ldi	r18, 0x03	; 3
    4708:	2c 0f       	add	r18, r28
    470a:	83 01       	movw	r16, r6
    470c:	72 01       	movw	r14, r4
    470e:	04 c0       	rjmp	.+8      	; 0x4718 <usart_set_baudrate+0x160>
    4710:	ee 0c       	add	r14, r14
    4712:	ff 1c       	adc	r15, r15
    4714:	00 1f       	adc	r16, r16
    4716:	11 1f       	adc	r17, r17
    4718:	2a 95       	dec	r18
    471a:	d2 f7       	brpl	.-12     	; 0x4710 <usart_set_baudrate+0x158>
    471c:	a8 01       	movw	r20, r16
    471e:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    4720:	67 01       	movw	r12, r14
    4722:	78 01       	movw	r14, r16
    4724:	f6 94       	lsr	r15
    4726:	e7 94       	ror	r14
    4728:	d7 94       	ror	r13
    472a:	c7 94       	ror	r12
    472c:	bc 01       	movw	r22, r24
    472e:	cd 01       	movw	r24, r26
    4730:	6c 0d       	add	r22, r12
    4732:	7d 1d       	adc	r23, r13
    4734:	8e 1d       	adc	r24, r14
    4736:	9f 1d       	adc	r25, r15
    4738:	33 d3       	rcall	.+1638   	; 0x4da0 <__udivmodsi4>
    473a:	1b c0       	rjmp	.+54     	; 0x4772 <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    473c:	8d 5f       	subi	r24, 0xFD	; 253
    473e:	a3 01       	movw	r20, r6
    4740:	92 01       	movw	r18, r4
    4742:	04 c0       	rjmp	.+8      	; 0x474c <usart_set_baudrate+0x194>
    4744:	22 0f       	add	r18, r18
    4746:	33 1f       	adc	r19, r19
    4748:	44 1f       	adc	r20, r20
    474a:	55 1f       	adc	r21, r21
    474c:	8a 95       	dec	r24
    474e:	d2 f7       	brpl	.-12     	; 0x4744 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    4750:	da 01       	movw	r26, r20
    4752:	c9 01       	movw	r24, r18
    4754:	b6 95       	lsr	r27
    4756:	a7 95       	ror	r26
    4758:	97 95       	ror	r25
    475a:	87 95       	ror	r24
    475c:	bc 01       	movw	r22, r24
    475e:	cd 01       	movw	r24, r26
    4760:	68 0d       	add	r22, r8
    4762:	79 1d       	adc	r23, r9
    4764:	8a 1d       	adc	r24, r10
    4766:	9b 1d       	adc	r25, r11
    4768:	1b d3       	rcall	.+1590   	; 0x4da0 <__udivmodsi4>
    476a:	21 50       	subi	r18, 0x01	; 1
    476c:	31 09       	sbc	r19, r1
    476e:	41 09       	sbc	r20, r1
    4770:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    4772:	83 2f       	mov	r24, r19
    4774:	8f 70       	andi	r24, 0x0F	; 15
    4776:	c2 95       	swap	r28
    4778:	c0 7f       	andi	r28, 0xF0	; 240
    477a:	c8 2b       	or	r28, r24
    477c:	f1 01       	movw	r30, r2
    477e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    4780:	26 83       	std	Z+6, r18	; 0x06

	return true;
    4782:	81 e0       	ldi	r24, 0x01	; 1
    4784:	1c c0       	rjmp	.+56     	; 0x47be <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    4786:	80 e0       	ldi	r24, 0x00	; 0
    4788:	1a c0       	rjmp	.+52     	; 0x47be <usart_set_baudrate+0x206>
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	18 c0       	rjmp	.+48     	; 0x47be <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    478e:	d3 01       	movw	r26, r6
    4790:	c2 01       	movw	r24, r4
    4792:	88 0f       	add	r24, r24
    4794:	99 1f       	adc	r25, r25
    4796:	aa 1f       	adc	r26, r26
    4798:	bb 1f       	adc	r27, r27
    479a:	88 0f       	add	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	aa 1f       	adc	r26, r26
    47a0:	bb 1f       	adc	r27, r27
    47a2:	88 0f       	add	r24, r24
    47a4:	99 1f       	adc	r25, r25
    47a6:	aa 1f       	adc	r26, r26
    47a8:	bb 1f       	adc	r27, r27
    47aa:	85 01       	movw	r16, r10
    47ac:	74 01       	movw	r14, r8
    47ae:	e8 1a       	sub	r14, r24
    47b0:	f9 0a       	sbc	r15, r25
    47b2:	0a 0b       	sbc	r16, r26
    47b4:	1b 0b       	sbc	r17, r27
    47b6:	d8 01       	movw	r26, r16
    47b8:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    47ba:	c9 ef       	ldi	r28, 0xF9	; 249
    47bc:	87 cf       	rjmp	.-242    	; 0x46cc <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    47be:	cf 91       	pop	r28
    47c0:	1f 91       	pop	r17
    47c2:	0f 91       	pop	r16
    47c4:	ff 90       	pop	r15
    47c6:	ef 90       	pop	r14
    47c8:	df 90       	pop	r13
    47ca:	cf 90       	pop	r12
    47cc:	bf 90       	pop	r11
    47ce:	af 90       	pop	r10
    47d0:	9f 90       	pop	r9
    47d2:	8f 90       	pop	r8
    47d4:	7f 90       	pop	r7
    47d6:	6f 90       	pop	r6
    47d8:	5f 90       	pop	r5
    47da:	4f 90       	pop	r4
    47dc:	3f 90       	pop	r3
    47de:	2f 90       	pop	r2
    47e0:	08 95       	ret

000047e2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    47e2:	0f 93       	push	r16
    47e4:	1f 93       	push	r17
    47e6:	cf 93       	push	r28
    47e8:	df 93       	push	r29
    47ea:	ec 01       	movw	r28, r24
    47ec:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    47ee:	89 2b       	or	r24, r25
    47f0:	09 f4       	brne	.+2      	; 0x47f4 <usart_init_rs232+0x12>
    47f2:	77 c0       	rjmp	.+238    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    47f4:	c1 15       	cp	r28, r1
    47f6:	84 e0       	ldi	r24, 0x04	; 4
    47f8:	d8 07       	cpc	r29, r24
    47fa:	21 f4       	brne	.+8      	; 0x4804 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    47fc:	64 e0       	ldi	r22, 0x04	; 4
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	08 d9       	rcall	.-3568   	; 0x3a12 <sysclk_enable_module>
    4802:	6f c0       	rjmp	.+222    	; 0x48e2 <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    4804:	c0 38       	cpi	r28, 0x80	; 128
    4806:	e1 e0       	ldi	r30, 0x01	; 1
    4808:	de 07       	cpc	r29, r30
    480a:	21 f4       	brne	.+8      	; 0x4814 <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    480c:	62 e0       	ldi	r22, 0x02	; 2
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	00 d9       	rcall	.-3584   	; 0x3a12 <sysclk_enable_module>
    4812:	67 c0       	rjmp	.+206    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    4814:	c1 15       	cp	r28, r1
    4816:	f1 e0       	ldi	r31, 0x01	; 1
    4818:	df 07       	cpc	r29, r31
    481a:	21 f4       	brne	.+8      	; 0x4824 <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    481c:	61 e0       	ldi	r22, 0x01	; 1
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	f8 d8       	rcall	.-3600   	; 0x3a12 <sysclk_enable_module>
    4822:	5f c0       	rjmp	.+190    	; 0x48e2 <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    4824:	c0 38       	cpi	r28, 0x80	; 128
    4826:	83 e0       	ldi	r24, 0x03	; 3
    4828:	d8 07       	cpc	r29, r24
    482a:	21 f4       	brne	.+8      	; 0x4834 <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    482c:	61 e0       	ldi	r22, 0x01	; 1
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	f0 d8       	rcall	.-3616   	; 0x3a12 <sysclk_enable_module>
    4832:	57 c0       	rjmp	.+174    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    4834:	c1 15       	cp	r28, r1
    4836:	e2 e0       	ldi	r30, 0x02	; 2
    4838:	de 07       	cpc	r29, r30
    483a:	21 f4       	brne	.+8      	; 0x4844 <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	81 e0       	ldi	r24, 0x01	; 1
    4840:	e8 d8       	rcall	.-3632   	; 0x3a12 <sysclk_enable_module>
    4842:	4f c0       	rjmp	.+158    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    4844:	c1 15       	cp	r28, r1
    4846:	f3 e0       	ldi	r31, 0x03	; 3
    4848:	df 07       	cpc	r29, r31
    484a:	21 f4       	brne	.+8      	; 0x4854 <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    484c:	64 e0       	ldi	r22, 0x04	; 4
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	e0 d8       	rcall	.-3648   	; 0x3a12 <sysclk_enable_module>
    4852:	47 c0       	rjmp	.+142    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    4854:	c1 15       	cp	r28, r1
    4856:	88 e0       	ldi	r24, 0x08	; 8
    4858:	d8 07       	cpc	r29, r24
    485a:	21 f4       	brne	.+8      	; 0x4864 <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    485c:	61 e0       	ldi	r22, 0x01	; 1
    485e:	83 e0       	ldi	r24, 0x03	; 3
    4860:	d8 d8       	rcall	.-3664   	; 0x3a12 <sysclk_enable_module>
    4862:	3f c0       	rjmp	.+126    	; 0x48e2 <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    4864:	c0 34       	cpi	r28, 0x40	; 64
    4866:	e8 e0       	ldi	r30, 0x08	; 8
    4868:	de 07       	cpc	r29, r30
    486a:	21 f4       	brne	.+8      	; 0x4874 <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    486c:	62 e0       	ldi	r22, 0x02	; 2
    486e:	83 e0       	ldi	r24, 0x03	; 3
    4870:	d0 d8       	rcall	.-3680   	; 0x3a12 <sysclk_enable_module>
    4872:	37 c0       	rjmp	.+110    	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    4874:	c0 34       	cpi	r28, 0x40	; 64
    4876:	f9 e0       	ldi	r31, 0x09	; 9
    4878:	df 07       	cpc	r29, r31
    487a:	21 f4       	brne	.+8      	; 0x4884 <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    487c:	62 e0       	ldi	r22, 0x02	; 2
    487e:	84 e0       	ldi	r24, 0x04	; 4
    4880:	c8 d8       	rcall	.-3696   	; 0x3a12 <sysclk_enable_module>
    4882:	2f c0       	rjmp	.+94     	; 0x48e2 <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    4884:	c0 3b       	cpi	r28, 0xB0	; 176
    4886:	88 e0       	ldi	r24, 0x08	; 8
    4888:	d8 07       	cpc	r29, r24
    488a:	21 f4       	brne	.+8      	; 0x4894 <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    488c:	64 e0       	ldi	r22, 0x04	; 4
    488e:	83 e0       	ldi	r24, 0x03	; 3
    4890:	c0 d8       	rcall	.-3712   	; 0x3a12 <sysclk_enable_module>
    4892:	27 c0       	rjmp	.+78     	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    4894:	c0 3e       	cpi	r28, 0xE0	; 224
    4896:	e8 e0       	ldi	r30, 0x08	; 8
    4898:	de 07       	cpc	r29, r30
    489a:	21 f4       	brne	.+8      	; 0x48a4 <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    489c:	68 e0       	ldi	r22, 0x08	; 8
    489e:	83 e0       	ldi	r24, 0x03	; 3
    48a0:	b8 d8       	rcall	.-3728   	; 0x3a12 <sysclk_enable_module>
    48a2:	1f c0       	rjmp	.+62     	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    48a4:	c0 3c       	cpi	r28, 0xC0	; 192
    48a6:	f8 e0       	ldi	r31, 0x08	; 8
    48a8:	df 07       	cpc	r29, r31
    48aa:	21 f4       	brne	.+8      	; 0x48b4 <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    48ac:	60 e1       	ldi	r22, 0x10	; 16
    48ae:	83 e0       	ldi	r24, 0x03	; 3
    48b0:	b0 d8       	rcall	.-3744   	; 0x3a12 <sysclk_enable_module>
    48b2:	17 c0       	rjmp	.+46     	; 0x48e2 <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    48b4:	c0 3c       	cpi	r28, 0xC0	; 192
    48b6:	89 e0       	ldi	r24, 0x09	; 9
    48b8:	d8 07       	cpc	r29, r24
    48ba:	21 f4       	brne	.+8      	; 0x48c4 <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    48bc:	60 e1       	ldi	r22, 0x10	; 16
    48be:	84 e0       	ldi	r24, 0x04	; 4
    48c0:	a8 d8       	rcall	.-3760   	; 0x3a12 <sysclk_enable_module>
    48c2:	0f c0       	rjmp	.+30     	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    48c4:	c0 38       	cpi	r28, 0x80	; 128
    48c6:	e4 e0       	ldi	r30, 0x04	; 4
    48c8:	de 07       	cpc	r29, r30
    48ca:	21 f4       	brne	.+8      	; 0x48d4 <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    48cc:	60 e4       	ldi	r22, 0x40	; 64
    48ce:	83 e0       	ldi	r24, 0x03	; 3
    48d0:	a0 d8       	rcall	.-3776   	; 0x3a12 <sysclk_enable_module>
    48d2:	07 c0       	rjmp	.+14     	; 0x48e2 <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    48d4:	c0 36       	cpi	r28, 0x60	; 96
    48d6:	f4 e0       	ldi	r31, 0x04	; 4
    48d8:	df 07       	cpc	r29, r31
    48da:	19 f4       	brne	.+6      	; 0x48e2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    48dc:	60 e8       	ldi	r22, 0x80	; 128
    48de:	80 e0       	ldi	r24, 0x00	; 0
    48e0:	98 d8       	rcall	.-3792   	; 0x3a12 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    48e2:	8c 81       	ldd	r24, Y+4	; 0x04
    48e4:	8f 73       	andi	r24, 0x3F	; 63
    48e6:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    48e8:	f8 01       	movw	r30, r16
    48ea:	94 81       	ldd	r25, Z+4	; 0x04
    48ec:	85 81       	ldd	r24, Z+5	; 0x05
    48ee:	89 2b       	or	r24, r25
    48f0:	96 81       	ldd	r25, Z+6	; 0x06
    48f2:	91 11       	cpse	r25, r1
    48f4:	98 e0       	ldi	r25, 0x08	; 8
    48f6:	89 2b       	or	r24, r25
    48f8:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    48fa:	f8 01       	movw	r30, r16
    48fc:	40 81       	ld	r20, Z
    48fe:	51 81       	ldd	r21, Z+1	; 0x01
    4900:	62 81       	ldd	r22, Z+2	; 0x02
    4902:	73 81       	ldd	r23, Z+3	; 0x03
    4904:	00 e0       	ldi	r16, 0x00	; 0
    4906:	18 e4       	ldi	r17, 0x48	; 72
    4908:	28 ee       	ldi	r18, 0xE8	; 232
    490a:	31 e0       	ldi	r19, 0x01	; 1
    490c:	ce 01       	movw	r24, r28
    490e:	54 de       	rcall	.-856    	; 0x45b8 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    4910:	9b 81       	ldd	r25, Y+3	; 0x03
    4912:	98 60       	ori	r25, 0x08	; 8
    4914:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    4916:	9b 81       	ldd	r25, Y+3	; 0x03
    4918:	90 61       	ori	r25, 0x10	; 16
    491a:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	0f 91       	pop	r16
    4924:	08 95       	ret

00004926 <__subsf3>:
    4926:	50 58       	subi	r21, 0x80	; 128

00004928 <__addsf3>:
    4928:	bb 27       	eor	r27, r27
    492a:	aa 27       	eor	r26, r26
    492c:	0e d0       	rcall	.+28     	; 0x494a <__addsf3x>
    492e:	70 c1       	rjmp	.+736    	; 0x4c10 <__fp_round>
    4930:	61 d1       	rcall	.+706    	; 0x4bf4 <__fp_pscA>
    4932:	30 f0       	brcs	.+12     	; 0x4940 <__addsf3+0x18>
    4934:	66 d1       	rcall	.+716    	; 0x4c02 <__fp_pscB>
    4936:	20 f0       	brcs	.+8      	; 0x4940 <__addsf3+0x18>
    4938:	31 f4       	brne	.+12     	; 0x4946 <__addsf3+0x1e>
    493a:	9f 3f       	cpi	r25, 0xFF	; 255
    493c:	11 f4       	brne	.+4      	; 0x4942 <__addsf3+0x1a>
    493e:	1e f4       	brtc	.+6      	; 0x4946 <__addsf3+0x1e>
    4940:	56 c1       	rjmp	.+684    	; 0x4bee <__fp_nan>
    4942:	0e f4       	brtc	.+2      	; 0x4946 <__addsf3+0x1e>
    4944:	e0 95       	com	r30
    4946:	e7 fb       	bst	r30, 7
    4948:	4c c1       	rjmp	.+664    	; 0x4be2 <__fp_inf>

0000494a <__addsf3x>:
    494a:	e9 2f       	mov	r30, r25
    494c:	72 d1       	rcall	.+740    	; 0x4c32 <__fp_split3>
    494e:	80 f3       	brcs	.-32     	; 0x4930 <__addsf3+0x8>
    4950:	ba 17       	cp	r27, r26
    4952:	62 07       	cpc	r22, r18
    4954:	73 07       	cpc	r23, r19
    4956:	84 07       	cpc	r24, r20
    4958:	95 07       	cpc	r25, r21
    495a:	18 f0       	brcs	.+6      	; 0x4962 <__addsf3x+0x18>
    495c:	71 f4       	brne	.+28     	; 0x497a <__addsf3x+0x30>
    495e:	9e f5       	brtc	.+102    	; 0x49c6 <__addsf3x+0x7c>
    4960:	8a c1       	rjmp	.+788    	; 0x4c76 <__fp_zero>
    4962:	0e f4       	brtc	.+2      	; 0x4966 <__addsf3x+0x1c>
    4964:	e0 95       	com	r30
    4966:	0b 2e       	mov	r0, r27
    4968:	ba 2f       	mov	r27, r26
    496a:	a0 2d       	mov	r26, r0
    496c:	0b 01       	movw	r0, r22
    496e:	b9 01       	movw	r22, r18
    4970:	90 01       	movw	r18, r0
    4972:	0c 01       	movw	r0, r24
    4974:	ca 01       	movw	r24, r20
    4976:	a0 01       	movw	r20, r0
    4978:	11 24       	eor	r1, r1
    497a:	ff 27       	eor	r31, r31
    497c:	59 1b       	sub	r21, r25
    497e:	99 f0       	breq	.+38     	; 0x49a6 <__addsf3x+0x5c>
    4980:	59 3f       	cpi	r21, 0xF9	; 249
    4982:	50 f4       	brcc	.+20     	; 0x4998 <__addsf3x+0x4e>
    4984:	50 3e       	cpi	r21, 0xE0	; 224
    4986:	68 f1       	brcs	.+90     	; 0x49e2 <__addsf3x+0x98>
    4988:	1a 16       	cp	r1, r26
    498a:	f0 40       	sbci	r31, 0x00	; 0
    498c:	a2 2f       	mov	r26, r18
    498e:	23 2f       	mov	r18, r19
    4990:	34 2f       	mov	r19, r20
    4992:	44 27       	eor	r20, r20
    4994:	58 5f       	subi	r21, 0xF8	; 248
    4996:	f3 cf       	rjmp	.-26     	; 0x497e <__addsf3x+0x34>
    4998:	46 95       	lsr	r20
    499a:	37 95       	ror	r19
    499c:	27 95       	ror	r18
    499e:	a7 95       	ror	r26
    49a0:	f0 40       	sbci	r31, 0x00	; 0
    49a2:	53 95       	inc	r21
    49a4:	c9 f7       	brne	.-14     	; 0x4998 <__addsf3x+0x4e>
    49a6:	7e f4       	brtc	.+30     	; 0x49c6 <__addsf3x+0x7c>
    49a8:	1f 16       	cp	r1, r31
    49aa:	ba 0b       	sbc	r27, r26
    49ac:	62 0b       	sbc	r22, r18
    49ae:	73 0b       	sbc	r23, r19
    49b0:	84 0b       	sbc	r24, r20
    49b2:	ba f0       	brmi	.+46     	; 0x49e2 <__addsf3x+0x98>
    49b4:	91 50       	subi	r25, 0x01	; 1
    49b6:	a1 f0       	breq	.+40     	; 0x49e0 <__addsf3x+0x96>
    49b8:	ff 0f       	add	r31, r31
    49ba:	bb 1f       	adc	r27, r27
    49bc:	66 1f       	adc	r22, r22
    49be:	77 1f       	adc	r23, r23
    49c0:	88 1f       	adc	r24, r24
    49c2:	c2 f7       	brpl	.-16     	; 0x49b4 <__addsf3x+0x6a>
    49c4:	0e c0       	rjmp	.+28     	; 0x49e2 <__addsf3x+0x98>
    49c6:	ba 0f       	add	r27, r26
    49c8:	62 1f       	adc	r22, r18
    49ca:	73 1f       	adc	r23, r19
    49cc:	84 1f       	adc	r24, r20
    49ce:	48 f4       	brcc	.+18     	; 0x49e2 <__addsf3x+0x98>
    49d0:	87 95       	ror	r24
    49d2:	77 95       	ror	r23
    49d4:	67 95       	ror	r22
    49d6:	b7 95       	ror	r27
    49d8:	f7 95       	ror	r31
    49da:	9e 3f       	cpi	r25, 0xFE	; 254
    49dc:	08 f0       	brcs	.+2      	; 0x49e0 <__addsf3x+0x96>
    49de:	b3 cf       	rjmp	.-154    	; 0x4946 <__addsf3+0x1e>
    49e0:	93 95       	inc	r25
    49e2:	88 0f       	add	r24, r24
    49e4:	08 f0       	brcs	.+2      	; 0x49e8 <__addsf3x+0x9e>
    49e6:	99 27       	eor	r25, r25
    49e8:	ee 0f       	add	r30, r30
    49ea:	97 95       	ror	r25
    49ec:	87 95       	ror	r24
    49ee:	08 95       	ret

000049f0 <__cmpsf2>:
    49f0:	d4 d0       	rcall	.+424    	; 0x4b9a <__fp_cmp>
    49f2:	08 f4       	brcc	.+2      	; 0x49f6 <__cmpsf2+0x6>
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	08 95       	ret

000049f8 <__divsf3>:
    49f8:	0c d0       	rcall	.+24     	; 0x4a12 <__divsf3x>
    49fa:	0a c1       	rjmp	.+532    	; 0x4c10 <__fp_round>
    49fc:	02 d1       	rcall	.+516    	; 0x4c02 <__fp_pscB>
    49fe:	40 f0       	brcs	.+16     	; 0x4a10 <__divsf3+0x18>
    4a00:	f9 d0       	rcall	.+498    	; 0x4bf4 <__fp_pscA>
    4a02:	30 f0       	brcs	.+12     	; 0x4a10 <__divsf3+0x18>
    4a04:	21 f4       	brne	.+8      	; 0x4a0e <__divsf3+0x16>
    4a06:	5f 3f       	cpi	r21, 0xFF	; 255
    4a08:	19 f0       	breq	.+6      	; 0x4a10 <__divsf3+0x18>
    4a0a:	eb c0       	rjmp	.+470    	; 0x4be2 <__fp_inf>
    4a0c:	51 11       	cpse	r21, r1
    4a0e:	34 c1       	rjmp	.+616    	; 0x4c78 <__fp_szero>
    4a10:	ee c0       	rjmp	.+476    	; 0x4bee <__fp_nan>

00004a12 <__divsf3x>:
    4a12:	0f d1       	rcall	.+542    	; 0x4c32 <__fp_split3>
    4a14:	98 f3       	brcs	.-26     	; 0x49fc <__divsf3+0x4>

00004a16 <__divsf3_pse>:
    4a16:	99 23       	and	r25, r25
    4a18:	c9 f3       	breq	.-14     	; 0x4a0c <__divsf3+0x14>
    4a1a:	55 23       	and	r21, r21
    4a1c:	b1 f3       	breq	.-20     	; 0x4a0a <__divsf3+0x12>
    4a1e:	95 1b       	sub	r25, r21
    4a20:	55 0b       	sbc	r21, r21
    4a22:	bb 27       	eor	r27, r27
    4a24:	aa 27       	eor	r26, r26
    4a26:	62 17       	cp	r22, r18
    4a28:	73 07       	cpc	r23, r19
    4a2a:	84 07       	cpc	r24, r20
    4a2c:	38 f0       	brcs	.+14     	; 0x4a3c <__divsf3_pse+0x26>
    4a2e:	9f 5f       	subi	r25, 0xFF	; 255
    4a30:	5f 4f       	sbci	r21, 0xFF	; 255
    4a32:	22 0f       	add	r18, r18
    4a34:	33 1f       	adc	r19, r19
    4a36:	44 1f       	adc	r20, r20
    4a38:	aa 1f       	adc	r26, r26
    4a3a:	a9 f3       	breq	.-22     	; 0x4a26 <__divsf3_pse+0x10>
    4a3c:	33 d0       	rcall	.+102    	; 0x4aa4 <__divsf3_pse+0x8e>
    4a3e:	0e 2e       	mov	r0, r30
    4a40:	3a f0       	brmi	.+14     	; 0x4a50 <__divsf3_pse+0x3a>
    4a42:	e0 e8       	ldi	r30, 0x80	; 128
    4a44:	30 d0       	rcall	.+96     	; 0x4aa6 <__divsf3_pse+0x90>
    4a46:	91 50       	subi	r25, 0x01	; 1
    4a48:	50 40       	sbci	r21, 0x00	; 0
    4a4a:	e6 95       	lsr	r30
    4a4c:	00 1c       	adc	r0, r0
    4a4e:	ca f7       	brpl	.-14     	; 0x4a42 <__divsf3_pse+0x2c>
    4a50:	29 d0       	rcall	.+82     	; 0x4aa4 <__divsf3_pse+0x8e>
    4a52:	fe 2f       	mov	r31, r30
    4a54:	27 d0       	rcall	.+78     	; 0x4aa4 <__divsf3_pse+0x8e>
    4a56:	66 0f       	add	r22, r22
    4a58:	77 1f       	adc	r23, r23
    4a5a:	88 1f       	adc	r24, r24
    4a5c:	bb 1f       	adc	r27, r27
    4a5e:	26 17       	cp	r18, r22
    4a60:	37 07       	cpc	r19, r23
    4a62:	48 07       	cpc	r20, r24
    4a64:	ab 07       	cpc	r26, r27
    4a66:	b0 e8       	ldi	r27, 0x80	; 128
    4a68:	09 f0       	breq	.+2      	; 0x4a6c <__divsf3_pse+0x56>
    4a6a:	bb 0b       	sbc	r27, r27
    4a6c:	80 2d       	mov	r24, r0
    4a6e:	bf 01       	movw	r22, r30
    4a70:	ff 27       	eor	r31, r31
    4a72:	93 58       	subi	r25, 0x83	; 131
    4a74:	5f 4f       	sbci	r21, 0xFF	; 255
    4a76:	2a f0       	brmi	.+10     	; 0x4a82 <__divsf3_pse+0x6c>
    4a78:	9e 3f       	cpi	r25, 0xFE	; 254
    4a7a:	51 05       	cpc	r21, r1
    4a7c:	68 f0       	brcs	.+26     	; 0x4a98 <__divsf3_pse+0x82>
    4a7e:	b1 c0       	rjmp	.+354    	; 0x4be2 <__fp_inf>
    4a80:	fb c0       	rjmp	.+502    	; 0x4c78 <__fp_szero>
    4a82:	5f 3f       	cpi	r21, 0xFF	; 255
    4a84:	ec f3       	brlt	.-6      	; 0x4a80 <__divsf3_pse+0x6a>
    4a86:	98 3e       	cpi	r25, 0xE8	; 232
    4a88:	dc f3       	brlt	.-10     	; 0x4a80 <__divsf3_pse+0x6a>
    4a8a:	86 95       	lsr	r24
    4a8c:	77 95       	ror	r23
    4a8e:	67 95       	ror	r22
    4a90:	b7 95       	ror	r27
    4a92:	f7 95       	ror	r31
    4a94:	9f 5f       	subi	r25, 0xFF	; 255
    4a96:	c9 f7       	brne	.-14     	; 0x4a8a <__divsf3_pse+0x74>
    4a98:	88 0f       	add	r24, r24
    4a9a:	91 1d       	adc	r25, r1
    4a9c:	96 95       	lsr	r25
    4a9e:	87 95       	ror	r24
    4aa0:	97 f9       	bld	r25, 7
    4aa2:	08 95       	ret
    4aa4:	e1 e0       	ldi	r30, 0x01	; 1
    4aa6:	66 0f       	add	r22, r22
    4aa8:	77 1f       	adc	r23, r23
    4aaa:	88 1f       	adc	r24, r24
    4aac:	bb 1f       	adc	r27, r27
    4aae:	62 17       	cp	r22, r18
    4ab0:	73 07       	cpc	r23, r19
    4ab2:	84 07       	cpc	r24, r20
    4ab4:	ba 07       	cpc	r27, r26
    4ab6:	20 f0       	brcs	.+8      	; 0x4ac0 <__divsf3_pse+0xaa>
    4ab8:	62 1b       	sub	r22, r18
    4aba:	73 0b       	sbc	r23, r19
    4abc:	84 0b       	sbc	r24, r20
    4abe:	ba 0b       	sbc	r27, r26
    4ac0:	ee 1f       	adc	r30, r30
    4ac2:	88 f7       	brcc	.-30     	; 0x4aa6 <__divsf3_pse+0x90>
    4ac4:	e0 95       	com	r30
    4ac6:	08 95       	ret

00004ac8 <__fixunssfsi>:
    4ac8:	bc d0       	rcall	.+376    	; 0x4c42 <__fp_splitA>
    4aca:	88 f0       	brcs	.+34     	; 0x4aee <__fixunssfsi+0x26>
    4acc:	9f 57       	subi	r25, 0x7F	; 127
    4ace:	90 f0       	brcs	.+36     	; 0x4af4 <__fixunssfsi+0x2c>
    4ad0:	b9 2f       	mov	r27, r25
    4ad2:	99 27       	eor	r25, r25
    4ad4:	b7 51       	subi	r27, 0x17	; 23
    4ad6:	a0 f0       	brcs	.+40     	; 0x4b00 <__fixunssfsi+0x38>
    4ad8:	d1 f0       	breq	.+52     	; 0x4b0e <__fixunssfsi+0x46>
    4ada:	66 0f       	add	r22, r22
    4adc:	77 1f       	adc	r23, r23
    4ade:	88 1f       	adc	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	1a f0       	brmi	.+6      	; 0x4aea <__fixunssfsi+0x22>
    4ae4:	ba 95       	dec	r27
    4ae6:	c9 f7       	brne	.-14     	; 0x4ada <__fixunssfsi+0x12>
    4ae8:	12 c0       	rjmp	.+36     	; 0x4b0e <__fixunssfsi+0x46>
    4aea:	b1 30       	cpi	r27, 0x01	; 1
    4aec:	81 f0       	breq	.+32     	; 0x4b0e <__fixunssfsi+0x46>
    4aee:	c3 d0       	rcall	.+390    	; 0x4c76 <__fp_zero>
    4af0:	b1 e0       	ldi	r27, 0x01	; 1
    4af2:	08 95       	ret
    4af4:	c0 c0       	rjmp	.+384    	; 0x4c76 <__fp_zero>
    4af6:	67 2f       	mov	r22, r23
    4af8:	78 2f       	mov	r23, r24
    4afa:	88 27       	eor	r24, r24
    4afc:	b8 5f       	subi	r27, 0xF8	; 248
    4afe:	39 f0       	breq	.+14     	; 0x4b0e <__fixunssfsi+0x46>
    4b00:	b9 3f       	cpi	r27, 0xF9	; 249
    4b02:	cc f3       	brlt	.-14     	; 0x4af6 <__fixunssfsi+0x2e>
    4b04:	86 95       	lsr	r24
    4b06:	77 95       	ror	r23
    4b08:	67 95       	ror	r22
    4b0a:	b3 95       	inc	r27
    4b0c:	d9 f7       	brne	.-10     	; 0x4b04 <__fixunssfsi+0x3c>
    4b0e:	3e f4       	brtc	.+14     	; 0x4b1e <__fixunssfsi+0x56>
    4b10:	90 95       	com	r25
    4b12:	80 95       	com	r24
    4b14:	70 95       	com	r23
    4b16:	61 95       	neg	r22
    4b18:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b1e:	08 95       	ret

00004b20 <__floatunsisf>:
    4b20:	e8 94       	clt
    4b22:	09 c0       	rjmp	.+18     	; 0x4b36 <__floatsisf+0x12>

00004b24 <__floatsisf>:
    4b24:	97 fb       	bst	r25, 7
    4b26:	3e f4       	brtc	.+14     	; 0x4b36 <__floatsisf+0x12>
    4b28:	90 95       	com	r25
    4b2a:	80 95       	com	r24
    4b2c:	70 95       	com	r23
    4b2e:	61 95       	neg	r22
    4b30:	7f 4f       	sbci	r23, 0xFF	; 255
    4b32:	8f 4f       	sbci	r24, 0xFF	; 255
    4b34:	9f 4f       	sbci	r25, 0xFF	; 255
    4b36:	99 23       	and	r25, r25
    4b38:	a9 f0       	breq	.+42     	; 0x4b64 <__floatsisf+0x40>
    4b3a:	f9 2f       	mov	r31, r25
    4b3c:	96 e9       	ldi	r25, 0x96	; 150
    4b3e:	bb 27       	eor	r27, r27
    4b40:	93 95       	inc	r25
    4b42:	f6 95       	lsr	r31
    4b44:	87 95       	ror	r24
    4b46:	77 95       	ror	r23
    4b48:	67 95       	ror	r22
    4b4a:	b7 95       	ror	r27
    4b4c:	f1 11       	cpse	r31, r1
    4b4e:	f8 cf       	rjmp	.-16     	; 0x4b40 <__floatsisf+0x1c>
    4b50:	fa f4       	brpl	.+62     	; 0x4b90 <__floatsisf+0x6c>
    4b52:	bb 0f       	add	r27, r27
    4b54:	11 f4       	brne	.+4      	; 0x4b5a <__floatsisf+0x36>
    4b56:	60 ff       	sbrs	r22, 0
    4b58:	1b c0       	rjmp	.+54     	; 0x4b90 <__floatsisf+0x6c>
    4b5a:	6f 5f       	subi	r22, 0xFF	; 255
    4b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    4b60:	9f 4f       	sbci	r25, 0xFF	; 255
    4b62:	16 c0       	rjmp	.+44     	; 0x4b90 <__floatsisf+0x6c>
    4b64:	88 23       	and	r24, r24
    4b66:	11 f0       	breq	.+4      	; 0x4b6c <__floatsisf+0x48>
    4b68:	96 e9       	ldi	r25, 0x96	; 150
    4b6a:	11 c0       	rjmp	.+34     	; 0x4b8e <__floatsisf+0x6a>
    4b6c:	77 23       	and	r23, r23
    4b6e:	21 f0       	breq	.+8      	; 0x4b78 <__floatsisf+0x54>
    4b70:	9e e8       	ldi	r25, 0x8E	; 142
    4b72:	87 2f       	mov	r24, r23
    4b74:	76 2f       	mov	r23, r22
    4b76:	05 c0       	rjmp	.+10     	; 0x4b82 <__floatsisf+0x5e>
    4b78:	66 23       	and	r22, r22
    4b7a:	71 f0       	breq	.+28     	; 0x4b98 <__floatsisf+0x74>
    4b7c:	96 e8       	ldi	r25, 0x86	; 134
    4b7e:	86 2f       	mov	r24, r22
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	60 e0       	ldi	r22, 0x00	; 0
    4b84:	2a f0       	brmi	.+10     	; 0x4b90 <__floatsisf+0x6c>
    4b86:	9a 95       	dec	r25
    4b88:	66 0f       	add	r22, r22
    4b8a:	77 1f       	adc	r23, r23
    4b8c:	88 1f       	adc	r24, r24
    4b8e:	da f7       	brpl	.-10     	; 0x4b86 <__floatsisf+0x62>
    4b90:	88 0f       	add	r24, r24
    4b92:	96 95       	lsr	r25
    4b94:	87 95       	ror	r24
    4b96:	97 f9       	bld	r25, 7
    4b98:	08 95       	ret

00004b9a <__fp_cmp>:
    4b9a:	99 0f       	add	r25, r25
    4b9c:	00 08       	sbc	r0, r0
    4b9e:	55 0f       	add	r21, r21
    4ba0:	aa 0b       	sbc	r26, r26
    4ba2:	e0 e8       	ldi	r30, 0x80	; 128
    4ba4:	fe ef       	ldi	r31, 0xFE	; 254
    4ba6:	16 16       	cp	r1, r22
    4ba8:	17 06       	cpc	r1, r23
    4baa:	e8 07       	cpc	r30, r24
    4bac:	f9 07       	cpc	r31, r25
    4bae:	c0 f0       	brcs	.+48     	; 0x4be0 <__fp_cmp+0x46>
    4bb0:	12 16       	cp	r1, r18
    4bb2:	13 06       	cpc	r1, r19
    4bb4:	e4 07       	cpc	r30, r20
    4bb6:	f5 07       	cpc	r31, r21
    4bb8:	98 f0       	brcs	.+38     	; 0x4be0 <__fp_cmp+0x46>
    4bba:	62 1b       	sub	r22, r18
    4bbc:	73 0b       	sbc	r23, r19
    4bbe:	84 0b       	sbc	r24, r20
    4bc0:	95 0b       	sbc	r25, r21
    4bc2:	39 f4       	brne	.+14     	; 0x4bd2 <__fp_cmp+0x38>
    4bc4:	0a 26       	eor	r0, r26
    4bc6:	61 f0       	breq	.+24     	; 0x4be0 <__fp_cmp+0x46>
    4bc8:	23 2b       	or	r18, r19
    4bca:	24 2b       	or	r18, r20
    4bcc:	25 2b       	or	r18, r21
    4bce:	21 f4       	brne	.+8      	; 0x4bd8 <__fp_cmp+0x3e>
    4bd0:	08 95       	ret
    4bd2:	0a 26       	eor	r0, r26
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <__fp_cmp+0x3e>
    4bd6:	a1 40       	sbci	r26, 0x01	; 1
    4bd8:	a6 95       	lsr	r26
    4bda:	8f ef       	ldi	r24, 0xFF	; 255
    4bdc:	81 1d       	adc	r24, r1
    4bde:	81 1d       	adc	r24, r1
    4be0:	08 95       	ret

00004be2 <__fp_inf>:
    4be2:	97 f9       	bld	r25, 7
    4be4:	9f 67       	ori	r25, 0x7F	; 127
    4be6:	80 e8       	ldi	r24, 0x80	; 128
    4be8:	70 e0       	ldi	r23, 0x00	; 0
    4bea:	60 e0       	ldi	r22, 0x00	; 0
    4bec:	08 95       	ret

00004bee <__fp_nan>:
    4bee:	9f ef       	ldi	r25, 0xFF	; 255
    4bf0:	80 ec       	ldi	r24, 0xC0	; 192
    4bf2:	08 95       	ret

00004bf4 <__fp_pscA>:
    4bf4:	00 24       	eor	r0, r0
    4bf6:	0a 94       	dec	r0
    4bf8:	16 16       	cp	r1, r22
    4bfa:	17 06       	cpc	r1, r23
    4bfc:	18 06       	cpc	r1, r24
    4bfe:	09 06       	cpc	r0, r25
    4c00:	08 95       	ret

00004c02 <__fp_pscB>:
    4c02:	00 24       	eor	r0, r0
    4c04:	0a 94       	dec	r0
    4c06:	12 16       	cp	r1, r18
    4c08:	13 06       	cpc	r1, r19
    4c0a:	14 06       	cpc	r1, r20
    4c0c:	05 06       	cpc	r0, r21
    4c0e:	08 95       	ret

00004c10 <__fp_round>:
    4c10:	09 2e       	mov	r0, r25
    4c12:	03 94       	inc	r0
    4c14:	00 0c       	add	r0, r0
    4c16:	11 f4       	brne	.+4      	; 0x4c1c <__fp_round+0xc>
    4c18:	88 23       	and	r24, r24
    4c1a:	52 f0       	brmi	.+20     	; 0x4c30 <__fp_round+0x20>
    4c1c:	bb 0f       	add	r27, r27
    4c1e:	40 f4       	brcc	.+16     	; 0x4c30 <__fp_round+0x20>
    4c20:	bf 2b       	or	r27, r31
    4c22:	11 f4       	brne	.+4      	; 0x4c28 <__fp_round+0x18>
    4c24:	60 ff       	sbrs	r22, 0
    4c26:	04 c0       	rjmp	.+8      	; 0x4c30 <__fp_round+0x20>
    4c28:	6f 5f       	subi	r22, 0xFF	; 255
    4c2a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c2c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c30:	08 95       	ret

00004c32 <__fp_split3>:
    4c32:	57 fd       	sbrc	r21, 7
    4c34:	90 58       	subi	r25, 0x80	; 128
    4c36:	44 0f       	add	r20, r20
    4c38:	55 1f       	adc	r21, r21
    4c3a:	59 f0       	breq	.+22     	; 0x4c52 <__fp_splitA+0x10>
    4c3c:	5f 3f       	cpi	r21, 0xFF	; 255
    4c3e:	71 f0       	breq	.+28     	; 0x4c5c <__fp_splitA+0x1a>
    4c40:	47 95       	ror	r20

00004c42 <__fp_splitA>:
    4c42:	88 0f       	add	r24, r24
    4c44:	97 fb       	bst	r25, 7
    4c46:	99 1f       	adc	r25, r25
    4c48:	61 f0       	breq	.+24     	; 0x4c62 <__fp_splitA+0x20>
    4c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    4c4c:	79 f0       	breq	.+30     	; 0x4c6c <__fp_splitA+0x2a>
    4c4e:	87 95       	ror	r24
    4c50:	08 95       	ret
    4c52:	12 16       	cp	r1, r18
    4c54:	13 06       	cpc	r1, r19
    4c56:	14 06       	cpc	r1, r20
    4c58:	55 1f       	adc	r21, r21
    4c5a:	f2 cf       	rjmp	.-28     	; 0x4c40 <__fp_split3+0xe>
    4c5c:	46 95       	lsr	r20
    4c5e:	f1 df       	rcall	.-30     	; 0x4c42 <__fp_splitA>
    4c60:	08 c0       	rjmp	.+16     	; 0x4c72 <__fp_splitA+0x30>
    4c62:	16 16       	cp	r1, r22
    4c64:	17 06       	cpc	r1, r23
    4c66:	18 06       	cpc	r1, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	f1 cf       	rjmp	.-30     	; 0x4c4e <__fp_splitA+0xc>
    4c6c:	86 95       	lsr	r24
    4c6e:	71 05       	cpc	r23, r1
    4c70:	61 05       	cpc	r22, r1
    4c72:	08 94       	sec
    4c74:	08 95       	ret

00004c76 <__fp_zero>:
    4c76:	e8 94       	clt

00004c78 <__fp_szero>:
    4c78:	bb 27       	eor	r27, r27
    4c7a:	66 27       	eor	r22, r22
    4c7c:	77 27       	eor	r23, r23
    4c7e:	cb 01       	movw	r24, r22
    4c80:	97 f9       	bld	r25, 7
    4c82:	08 95       	ret

00004c84 <__gesf2>:
    4c84:	8a df       	rcall	.-236    	; 0x4b9a <__fp_cmp>
    4c86:	08 f4       	brcc	.+2      	; 0x4c8a <__gesf2+0x6>
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	08 95       	ret

00004c8c <__mulsf3>:
    4c8c:	0b d0       	rcall	.+22     	; 0x4ca4 <__mulsf3x>
    4c8e:	c0 cf       	rjmp	.-128    	; 0x4c10 <__fp_round>
    4c90:	b1 df       	rcall	.-158    	; 0x4bf4 <__fp_pscA>
    4c92:	28 f0       	brcs	.+10     	; 0x4c9e <__mulsf3+0x12>
    4c94:	b6 df       	rcall	.-148    	; 0x4c02 <__fp_pscB>
    4c96:	18 f0       	brcs	.+6      	; 0x4c9e <__mulsf3+0x12>
    4c98:	95 23       	and	r25, r21
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <__mulsf3+0x12>
    4c9c:	a2 cf       	rjmp	.-188    	; 0x4be2 <__fp_inf>
    4c9e:	a7 cf       	rjmp	.-178    	; 0x4bee <__fp_nan>
    4ca0:	11 24       	eor	r1, r1
    4ca2:	ea cf       	rjmp	.-44     	; 0x4c78 <__fp_szero>

00004ca4 <__mulsf3x>:
    4ca4:	c6 df       	rcall	.-116    	; 0x4c32 <__fp_split3>
    4ca6:	a0 f3       	brcs	.-24     	; 0x4c90 <__mulsf3+0x4>

00004ca8 <__mulsf3_pse>:
    4ca8:	95 9f       	mul	r25, r21
    4caa:	d1 f3       	breq	.-12     	; 0x4ca0 <__mulsf3+0x14>
    4cac:	95 0f       	add	r25, r21
    4cae:	50 e0       	ldi	r21, 0x00	; 0
    4cb0:	55 1f       	adc	r21, r21
    4cb2:	62 9f       	mul	r22, r18
    4cb4:	f0 01       	movw	r30, r0
    4cb6:	72 9f       	mul	r23, r18
    4cb8:	bb 27       	eor	r27, r27
    4cba:	f0 0d       	add	r31, r0
    4cbc:	b1 1d       	adc	r27, r1
    4cbe:	63 9f       	mul	r22, r19
    4cc0:	aa 27       	eor	r26, r26
    4cc2:	f0 0d       	add	r31, r0
    4cc4:	b1 1d       	adc	r27, r1
    4cc6:	aa 1f       	adc	r26, r26
    4cc8:	64 9f       	mul	r22, r20
    4cca:	66 27       	eor	r22, r22
    4ccc:	b0 0d       	add	r27, r0
    4cce:	a1 1d       	adc	r26, r1
    4cd0:	66 1f       	adc	r22, r22
    4cd2:	82 9f       	mul	r24, r18
    4cd4:	22 27       	eor	r18, r18
    4cd6:	b0 0d       	add	r27, r0
    4cd8:	a1 1d       	adc	r26, r1
    4cda:	62 1f       	adc	r22, r18
    4cdc:	73 9f       	mul	r23, r19
    4cde:	b0 0d       	add	r27, r0
    4ce0:	a1 1d       	adc	r26, r1
    4ce2:	62 1f       	adc	r22, r18
    4ce4:	83 9f       	mul	r24, r19
    4ce6:	a0 0d       	add	r26, r0
    4ce8:	61 1d       	adc	r22, r1
    4cea:	22 1f       	adc	r18, r18
    4cec:	74 9f       	mul	r23, r20
    4cee:	33 27       	eor	r19, r19
    4cf0:	a0 0d       	add	r26, r0
    4cf2:	61 1d       	adc	r22, r1
    4cf4:	23 1f       	adc	r18, r19
    4cf6:	84 9f       	mul	r24, r20
    4cf8:	60 0d       	add	r22, r0
    4cfa:	21 1d       	adc	r18, r1
    4cfc:	82 2f       	mov	r24, r18
    4cfe:	76 2f       	mov	r23, r22
    4d00:	6a 2f       	mov	r22, r26
    4d02:	11 24       	eor	r1, r1
    4d04:	9f 57       	subi	r25, 0x7F	; 127
    4d06:	50 40       	sbci	r21, 0x00	; 0
    4d08:	8a f0       	brmi	.+34     	; 0x4d2c <__mulsf3_pse+0x84>
    4d0a:	e1 f0       	breq	.+56     	; 0x4d44 <__mulsf3_pse+0x9c>
    4d0c:	88 23       	and	r24, r24
    4d0e:	4a f0       	brmi	.+18     	; 0x4d22 <__mulsf3_pse+0x7a>
    4d10:	ee 0f       	add	r30, r30
    4d12:	ff 1f       	adc	r31, r31
    4d14:	bb 1f       	adc	r27, r27
    4d16:	66 1f       	adc	r22, r22
    4d18:	77 1f       	adc	r23, r23
    4d1a:	88 1f       	adc	r24, r24
    4d1c:	91 50       	subi	r25, 0x01	; 1
    4d1e:	50 40       	sbci	r21, 0x00	; 0
    4d20:	a9 f7       	brne	.-22     	; 0x4d0c <__mulsf3_pse+0x64>
    4d22:	9e 3f       	cpi	r25, 0xFE	; 254
    4d24:	51 05       	cpc	r21, r1
    4d26:	70 f0       	brcs	.+28     	; 0x4d44 <__mulsf3_pse+0x9c>
    4d28:	5c cf       	rjmp	.-328    	; 0x4be2 <__fp_inf>
    4d2a:	a6 cf       	rjmp	.-180    	; 0x4c78 <__fp_szero>
    4d2c:	5f 3f       	cpi	r21, 0xFF	; 255
    4d2e:	ec f3       	brlt	.-6      	; 0x4d2a <__mulsf3_pse+0x82>
    4d30:	98 3e       	cpi	r25, 0xE8	; 232
    4d32:	dc f3       	brlt	.-10     	; 0x4d2a <__mulsf3_pse+0x82>
    4d34:	86 95       	lsr	r24
    4d36:	77 95       	ror	r23
    4d38:	67 95       	ror	r22
    4d3a:	b7 95       	ror	r27
    4d3c:	f7 95       	ror	r31
    4d3e:	e7 95       	ror	r30
    4d40:	9f 5f       	subi	r25, 0xFF	; 255
    4d42:	c1 f7       	brne	.-16     	; 0x4d34 <__mulsf3_pse+0x8c>
    4d44:	fe 2b       	or	r31, r30
    4d46:	88 0f       	add	r24, r24
    4d48:	91 1d       	adc	r25, r1
    4d4a:	96 95       	lsr	r25
    4d4c:	87 95       	ror	r24
    4d4e:	97 f9       	bld	r25, 7
    4d50:	08 95       	ret

00004d52 <__udivmodhi4>:
    4d52:	aa 1b       	sub	r26, r26
    4d54:	bb 1b       	sub	r27, r27
    4d56:	51 e1       	ldi	r21, 0x11	; 17
    4d58:	07 c0       	rjmp	.+14     	; 0x4d68 <__udivmodhi4_ep>

00004d5a <__udivmodhi4_loop>:
    4d5a:	aa 1f       	adc	r26, r26
    4d5c:	bb 1f       	adc	r27, r27
    4d5e:	a6 17       	cp	r26, r22
    4d60:	b7 07       	cpc	r27, r23
    4d62:	10 f0       	brcs	.+4      	; 0x4d68 <__udivmodhi4_ep>
    4d64:	a6 1b       	sub	r26, r22
    4d66:	b7 0b       	sbc	r27, r23

00004d68 <__udivmodhi4_ep>:
    4d68:	88 1f       	adc	r24, r24
    4d6a:	99 1f       	adc	r25, r25
    4d6c:	5a 95       	dec	r21
    4d6e:	a9 f7       	brne	.-22     	; 0x4d5a <__udivmodhi4_loop>
    4d70:	80 95       	com	r24
    4d72:	90 95       	com	r25
    4d74:	bc 01       	movw	r22, r24
    4d76:	cd 01       	movw	r24, r26
    4d78:	08 95       	ret

00004d7a <__divmodhi4>:
    4d7a:	97 fb       	bst	r25, 7
    4d7c:	07 2e       	mov	r0, r23
    4d7e:	16 f4       	brtc	.+4      	; 0x4d84 <__divmodhi4+0xa>
    4d80:	00 94       	com	r0
    4d82:	06 d0       	rcall	.+12     	; 0x4d90 <__divmodhi4_neg1>
    4d84:	77 fd       	sbrc	r23, 7
    4d86:	08 d0       	rcall	.+16     	; 0x4d98 <__divmodhi4_neg2>
    4d88:	e4 df       	rcall	.-56     	; 0x4d52 <__udivmodhi4>
    4d8a:	07 fc       	sbrc	r0, 7
    4d8c:	05 d0       	rcall	.+10     	; 0x4d98 <__divmodhi4_neg2>
    4d8e:	3e f4       	brtc	.+14     	; 0x4d9e <__divmodhi4_exit>

00004d90 <__divmodhi4_neg1>:
    4d90:	90 95       	com	r25
    4d92:	81 95       	neg	r24
    4d94:	9f 4f       	sbci	r25, 0xFF	; 255
    4d96:	08 95       	ret

00004d98 <__divmodhi4_neg2>:
    4d98:	70 95       	com	r23
    4d9a:	61 95       	neg	r22
    4d9c:	7f 4f       	sbci	r23, 0xFF	; 255

00004d9e <__divmodhi4_exit>:
    4d9e:	08 95       	ret

00004da0 <__udivmodsi4>:
    4da0:	a1 e2       	ldi	r26, 0x21	; 33
    4da2:	1a 2e       	mov	r1, r26
    4da4:	aa 1b       	sub	r26, r26
    4da6:	bb 1b       	sub	r27, r27
    4da8:	fd 01       	movw	r30, r26
    4daa:	0d c0       	rjmp	.+26     	; 0x4dc6 <__udivmodsi4_ep>

00004dac <__udivmodsi4_loop>:
    4dac:	aa 1f       	adc	r26, r26
    4dae:	bb 1f       	adc	r27, r27
    4db0:	ee 1f       	adc	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	a2 17       	cp	r26, r18
    4db6:	b3 07       	cpc	r27, r19
    4db8:	e4 07       	cpc	r30, r20
    4dba:	f5 07       	cpc	r31, r21
    4dbc:	20 f0       	brcs	.+8      	; 0x4dc6 <__udivmodsi4_ep>
    4dbe:	a2 1b       	sub	r26, r18
    4dc0:	b3 0b       	sbc	r27, r19
    4dc2:	e4 0b       	sbc	r30, r20
    4dc4:	f5 0b       	sbc	r31, r21

00004dc6 <__udivmodsi4_ep>:
    4dc6:	66 1f       	adc	r22, r22
    4dc8:	77 1f       	adc	r23, r23
    4dca:	88 1f       	adc	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	1a 94       	dec	r1
    4dd0:	69 f7       	brne	.-38     	; 0x4dac <__udivmodsi4_loop>
    4dd2:	60 95       	com	r22
    4dd4:	70 95       	com	r23
    4dd6:	80 95       	com	r24
    4dd8:	90 95       	com	r25
    4dda:	9b 01       	movw	r18, r22
    4ddc:	ac 01       	movw	r20, r24
    4dde:	bd 01       	movw	r22, r26
    4de0:	cf 01       	movw	r24, r30
    4de2:	08 95       	ret

00004de4 <__tablejump2__>:
    4de4:	ee 0f       	add	r30, r30
    4de6:	ff 1f       	adc	r31, r31
    4de8:	05 90       	lpm	r0, Z+
    4dea:	f4 91       	lpm	r31, Z
    4dec:	e0 2d       	mov	r30, r0
    4dee:	09 94       	ijmp

00004df0 <_exit>:
    4df0:	f8 94       	cli

00004df2 <__stop_program>:
    4df2:	ff cf       	rjmp	.-2      	; 0x4df2 <__stop_program>
