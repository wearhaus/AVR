
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e9e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fe  00802000  00003e9e  00003f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009af  008020fe  008020fe  00004050  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000405a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000408c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000006f8  00000000  00000000  000040d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00015cb2  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003338  00000000  00000000  0001a47a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000bca8  00000000  00000000  0001d7b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001640  00000000  00000000  0002945c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002ccbc  00000000  00000000  0002aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006473  00000000  00000000  00057758  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d8  00000000  00000000  0005dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c89b  00000000  00000000  0005e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c3       	rjmp	.+1948   	; 0x79e <__ctors_end>
       2:	00 00       	nop
       4:	e9 c3       	rjmp	.+2002   	; 0x7d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c3       	rjmp	.+1998   	; 0x7d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c3       	rjmp	.+1994   	; 0x7d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c3       	rjmp	.+1990   	; 0x7d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c3       	rjmp	.+1986   	; 0x7d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c3       	rjmp	.+1982   	; 0x7d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c3       	rjmp	.+1978   	; 0x7d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c3       	rjmp	.+1974   	; 0x7d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_9>
      28:	d7 c3       	rjmp	.+1966   	; 0x7d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 f1 19 	jmp	0x33e2	; 0x33e2 <__vector_11>
      30:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__vector_12>
      34:	0c 94 5e 17 	jmp	0x2ebc	; 0x2ebc <__vector_13>
      38:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__vector_14>
      3c:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_15>
      40:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__vector_16>
      44:	0c 94 02 18 	jmp	0x3004	; 0x3004 <__vector_17>
      48:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__vector_18>
      4c:	0c 94 54 18 	jmp	0x30a8	; 0x30a8 <__vector_19>
      50:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__vector_20>
      54:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__vector_21>
      58:	bf c3       	rjmp	.+1918   	; 0x7d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_23>
      60:	bb c3       	rjmp	.+1910   	; 0x7d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c3       	rjmp	.+1906   	; 0x7d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c3       	rjmp	.+1902   	; 0x7d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c3       	rjmp	.+1898   	; 0x7d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c3       	rjmp	.+1894   	; 0x7d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c3       	rjmp	.+1890   	; 0x7d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c3       	rjmp	.+1886   	; 0x7d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c3       	rjmp	.+1882   	; 0x7d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c3       	rjmp	.+1878   	; 0x7d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c3       	rjmp	.+1874   	; 0x7d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__vector_34>
      8c:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__vector_35>
      90:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__vector_36>
      94:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__vector_37>
      98:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__vector_38>
      9c:	0c 94 4a 19 	jmp	0x3294	; 0x3294 <__vector_39>
      a0:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_40>
      a4:	99 c3       	rjmp	.+1842   	; 0x7d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	97 c3       	rjmp	.+1838   	; 0x7d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a9 0b       	sbc	r26, r25
      ae:	ae 0b       	sbc	r26, r30
      b0:	e0 0b       	sbc	r30, r16
      b2:	e0 0b       	sbc	r30, r16
      b4:	e0 0b       	sbc	r30, r16
      b6:	e0 0b       	sbc	r30, r16
      b8:	e0 0b       	sbc	r30, r16
      ba:	e0 0b       	sbc	r30, r16
      bc:	e0 0b       	sbc	r30, r16
      be:	e0 0b       	sbc	r30, r16
      c0:	e0 0b       	sbc	r30, r16
      c2:	e0 0b       	sbc	r30, r16
      c4:	e0 0b       	sbc	r30, r16
      c6:	e0 0b       	sbc	r30, r16
      c8:	e0 0b       	sbc	r30, r16
      ca:	e0 0b       	sbc	r30, r16
      cc:	b3 0b       	sbc	r27, r19
      ce:	e0 0b       	sbc	r30, r16
      d0:	e0 0b       	sbc	r30, r16
      d2:	e0 0b       	sbc	r30, r16
      d4:	e0 0b       	sbc	r30, r16
      d6:	e0 0b       	sbc	r30, r16
      d8:	e0 0b       	sbc	r30, r16
      da:	e0 0b       	sbc	r30, r16
      dc:	e0 0b       	sbc	r30, r16
      de:	e0 0b       	sbc	r30, r16
      e0:	e0 0b       	sbc	r30, r16
      e2:	e0 0b       	sbc	r30, r16
      e4:	e0 0b       	sbc	r30, r16
      e6:	e0 0b       	sbc	r30, r16
      e8:	e0 0b       	sbc	r30, r16
      ea:	e0 0b       	sbc	r30, r16
      ec:	e0 0b       	sbc	r30, r16
      ee:	b8 0b       	sbc	r27, r24
      f0:	bd 0b       	sbc	r27, r29
      f2:	e0 0b       	sbc	r30, r16
      f4:	e0 0b       	sbc	r30, r16
      f6:	e0 0b       	sbc	r30, r16
      f8:	e0 0b       	sbc	r30, r16
      fa:	e0 0b       	sbc	r30, r16
      fc:	e0 0b       	sbc	r30, r16
      fe:	e0 0b       	sbc	r30, r16
     100:	e0 0b       	sbc	r30, r16
     102:	e0 0b       	sbc	r30, r16
     104:	e0 0b       	sbc	r30, r16
     106:	e0 0b       	sbc	r30, r16
     108:	e0 0b       	sbc	r30, r16
     10a:	e0 0b       	sbc	r30, r16
     10c:	e0 0b       	sbc	r30, r16
     10e:	c2 0b       	sbc	r28, r18
     110:	c7 0b       	sbc	r28, r23
     112:	e0 0b       	sbc	r30, r16
     114:	e0 0b       	sbc	r30, r16
     116:	e0 0b       	sbc	r30, r16
     118:	e0 0b       	sbc	r30, r16
     11a:	e0 0b       	sbc	r30, r16
     11c:	e0 0b       	sbc	r30, r16
     11e:	e0 0b       	sbc	r30, r16
     120:	e0 0b       	sbc	r30, r16
     122:	e0 0b       	sbc	r30, r16
     124:	e0 0b       	sbc	r30, r16
     126:	e0 0b       	sbc	r30, r16
     128:	e0 0b       	sbc	r30, r16
     12a:	e0 0b       	sbc	r30, r16
     12c:	e0 0b       	sbc	r30, r16
     12e:	cc 0b       	sbc	r28, r28
     130:	d1 0b       	sbc	r29, r17
     132:	e0 0b       	sbc	r30, r16
     134:	e0 0b       	sbc	r30, r16
     136:	e0 0b       	sbc	r30, r16
     138:	e0 0b       	sbc	r30, r16
     13a:	e0 0b       	sbc	r30, r16
     13c:	e0 0b       	sbc	r30, r16
     13e:	e0 0b       	sbc	r30, r16
     140:	e0 0b       	sbc	r30, r16
     142:	e0 0b       	sbc	r30, r16
     144:	e0 0b       	sbc	r30, r16
     146:	e0 0b       	sbc	r30, r16
     148:	e0 0b       	sbc	r30, r16
     14a:	e0 0b       	sbc	r30, r16
     14c:	e0 0b       	sbc	r30, r16
     14e:	d6 0b       	sbc	r29, r22
     150:	db 0b       	sbc	r29, r27
     152:	35 0e       	add	r3, r21
     154:	44 0e       	add	r4, r20
     156:	89 0e       	add	r8, r25
     158:	8e 0e       	add	r8, r30
     15a:	93 0e       	add	r9, r19
     15c:	98 0e       	add	r9, r24
     15e:	a6 0e       	add	r10, r22
     160:	a6 0e       	add	r10, r22
     162:	a6 0e       	add	r10, r22
     164:	a6 0e       	add	r10, r22
     166:	a6 0e       	add	r10, r22
     168:	a6 0e       	add	r10, r22
     16a:	a6 0e       	add	r10, r22
     16c:	a6 0e       	add	r10, r22
     16e:	a6 0e       	add	r10, r22
     170:	a6 0e       	add	r10, r22
     172:	a6 0e       	add	r10, r22
     174:	a6 0e       	add	r10, r22
     176:	a6 0e       	add	r10, r22
     178:	a6 0e       	add	r10, r22
     17a:	a6 0e       	add	r10, r22
     17c:	a6 0e       	add	r10, r22
     17e:	a6 0e       	add	r10, r22
     180:	a6 0e       	add	r10, r22
     182:	a6 0e       	add	r10, r22
     184:	a6 0e       	add	r10, r22
     186:	a6 0e       	add	r10, r22
     188:	a6 0e       	add	r10, r22
     18a:	a6 0e       	add	r10, r22
     18c:	a6 0e       	add	r10, r22
     18e:	a6 0e       	add	r10, r22
     190:	a6 0e       	add	r10, r22
     192:	a6 0e       	add	r10, r22
     194:	a6 0e       	add	r10, r22
     196:	a6 0e       	add	r10, r22
     198:	a6 0e       	add	r10, r22
     19a:	a6 0e       	add	r10, r22
     19c:	a6 0e       	add	r10, r22
     19e:	a6 0e       	add	r10, r22
     1a0:	a6 0e       	add	r10, r22
     1a2:	a6 0e       	add	r10, r22
     1a4:	a6 0e       	add	r10, r22
     1a6:	a6 0e       	add	r10, r22
     1a8:	a6 0e       	add	r10, r22
     1aa:	a6 0e       	add	r10, r22
     1ac:	a6 0e       	add	r10, r22
     1ae:	a6 0e       	add	r10, r22
     1b0:	a6 0e       	add	r10, r22
     1b2:	a6 0e       	add	r10, r22
     1b4:	a6 0e       	add	r10, r22
     1b6:	a6 0e       	add	r10, r22
     1b8:	a6 0e       	add	r10, r22
     1ba:	a6 0e       	add	r10, r22
     1bc:	a6 0e       	add	r10, r22
     1be:	a6 0e       	add	r10, r22
     1c0:	a6 0e       	add	r10, r22
     1c2:	a6 0e       	add	r10, r22
     1c4:	a6 0e       	add	r10, r22
     1c6:	a6 0e       	add	r10, r22
     1c8:	a6 0e       	add	r10, r22
     1ca:	a6 0e       	add	r10, r22
     1cc:	a6 0e       	add	r10, r22
     1ce:	a6 0e       	add	r10, r22
     1d0:	a6 0e       	add	r10, r22
     1d2:	a6 0e       	add	r10, r22
     1d4:	9f 0e       	add	r9, r31
     1d6:	b1 0d       	add	r27, r1
     1d8:	a6 0e       	add	r10, r22
     1da:	a6 0e       	add	r10, r22
     1dc:	a6 0e       	add	r10, r22
     1de:	a5 0e       	add	r10, r21
     1e0:	a6 0e       	add	r10, r22
     1e2:	a6 0e       	add	r10, r22
     1e4:	a6 0e       	add	r10, r22
     1e6:	a6 0e       	add	r10, r22
     1e8:	a6 0e       	add	r10, r22
     1ea:	9d 0e       	add	r9, r29
     1ec:	a6 0e       	add	r10, r22
     1ee:	a6 0e       	add	r10, r22
     1f0:	19 0e       	add	r1, r25
     1f2:	a6 0e       	add	r10, r22
     1f4:	a6 0e       	add	r10, r22
     1f6:	a6 0e       	add	r10, r22
     1f8:	a6 0e       	add	r10, r22
     1fa:	a6 0e       	add	r10, r22
     1fc:	a6 0e       	add	r10, r22
     1fe:	a6 0e       	add	r10, r22
     200:	a6 0e       	add	r10, r22
     202:	a6 0e       	add	r10, r22
     204:	a6 0e       	add	r10, r22
     206:	a6 0e       	add	r10, r22
     208:	a6 0e       	add	r10, r22
     20a:	a6 0e       	add	r10, r22
     20c:	a6 0e       	add	r10, r22
     20e:	a6 0e       	add	r10, r22
     210:	a6 0e       	add	r10, r22
     212:	a6 0e       	add	r10, r22
     214:	a6 0e       	add	r10, r22
     216:	a3 0e       	add	r10, r19
     218:	a6 0e       	add	r10, r22
     21a:	a6 0e       	add	r10, r22
     21c:	a6 0e       	add	r10, r22
     21e:	a6 0e       	add	r10, r22
     220:	a6 0e       	add	r10, r22
     222:	a6 0e       	add	r10, r22
     224:	a6 0e       	add	r10, r22
     226:	a6 0e       	add	r10, r22
     228:	a6 0e       	add	r10, r22
     22a:	a6 0e       	add	r10, r22
     22c:	a6 0e       	add	r10, r22
     22e:	a6 0e       	add	r10, r22
     230:	a1 0e       	add	r10, r17
     232:	51 0e       	add	r5, r17
     234:	59 0e       	add	r5, r25
     236:	61 0e       	add	r6, r17
     238:	69 0e       	add	r6, r25
     23a:	71 0e       	add	r7, r17
     23c:	79 0e       	add	r7, r25
     23e:	81 0e       	add	r8, r17
     240:	14 14       	cp	r1, r4
     242:	5a 14       	cp	r5, r10
     244:	68 14       	cp	r6, r8
     246:	3e 14       	cp	r3, r14
     248:	22 14       	cp	r2, r2
     24a:	4c 14       	cp	r4, r12
     24c:	30 14       	cp	r3, r0

0000024e <__trampolines_end>:
     24e:	00 00       	nop
     250:	14 00       	.word	0x0014	; ????
     252:	50 00       	.word	0x0050	; ????
     254:	b4 00       	.word	0x00b4	; ????
     256:	40 01       	movw	r8, r0
     258:	f3 01       	movw	r30, r6
     25a:	cd 02       	muls	r28, r29
     25c:	cd 03       	fmulsu	r20, r21
     25e:	f3 04       	cpc	r15, r3
     260:	3d 06       	cpc	r3, r29
     262:	ad 07       	cpc	r26, r29
     264:	3f 09       	sbc	r19, r15
     266:	f4 0a       	sbc	r15, r20
     268:	c9 0c       	add	r12, r9
     26a:	bf 0e       	add	r11, r31
     26c:	d4 10       	cpse	r13, r4
     26e:	07 13       	cpse	r16, r23
     270:	55 15       	cp	r21, r5
     272:	be 17       	cp	r27, r30
     274:	41 1a       	sub	r4, r17
     276:	db 1c       	adc	r13, r11
     278:	8b 1f       	adc	r24, r27
     27a:	50 22       	and	r5, r16
     27c:	27 25       	eor	r18, r7
     27e:	0f 28       	or	r0, r15
     280:	06 2b       	or	r16, r22
     282:	0a 2e       	mov	r0, r26
     284:	19 31       	cpi	r17, 0x19	; 25
     286:	32 34       	cpi	r19, 0x42	; 66
     288:	52 37       	cpi	r21, 0x72	; 114
     28a:	77 3a       	cpi	r23, 0xA7	; 167
     28c:	a0 3d       	cpi	r26, 0xD0	; 208
     28e:	cb 40       	sbci	r28, 0x0B	; 11
     290:	f5 43       	sbci	r31, 0x35	; 53
     292:	1c 47       	sbci	r17, 0x7C	; 124
     294:	3f 4a       	sbci	r19, 0xAF	; 175
     296:	5c 4d       	sbci	r21, 0xDC	; 220
     298:	70 50       	subi	r23, 0x00	; 0
     29a:	7a 53       	subi	r23, 0x3A	; 58
     29c:	78 56       	subi	r23, 0x68	; 104
     29e:	67 59       	subi	r22, 0x97	; 151
     2a0:	47 5c       	subi	r20, 0xC7	; 199
     2a2:	15 5f       	subi	r17, 0xF5	; 245
     2a4:	cf 61       	ori	r28, 0x1F	; 31
     2a6:	75 64       	ori	r23, 0x45	; 69
     2a8:	03 67       	ori	r16, 0x73	; 115
     2aa:	79 69       	ori	r23, 0x99	; 153
     2ac:	d6 6b       	ori	r29, 0xB6	; 182
     2ae:	16 6e       	ori	r17, 0xE6	; 230
     2b0:	3a 70       	andi	r19, 0x0A	; 10
     2b2:	3f 72       	andi	r19, 0x2F	; 47
     2b4:	26 74       	andi	r18, 0x46	; 70
     2b6:	eb 75       	andi	r30, 0x5B	; 91
     2b8:	8f 77       	andi	r24, 0x7F	; 127
     2ba:	0f 79       	andi	r16, 0x9F	; 159
     2bc:	6d 7a       	andi	r22, 0xAD	; 173
     2be:	a5 7b       	andi	r26, 0xB5	; 181
     2c0:	b8 7c       	andi	r27, 0xC8	; 200
     2c2:	a5 7d       	andi	r26, 0xD5	; 213
     2c4:	6c 7e       	andi	r22, 0xEC	; 236
     2c6:	0b 7f       	andi	r16, 0xFB	; 251
     2c8:	83 7f       	andi	r24, 0xF3	; 243
     2ca:	d3 7f       	andi	r29, 0xF3	; 243
     2cc:	fb 7f       	andi	r31, 0xFB	; 251
     2ce:	fb 7f       	andi	r31, 0xFB	; 251
     2d0:	d3 7f       	andi	r29, 0xF3	; 243
     2d2:	83 7f       	andi	r24, 0xF3	; 243
     2d4:	0b 7f       	andi	r16, 0xFB	; 251
     2d6:	6c 7e       	andi	r22, 0xEC	; 236
     2d8:	a5 7d       	andi	r26, 0xD5	; 213
     2da:	b8 7c       	andi	r27, 0xC8	; 200
     2dc:	a5 7b       	andi	r26, 0xB5	; 181
     2de:	6d 7a       	andi	r22, 0xAD	; 173
     2e0:	0f 79       	andi	r16, 0x9F	; 159
     2e2:	8f 77       	andi	r24, 0x7F	; 127
     2e4:	eb 75       	andi	r30, 0x5B	; 91
     2e6:	26 74       	andi	r18, 0x46	; 70
     2e8:	3f 72       	andi	r19, 0x2F	; 47
     2ea:	3a 70       	andi	r19, 0x0A	; 10
     2ec:	16 6e       	ori	r17, 0xE6	; 230
     2ee:	d6 6b       	ori	r29, 0xB6	; 182
     2f0:	79 69       	ori	r23, 0x99	; 153
     2f2:	03 67       	ori	r16, 0x73	; 115
     2f4:	75 64       	ori	r23, 0x45	; 69
     2f6:	cf 61       	ori	r28, 0x1F	; 31
     2f8:	15 5f       	subi	r17, 0xF5	; 245
     2fa:	47 5c       	subi	r20, 0xC7	; 199
     2fc:	67 59       	subi	r22, 0x97	; 151
     2fe:	78 56       	subi	r23, 0x68	; 104
     300:	7a 53       	subi	r23, 0x3A	; 58
     302:	70 50       	subi	r23, 0x00	; 0
     304:	5c 4d       	sbci	r21, 0xDC	; 220
     306:	3f 4a       	sbci	r19, 0xAF	; 175
     308:	1c 47       	sbci	r17, 0x7C	; 124
     30a:	f5 43       	sbci	r31, 0x35	; 53
     30c:	cb 40       	sbci	r28, 0x0B	; 11
     30e:	a0 3d       	cpi	r26, 0xD0	; 208
     310:	77 3a       	cpi	r23, 0xA7	; 167
     312:	52 37       	cpi	r21, 0x72	; 114
     314:	32 34       	cpi	r19, 0x42	; 66
     316:	19 31       	cpi	r17, 0x19	; 25
     318:	0a 2e       	mov	r0, r26
     31a:	06 2b       	or	r16, r22
     31c:	0f 28       	or	r0, r15
     31e:	27 25       	eor	r18, r7
     320:	50 22       	and	r5, r16
     322:	8b 1f       	adc	r24, r27
     324:	db 1c       	adc	r13, r11
     326:	41 1a       	sub	r4, r17
     328:	be 17       	cp	r27, r30
     32a:	55 15       	cp	r21, r5
     32c:	07 13       	cpse	r16, r23
     32e:	d4 10       	cpse	r13, r4
     330:	bf 0e       	add	r11, r31
     332:	c9 0c       	add	r12, r9
     334:	f4 0a       	sbc	r15, r20
     336:	3f 09       	sbc	r19, r15
     338:	ad 07       	cpc	r26, r29
     33a:	3d 06       	cpc	r3, r29
     33c:	f3 04       	cpc	r15, r3
     33e:	cd 03       	fmulsu	r20, r21
     340:	cd 02       	muls	r28, r29
     342:	f3 01       	movw	r30, r6
     344:	40 01       	movw	r8, r0
     346:	b4 00       	.word	0x00b4	; ????
     348:	50 00       	.word	0x0050	; ????
     34a:	14 00       	.word	0x0014	; ????
	...

0000034e <_lin_table>:
     34e:	00 01 01 02 02 02 02 03 03 03 03 03 03 04 04 04     ................
     35e:	04 04 04 04 04 05 05 05 05 05 05 05 05 05 05 06     ................
     36e:	06 06 06 06 06 06 06 06 06 06 06 07 07 07 07 07     ................
     37e:	07 07 07 07 07 07 07 07 07 08 08 08 08 08 08 08     ................
     38e:	08 08 08 08 08 08 08 08 08 09 09 09 09 09 09 09     ................
     39e:	09 09 09 09 09 09 09 09 09 09 09 0a 0a 0a 0a 0a     ................
     3ae:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0b     ................
     3be:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
     3ce:	0b 0b 0b 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     3de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
     3ee:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     3fe:	0d 0d 0d 0d 0d 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     40e:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     41e:	0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     42e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     43e:	0f 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     44e:	00 06 08 0a 0b 0d 0e 0f 10 11 12 13 14 14 15 16     ................
     45e:	17 17 18 19 19 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f 1f     ................
     46e:	20 20 21 21 22 22 23 23 24 24 25 25 26 26 26 27       !!""##$$%%&&&'
     47e:	27 28 28 28 29 29 2a 2a 2a 2b 2b 2b 2c 2c 2d 2d     '((())***+++,,--
     48e:	2d 2e 2e 2e 2f 2f 2f 30 30 30 31 31 31 32 32 32     -...///000111222
     49e:	33 33 33 34 34 34 34 35 35 35 36 36 36 37 37 37     3334444555666777
     4ae:	37 38 38 38 39 39 39 39 3a 3a 3a 3b 3b 3b 3b 3c     78889999:::;;;;<
     4be:	3c 3c 3c 3d 3d 3d 3d 3e 3e 3e 3e 3f 3f 3f 3f 40     <<<====>>>>????@
     4ce:	00 0b 10 14 17 19 1c 1e 20 22 24 26 27 29 2a 2c     ........ "$&')*,
     4de:	2d 2f 30 31 33 34 35 36 37 39 3a 3b 3c 3d 3e 3f     -/01345679:;<=>?
     4ee:	40 41 42 43 44 45 46 47 48 48 49 4a 4b 4c 4d 4e     @ABCDEFGHHIJKLMN
     4fe:	4e 4f 50 51 52 52 53 54 55 55 56 57 58 58 59 5a     NOPQRRSTUUVWXXYZ
     50e:	5b 5b 5c 5d 5d 5e 5f 5f 60 61 61 62 63 63 64 65     [[\]]^__`aabccde
     51e:	65 66 66 67 68 68 69 6a 6a 6b 6b 6c 6d 6d 6e 6e     effghhijjkklmmnn
     52e:	6f 6f 70 71 71 72 72 73 73 74 74 75 76 76 77 77     oopqqrrssttuvvww
     53e:	78 78 79 79 7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7f 7f     xxyyzz{{||}}~~..
     54e:	00 10 17 1c 20 24 27 2a 2d 30 33 35 37 3a 3c 3e     .... $'*-0357:<>
     55e:	40 42 44 46 48 49 4b 4d 4e 50 52 53 55 56 58 59     @BDFHIKMNPRSUVXY
     56e:	5b 5c 5d 5f 60 61 63 64 65 66 68 69 6a 6b 6d 6e     [\]_`acdefhijkmn
     57e:	6f 70 71 72 73 74 76 77 78 79 7a 7b 7c 7d 7e 7f     opqrstvwxyz{|}~.
     58e:	80 81 82 83 84 85 86 87 88 89 8a 8b 8b 8c 8d 8e     ................
     59e:	8f 90 91 92 93 94 94 95 96 97 98 99 99 9a 9b 9c     ................
     5ae:	9d 9e 9e 9f a0 a1 a2 a2 a3 a4 a5 a6 a6 a7 a8 a9     ................
     5be:	a9 aa ab ac ac ad ae af af b0 b1 b1 b2 b3 b4 b4     ................
     5ce:	b5 b6 b6 b7 b8 b9 b9 ba bb bb bc bd bd be bf bf     ................
     5de:	c0 c1 c1 c2 c3 c3 c4 c5 c5 c6 c7 c7 c8 c8 c9 ca     ................
     5ee:	ca cb cc cc cd ce ce cf cf d0 d1 d1 d2 d2 d3 d4     ................
     5fe:	d4 d5 d5 d6 d7 d7 d8 d8 d9 da da db db dc dd dd     ................
     60e:	de de df df e0 e1 e1 e2 e2 e3 e3 e4 e5 e5 e6 e6     ................
     61e:	e7 e7 e8 e8 e9 ea ea eb eb ec ec ed ed ee ee ef     ................
     62e:	ef f0 f1 f1 f2 f2 f3 f3 f4 f4 f5 f5 f6 f6 f7 f7     ................
     63e:	f8 f8 f9 f9 fa fa fb fb fc fc fd fd fe fe ff ff     ................

0000064e <_reorder_table>:
     64e:	70 07 78 0f 74 17 7c 1f 72 27 7a 2f 76 37 7e 3f     p.x.t.|.r'z/v7~?
     65e:	71 47 79 4f 75 57 7d 5f 73 67 7b 6f 60 03 68 0b     qGyOuW}_sg{o`.h.
     66e:	64 13 6c 1b 62 23 6a 2b 66 33 6e 3b 61 43 69 4b     d.l.b#j+f3n;aCiK
     67e:	65 53 6d 5b 50 05 58 0d 54 15 5c 1d 52 25 5a 2d     eSm[P.X.T.\.R%Z-
     68e:	56 35 5e 3d 51 45 59 4d 40 01 48 09 44 11 4c 19     V5^=QEYM@.H.D.L.
     69e:	42 21 4a 29 46 31 4e 39 30 06 38 0e 34 16 3c 1e     B!J)F1N90.8.4.<.
     6ae:	32 26 3a 2e 20 02 28 0a 24 12 2c 1a 10 04 18 0c     2&:. .(.$.,.....

000006be <_cas_constants>:
     6be:	42 76 fc 30 82 5a 82 5a fc 30 42 76 8a 7d f9 18     Bv.0.Z.Z.0Bv.}..
     6ce:	42 76 fc 30 6e 6a 1d 47 82 5a 82 5a 1d 47 6e 6a     Bv.0nj.G.Z.Z.Gnj
     6de:	fc 30 42 76 f9 18 8a 7d 62 7f 8c 0c 8a 7d f9 18     .0Bv...}b....}..
     6ee:	7d 7a 28 25 42 76 fc 30 e3 70 57 3c 6e 6a 1d 47     }z(%Bv.0.pW<nj.G
     6fe:	f2 62 34 51 82 5a 82 5a 34 51 f2 62 1d 47 6e 6a     .b4Q.Z.Z4Q.b.Gnj
     70e:	57 3c e3 70 fc 30 42 76 28 25 7d 7a f9 18 8a 7d     W<.p.0Bv(%}z...}
     71e:	8c 0c 62 7f d9 7f 48 06 62 7f 8c 0c 9d 7e c8 12     ..b...H.b....~..
     72e:	8a 7d f9 18 2a 7c 1a 1f 7d 7a 28 25 85 78 1f 2b     .}..*|..}z(%.x.+
     73e:	42 76 fc 30 b6 73 ba 36 e3 70 57 3c ca 6d ce 41     Bv.0.s.6.pW<.m.A
     74e:	6e 6a 1d 47 d0 66 40 4c f2 62 34 51 d7 5e f6 55     nj.G.f@L.b4Q.^.U
     75e:	82 5a 82 5a f6 55 d7 5e 34 51 f2 62 40 4c d0 66     .Z.Z.U.^4Q.b@L.f
     76e:	1d 47 6e 6a ce 41 ca 6d 57 3c e3 70 ba 36 b6 73     .Gnj.A.mW<.p.6.s
     77e:	fc 30 42 76 1f 2b 85 78 28 25 7d 7a 1a 1f 2a 7c     .0Bv.+.x(%}z..*|
     78e:	f9 18 8a 7d c8 12 9d 7e 8c 0c 62 7f 48 06 d9 7f     ...}...~..b.H...

0000079e <__ctors_end>:
     79e:	11 24       	eor	r1, r1
     7a0:	1f be       	out	0x3f, r1	; 63
     7a2:	cf ef       	ldi	r28, 0xFF	; 255
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df e2       	ldi	r29, 0x2F	; 47
     7a8:	de bf       	out	0x3e, r29	; 62

000007aa <__do_copy_data>:
     7aa:	10 e2       	ldi	r17, 0x20	; 32
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e2       	ldi	r27, 0x20	; 32
     7b0:	ee e9       	ldi	r30, 0x9E	; 158
     7b2:	fe e3       	ldi	r31, 0x3E	; 62
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__do_copy_data+0x10>
     7b6:	05 90       	lpm	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	ae 3f       	cpi	r26, 0xFE	; 254
     7bc:	b1 07       	cpc	r27, r17
     7be:	d9 f7       	brne	.-10     	; 0x7b6 <__do_copy_data+0xc>

000007c0 <__do_clear_bss>:
     7c0:	2a e2       	ldi	r18, 0x2A	; 42
     7c2:	ae ef       	ldi	r26, 0xFE	; 254
     7c4:	b0 e2       	ldi	r27, 0x20	; 32
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <.do_clear_bss_start>

000007c8 <.do_clear_bss_loop>:
     7c8:	1d 92       	st	X+, r1

000007ca <.do_clear_bss_start>:
     7ca:	ad 3a       	cpi	r26, 0xAD	; 173
     7cc:	b2 07       	cpc	r27, r18
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <.do_clear_bss_loop>
     7d0:	0e 94 6e 13 	call	0x26dc	; 0x26dc <main>
     7d4:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <_exit>

000007d8 <__bad_interrupt>:
     7d8:	13 cc       	rjmp	.-2010   	; 0x0 <__vectors>

000007da <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     7da:	60 91 80 00 	lds	r22, 0x0080
     7de:	62 70       	andi	r22, 0x02	; 2
     7e0:	61 60       	ori	r22, 0x01	; 1
     7e2:	24 e0       	ldi	r18, 0x04	; 4
     7e4:	82 9f       	mul	r24, r18
     7e6:	c0 01       	movw	r24, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	8c 73       	andi	r24, 0x3C	; 60
     7ec:	68 2b       	or	r22, r24
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <ccp_write_io>
     7f6:	e0 e8       	ldi	r30, 0x80	; 128
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	80 fd       	sbrc	r24, 0
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <wdt_set_timeout_period+0x20>
     800:	08 95       	ret

00000802 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     802:	60 91 80 00 	lds	r22, 0x0080
     806:	6c 73       	andi	r22, 0x3C	; 60
     808:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 db 16 	call	0x2db6	; 0x2db6 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     812:	e0 e8       	ldi	r30, 0x80	; 128
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	80 fd       	sbrc	r24, 0
     81a:	fd cf       	rjmp	.-6      	; 0x816 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     81c:	08 95       	ret

0000081e <init_adc>:
	mean_med_l = start_bubble(bubble_med_l);
	mean_high_l = start_bubble(bubble_high_l);
	
	mean_low_r = start_bubble(bubble_low_r);
	mean_med_r = start_bubble(bubble_med_r);
	mean_high_r = start_bubble(bubble_high_r);
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	61 97       	sbiw	r28, 0x11	; 17
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	18 2f       	mov	r17, r24
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <adc_read_configuration>
     83e:	99 81       	ldd	r25, Y+1	; 0x01
     840:	2a 81       	ldd	r18, Y+2	; 0x02
     842:	2f 78       	andi	r18, 0x8F	; 143
     844:	22 61       	ori	r18, 0x12	; 18
     846:	2a 83       	std	Y+2, r18	; 0x02
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	91 7e       	andi	r25, 0xE1	; 225
     84e:	90 61       	ori	r25, 0x10	; 16
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	1b 82       	std	Y+3, r1	; 0x03
     854:	8f b7       	in	r24, 0x3f	; 63
     856:	f8 94       	cli
     858:	98 e0       	ldi	r25, 0x08	; 8
     85a:	90 93 08 02 	sts	0x0208, r25
     85e:	8f bf       	out	0x3f, r24	; 63
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <adc_write_configuration>
     86e:	ae 01       	movw	r20, r28
     870:	48 5f       	subi	r20, 0xF8	; 248
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <adcch_read_configuration>
     87e:	14 30       	cpi	r17, 0x04	; 4
     880:	b9 f0       	breq	.+46     	; 0x8b0 <init_adc+0x92>
     882:	28 f4       	brcc	.+10     	; 0x88e <init_adc+0x70>
     884:	11 30       	cpi	r17, 0x01	; 1
     886:	41 f0       	breq	.+16     	; 0x898 <init_adc+0x7a>
     888:	12 30       	cpi	r17, 0x02	; 2
     88a:	61 f0       	breq	.+24     	; 0x8a4 <init_adc+0x86>
     88c:	21 c0       	rjmp	.+66     	; 0x8d0 <init_adc+0xb2>
     88e:	15 30       	cpi	r17, 0x05	; 5
     890:	a9 f0       	breq	.+42     	; 0x8bc <init_adc+0x9e>
     892:	16 30       	cpi	r17, 0x06	; 6
     894:	c1 f0       	breq	.+48     	; 0x8c6 <init_adc+0xa8>
     896:	1c c0       	rjmp	.+56     	; 0x8d0 <init_adc+0xb2>
     898:	19 8a       	std	Y+17, r1	; 0x11
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	88 87       	std	Y+8, r24	; 0x08
     89e:	80 e2       	ldi	r24, 0x20	; 32
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	16 c0       	rjmp	.+44     	; 0x8d0 <init_adc+0xb2>
     8a4:	19 8a       	std	Y+17, r1	; 0x11
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	88 87       	std	Y+8, r24	; 0x08
     8aa:	88 e0       	ldi	r24, 0x08	; 8
     8ac:	89 87       	std	Y+9, r24	; 0x09
     8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <init_adc+0xb2>
     8b0:	19 8a       	std	Y+17, r1	; 0x11
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	88 87       	std	Y+8, r24	; 0x08
     8b6:	83 e1       	ldi	r24, 0x13	; 19
     8b8:	89 87       	std	Y+9, r24	; 0x09
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <init_adc+0xb2>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	88 87       	std	Y+8, r24	; 0x08
     8c0:	80 e6       	ldi	r24, 0x60	; 96
     8c2:	89 87       	std	Y+9, r24	; 0x09
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <init_adc+0xb2>
     8c6:	18 86       	std	Y+8, r1	; 0x08
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	89 87       	std	Y+9, r24	; 0x09
     8cc:	86 e4       	ldi	r24, 0x46	; 70
     8ce:	89 8b       	std	Y+17, r24	; 0x11
     8d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d2:	1c 86       	std	Y+12, r1	; 0x0c
     8d4:	80 7f       	andi	r24, 0xF0	; 240
     8d6:	8a 87       	std	Y+10, r24	; 0x0a
     8d8:	ae 01       	movw	r20, r28
     8da:	48 5f       	subi	r20, 0xF8	; 248
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <adcch_write_configuration>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <adc_enable>
     8f0:	9f b7       	in	r25, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	80 81       	ld	r24, Z
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	80 83       	st	Z, r24
     8fe:	9f bf       	out	0x3f, r25	; 63
     900:	86 81       	ldd	r24, Z+6	; 0x06
     902:	80 ff       	sbrs	r24, 0
     904:	fd cf       	rjmp	.-6      	; 0x900 <init_adc+0xe2>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	80 93 06 02 	sts	0x0206, r24
     90c:	61 96       	adiw	r28, 0x11	; 17
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	de bf       	out	0x3e, r29	; 62
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	08 95       	ret

0000091a <change_adc_channel>:
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	2a 97       	sbiw	r28, 0x0a	; 10
     926:	cd bf       	out	0x3d, r28	; 61
     928:	de bf       	out	0x3e, r29	; 62
     92a:	18 2f       	mov	r17, r24
     92c:	ae 01       	movw	r20, r28
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <adcch_read_configuration>
     93c:	14 30       	cpi	r17, 0x04	; 4
     93e:	b9 f0       	breq	.+46     	; 0x96e <change_adc_channel+0x54>
     940:	28 f4       	brcc	.+10     	; 0x94c <change_adc_channel+0x32>
     942:	11 30       	cpi	r17, 0x01	; 1
     944:	41 f0       	breq	.+16     	; 0x956 <change_adc_channel+0x3c>
     946:	12 30       	cpi	r17, 0x02	; 2
     948:	61 f0       	breq	.+24     	; 0x962 <change_adc_channel+0x48>
     94a:	21 c0       	rjmp	.+66     	; 0x98e <change_adc_channel+0x74>
     94c:	15 30       	cpi	r17, 0x05	; 5
     94e:	a9 f0       	breq	.+42     	; 0x97a <change_adc_channel+0x60>
     950:	16 30       	cpi	r17, 0x06	; 6
     952:	c1 f0       	breq	.+48     	; 0x984 <change_adc_channel+0x6a>
     954:	1c c0       	rjmp	.+56     	; 0x98e <change_adc_channel+0x74>
     956:	1a 86       	std	Y+10, r1	; 0x0a
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	80 e2       	ldi	r24, 0x20	; 32
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	16 c0       	rjmp	.+44     	; 0x98e <change_adc_channel+0x74>
     962:	1a 86       	std	Y+10, r1	; 0x0a
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	8a 83       	std	Y+2, r24	; 0x02
     96c:	10 c0       	rjmp	.+32     	; 0x98e <change_adc_channel+0x74>
     96e:	1a 86       	std	Y+10, r1	; 0x0a
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	83 e1       	ldi	r24, 0x13	; 19
     976:	8a 83       	std	Y+2, r24	; 0x02
     978:	0a c0       	rjmp	.+20     	; 0x98e <change_adc_channel+0x74>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	80 e6       	ldi	r24, 0x60	; 96
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	05 c0       	rjmp	.+10     	; 0x98e <change_adc_channel+0x74>
     984:	19 82       	std	Y+1, r1	; 0x01
     986:	88 e0       	ldi	r24, 0x08	; 8
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	86 e4       	ldi	r24, 0x46	; 70
     98c:	8a 87       	std	Y+10, r24	; 0x0a
     98e:	ae 01       	movw	r20, r28
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <adcch_write_configuration>
     99e:	2a 96       	adiw	r28, 0x0a	; 10
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	08 95       	ret

000009ac <adc_callback>:
     9ac:	80 91 3f 21 	lds	r24, 0x213F
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <adc_callback+0xa>
     9b4:	4c c0       	rjmp	.+152    	; 0xa4e <adc_callback+0xa2>
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <adc_callback+0x16>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <adc_callback+0x24>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	09 f1       	breq	.+66     	; 0xa02 <adc_callback+0x56>
     9c0:	08 95       	ret
     9c2:	85 30       	cpi	r24, 0x05	; 5
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <adc_callback+0x1c>
     9c6:	69 c0       	rjmp	.+210    	; 0xa9a <adc_callback+0xee>
     9c8:	86 30       	cpi	r24, 0x06	; 6
     9ca:	09 f4       	brne	.+2      	; 0x9ce <adc_callback+0x22>
     9cc:	75 c0       	rjmp	.+234    	; 0xab8 <adc_callback+0x10c>
     9ce:	08 95       	ret
     9d0:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <ischarging>
     9d4:	81 11       	cpse	r24, r1
     9d6:	92 c0       	rjmp	.+292    	; 0xafc <adc_callback+0x150>
     9d8:	80 91 3f 21 	lds	r24, 0x213F
     9dc:	80 93 3e 21 	sts	0x213E, r24
     9e0:	86 e0       	ldi	r24, 0x06	; 6
     9e2:	80 93 3f 21 	sts	0x213F, r24
     9e6:	80 91 3f 21 	lds	r24, 0x213F
     9ea:	97 df       	rcall	.-210    	; 0x91a <change_adc_channel>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	98 e0       	ldi	r25, 0x08	; 8
     9f0:	0e 94 73 19 	call	0x32e6	; 0x32e6 <tc45_enable>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	98 e0       	ldi	r25, 0x08	; 8
     9f8:	0e 94 a5 19 	call	0x334a	; 0x334a <tc45_disable>
     9fc:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <load_data_color_led>
     a00:	08 95       	ret
     a02:	80 91 ff 20 	lds	r24, 0x20FF
     a06:	90 91 00 21 	lds	r25, 0x2100
     a0a:	9c 01       	movw	r18, r24
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	20 93 ff 20 	sts	0x20FF, r18
     a14:	30 93 00 21 	sts	0x2100, r19
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	fc 01       	movw	r30, r24
     a1e:	e0 59       	subi	r30, 0x90	; 144
     a20:	f6 4d       	sbci	r31, 0xD6	; 214
     a22:	40 83       	st	Z, r20
     a24:	51 83       	std	Z+1, r21	; 0x01
     a26:	80 91 ff 20 	lds	r24, 0x20FF
     a2a:	90 91 00 21 	lds	r25, 0x2100
     a2e:	80 38       	cpi	r24, 0x80	; 128
     a30:	91 05       	cpc	r25, r1
     a32:	08 f4       	brcc	.+2      	; 0xa36 <adc_callback+0x8a>
     a34:	63 c0       	rjmp	.+198    	; 0xafc <adc_callback+0x150>
     a36:	10 92 ff 20 	sts	0x20FF, r1
     a3a:	10 92 00 21 	sts	0x2100, r1
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 fe 20 	sts	0x20FE, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	98 e0       	ldi	r25, 0x08	; 8
     a48:	0c 94 a5 19 	jmp	0x334a	; 0x334a <tc45_disable>
     a4c:	08 95       	ret
     a4e:	80 91 ff 20 	lds	r24, 0x20FF
     a52:	90 91 00 21 	lds	r25, 0x2100
     a56:	9c 01       	movw	r18, r24
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	20 93 ff 20 	sts	0x20FF, r18
     a60:	30 93 00 21 	sts	0x2100, r19
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	fc 01       	movw	r30, r24
     a6a:	e0 59       	subi	r30, 0x90	; 144
     a6c:	f6 4d       	sbci	r31, 0xD6	; 214
     a6e:	40 83       	st	Z, r20
     a70:	51 83       	std	Z+1, r21	; 0x01
     a72:	80 91 ff 20 	lds	r24, 0x20FF
     a76:	90 91 00 21 	lds	r25, 0x2100
     a7a:	80 38       	cpi	r24, 0x80	; 128
     a7c:	91 05       	cpc	r25, r1
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <adc_callback+0xd6>
     a80:	3d c0       	rjmp	.+122    	; 0xafc <adc_callback+0x150>
     a82:	10 92 ff 20 	sts	0x20FF, r1
     a86:	10 92 00 21 	sts	0x2100, r1
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 fe 20 	sts	0x20FE, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	98 e0       	ldi	r25, 0x08	; 8
     a94:	0c 94 a5 19 	jmp	0x334a	; 0x334a <tc45_disable>
     a98:	08 95       	ret
     a9a:	40 93 3a 21 	sts	0x213A, r20
     a9e:	50 93 3b 21 	sts	0x213B, r21
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 37 21 	sts	0x2137, r24
     aa8:	80 91 3e 21 	lds	r24, 0x213E
     aac:	80 93 3f 21 	sts	0x213F, r24
     ab0:	80 91 3f 21 	lds	r24, 0x213F
     ab4:	32 cf       	rjmp	.-412    	; 0x91a <change_adc_channel>
     ab6:	08 95       	ret
     ab8:	40 93 38 21 	sts	0x2138, r20
     abc:	50 93 39 21 	sts	0x2139, r21
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 36 21 	sts	0x2136, r24
     ac6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <ischarging>
     aca:	88 23       	and	r24, r24
     acc:	b9 f0       	breq	.+46     	; 0xafc <adc_callback+0x150>
     ace:	4f ef       	ldi	r20, 0xFF	; 255
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <twinkle>
     ad8:	80 91 3f 21 	lds	r24, 0x213F
     adc:	80 93 3e 21 	sts	0x213E, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 3f 21 	sts	0x213F, r24
     ae6:	80 91 3f 21 	lds	r24, 0x213F
     aea:	17 df       	rcall	.-466    	; 0x91a <change_adc_channel>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	98 e0       	ldi	r25, 0x08	; 8
     af0:	0e 94 a5 19 	call	0x334a	; 0x334a <tc45_disable>
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	98 e0       	ldi	r25, 0x08	; 8
     af8:	0c 94 73 19 	jmp	0x32e6	; 0x32e6 <tc45_enable>
     afc:	08 95       	ret

00000afe <adc_enable_interrupt>:
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	2a 97       	sbiw	r28, 0x0a	; 10
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <adc_disable>
     b14:	ae 01       	movw	r20, r28
     b16:	4f 5f       	subi	r20, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <adcch_read_configuration>
     b24:	e0 ea       	ldi	r30, 0xA0	; 160
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	82 83       	std	Z+2, r24	; 0x02
     b2e:	66 ed       	ldi	r22, 0xD6	; 214
     b30:	74 e0       	ldi	r23, 0x04	; 4
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <adc_set_callback>
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	8c 7f       	andi	r24, 0xFC	; 252
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	8b 83       	std	Y+3, r24	; 0x03
     b42:	ae 01       	movw	r20, r28
     b44:	4f 5f       	subi	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <adcch_write_configuration>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <adc_enable>
     b5a:	78 94       	sei
     b5c:	2a 96       	adiw	r28, 0x0a	; 10
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <mean>:


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b68:	66 23       	and	r22, r22
     b6a:	69 f0       	breq	.+26     	; 0xb86 <mean+0x1e>
     b6c:	fc 01       	movw	r30, r24
     b6e:	ac 01       	movw	r20, r24
     b70:	46 0f       	add	r20, r22
     b72:	51 1d       	adc	r21, r1
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
	{
		m += a[i];
     b78:	21 91       	ld	r18, Z+
     b7a:	82 0f       	add	r24, r18
     b7c:	91 1d       	adc	r25, r1


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b7e:	e4 17       	cp	r30, r20
     b80:	f5 07       	cpc	r31, r21
     b82:	d1 f7       	brne	.-12     	; 0xb78 <mean+0x10>
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <mean+0x22>



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
	}
	return m/order;
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
     b90:	86 2f       	mov	r24, r22
}
     b92:	08 95       	ret

00000b94 <updateLEDs>:
		return 3;
	}
}

void updateLEDs()
{
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29

//	bool playing = isplaying();
//	bool charging = ischarging();

		// get and bin the power of frequencies to colors
		low_power_old = low_power;
     ba8:	80 91 15 21 	lds	r24, 0x2115
     bac:	90 91 16 21 	lds	r25, 0x2116
     bb0:	a0 91 17 21 	lds	r26, 0x2117
     bb4:	b0 91 18 21 	lds	r27, 0x2118
     bb8:	80 93 09 21 	sts	0x2109, r24
     bbc:	90 93 0a 21 	sts	0x210A, r25
     bc0:	a0 93 0b 21 	sts	0x210B, r26
     bc4:	b0 93 0c 21 	sts	0x210C, r27
		mid_power_old = mid_power;
     bc8:	80 91 11 21 	lds	r24, 0x2111
     bcc:	90 91 12 21 	lds	r25, 0x2112
     bd0:	a0 91 13 21 	lds	r26, 0x2113
     bd4:	b0 91 14 21 	lds	r27, 0x2114
     bd8:	80 93 05 21 	sts	0x2105, r24
     bdc:	90 93 06 21 	sts	0x2106, r25
     be0:	a0 93 07 21 	sts	0x2107, r26
     be4:	b0 93 08 21 	sts	0x2108, r27
		high_power_old = high_power;
     be8:	80 91 0d 21 	lds	r24, 0x210D
     bec:	90 91 0e 21 	lds	r25, 0x210E
     bf0:	a0 91 0f 21 	lds	r26, 0x210F
     bf4:	b0 91 10 21 	lds	r27, 0x2110
     bf8:	80 93 01 21 	sts	0x2101, r24
     bfc:	90 93 02 21 	sts	0x2102, r25
     c00:	a0 93 03 21 	sts	0x2103, r26
     c04:	b0 93 04 21 	sts	0x2104, r27

		low_power = 0;
     c08:	10 92 15 21 	sts	0x2115, r1
     c0c:	10 92 16 21 	sts	0x2116, r1
     c10:	10 92 17 21 	sts	0x2117, r1
     c14:	10 92 18 21 	sts	0x2118, r1
		mid_power = 0;
     c18:	10 92 11 21 	sts	0x2111, r1
     c1c:	10 92 12 21 	sts	0x2112, r1
     c20:	10 92 13 21 	sts	0x2113, r1
     c24:	10 92 14 21 	sts	0x2114, r1
		high_power = 0;
     c28:	10 92 0d 21 	sts	0x210D, r1
     c2c:	10 92 0e 21 	sts	0x210E, r1
     c30:	10 92 0f 21 	sts	0x210F, r1
     c34:	10 92 10 21 	sts	0x2110, r1

		for (int i = 0; i < lows; i++){
     c38:	00 91 0f 20 	lds	r16, 0x200F
     c3c:	10 91 10 20 	lds	r17, 0x2010
     c40:	10 16       	cp	r1, r16
     c42:	11 06       	cpc	r1, r17
     c44:	44 f5       	brge	.+80     	; 0xc96 <updateLEDs+0x102>
     c46:	81 2c       	mov	r8, r1
     c48:	91 2c       	mov	r9, r1
     c4a:	54 01       	movw	r10, r8
     c4c:	0f 2e       	mov	r0, r31
     c4e:	fd ea       	ldi	r31, 0xAD	; 173
     c50:	ef 2e       	mov	r14, r31
     c52:	f5 e2       	ldi	r31, 0x25	; 37
     c54:	ff 2e       	mov	r15, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
			low_power += fht_lin_out[i];
     c5c:	f7 01       	movw	r30, r14
     c5e:	81 91       	ld	r24, Z+
     c60:	91 91       	ld	r25, Z+
     c62:	7f 01       	movw	r14, r30
     c64:	bc 01       	movw	r22, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__floatunsisf>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c5 01       	movw	r24, r10
     c74:	b4 01       	movw	r22, r8
     c76:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__addsf3>
     c7a:	4b 01       	movw	r8, r22
     c7c:	5c 01       	movw	r10, r24

		low_power = 0;
		mid_power = 0;
		high_power = 0;

		for (int i = 0; i < lows; i++){
     c7e:	21 96       	adiw	r28, 0x01	; 1
     c80:	c0 17       	cp	r28, r16
     c82:	d1 07       	cpc	r29, r17
     c84:	5c f3       	brlt	.-42     	; 0xc5c <updateLEDs+0xc8>
     c86:	60 93 15 21 	sts	0x2115, r22
     c8a:	70 93 16 21 	sts	0x2116, r23
     c8e:	80 93 17 21 	sts	0x2117, r24
     c92:	90 93 18 21 	sts	0x2118, r25
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     c96:	c0 91 0d 20 	lds	r28, 0x200D
     c9a:	d0 91 0e 20 	lds	r29, 0x200E
     c9e:	c0 0f       	add	r28, r16
     ca0:	d1 1f       	adc	r29, r17
     ca2:	0c 17       	cp	r16, r28
     ca4:	1d 07       	cpc	r17, r29
     ca6:	6c f5       	brge	.+90     	; 0xd02 <updateLEDs+0x16e>
     ca8:	80 90 11 21 	lds	r8, 0x2111
     cac:	90 90 12 21 	lds	r9, 0x2112
     cb0:	a0 90 13 21 	lds	r10, 0x2113
     cb4:	b0 90 14 21 	lds	r11, 0x2114
     cb8:	c8 01       	movw	r24, r16
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	9c 01       	movw	r18, r24
     cc0:	23 55       	subi	r18, 0x53	; 83
     cc2:	3a 4d       	sbci	r19, 0xDA	; 218
     cc4:	79 01       	movw	r14, r18
			mid_power += fht_lin_out[i];
     cc6:	f7 01       	movw	r30, r14
     cc8:	81 91       	ld	r24, Z+
     cca:	91 91       	ld	r25, Z+
     ccc:	7f 01       	movw	r14, r30
     cce:	bc 01       	movw	r22, r24
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__floatunsisf>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	c5 01       	movw	r24, r10
     cde:	b4 01       	movw	r22, r8
     ce0:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__addsf3>
     ce4:	4b 01       	movw	r8, r22
     ce6:	5c 01       	movw	r10, r24
		high_power = 0;

		for (int i = 0; i < lows; i++){
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	0c 17       	cp	r16, r28
     cee:	1d 07       	cpc	r17, r29
     cf0:	54 f3       	brlt	.-44     	; 0xcc6 <updateLEDs+0x132>
     cf2:	60 93 11 21 	sts	0x2111, r22
     cf6:	70 93 12 21 	sts	0x2112, r23
     cfa:	80 93 13 21 	sts	0x2113, r24
     cfe:	90 93 14 21 	sts	0x2114, r25
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     d02:	e0 90 0b 20 	lds	r14, 0x200B
     d06:	f0 90 0c 20 	lds	r15, 0x200C
     d0a:	ec 0e       	add	r14, r28
     d0c:	fd 1e       	adc	r15, r29
     d0e:	ce 15       	cp	r28, r14
     d10:	df 05       	cpc	r29, r15
     d12:	54 f5       	brge	.+84     	; 0xd68 <updateLEDs+0x1d4>
     d14:	80 90 0d 21 	lds	r8, 0x210D
     d18:	90 90 0e 21 	lds	r9, 0x210E
     d1c:	a0 90 0f 21 	lds	r10, 0x210F
     d20:	b0 90 10 21 	lds	r11, 0x2110
     d24:	8e 01       	movw	r16, r28
     d26:	00 0f       	add	r16, r16
     d28:	11 1f       	adc	r17, r17
     d2a:	03 55       	subi	r16, 0x53	; 83
     d2c:	1a 4d       	sbci	r17, 0xDA	; 218
			high_power += fht_lin_out[i];
     d2e:	f8 01       	movw	r30, r16
     d30:	81 91       	ld	r24, Z+
     d32:	91 91       	ld	r25, Z+
     d34:	8f 01       	movw	r16, r30
     d36:	bc 01       	movw	r22, r24
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <__floatunsisf>
     d40:	9b 01       	movw	r18, r22
     d42:	ac 01       	movw	r20, r24
     d44:	c5 01       	movw	r24, r10
     d46:	b4 01       	movw	r22, r8
     d48:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__addsf3>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     d50:	21 96       	adiw	r28, 0x01	; 1
     d52:	ce 15       	cp	r28, r14
     d54:	df 05       	cpc	r29, r15
     d56:	5c f3       	brlt	.-42     	; 0xd2e <updateLEDs+0x19a>
     d58:	60 93 0d 21 	sts	0x210D, r22
     d5c:	70 93 0e 21 	sts	0x210E, r23
     d60:	80 93 0f 21 	sts	0x210F, r24
     d64:	90 93 10 21 	sts	0x2110, r25
		if (high_power < high_power_old*damp){
			high_power = high_power_old*damp;
		}*/

		// AGC - automatic gain control
		if ( low_power > maxim || mid_power > maxim || high_power > maxim)  {
     d68:	10 91 15 21 	lds	r17, 0x2115
     d6c:	d0 91 16 21 	lds	r29, 0x2116
     d70:	c0 91 17 21 	lds	r28, 0x2117
     d74:	00 91 18 21 	lds	r16, 0x2118
     d78:	80 90 07 20 	lds	r8, 0x2007
     d7c:	90 90 08 20 	lds	r9, 0x2008
     d80:	a0 90 09 20 	lds	r10, 0x2009
     d84:	b0 90 0a 20 	lds	r11, 0x200A
     d88:	a5 01       	movw	r20, r10
     d8a:	94 01       	movw	r18, r8
     d8c:	61 2f       	mov	r22, r17
     d8e:	7d 2f       	mov	r23, r29
     d90:	8c 2f       	mov	r24, r28
     d92:	90 2f       	mov	r25, r16
     d94:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__gesf2>
     d98:	18 16       	cp	r1, r24
     d9a:	ec f0       	brlt	.+58     	; 0xdd6 <updateLEDs+0x242>
     d9c:	20 91 11 21 	lds	r18, 0x2111
     da0:	30 91 12 21 	lds	r19, 0x2112
     da4:	40 91 13 21 	lds	r20, 0x2113
     da8:	50 91 14 21 	lds	r21, 0x2114
     dac:	c5 01       	movw	r24, r10
     dae:	b4 01       	movw	r22, r8
     db0:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
     db4:	88 23       	and	r24, r24
     db6:	7c f0       	brlt	.+30     	; 0xdd6 <updateLEDs+0x242>
     db8:	20 91 0d 21 	lds	r18, 0x210D
     dbc:	30 91 0e 21 	lds	r19, 0x210E
     dc0:	40 91 0f 21 	lds	r20, 0x210F
     dc4:	50 91 10 21 	lds	r21, 0x2110
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <__cmpsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <updateLEDs+0x242>
     dd4:	45 c0       	rjmp	.+138    	; 0xe60 <updateLEDs+0x2cc>
	    	vrem = max(low_power, mid_power);
     dd6:	a0 90 11 21 	lds	r10, 0x2111
     dda:	b0 90 12 21 	lds	r11, 0x2112
     dde:	e0 90 13 21 	lds	r14, 0x2113
     de2:	f0 90 14 21 	lds	r15, 0x2114
     de6:	2a 2d       	mov	r18, r10
     de8:	3b 2d       	mov	r19, r11
     dea:	4e 2d       	mov	r20, r14
     dec:	5f 2d       	mov	r21, r15
     dee:	61 2f       	mov	r22, r17
     df0:	7d 2f       	mov	r23, r29
     df2:	8c 2f       	mov	r24, r28
     df4:	90 2f       	mov	r25, r16
     df6:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__gesf2>
     dfa:	18 16       	cp	r1, r24
     dfc:	24 f0       	brlt	.+8      	; 0xe06 <updateLEDs+0x272>
     dfe:	1a 2d       	mov	r17, r10
     e00:	db 2d       	mov	r29, r11
     e02:	ce 2d       	mov	r28, r14
     e04:	0f 2d       	mov	r16, r15
	    	vrem = max(vrem, high_power);
     e06:	a0 90 0d 21 	lds	r10, 0x210D
     e0a:	b0 90 0e 21 	lds	r11, 0x210E
     e0e:	e0 90 0f 21 	lds	r14, 0x210F
     e12:	f0 90 10 21 	lds	r15, 0x2110
     e16:	2a 2d       	mov	r18, r10
     e18:	3b 2d       	mov	r19, r11
     e1a:	4e 2d       	mov	r20, r14
     e1c:	5f 2d       	mov	r21, r15
     e1e:	61 2f       	mov	r22, r17
     e20:	7d 2f       	mov	r23, r29
     e22:	8c 2f       	mov	r24, r28
     e24:	90 2f       	mov	r25, r16
     e26:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <__gesf2>
     e2a:	18 16       	cp	r1, r24
     e2c:	24 f0       	brlt	.+8      	; 0xe36 <updateLEDs+0x2a2>
     e2e:	1a 2d       	mov	r17, r10
     e30:	db 2d       	mov	r29, r11
     e32:	ce 2d       	mov	r28, r14
     e34:	0f 2d       	mov	r16, r15
     e36:	81 2f       	mov	r24, r17
     e38:	9d 2f       	mov	r25, r29
     e3a:	ac 2f       	mov	r26, r28
     e3c:	b0 2f       	mov	r27, r16
     e3e:	80 93 6c 29 	sts	0x296C, r24
     e42:	90 93 6d 29 	sts	0x296D, r25
     e46:	a0 93 6e 29 	sts	0x296E, r26
     e4a:	b0 93 6f 29 	sts	0x296F, r27
	    	maxim = vrem;
     e4e:	80 93 07 20 	sts	0x2007, r24
     e52:	90 93 08 20 	sts	0x2008, r25
     e56:	a0 93 09 20 	sts	0x2009, r26
     e5a:	b0 93 0a 20 	sts	0x200A, r27
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <updateLEDs+0x2f4>
	  	} 
	  	else {
	    	maxim *= agc;
     e60:	20 91 03 20 	lds	r18, 0x2003
     e64:	30 91 04 20 	lds	r19, 0x2004
     e68:	40 91 05 20 	lds	r20, 0x2005
     e6c:	50 91 06 20 	lds	r21, 0x2006
     e70:	c5 01       	movw	r24, r10
     e72:	b4 01       	movw	r22, r8
     e74:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__mulsf3>
     e78:	60 93 07 20 	sts	0x2007, r22
     e7c:	70 93 08 20 	sts	0x2008, r23
     e80:	80 93 09 20 	sts	0x2009, r24
     e84:	90 93 0a 20 	sts	0x200A, r25
	  	}
		// map values to agc adjusted
		float slope = 255/(maxim-min);
     e88:	20 91 19 21 	lds	r18, 0x2119
     e8c:	30 91 1a 21 	lds	r19, 0x211A
     e90:	40 91 1b 21 	lds	r20, 0x211B
     e94:	50 91 1c 21 	lds	r21, 0x211C
     e98:	60 91 07 20 	lds	r22, 0x2007
     e9c:	70 91 08 20 	lds	r23, 0x2008
     ea0:	80 91 09 20 	lds	r24, 0x2009
     ea4:	90 91 0a 20 	lds	r25, 0x200A
     ea8:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <__subsf3>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	8f e7       	ldi	r24, 0x7F	; 127
     eb6:	93 e4       	ldi	r25, 0x43	; 67
     eb8:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <__divsf3>
     ebc:	4b 01       	movw	r8, r22
     ebe:	5c 01       	movw	r10, r24
		
	  	ledLevelLow = (uint8_t)(low_power*slope);
     ec0:	20 91 15 21 	lds	r18, 0x2115
     ec4:	30 91 16 21 	lds	r19, 0x2116
     ec8:	40 91 17 21 	lds	r20, 0x2117
     ecc:	50 91 18 21 	lds	r21, 0x2118
     ed0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__mulsf3>
     ed4:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__fixunssfsi>
     ed8:	d6 2f       	mov	r29, r22
     eda:	60 93 97 25 	sts	0x2597, r22
	  	ledLevelMid = (uint8_t)(mid_power*slope);
     ede:	20 91 11 21 	lds	r18, 0x2111
     ee2:	30 91 12 21 	lds	r19, 0x2112
     ee6:	40 91 13 21 	lds	r20, 0x2113
     eea:	50 91 14 21 	lds	r21, 0x2114
     eee:	c5 01       	movw	r24, r10
     ef0:	b4 01       	movw	r22, r8
     ef2:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__mulsf3>
     ef6:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__fixunssfsi>
     efa:	c6 2f       	mov	r28, r22
     efc:	60 93 6a 28 	sts	0x286A, r22
	  	ledLevelHigh = (uint8_t)(high_power*slope);
     f00:	20 91 0d 21 	lds	r18, 0x210D
     f04:	30 91 0e 21 	lds	r19, 0x210E
     f08:	40 91 0f 21 	lds	r20, 0x210F
     f0c:	50 91 10 21 	lds	r21, 0x2110
     f10:	c5 01       	movw	r24, r10
     f12:	b4 01       	movw	r22, r8
     f14:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__mulsf3>
     f18:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <__fixunssfsi>
     f1c:	60 93 6b 29 	sts	0x296B, r22
		
     lowf[point_low] = ledLevelLow;
     f20:	80 91 21 21 	lds	r24, 0x2121
     f24:	90 91 22 21 	lds	r25, 0x2122
     f28:	fc 01       	movw	r30, r24
     f2a:	ea 54       	subi	r30, 0x4A	; 74
     f2c:	ff 4d       	sbci	r31, 0xDF	; 223
     f2e:	d0 83       	st	Z, r29
	 midf[point_mid] = ledLevelMid;
     f30:	e0 91 1f 21 	lds	r30, 0x211F
     f34:	f0 91 20 21 	lds	r31, 0x2120
     f38:	df 01       	movw	r26, r30
     f3a:	a0 5e       	subi	r26, 0xE0	; 224
     f3c:	bf 4d       	sbci	r27, 0xDF	; 223
     f3e:	cc 93       	st	X, r28
	 highf[point_high] = ledLevelHigh;
     f40:	20 91 1d 21 	lds	r18, 0x211D
     f44:	30 91 1e 21 	lds	r19, 0x211E
     f48:	d9 01       	movw	r26, r18
     f4a:	af 5e       	subi	r26, 0xEF	; 239
     f4c:	bf 4d       	sbci	r27, 0xDF	; 223
     f4e:	6c 93       	st	X, r22
	 point_low++;
     f50:	01 96       	adiw	r24, 0x01	; 1
	 point_mid++;
	 point_high++;
	 point_low %= order_low;
     f52:	6e e1       	ldi	r22, 0x1E	; 30
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     f5a:	80 93 21 21 	sts	0x2121, r24
     f5e:	90 93 22 21 	sts	0x2122, r25
		
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
     f62:	cf 01       	movw	r24, r30
     f64:	01 96       	adiw	r24, 0x01	; 1
	 point_high++;
	 point_low %= order_low;
	 point_mid %= order_mid;
     f66:	66 e9       	ldi	r22, 0x96	; 150
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     f6e:	80 93 1f 21 	sts	0x211F, r24
     f72:	90 93 20 21 	sts	0x2120, r25
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
	 point_high++;
     f76:	c9 01       	movw	r24, r18
     f78:	01 96       	adiw	r24, 0x01	; 1
	 point_low %= order_low;
	 point_mid %= order_mid;
	 point_high %= order_high;
     f7a:	6f e0       	ldi	r22, 0x0F	; 15
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     f82:	80 93 1d 21 	sts	0x211D, r24
     f86:	90 93 1e 21 	sts	0x211E, r25
	 
	ledLevelHigh = mean(highf, order_high);
     f8a:	6f e0       	ldi	r22, 0x0F	; 15
     f8c:	81 e1       	ldi	r24, 0x11	; 17
     f8e:	90 e2       	ldi	r25, 0x20	; 32
     f90:	eb dd       	rcall	.-1066   	; 0xb68 <mean>
     f92:	d8 2f       	mov	r29, r24
     f94:	80 93 6b 29 	sts	0x296B, r24
	ledLevelMid = mean(midf, order_mid);
     f98:	66 e9       	ldi	r22, 0x96	; 150
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e2       	ldi	r25, 0x20	; 32
     f9e:	e4 dd       	rcall	.-1080   	; 0xb68 <mean>
     fa0:	c8 2f       	mov	r28, r24
     fa2:	80 93 6a 28 	sts	0x286A, r24
	ledLevelLow = mean(lowf, order_low);
     fa6:	6e e1       	ldi	r22, 0x1E	; 30
     fa8:	86 eb       	ldi	r24, 0xB6	; 182
     faa:	90 e2       	ldi	r25, 0x20	; 32
     fac:	dd dd       	rcall	.-1094   	; 0xb68 <mean>
		 
	ledLevelLow = 100*ledLevelLow/LOW_DIVIDER;
     fae:	60 91 02 20 	lds	r22, 0x2002
     fb2:	24 e6       	ldi	r18, 0x64	; 100
     fb4:	28 9f       	mul	r18, r24
     fb6:	c0 01       	movw	r24, r0
     fb8:	11 24       	eor	r1, r1
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     fc0:	16 2f       	mov	r17, r22
     fc2:	60 93 97 25 	sts	0x2597, r22
	ledLevelMid = 100*ledLevelMid/MID_DIVIDER;
     fc6:	a0 91 01 20 	lds	r26, 0x2001
     fca:	2c 9f       	mul	r18, r28
     fcc:	c0 01       	movw	r24, r0
     fce:	11 24       	eor	r1, r1
     fd0:	6a 2f       	mov	r22, r26
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     fd8:	60 93 6a 28 	sts	0x286A, r22
	ledLevelHigh = 100*ledLevelHigh/HIGH_DIVIDER;
     fdc:	30 91 00 20 	lds	r19, 0x2000
     fe0:	2d 9f       	mul	r18, r29
     fe2:	c0 01       	movw	r24, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	63 2f       	mov	r22, r19
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
     fee:	86 2f       	mov	r24, r22
     ff0:	60 93 6b 29 	sts	0x296B, r22
	}
	if (ledLevelLow > 255){
		ledLevelLow = 255;
	}
	
	if (colors[0] <= colors[1] && colors[0] <= colors[2]) {
     ff4:	ec ed       	ldi	r30, 0xDC	; 220
     ff6:	f0 e2       	ldi	r31, 0x20	; 32
     ff8:	20 81       	ld	r18, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	92 17       	cp	r25, r18
     ffe:	40 f0       	brcs	.+16     	; 0x1010 <updateLEDs+0x47c>
    1000:	20 81       	ld	r18, Z
    1002:	92 81       	ldd	r25, Z+2	; 0x02
    1004:	92 17       	cp	r25, r18
    1006:	20 f0       	brcs	.+8      	; 0x1010 <updateLEDs+0x47c>
		twinkle(0, ledLevelHigh, ledLevelLow);
    1008:	41 2f       	mov	r20, r17
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	e7 d6       	rcall	.+3534   	; 0x1ddc <twinkle>
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <updateLEDs+0x4bc>
	}
	else if (colors[1] <= colors[0] && colors[1] <= colors[2]) {
    1010:	ec ed       	ldi	r30, 0xDC	; 220
    1012:	f0 e2       	ldi	r31, 0x20	; 32
    1014:	21 81       	ldd	r18, Z+1	; 0x01
    1016:	90 81       	ld	r25, Z
    1018:	92 17       	cp	r25, r18
    101a:	40 f0       	brcs	.+16     	; 0x102c <updateLEDs+0x498>
    101c:	21 81       	ldd	r18, Z+1	; 0x01
    101e:	92 81       	ldd	r25, Z+2	; 0x02
    1020:	92 17       	cp	r25, r18
    1022:	20 f0       	brcs	.+8      	; 0x102c <updateLEDs+0x498>
		twinkle(ledLevelHigh, 0, ledLevelLow);
    1024:	41 2f       	mov	r20, r17
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	d9 d6       	rcall	.+3506   	; 0x1ddc <twinkle>
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <updateLEDs+0x4bc>
	}
	else if (colors[2] <= colors[0] && colors[2] <= colors[1]) {
    102c:	ec ed       	ldi	r30, 0xDC	; 220
    102e:	f0 e2       	ldi	r31, 0x20	; 32
    1030:	22 81       	ldd	r18, Z+2	; 0x02
    1032:	90 81       	ld	r25, Z
    1034:	92 17       	cp	r25, r18
    1036:	40 f0       	brcs	.+16     	; 0x1048 <updateLEDs+0x4b4>
    1038:	22 81       	ldd	r18, Z+2	; 0x02
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	92 17       	cp	r25, r18
    103e:	20 f0       	brcs	.+8      	; 0x1048 <updateLEDs+0x4b4>
		twinkle(ledLevelHigh, ledLevelLow, 0);
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	61 2f       	mov	r22, r17
    1044:	cb d6       	rcall	.+3478   	; 0x1ddc <twinkle>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <updateLEDs+0x4bc>
	}
	else {
		twinkle(0, ledLevelHigh, ledLevelLow);
    1048:	41 2f       	mov	r20, r17
    104a:	68 2f       	mov	r22, r24
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	c6 d6       	rcall	.+3468   	; 0x1ddc <twinkle>
	}
	
	// update LEDs

}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	9f 90       	pop	r9
    1062:	8f 90       	pop	r8
    1064:	08 95       	ret

00001066 <run>:

void run(){
    1066:	2f 92       	push	r2
    1068:	3f 92       	push	r3
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
}

static inline void fht_window(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this applies a window to the data for better frequency resolution
  asm volatile (
    109c:	c0 e7       	ldi	r28, 0x70	; 112
    109e:	d9 e2       	ldi	r29, 0x29	; 41
    10a0:	ee e4       	ldi	r30, 0x4E	; 78
    10a2:	f2 e0       	ldi	r31, 0x02	; 2
    10a4:	ff 24       	eor	r15, r15
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	65 91       	lpm	r22, Z+
    10aa:	75 91       	lpm	r23, Z+
    10ac:	08 81       	ld	r16, Y
    10ae:	19 81       	ldd	r17, Y+1	; 0x01
    10b0:	97 03       	fmuls	r17, r23
    10b2:	20 01       	movw	r4, r0
    10b4:	0e 03       	fmul	r16, r22
    10b6:	4f 1c       	adc	r4, r15
    10b8:	10 01       	movw	r2, r0
    10ba:	9e 03       	fmulsu	r17, r22
    10bc:	5f 08       	sbc	r5, r15
    10be:	30 0c       	add	r3, r0
    10c0:	41 1c       	adc	r4, r1
    10c2:	5f 1c       	adc	r5, r15
    10c4:	f8 03       	fmulsu	r23, r16
    10c6:	5f 08       	sbc	r5, r15
    10c8:	30 0c       	add	r3, r0
    10ca:	41 1c       	adc	r4, r1
    10cc:	5f 1c       	adc	r5, r15
    10ce:	49 92       	st	Y+, r4
    10d0:	59 92       	st	Y+, r5
    10d2:	4a 95       	dec	r20
    10d4:	49 f7       	brne	.-46     	; 0x10a8 <run+0x42>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r15", "r16", "r17", "r20", "r30", "r31",
   "r22", "r23", "r28", "r29"
  );

  // get the clobbers off the stack
  asm volatile (
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	3f 90       	pop	r3
    10e6:	2f 90       	pop	r2
    10e8:	11 24       	eor	r1, r1
}

static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    10ea:	2f 92       	push	r2
    10ec:	3f 92       	push	r3
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
  "push r29 \n"
  );


  // move values to bit reversed locations
  asm volatile (
    10f6:	ee e4       	ldi	r30, 0x4E	; 78
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	48 e3       	ldi	r20, 0x38	; 56
    10fc:	a5 91       	lpm	r26, Z+
    10fe:	bb 27       	eor	r27, r27
    1100:	aa 0f       	add	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	a0 59       	subi	r26, 0x90	; 144
    1106:	b6 4d       	sbci	r27, 0xD6	; 214
    1108:	2d 90       	ld	r2, X+
    110a:	3c 90       	ld	r3, X
    110c:	c5 91       	lpm	r28, Z+
    110e:	dd 27       	eor	r29, r29
    1110:	cc 0f       	add	r28, r28
    1112:	dd 1f       	adc	r29, r29
    1114:	c0 59       	subi	r28, 0x90	; 144
    1116:	d6 4d       	sbci	r29, 0xD6	; 214
    1118:	68 80       	ld	r6, Y
    111a:	79 80       	ldd	r7, Y+1	; 0x01
    111c:	7c 92       	st	X, r7
    111e:	6e 92       	st	-X, r6
    1120:	28 82       	st	Y, r2
    1122:	39 82       	std	Y+1, r3	; 0x01
    1124:	4a 95       	dec	r20
    1126:	51 f7       	brne	.-44     	; 0x10fc <run+0x96>
  : "r2", "r3", "r6", "r7", "r20",
    "r26", "r27", "r28", "r29", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	7f 90       	pop	r7
    112e:	6f 90       	pop	r6
    1130:	3f 90       	pop	r3
    1132:	2f 90       	pop	r2


static inline void fht_run(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
  "push r29 \n"
  );
 
  // do first 3 butterflies - only 1 multiply, minimizes data fetches
  // initialize
  asm volatile (
    1158:	ff 24       	eor	r15, r15
    115a:	00 e1       	ldi	r16, 0x10	; 16
    115c:	e0 2e       	mov	r14, r16
    115e:	c0 e7       	ldi	r28, 0x70	; 112
    1160:	d9 e2       	ldi	r29, 0x29	; 41
    1162:	68 80       	ld	r6, Y
    1164:	79 80       	ldd	r7, Y+1	; 0x01
    1166:	4a 80       	ldd	r4, Y+2	; 0x02
    1168:	5b 80       	ldd	r5, Y+3	; 0x03
    116a:	75 94       	asr	r7
    116c:	67 94       	ror	r6
    116e:	43 01       	movw	r8, r6
    1170:	55 94       	asr	r5
    1172:	47 94       	ror	r4
    1174:	64 0c       	add	r6, r4
    1176:	75 1c       	adc	r7, r5
    1178:	84 18       	sub	r8, r4
    117a:	95 08       	sbc	r9, r5
    117c:	ac 80       	ldd	r10, Y+4	; 0x04
    117e:	bd 80       	ldd	r11, Y+5	; 0x05
    1180:	4e 80       	ldd	r4, Y+6	; 0x06
    1182:	5f 80       	ldd	r5, Y+7	; 0x07
    1184:	b5 94       	asr	r11
    1186:	a7 94       	ror	r10
    1188:	65 01       	movw	r12, r10
    118a:	55 94       	asr	r5
    118c:	47 94       	ror	r4
    118e:	a4 0c       	add	r10, r4
    1190:	b5 1c       	adc	r11, r5
    1192:	c4 18       	sub	r12, r4
    1194:	d5 08       	sbc	r13, r5
    1196:	68 85       	ldd	r22, Y+8	; 0x08
    1198:	79 85       	ldd	r23, Y+9	; 0x09
    119a:	4a 84       	ldd	r4, Y+10	; 0x0a
    119c:	5b 84       	ldd	r5, Y+11	; 0x0b
    119e:	75 95       	asr	r23
    11a0:	67 95       	ror	r22
    11a2:	8b 01       	movw	r16, r22
    11a4:	55 94       	asr	r5
    11a6:	47 94       	ror	r4
    11a8:	64 0d       	add	r22, r4
    11aa:	75 1d       	adc	r23, r5
    11ac:	04 19       	sub	r16, r4
    11ae:	15 09       	sbc	r17, r5
    11b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b4:	4e 84       	ldd	r4, Y+14	; 0x0e
    11b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	9c 01       	movw	r18, r24
    11be:	55 94       	asr	r5
    11c0:	47 94       	ror	r4
    11c2:	84 0d       	add	r24, r4
    11c4:	95 1d       	adc	r25, r5
    11c6:	24 19       	sub	r18, r4
    11c8:	35 09       	sbc	r19, r5
    11ca:	75 94       	asr	r7
    11cc:	67 94       	ror	r6
    11ce:	23 01       	movw	r4, r6
    11d0:	b5 94       	asr	r11
    11d2:	a7 94       	ror	r10
    11d4:	6a 0c       	add	r6, r10
    11d6:	7b 1c       	adc	r7, r11
    11d8:	4a 18       	sub	r4, r10
    11da:	5b 08       	sbc	r5, r11
    11dc:	95 94       	asr	r9
    11de:	87 94       	ror	r8
    11e0:	54 01       	movw	r10, r8
    11e2:	d5 94       	asr	r13
    11e4:	c7 94       	ror	r12
    11e6:	8c 0c       	add	r8, r12
    11e8:	9d 1c       	adc	r9, r13
    11ea:	ac 18       	sub	r10, r12
    11ec:	bd 08       	sbc	r11, r13
    11ee:	75 95       	asr	r23
    11f0:	67 95       	ror	r22
    11f2:	6b 01       	movw	r12, r22
    11f4:	95 95       	asr	r25
    11f6:	87 95       	ror	r24
    11f8:	68 0f       	add	r22, r24
    11fa:	79 1f       	adc	r23, r25
    11fc:	c8 1a       	sub	r12, r24
    11fe:	d9 0a       	sbc	r13, r25
    1200:	75 94       	asr	r7
    1202:	67 94       	ror	r6
    1204:	13 01       	movw	r2, r6
    1206:	75 95       	asr	r23
    1208:	67 95       	ror	r22
    120a:	66 0e       	add	r6, r22
    120c:	77 1e       	adc	r7, r23
    120e:	26 1a       	sub	r2, r22
    1210:	37 0a       	sbc	r3, r23
    1212:	42 e8       	ldi	r20, 0x82	; 130
    1214:	5a e5       	ldi	r21, 0x5A	; 90
    1216:	15 03       	mulsu	r17, r21
    1218:	c0 01       	movw	r24, r0
    121a:	04 9f       	mul	r16, r20
    121c:	b0 01       	movw	r22, r0
    121e:	14 03       	mulsu	r17, r20
    1220:	9f 09       	sbc	r25, r15
    1222:	70 0d       	add	r23, r0
    1224:	81 1d       	adc	r24, r1
    1226:	9f 1d       	adc	r25, r15
    1228:	50 9f       	mul	r21, r16
    122a:	70 0d       	add	r23, r0
    122c:	81 1d       	adc	r24, r1
    122e:	9f 1d       	adc	r25, r15
    1230:	95 94       	asr	r9
    1232:	87 94       	ror	r8
    1234:	84 01       	movw	r16, r8
    1236:	88 0e       	add	r8, r24
    1238:	99 1e       	adc	r9, r25
    123a:	08 1b       	sub	r16, r24
    123c:	19 0b       	sbc	r17, r25
    123e:	55 94       	asr	r5
    1240:	47 94       	ror	r4
    1242:	d2 01       	movw	r26, r4
    1244:	d5 94       	asr	r13
    1246:	c7 94       	ror	r12
    1248:	4c 0c       	add	r4, r12
    124a:	5d 1c       	adc	r5, r13
    124c:	ac 19       	sub	r26, r12
    124e:	bd 09       	sbc	r27, r13
    1250:	35 03       	mulsu	r19, r21
    1252:	c0 01       	movw	r24, r0
    1254:	24 9f       	mul	r18, r20
    1256:	b0 01       	movw	r22, r0
    1258:	34 03       	mulsu	r19, r20
    125a:	9f 09       	sbc	r25, r15
    125c:	70 0d       	add	r23, r0
    125e:	81 1d       	adc	r24, r1
    1260:	9f 1d       	adc	r25, r15
    1262:	52 9f       	mul	r21, r18
    1264:	70 0d       	add	r23, r0
    1266:	81 1d       	adc	r24, r1
    1268:	9f 1d       	adc	r25, r15
    126a:	b5 94       	asr	r11
    126c:	a7 94       	ror	r10
    126e:	65 01       	movw	r12, r10
    1270:	a8 0e       	add	r10, r24
    1272:	b9 1e       	adc	r11, r25
    1274:	c8 1a       	sub	r12, r24
    1276:	d9 0a       	sbc	r13, r25
    1278:	69 92       	st	Y+, r6
    127a:	79 92       	st	Y+, r7
    127c:	89 92       	st	Y+, r8
    127e:	99 92       	st	Y+, r9
    1280:	49 92       	st	Y+, r4
    1282:	59 92       	st	Y+, r5
    1284:	a9 92       	st	Y+, r10
    1286:	b9 92       	st	Y+, r11
    1288:	29 92       	st	Y+, r2
    128a:	39 92       	st	Y+, r3
    128c:	09 93       	st	Y+, r16
    128e:	19 93       	st	Y+, r17
    1290:	a9 93       	st	Y+, r26
    1292:	b9 93       	st	Y+, r27
    1294:	c9 92       	st	Y+, r12
    1296:	d9 92       	st	Y+, r13
    1298:	ea 94       	dec	r14
    129a:	09 f0       	breq	.+2      	; 0x129e <run+0x238>
    129c:	62 cf       	rjmp	.-316    	; 0x1162 <run+0xfc>
  "rjmp 1b \n"
  );

  // remainder of the butterflies (fourth and higher)
  // initialize
  asm volatile (
    129e:	00 e2       	ldi	r16, 0x20	; 32
    12a0:	c0 2e       	mov	r12, r16
    12a2:	dd 24       	eor	r13, r13
    12a4:	0a e2       	ldi	r16, 0x2A	; 42
    12a6:	90 2e       	mov	r9, r16
    12a8:	ee eb       	ldi	r30, 0xBE	; 190
    12aa:	f6 e0       	ldi	r31, 0x06	; 6
    12ac:	00 e1       	ldi	r16, 0x10	; 16
    12ae:	a0 2e       	mov	r10, r16
    12b0:	bb 24       	eor	r11, r11
    12b2:	04 e0       	ldi	r16, 0x04	; 4
    12b4:	e0 2e       	mov	r14, r16
    12b6:	a0 e7       	ldi	r26, 0x70	; 112
    12b8:	b9 e2       	ldi	r27, 0x29	; 41
    12ba:	ed 01       	movw	r28, r26
    12bc:	ca 0d       	add	r28, r10
    12be:	db 1d       	adc	r29, r11
    12c0:	8e 2c       	mov	r8, r14
    12c2:	2d 90       	ld	r2, X+
    12c4:	3c 90       	ld	r3, X
    12c6:	48 80       	ld	r4, Y
    12c8:	59 80       	ldd	r5, Y+1	; 0x01
    12ca:	35 94       	asr	r3
    12cc:	27 94       	ror	r2
    12ce:	31 01       	movw	r6, r2
    12d0:	55 94       	asr	r5
    12d2:	47 94       	ror	r4
    12d4:	64 0c       	add	r6, r4
    12d6:	75 1c       	adc	r7, r5
    12d8:	24 18       	sub	r2, r4
    12da:	35 08       	sbc	r3, r5
    12dc:	29 92       	st	Y+, r2
    12de:	39 92       	st	Y+, r3
    12e0:	7c 92       	st	X, r7
    12e2:	6e 92       	st	-X, r6
    12e4:	ac 0d       	add	r26, r12
    12e6:	bd 1d       	adc	r27, r13
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	ea 94       	dec	r14
    12ec:	08 81       	ld	r16, Y
    12ee:	19 81       	ldd	r17, Y+1	; 0x01
    12f0:	3c 91       	ld	r19, X
    12f2:	2e 91       	ld	r18, -X
    12f4:	45 91       	lpm	r20, Z+
    12f6:	55 91       	lpm	r21, Z+
    12f8:	65 91       	lpm	r22, Z+
    12fa:	75 91       	lpm	r23, Z+
    12fc:	15 02       	muls	r17, r21
    12fe:	20 01       	movw	r4, r0
    1300:	04 9f       	mul	r16, r20
    1302:	10 01       	movw	r2, r0
    1304:	14 03       	mulsu	r17, r20
    1306:	5f 08       	sbc	r5, r15
    1308:	30 0c       	add	r3, r0
    130a:	41 1c       	adc	r4, r1
    130c:	5f 1c       	adc	r5, r15
    130e:	50 9f       	mul	r21, r16
    1310:	30 0c       	add	r3, r0
    1312:	41 1c       	adc	r4, r1
    1314:	5f 1c       	adc	r5, r15
    1316:	37 02       	muls	r19, r23
    1318:	30 01       	movw	r6, r0
    131a:	26 9f       	mul	r18, r22
    131c:	20 0c       	add	r2, r0
    131e:	31 1c       	adc	r3, r1
    1320:	46 1c       	adc	r4, r6
    1322:	57 1c       	adc	r5, r7
    1324:	36 03       	mulsu	r19, r22
    1326:	5f 08       	sbc	r5, r15
    1328:	30 0c       	add	r3, r0
    132a:	41 1c       	adc	r4, r1
    132c:	5f 1c       	adc	r5, r15
    132e:	72 9f       	mul	r23, r18
    1330:	30 0c       	add	r3, r0
    1332:	41 1c       	adc	r4, r1
    1334:	5f 1c       	adc	r5, r15
    1336:	0e 01       	movw	r0, r28
    1338:	ca 19       	sub	r28, r10
    133a:	db 09       	sbc	r29, r11
    133c:	28 80       	ld	r2, Y
    133e:	39 80       	ldd	r3, Y+1	; 0x01
    1340:	35 94       	asr	r3
    1342:	27 94       	ror	r2
    1344:	31 01       	movw	r6, r2
    1346:	64 0c       	add	r6, r4
    1348:	75 1c       	adc	r7, r5
    134a:	24 18       	sub	r2, r4
    134c:	35 08       	sbc	r3, r5
    134e:	68 82       	st	Y, r6
    1350:	79 82       	std	Y+1, r7	; 0x01
    1352:	e0 01       	movw	r28, r0
    1354:	29 92       	st	Y+, r2
    1356:	39 92       	st	Y+, r3
    1358:	17 02       	muls	r17, r23
    135a:	20 01       	movw	r4, r0
    135c:	06 9f       	mul	r16, r22
    135e:	10 01       	movw	r2, r0
    1360:	16 03       	mulsu	r17, r22
    1362:	5f 08       	sbc	r5, r15
    1364:	30 0c       	add	r3, r0
    1366:	41 1c       	adc	r4, r1
    1368:	5f 1c       	adc	r5, r15
    136a:	70 9f       	mul	r23, r16
    136c:	30 0c       	add	r3, r0
    136e:	41 1c       	adc	r4, r1
    1370:	5f 1c       	adc	r5, r15
    1372:	35 02       	muls	r19, r21
    1374:	30 01       	movw	r6, r0
    1376:	24 9f       	mul	r18, r20
    1378:	20 18       	sub	r2, r0
    137a:	31 08       	sbc	r3, r1
    137c:	46 08       	sbc	r4, r6
    137e:	57 08       	sbc	r5, r7
    1380:	34 03       	mulsu	r19, r20
    1382:	5f 1c       	adc	r5, r15
    1384:	30 18       	sub	r3, r0
    1386:	41 08       	sbc	r4, r1
    1388:	5f 08       	sbc	r5, r15
    138a:	52 9f       	mul	r21, r18
    138c:	30 18       	sub	r3, r0
    138e:	41 08       	sbc	r4, r1
    1390:	5f 08       	sbc	r5, r15
    1392:	0d 01       	movw	r0, r26
    1394:	aa 19       	sub	r26, r10
    1396:	bb 09       	sbc	r27, r11
    1398:	2d 90       	ld	r2, X+
    139a:	3c 90       	ld	r3, X
    139c:	35 94       	asr	r3
    139e:	27 94       	ror	r2
    13a0:	31 01       	movw	r6, r2
    13a2:	64 0c       	add	r6, r4
    13a4:	75 1c       	adc	r7, r5
    13a6:	24 18       	sub	r2, r4
    13a8:	35 08       	sbc	r3, r5
    13aa:	7c 92       	st	X, r7
    13ac:	6e 92       	st	-X, r6
    13ae:	d0 01       	movw	r26, r0
    13b0:	2d 92       	st	X+, r2
    13b2:	3c 92       	st	X, r3
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	ea 94       	dec	r14
    13b8:	09 f0       	breq	.+2      	; 0x13bc <run+0x356>
    13ba:	98 cf       	rjmp	.-208    	; 0x12ec <run+0x286>
    13bc:	de 01       	movw	r26, r28
    13be:	aa 19       	sub	r26, r10
    13c0:	bb 09       	sbc	r27, r11
    13c2:	2d 90       	ld	r2, X+
    13c4:	3c 90       	ld	r3, X
    13c6:	48 80       	ld	r4, Y
    13c8:	59 80       	ldd	r5, Y+1	; 0x01
    13ca:	35 94       	asr	r3
    13cc:	27 94       	ror	r2
    13ce:	31 01       	movw	r6, r2
    13d0:	55 94       	asr	r5
    13d2:	47 94       	ror	r4
    13d4:	64 0c       	add	r6, r4
    13d6:	75 1c       	adc	r7, r5
    13d8:	24 18       	sub	r2, r4
    13da:	35 08       	sbc	r3, r5
    13dc:	28 82       	st	Y, r2
    13de:	39 82       	std	Y+1, r3	; 0x01
    13e0:	7c 92       	st	X, r7
    13e2:	6e 92       	st	-X, r6
    13e4:	c5 01       	movw	r24, r10
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	c8 0f       	add	r28, r24
    13ec:	d9 1f       	adc	r29, r25
    13ee:	c0 37       	cpi	r28, 0x70	; 112
    13f0:	d9 05       	cpc	r29, r9
    13f2:	40 f4       	brcc	.+16     	; 0x1404 <run+0x39e>
    13f4:	de 01       	movw	r26, r28
    13f6:	ca 0d       	add	r28, r10
    13f8:	db 1d       	adc	r29, r11
    13fa:	e8 2c       	mov	r14, r8
    13fc:	ea 19       	sub	r30, r10
    13fe:	fb 09       	sbc	r31, r11
    1400:	34 96       	adiw	r30, 0x04	; 4
    1402:	5f cf       	rjmp	.-322    	; 0x12c2 <run+0x25c>
    1404:	85 fc       	sbrc	r8, 5
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <run+0x3ae>
    1408:	ea 2c       	mov	r14, r10
    140a:	e6 94       	lsr	r14
    140c:	56 01       	movw	r10, r12
    140e:	cc 0c       	add	r12, r12
    1410:	dd 1c       	adc	r13, r13
    1412:	51 cf       	rjmp	.-350    	; 0x12b6 <run+0x250>
   "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "r24", "r25",
   "r26", "r27", "r28", "r29", "r30", "r31" // clobber list for whole thing
  );

  // get the clobbers off the stack
  asm volatile (
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	7f 90       	pop	r7
    142e:	6f 90       	pop	r6
    1430:	5f 90       	pop	r5
    1432:	4f 90       	pop	r4
    1434:	3f 90       	pop	r3
    1436:	2f 90       	pop	r2
    1438:	11 24       	eor	r1, r1
}

static inline void fht_mag_lin(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    143a:	2f 92       	push	r2
    143c:	3f 92       	push	r3
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this returns an 16b unsigned value which is 16*((img^2 + real^2)^0.5)
  asm volatile (
    1452:	a0 e7       	ldi	r26, 0x70	; 112
    1454:	b9 e2       	ldi	r27, 0x29	; 41
    1456:	cd ea       	ldi	r28, 0xAD	; 173
    1458:	d5 e2       	ldi	r29, 0x25	; 37
    145a:	e0 e7       	ldi	r30, 0x70	; 112
    145c:	fa e2       	ldi	r31, 0x2A	; 42
    145e:	4f 01       	movw	r8, r30
    1460:	ff 24       	eor	r15, r15
    1462:	40 e4       	ldi	r20, 0x40	; 64
    1464:	0d 91       	ld	r16, X+
    1466:	1d 91       	ld	r17, X+
    1468:	98 01       	movw	r18, r16
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <run+0x412>
    146c:	f4 01       	movw	r30, r8
    146e:	0d 91       	ld	r16, X+
    1470:	1d 91       	ld	r17, X+
    1472:	32 91       	ld	r19, -Z
    1474:	22 91       	ld	r18, -Z
    1476:	4f 01       	movw	r8, r30
    1478:	11 02       	muls	r17, r17
    147a:	20 01       	movw	r4, r0
    147c:	00 9f       	mul	r16, r16
    147e:	10 01       	movw	r2, r0
    1480:	98 03       	fmulsu	r17, r16
    1482:	5f 08       	sbc	r5, r15
    1484:	30 0c       	add	r3, r0
    1486:	41 1c       	adc	r4, r1
    1488:	5f 1c       	adc	r5, r15
    148a:	33 02       	muls	r19, r19
    148c:	30 01       	movw	r6, r0
    148e:	22 9f       	mul	r18, r18
    1490:	20 0c       	add	r2, r0
    1492:	31 1c       	adc	r3, r1
    1494:	46 1c       	adc	r4, r6
    1496:	57 1c       	adc	r5, r7
    1498:	ba 03       	fmulsu	r19, r18
    149a:	5f 08       	sbc	r5, r15
    149c:	30 0c       	add	r3, r0
    149e:	41 1c       	adc	r4, r1
    14a0:	5f 1c       	adc	r5, r15
    14a2:	11 27       	eor	r17, r17
    14a4:	55 20       	and	r5, r5
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <run+0x45a>
    14a8:	18 e0       	ldi	r17, 0x08	; 8
    14aa:	f2 01       	movw	r30, r4
    14ac:	f0 34       	cpi	r31, 0x40	; 64
    14ae:	28 f5       	brcc	.+74     	; 0x14fa <run+0x494>
    14b0:	33 0c       	add	r3, r3
    14b2:	ee 1f       	adc	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	33 0c       	add	r3, r3
    14b8:	ee 1f       	adc	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	1a 95       	dec	r17
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <run+0x494>
    14c0:	44 20       	and	r4, r4
    14c2:	69 f0       	breq	.+26     	; 0x14de <run+0x478>
    14c4:	14 e0       	ldi	r17, 0x04	; 4
    14c6:	f4 2d       	mov	r31, r4
    14c8:	e3 2d       	mov	r30, r3
    14ca:	f0 34       	cpi	r31, 0x40	; 64
    14cc:	b0 f4       	brcc	.+44     	; 0x14fa <run+0x494>
    14ce:	22 0c       	add	r2, r2
    14d0:	ee 1f       	adc	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	22 0c       	add	r2, r2
    14d6:	ee 1f       	adc	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	1a 95       	dec	r17
    14dc:	f6 cf       	rjmp	.-20     	; 0x14ca <run+0x464>
    14de:	f1 01       	movw	r30, r2
    14e0:	f0 34       	cpi	r31, 0x40	; 64
    14e2:	58 f4       	brcc	.+22     	; 0x14fa <run+0x494>
    14e4:	f0 31       	cpi	r31, 0x10	; 16
    14e6:	60 f4       	brcc	.+24     	; 0x1500 <run+0x49a>
    14e8:	f1 30       	cpi	r31, 0x01	; 1
    14ea:	78 f0       	brcs	.+30     	; 0x150a <run+0x4a4>
    14ec:	f2 95       	swap	r31
    14ee:	e2 95       	swap	r30
    14f0:	ef 70       	andi	r30, 0x0F	; 15
    14f2:	ef 2b       	or	r30, r31
    14f4:	e6 95       	lsr	r30
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <run+0x4a4>
    14fa:	ef 2f       	mov	r30, r31
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <run+0x4a4>
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	ef 2f       	mov	r30, r31
    1506:	e0 68       	ori	r30, 0x80	; 128
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	e2 5b       	subi	r30, 0xB2	; 178
    150c:	fc 4f       	sbci	r31, 0xFC	; 252
    150e:	04 91       	lpm	r16, Z
    1510:	22 27       	eor	r18, r18
    1512:	11 23       	and	r17, r17
    1514:	21 f0       	breq	.+8      	; 0x151e <run+0x4b8>
    1516:	00 0f       	add	r16, r16
    1518:	22 1f       	adc	r18, r18
    151a:	1a 95       	dec	r17
    151c:	e1 f7       	brne	.-8      	; 0x1516 <run+0x4b0>
    151e:	09 93       	st	Y+, r16
    1520:	29 93       	st	Y+, r18
    1522:	4a 95       	dec	r20
    1524:	09 f0       	breq	.+2      	; 0x1528 <run+0x4c2>
    1526:	a2 cf       	rjmp	.-188    	; 0x146c <run+0x406>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r16", "r17", "r26", "r27",
   "r28", "r29", "r30", "r31", "r15", "r18", "r19", "r20", "r8" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	11 24       	eor	r1, r1
	fht_window(); // window the data for better frequency response
	fht_reorder(); // reorder the data before doing the fht
	fht_run(); // process the data in the fht
	fht_mag_lin(); // take the output of the fht
	
	updateLEDs();
    1542:	28 db       	rcall	.-2480   	; 0xb94 <updateLEDs>
	flag_fft = false;
    1544:	10 92 fe 20 	sts	0x20FE, r1
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	af 90       	pop	r10
    155c:	9f 90       	pop	r9
    155e:	8f 90       	pop	r8
    1560:	7f 90       	pop	r7
    1562:	6f 90       	pop	r6
    1564:	5f 90       	pop	r5
    1566:	4f 90       	pop	r4
    1568:	3f 90       	pop	r3
    156a:	2f 90       	pop	r2
    156c:	08 95       	ret

0000156e <write_byte_eeprom>:

/*
	return false when the procedure was failed, true when success
*/
bool write_byte_eeprom(uint8_t addr, uint8_t data)
{
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	16 2f       	mov	r17, r22
	uint8_t rev_data;
	
	nvm_eeprom_write_byte(addr, data);
    1576:	c8 2f       	mov	r28, r24
    1578:	d0 e0       	ldi	r29, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <nvm_eeprom_write_byte>
	rev_data = nvm_eeprom_read_byte(addr);
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <nvm_eeprom_read_byte>
	if (rev_data == data)
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	18 13       	cpse	r17, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else
	{
		return false;
	}	
    158c:	89 2f       	mov	r24, r25
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <init_i2c>:
		.no_wait		= false
	};
	
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	29 97       	sbiw	r28, 0x09	; 9
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	9a e1       	ldi	r25, 0x1A	; 26
    15a8:	a6 e0       	ldi	r26, 0x06	; 6
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	ab 83       	std	Y+3, r26	; 0x03
    15b2:	bc 83       	std	Y+4, r27	; 0x04
    15b4:	83 e2       	ldi	r24, 0x23	; 35
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	af 83       	std	Y+7, r26	; 0x07
    15c2:	b8 87       	std	Y+8, r27	; 0x08
    15c4:	80 e5       	ldi	r24, 0x50	; 80
    15c6:	89 87       	std	Y+9, r24	; 0x09
    15c8:	60 e4       	ldi	r22, 0x40	; 64
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <sysclk_enable_module>
    15d0:	be 01       	movw	r22, r28
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	0e 94 bb 1a 	call	0x3576	; 0x3576 <twi_master_init>
    15de:	e0 e8       	ldi	r30, 0x80	; 128
    15e0:	f4 e0       	ldi	r31, 0x04	; 4
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 60       	ori	r24, 0x08	; 8
    15e6:	81 83       	std	Z+1, r24	; 0x01
    15e8:	78 94       	sei
    15ea:	29 96       	adiw	r28, 0x09	; 9
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <init_mtch6301>:
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	59 e1       	ldi	r21, 0x19	; 25
    15fa:	60 e2       	ldi	r22, 0x20	; 32
    15fc:	80 e4       	ldi	r24, 0x40	; 64
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	80 93 b0 00 	sts	0x00B0, r24
    160a:	e0 e4       	ldi	r30, 0x40	; 64
    160c:	f6 e0       	ldi	r31, 0x06	; 6
    160e:	82 87       	std	Z+10, r24	; 0x0a
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	81 87       	std	Z+9, r24	; 0x09
    1614:	e0 ea       	ldi	r30, 0xA0	; 160
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	78 94       	sei
    1620:	08 95       	ret

00001622 <init_mtchio>:
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	60 e2       	ldi	r22, 0x20	; 32
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	96 e0       	ldi	r25, 0x06	; 6
    162c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	60 e4       	ldi	r22, 0x40	; 64
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	96 e0       	ldi	r25, 0x06	; 6
    163a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e8       	ldi	r22, 0x80	; 128
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	96 e0       	ldi	r25, 0x06	; 6
    1648:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e4       	ldi	r22, 0x40	; 64
    1652:	80 e6       	ldi	r24, 0x60	; 96
    1654:	96 e0       	ldi	r25, 0x06	; 6
    1656:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	80 ee       	ldi	r24, 0xE0	; 224
    1662:	97 e0       	ldi	r25, 0x07	; 7
    1664:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	80 e6       	ldi	r24, 0x60	; 96
    1670:	96 e0       	ldi	r25, 0x06	; 6
    1672:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	80 e6       	ldi	r24, 0x60	; 96
    167e:	96 e0       	ldi	r25, 0x06	; 6
    1680:	0c 94 81 15 	jmp	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1684:	08 95       	ret

00001686 <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	2f 93       	push	r18
    1696:	3f 93       	push	r19
    1698:	4f 93       	push	r20
    169a:	5f 93       	push	r21
    169c:	6f 93       	push	r22
    169e:	7f 93       	push	r23
    16a0:	8f 93       	push	r24
    16a2:	9f 93       	push	r25
    16a4:	af 93       	push	r26
    16a6:	bf 93       	push	r27
    16a8:	ef 93       	push	r30
    16aa:	ff 93       	push	r31
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	cd b7       	in	r28, 0x3d	; 61
    16b2:	de b7       	in	r29, 0x3e	; 62
    16b4:	61 97       	sbiw	r28, 0x11	; 17
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
    16c0:	80 91 2e 21 	lds	r24, 0x212E
    16c4:	88 23       	and	r24, r24
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <__vector_9+0x4a>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <__vector_9+0x48>
    16cc:	7f c0       	rjmp	.+254    	; 0x17cc <__vector_9+0x146>
    16ce:	9c c0       	rjmp	.+312    	; 0x1808 <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
    16d0:	fe 01       	movw	r30, r28
    16d2:	3c 96       	adiw	r30, 0x0c	; 12
    16d4:	86 e0       	ldi	r24, 0x06	; 6
    16d6:	df 01       	movw	r26, r30
    16d8:	1d 92       	st	X+, r1
    16da:	8a 95       	dec	r24
    16dc:	e9 f7       	brne	.-6      	; 0x16d8 <__vector_9+0x52>
	
	twi_package_t package = {
    16de:	be 01       	movw	r22, r28
    16e0:	6f 5f       	subi	r22, 0xFF	; 255
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8b e0       	ldi	r24, 0x0B	; 11
    16e6:	db 01       	movw	r26, r22
    16e8:	1d 92       	st	X+, r1
    16ea:	8a 95       	dec	r24
    16ec:	e9 f7       	brne	.-6      	; 0x16e8 <__vector_9+0x62>
    16ee:	85 e2       	ldi	r24, 0x25	; 37
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	ef 83       	std	Y+7, r30	; 0x07
    16f4:	f8 87       	std	Y+8, r31	; 0x08
    16f6:	86 e0       	ldi	r24, 0x06	; 6
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	89 87       	std	Y+9, r24	; 0x09
    16fc:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	80 e8       	ldi	r24, 0x80	; 128
    1702:	94 e0       	ldi	r25, 0x04	; 4
    1704:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	82 fb       	bst	r24, 2
    170c:	00 27       	eor	r16, r16
    170e:	00 f9       	bld	r16, 0
    1710:	10 e0       	ldi	r17, 0x00	; 0
    1712:	00 93 71 2a 	sts	0x2A71, r16
	
	if (m_touch_pkg->tch == 0)
    1716:	01 2b       	or	r16, r17
    1718:	09 f4       	brne	.+2      	; 0x171c <__vector_9+0x96>
    171a:	76 c0       	rjmp	.+236    	; 0x1808 <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    171c:	a0 e7       	ldi	r26, 0x70	; 112
    171e:	ba e2       	ldi	r27, 0x2A	; 42
    1720:	88 77       	andi	r24, 0x78	; 120
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	95 95       	asr	r25
    1726:	87 95       	ror	r24
    1728:	95 95       	asr	r25
    172a:	87 95       	ror	r24
    172c:	95 95       	asr	r25
    172e:	87 95       	ror	r24
    1730:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    1732:	8e 85       	ldd	r24, Y+14	; 0x0e
    1734:	e8 2f       	mov	r30, r24
    1736:	ef 77       	andi	r30, 0x7F	; 127
    1738:	17 96       	adiw	r26, 0x07	; 7
    173a:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    173c:	8e 2f       	mov	r24, r30
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	fc 01       	movw	r30, r24
    1742:	70 97       	sbiw	r30, 0x10	; 16
    1744:	e3 35       	cpi	r30, 0x53	; 83
    1746:	f1 05       	cpc	r31, r1
    1748:	d8 f5       	brcc	.+118    	; 0x17c0 <__vector_9+0x13a>
    174a:	ea 5a       	subi	r30, 0xAA	; 170
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    1752:	80 ea       	ldi	r24, 0xA0	; 160
    1754:	80 93 23 21 	sts	0x2123, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	35 c0       	rjmp	.+106    	; 0x17c6 <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    175c:	81 ea       	ldi	r24, 0xA1	; 161
    175e:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	30 c0       	rjmp	.+96     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    1766:	82 ea       	ldi	r24, 0xA2	; 162
    1768:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	2b c0       	rjmp	.+86     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    1770:	83 ea       	ldi	r24, 0xA3	; 163
    1772:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    1776:	84 e0       	ldi	r24, 0x04	; 4
    1778:	26 c0       	rjmp	.+76     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    177a:	83 ea       	ldi	r24, 0xA3	; 163
    177c:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	21 c0       	rjmp	.+66     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    1784:	84 ea       	ldi	r24, 0xA4	; 164
    1786:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    178a:	85 e0       	ldi	r24, 0x05	; 5
    178c:	1c c0       	rjmp	.+56     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    178e:	84 ea       	ldi	r24, 0xA4	; 164
    1790:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    1794:	85 e0       	ldi	r24, 0x05	; 5
    1796:	17 c0       	rjmp	.+46     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    1798:	85 ea       	ldi	r24, 0xA5	; 165
    179a:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    179e:	86 e0       	ldi	r24, 0x06	; 6
    17a0:	12 c0       	rjmp	.+36     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    17a2:	85 ea       	ldi	r24, 0xA5	; 165
    17a4:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    17a8:	86 e0       	ldi	r24, 0x06	; 6
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    17ac:	86 ea       	ldi	r24, 0xA6	; 166
    17ae:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    17b2:	87 e0       	ldi	r24, 0x07	; 7
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    17b6:	86 ea       	ldi	r24, 0xA6	; 166
    17b8:	80 93 23 21 	sts	0x2123, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    17bc:	87 e0       	ldi	r24, 0x07	; 7
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    17c0:	10 92 23 21 	sts	0x2123, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    17c6:	80 93 2d 21 	sts	0x212D, r24
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    17cc:	be 01       	movw	r22, r28
    17ce:	6f 5f       	subi	r22, 0xFF	; 255
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8b e0       	ldi	r24, 0x0B	; 11
    17d4:	fb 01       	movw	r30, r22
    17d6:	11 92       	st	Z+, r1
    17d8:	8a 95       	dec	r24
    17da:	e9 f7       	brne	.-6      	; 0x17d6 <__vector_9+0x150>
    17dc:	85 e2       	ldi	r24, 0x25	; 37
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	04 e2       	ldi	r16, 0x24	; 36
    17e2:	11 e2       	ldi	r17, 0x21	; 33
    17e4:	0f 83       	std	Y+7, r16	; 0x07
    17e6:	18 87       	std	Y+8, r17	; 0x08
    17e8:	89 e0       	ldi	r24, 0x09	; 9
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	89 87       	std	Y+9, r24	; 0x09
    17ee:	9a 87       	std	Y+10, r25	; 0x0a
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	80 e8       	ldi	r24, 0x80	; 128
    17f4:	94 e0       	ldi	r25, 0x04	; 4
    17f6:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    17fa:	10 92 2e 21 	sts	0x212E, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    17fe:	d8 01       	movw	r26, r16
    1800:	13 96       	adiw	r26, 0x03	; 3
    1802:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    1804:	80 93 d4 20 	sts	0x20D4, r24
			break;
		default:
			return;
	}
    1808:	61 96       	adiw	r28, 0x11	; 17
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	ff 91       	pop	r31
    1814:	ef 91       	pop	r30
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <timer4_overflow_interrupt_callback>:
	//wdt_reset(); // kick the watchdog - DEPRECATED
	
	tc45_clear_overflow(&TCD5);
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}
    1838:	e0 e0       	ldi	r30, 0x00	; 0
    183a:	f8 e0       	ldi	r31, 0x08	; 8
    183c:	84 85       	ldd	r24, Z+12	; 0x0c
    183e:	81 60       	ori	r24, 0x01	; 1
    1840:	84 87       	std	Z+12, r24	; 0x0c
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	80 93 79 2a 	sts	0x2A79, r24
    1848:	9f b7       	in	r25, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	e0 e0       	ldi	r30, 0x00	; 0
    184e:	f2 e0       	ldi	r31, 0x02	; 2
    1850:	80 81       	ld	r24, Z
    1852:	84 60       	ori	r24, 0x04	; 4
    1854:	80 83       	st	Z, r24
    1856:	9f bf       	out	0x3f, r25	; 63
    1858:	08 95       	ret

0000185a <timer5_overflow_interrupt_callback>:
	/*
	#ifdef ZXL_WDT_ENABLE
		wdt_reset();
	#endif
	*/
	flag_timer5 = true;/*
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	80 93 78 2a 	sts	0x2A78, r24
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTFLAGS |= TC5_OVFIF_bm;
    1860:	e0 e4       	ldi	r30, 0x40	; 64
    1862:	f8 e0       	ldi	r31, 0x08	; 8
    1864:	84 85       	ldd	r24, Z+12	; 0x0c
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	84 87       	std	Z+12, r24	; 0x0c
	if (flag_initcharge) {
		flag_initcharge = false;
		init_charge();
	}*/
	tc45_clear_overflow(&TCC5);
	update_led_charge();
    186a:	2e c3       	rjmp	.+1628   	; 0x1ec8 <update_led_charge>
    186c:	08 95       	ret

0000186e <init_timer4>:
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}

void init_timer4(void)
{
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
	/*
	 * Configure TCC4 to generate 50ms overflow interrupt
	 * using 4MHz (0.25us) resolution clock (20us = 80 * 0.25us)
	 */
	/* Unmask clock for TCC4 */
	tc45_enable(&TCC4);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	98 e0       	ldi	r25, 0x08	; 8
    1876:	0e 94 73 19 	call	0x32e6	; 0x32e6 <tc45_enable>
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    187a:	c0 e0       	ldi	r28, 0x00	; 0
    187c:	d8 e0       	ldi	r29, 0x08	; 8
    187e:	8e 81       	ldd	r24, Y+6	; 0x06
    1880:	8c 7f       	andi	r24, 0xFC	; 252
    1882:	8e 83       	std	Y+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    1884:	8e 81       	ldd	r24, Y+6	; 0x06
    1886:	81 60       	ori	r24, 0x01	; 1
    1888:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	88 7f       	andi	r24, 0xF8	; 248
    188e:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC4,	timer4_overflow_interrupt_callback);
    1890:	6c e1       	ldi	r22, 0x1C	; 28
    1892:	7c e0       	ldi	r23, 0x0C	; 12
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	0e 94 d7 19 	call	0x33ae	; 0x33ae <tc45_set_overflow_interrupt_callback>
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    189c:	80 e5       	ldi	r24, 0x50	; 80
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	8e a3       	std	Y+38, r24	; 0x26
    18a2:	9f a3       	std	Y+39, r25	; 0x27
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    18a4:	88 81       	ld	r24, Y
    18a6:	80 7f       	andi	r24, 0xF0	; 240
    18a8:	84 60       	ori	r24, 0x04	; 4
    18aa:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    18ac:	e0 ea       	ldi	r30, 0xA0	; 160
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	81 60       	ori	r24, 0x01	; 1
    18b4:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCC4, 80);
	tc45_set_resolution(&TCC4, 4000000);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    18b6:	78 94       	sei
}
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	08 95       	ret

000018be <init_timer5>:

void init_timer5(void)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    18c2:	c0 e4       	ldi	r28, 0x40	; 64
    18c4:	d8 e0       	ldi	r29, 0x08	; 8
    18c6:	8e 81       	ldd	r24, Y+6	; 0x06
    18c8:	8c 7f       	andi	r24, 0xFC	; 252
    18ca:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	82 60       	ori	r24, 0x02	; 2
    18d0:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	88 7f       	andi	r24, 0xF8	; 248
    18d6:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC5, TC45_INT_LVL_MED);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC5,	timer5_overflow_interrupt_callback);
    18d8:	6d e2       	ldi	r22, 0x2D	; 45
    18da:	7c e0       	ldi	r23, 0x0C	; 12
    18dc:	80 e4       	ldi	r24, 0x40	; 64
    18de:	98 e0       	ldi	r25, 0x08	; 8
    18e0:	0e 94 d7 19 	call	0x33ae	; 0x33ae <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    18e4:	84 e2       	ldi	r24, 0x24	; 36
    18e6:	94 ef       	ldi	r25, 0xF4	; 244
    18e8:	8e a3       	std	Y+38, r24	; 0x26
    18ea:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    18ec:	88 81       	ld	r24, Y
    18ee:	80 7f       	andi	r24, 0xF0	; 240
    18f0:	86 60       	ori	r24, 0x06	; 6
    18f2:	88 83       	st	Y, r24
    18f4:	e0 ea       	ldi	r30, 0xA0	; 160
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	82 60       	ori	r24, 0x02	; 2
    18fc:	82 83       	std	Z+2, r24	; 0x02
//	tc45_set_resolution(&TCC5, 500000);
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
    18fe:	78 94       	sei
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <init_uart>:
	}
}

uint8_t* get_current_colors(void) {
	return colors;
}
    1906:	43 e0       	ldi	r20, 0x03	; 3
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	68 e0       	ldi	r22, 0x08	; 8
    190c:	80 e6       	ldi	r24, 0x60	; 96
    190e:	96 e0       	ldi	r25, 0x06	; 6
    1910:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	64 e0       	ldi	r22, 0x04	; 4
    191a:	80 e6       	ldi	r24, 0x60	; 96
    191c:	96 e0       	ldi	r25, 0x06	; 6
    191e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <ioport_configure_port_pin>
    1922:	65 ed       	ldi	r22, 0xD5	; 213
    1924:	70 e2       	ldi	r23, 0x20	; 32
    1926:	80 ec       	ldi	r24, 0xC0	; 192
    1928:	99 e0       	ldi	r25, 0x09	; 9
    192a:	0e 94 46 1c 	call	0x388c	; 0x388c <usart_init_rs232>
    192e:	e0 ec       	ldi	r30, 0xC0	; 192
    1930:	f9 e0       	ldi	r31, 0x09	; 9
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	80 63       	ori	r24, 0x30	; 48
    1936:	82 83       	std	Z+2, r24	; 0x02
    1938:	e0 ea       	ldi	r30, 0xA0	; 160
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	84 60       	ori	r24, 0x04	; 4
    1940:	82 83       	std	Z+2, r24	; 0x02
    1942:	78 94       	sei
    1944:	08 95       	ret

00001946 <uart_send_status>:
    1946:	68 2f       	mov	r22, r24
    1948:	80 ec       	ldi	r24, 0xC0	; 192
    194a:	98 e0       	ldi	r25, 0x08	; 8
    194c:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <usart_putchar>
    1950:	08 95       	ret

00001952 <led_set_from_colors>:
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ac ed       	ldi	r26, 0xDC	; 220
    1958:	b0 e2       	ldi	r27, 0x20	; 32
    195a:	8c 91       	ld	r24, X
    195c:	e3 e9       	ldi	r30, 0x93	; 147
    195e:	fa e2       	ldi	r31, 0x2A	; 42
    1960:	80 83       	st	Z, r24
    1962:	11 96       	adiw	r26, 0x01	; 1
    1964:	8c 91       	ld	r24, X
    1966:	11 97       	sbiw	r26, 0x01	; 1
    1968:	81 83       	std	Z+1, r24	; 0x01
    196a:	12 96       	adiw	r26, 0x02	; 2
    196c:	8c 91       	ld	r24, X
    196e:	12 97       	sbiw	r26, 0x02	; 2
    1970:	82 83       	std	Z+2, r24	; 0x02
    1972:	8c 91       	ld	r24, X
    1974:	81 87       	std	Z+9, r24	; 0x09
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	8c 91       	ld	r24, X
    197a:	11 97       	sbiw	r26, 0x01	; 1
    197c:	82 87       	std	Z+10, r24	; 0x0a
    197e:	12 96       	adiw	r26, 0x02	; 2
    1980:	8c 91       	ld	r24, X
    1982:	12 97       	sbiw	r26, 0x02	; 2
    1984:	83 87       	std	Z+11, r24	; 0x0b
    1986:	13 96       	adiw	r26, 0x03	; 3
    1988:	8c 91       	ld	r24, X
    198a:	13 97       	sbiw	r26, 0x03	; 3
    198c:	83 83       	std	Z+3, r24	; 0x03
    198e:	14 96       	adiw	r26, 0x04	; 4
    1990:	8c 91       	ld	r24, X
    1992:	14 97       	sbiw	r26, 0x04	; 4
    1994:	84 83       	std	Z+4, r24	; 0x04
    1996:	15 96       	adiw	r26, 0x05	; 5
    1998:	8c 91       	ld	r24, X
    199a:	15 97       	sbiw	r26, 0x05	; 5
    199c:	85 83       	std	Z+5, r24	; 0x05
    199e:	13 96       	adiw	r26, 0x03	; 3
    19a0:	8c 91       	ld	r24, X
    19a2:	13 97       	sbiw	r26, 0x03	; 3
    19a4:	84 87       	std	Z+12, r24	; 0x0c
    19a6:	14 96       	adiw	r26, 0x04	; 4
    19a8:	8c 91       	ld	r24, X
    19aa:	14 97       	sbiw	r26, 0x04	; 4
    19ac:	85 87       	std	Z+13, r24	; 0x0d
    19ae:	15 96       	adiw	r26, 0x05	; 5
    19b0:	8c 91       	ld	r24, X
    19b2:	15 97       	sbiw	r26, 0x05	; 5
    19b4:	86 87       	std	Z+14, r24	; 0x0e
    19b6:	16 96       	adiw	r26, 0x06	; 6
    19b8:	8c 91       	ld	r24, X
    19ba:	16 97       	sbiw	r26, 0x06	; 6
    19bc:	86 83       	std	Z+6, r24	; 0x06
    19be:	17 96       	adiw	r26, 0x07	; 7
    19c0:	8c 91       	ld	r24, X
    19c2:	17 97       	sbiw	r26, 0x07	; 7
    19c4:	87 83       	std	Z+7, r24	; 0x07
    19c6:	18 96       	adiw	r26, 0x08	; 8
    19c8:	8c 91       	ld	r24, X
    19ca:	18 97       	sbiw	r26, 0x08	; 8
    19cc:	80 87       	std	Z+8, r24	; 0x08
    19ce:	16 96       	adiw	r26, 0x06	; 6
    19d0:	8c 91       	ld	r24, X
    19d2:	16 97       	sbiw	r26, 0x06	; 6
    19d4:	87 87       	std	Z+15, r24	; 0x0f
    19d6:	17 96       	adiw	r26, 0x07	; 7
    19d8:	8c 91       	ld	r24, X
    19da:	17 97       	sbiw	r26, 0x07	; 7
    19dc:	80 8b       	std	Z+16, r24	; 0x10
    19de:	18 96       	adiw	r26, 0x08	; 8
    19e0:	8c 91       	ld	r24, X
    19e2:	81 8b       	std	Z+17, r24	; 0x11
    19e4:	c0 e0       	ldi	r28, 0x00	; 0
    19e6:	d0 e0       	ldi	r29, 0x00	; 0
    19e8:	fe 01       	movw	r30, r28
    19ea:	e4 52       	subi	r30, 0x24	; 36
    19ec:	ff 4d       	sbci	r31, 0xDF	; 223
    19ee:	60 81       	ld	r22, Z
    19f0:	21 96       	adiw	r28, 0x01	; 1
    19f2:	ce 01       	movw	r24, r28
    19f4:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <nvm_eeprom_write_byte>
    19f8:	c9 30       	cpi	r28, 0x09	; 9
    19fa:	d1 05       	cpc	r29, r1
    19fc:	a9 f7       	brne	.-22     	; 0x19e8 <led_set_from_colors+0x96>
    19fe:	e9 d1       	rcall	.+978    	; 0x1dd2 <ischarging>
    1a00:	81 11       	cpse	r24, r1
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <led_set_from_colors+0xba>
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	83 e9       	ldi	r24, 0x93	; 147
    1a08:	9a e2       	ldi	r25, 0x2A	; 42
    1a0a:	4a d6       	rcall	.+3220   	; 0x26a0 <set_flash_ws2812>
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <get_pulse_state>:

bool get_pulse_state(void) {
	return pulse_state;
}
    1a12:	80 91 31 21 	lds	r24, 0x2131
    1a16:	08 95       	ret

00001a18 <get_and_clear_pulse_state_changed>:

bool get_and_clear_pulse_state_changed(void) {
	bool changed = pulse_state_changed;
    1a18:	80 91 30 21 	lds	r24, 0x2130
	pulse_state_changed = false;
    1a1c:	10 92 30 21 	sts	0x2130, r1
	return changed;
}
    1a20:	08 95       	ret

00001a22 <trigger_pulse_state_changed>:

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 30 21 	sts	0x2130, r24
    1a28:	08 95       	ret

00001a2a <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    1a4c:	80 ec       	ldi	r24, 0xC0	; 192
    1a4e:	98 e0       	ldi	r25, 0x08	; 8
    1a50:	0e 94 2b 1b 	call	0x3656	; 0x3656 <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    1a54:	90 91 34 21 	lds	r25, 0x2134
    1a58:	91 11       	cpse	r25, r1
    1a5a:	0e c0       	rjmp	.+28     	; 0x1a78 <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    1a5c:	8f 30       	cpi	r24, 0x0F	; 15
    1a5e:	49 f4       	brne	.+18     	; 0x1a72 <__vector_23+0x48>
		{
			num_rx ++;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 93 34 21 	sts	0x2134, r24
			uart_length = 6;
    1a66:	96 e0       	ldi	r25, 0x06	; 6
    1a68:	90 93 f0 20 	sts	0x20F0, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    1a6c:	80 93 33 21 	sts	0x2133, r24
    1a70:	38 c0       	rjmp	.+112    	; 0x1ae2 <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1a72:	10 92 34 21 	sts	0x2134, r1
    1a76:	35 c0       	rjmp	.+106    	; 0x1ae2 <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    1a78:	29 2f       	mov	r18, r25
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	60 91 f0 20 	lds	r22, 0x20F0
    1a80:	46 2f       	mov	r20, r22
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	4f 5f       	subi	r20, 0xFF	; 255
    1a86:	5f 4f       	sbci	r21, 0xFF	; 255
    1a88:	24 17       	cp	r18, r20
    1a8a:	35 07       	cpc	r19, r21
    1a8c:	f1 f4       	brne	.+60     	; 0x1aca <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1a8e:	10 92 34 21 	sts	0x2134, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1a92:	80 3f       	cpi	r24, 0xF0	; 240
    1a94:	a9 f4       	brne	.+42     	; 0x1ac0 <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1a96:	20 91 7b 2a 	lds	r18, 0x2A7B
    1a9a:	22 23       	and	r18, r18
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <__vector_23+0x8c>
    1a9e:	4b e7       	ldi	r20, 0x7B	; 123
    1aa0:	5a e2       	ldi	r21, 0x2A	; 42
    1aa2:	fa 01       	movw	r30, r20
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
	{
		sum += rxvalue[i];
    1aa6:	91 91       	ld	r25, Z+
    1aa8:	89 0f       	add	r24, r25
    1aaa:	9e 2f       	mov	r25, r30
    1aac:	94 1b       	sub	r25, r20

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1aae:	92 17       	cp	r25, r18
    1ab0:	d0 f3       	brcs	.-12     	; 0x1aa6 <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1ab6:	10 92 33 21 	sts	0x2133, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	44 df       	rcall	.-376    	; 0x1946 <uart_send_status>
    1abe:	11 c0       	rjmp	.+34     	; 0x1ae2 <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1ac0:	10 92 33 21 	sts	0x2133, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    1ac4:	8c e0       	ldi	r24, 0x0C	; 12
    1ac6:	3f df       	rcall	.-386    	; 0x1946 <uart_send_status>
    1ac8:	0c c0       	rjmp	.+24     	; 0x1ae2 <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    1aca:	f9 01       	movw	r30, r18
    1acc:	e6 58       	subi	r30, 0x86	; 134
    1ace:	f5 4d       	sbci	r31, 0xD5	; 213
    1ad0:	80 83       	st	Z, r24
		num_rx ++;
    1ad2:	9f 5f       	subi	r25, 0xFF	; 255
    1ad4:	90 93 34 21 	sts	0x2134, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    1ad8:	80 91 7b 2a 	lds	r24, 0x2A7B
    1adc:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    1ade:	80 93 f0 20 	sts	0x20F0, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    1ae2:	ff 91       	pop	r31
    1ae4:	ef 91       	pop	r30
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	2f 93       	push	r18
    1b10:	3f 93       	push	r19
    1b12:	4f 93       	push	r20
    1b14:	5f 93       	push	r21
    1b16:	6f 93       	push	r22
    1b18:	7f 93       	push	r23
    1b1a:	8f 93       	push	r24
    1b1c:	9f 93       	push	r25
    1b1e:	af 93       	push	r26
    1b20:	bf 93       	push	r27
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ef 93       	push	r30
    1b28:	ff 93       	push	r31
	// twinkle(buffer_data[0], buffer_data[1], buffer_data[2]);
	for (int i=0; i<11; i++) {
    1b2a:	c0 e0       	ldi	r28, 0x00	; 0
    1b2c:	d0 e0       	ldi	r29, 0x00	; 0
		buffer_data[i] = usart_getchar(&USARTD0);
    1b2e:	80 ec       	ldi	r24, 0xC0	; 192
    1b30:	99 e0       	ldi	r25, 0x09	; 9
    1b32:	0e 94 2b 1b 	call	0x3656	; 0x3656 <usart_getchar>
    1b36:	fe 01       	movw	r30, r28
    1b38:	eb 51       	subi	r30, 0x1B	; 27
    1b3a:	ff 4d       	sbci	r31, 0xDF	; 223
    1b3c:	80 83       	st	Z, r24
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	// twinkle(buffer_data[0], buffer_data[1], buffer_data[2]);
	for (int i=0; i<11; i++) {
    1b3e:	21 96       	adiw	r28, 0x01	; 1
    1b40:	cb 30       	cpi	r28, 0x0B	; 11
    1b42:	d1 05       	cpc	r29, r1
    1b44:	a1 f7       	brne	.-24     	; 0x1b2e <__vector_40+0x2a>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    1b46:	e0 91 e5 20 	lds	r30, 0x20E5
    1b4a:	8e 2f       	mov	r24, r30
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	fc 01       	movw	r30, r24
    1b50:	31 97       	sbiw	r30, 0x01	; 1
    1b52:	e0 37       	cpi	r30, 0x70	; 112
    1b54:	f1 05       	cpc	r31, r1
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <__vector_40+0x56>
    1b58:	f9 c0       	rjmp	.+498    	; 0x1d4c <__vector_40+0x248>
    1b5a:	e7 55       	subi	r30, 0x57	; 87
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__tablejump2__>
		case UART_SET_COLOR:
			send_response(UART_SET_COLOR, 0xff);
    1b62:	6f ef       	ldi	r22, 0xFF	; 255
    1b64:	83 e4       	ldi	r24, 0x43	; 67
    1b66:	b2 d3       	rcall	.+1892   	; 0x22cc <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    1b68:	a5 ee       	ldi	r26, 0xE5	; 229
    1b6a:	b0 e2       	ldi	r27, 0x20	; 32
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	8c 91       	ld	r24, X
    1b70:	12 97       	sbiw	r26, 0x02	; 2
    1b72:	e3 e9       	ldi	r30, 0x93	; 147
    1b74:	fa e2       	ldi	r31, 0x2A	; 42
    1b76:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    1b78:	13 96       	adiw	r26, 0x03	; 3
    1b7a:	8c 91       	ld	r24, X
    1b7c:	13 97       	sbiw	r26, 0x03	; 3
    1b7e:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    1b80:	14 96       	adiw	r26, 0x04	; 4
    1b82:	8c 91       	ld	r24, X
    1b84:	14 97       	sbiw	r26, 0x04	; 4
    1b86:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    1b88:	12 96       	adiw	r26, 0x02	; 2
    1b8a:	8c 91       	ld	r24, X
    1b8c:	12 97       	sbiw	r26, 0x02	; 2
    1b8e:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    1b90:	13 96       	adiw	r26, 0x03	; 3
    1b92:	8c 91       	ld	r24, X
    1b94:	13 97       	sbiw	r26, 0x03	; 3
    1b96:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    1b98:	14 96       	adiw	r26, 0x04	; 4
    1b9a:	8c 91       	ld	r24, X
    1b9c:	14 97       	sbiw	r26, 0x04	; 4
    1b9e:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    1ba0:	15 96       	adiw	r26, 0x05	; 5
    1ba2:	8c 91       	ld	r24, X
    1ba4:	15 97       	sbiw	r26, 0x05	; 5
    1ba6:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    1ba8:	16 96       	adiw	r26, 0x06	; 6
    1baa:	8c 91       	ld	r24, X
    1bac:	16 97       	sbiw	r26, 0x06	; 6
    1bae:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    1bb0:	17 96       	adiw	r26, 0x07	; 7
    1bb2:	8c 91       	ld	r24, X
    1bb4:	17 97       	sbiw	r26, 0x07	; 7
    1bb6:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    1bb8:	15 96       	adiw	r26, 0x05	; 5
    1bba:	8c 91       	ld	r24, X
    1bbc:	15 97       	sbiw	r26, 0x05	; 5
    1bbe:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    1bc0:	16 96       	adiw	r26, 0x06	; 6
    1bc2:	8c 91       	ld	r24, X
    1bc4:	16 97       	sbiw	r26, 0x06	; 6
    1bc6:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    1bc8:	17 96       	adiw	r26, 0x07	; 7
    1bca:	8c 91       	ld	r24, X
    1bcc:	17 97       	sbiw	r26, 0x07	; 7
    1bce:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    1bd0:	18 96       	adiw	r26, 0x08	; 8
    1bd2:	8c 91       	ld	r24, X
    1bd4:	18 97       	sbiw	r26, 0x08	; 8
    1bd6:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    1bd8:	19 96       	adiw	r26, 0x09	; 9
    1bda:	8c 91       	ld	r24, X
    1bdc:	19 97       	sbiw	r26, 0x09	; 9
    1bde:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    1be0:	1a 96       	adiw	r26, 0x0a	; 10
    1be2:	8c 91       	ld	r24, X
    1be4:	1a 97       	sbiw	r26, 0x0a	; 10
    1be6:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    1be8:	18 96       	adiw	r26, 0x08	; 8
    1bea:	8c 91       	ld	r24, X
    1bec:	18 97       	sbiw	r26, 0x08	; 8
    1bee:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    1bf0:	19 96       	adiw	r26, 0x09	; 9
    1bf2:	8c 91       	ld	r24, X
    1bf4:	19 97       	sbiw	r26, 0x09	; 9
    1bf6:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    1bf8:	1a 96       	adiw	r26, 0x0a	; 10
    1bfa:	8c 91       	ld	r24, X
    1bfc:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    1bfe:	c0 e0       	ldi	r28, 0x00	; 0
    1c00:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    1c02:	fe 01       	movw	r30, r28
    1c04:	e9 51       	subi	r30, 0x19	; 25
    1c06:	ff 4d       	sbci	r31, 0xDF	; 223
    1c08:	80 81       	ld	r24, Z
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e4 52       	subi	r30, 0x24	; 36
    1c0e:	ff 4d       	sbci	r31, 0xDF	; 223
    1c10:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    1c12:	60 81       	ld	r22, Z
    1c14:	21 96       	adiw	r28, 0x01	; 1
    1c16:	ce 01       	movw	r24, r28
    1c18:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    1c1c:	c9 30       	cpi	r28, 0x09	; 9
    1c1e:	d1 05       	cpc	r29, r1
    1c20:	81 f7       	brne	.-32     	; 0x1c02 <__vector_40+0xfe>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    1c22:	d7 d0       	rcall	.+430    	; 0x1dd2 <ischarging>
    1c24:	81 11       	cpse	r24, r1
    1c26:	92 c0       	rjmp	.+292    	; 0x1d4c <__vector_40+0x248>
		set_flash_ws2812(m_led_struct, 6);
    1c28:	66 e0       	ldi	r22, 0x06	; 6
    1c2a:	83 e9       	ldi	r24, 0x93	; 147
    1c2c:	9a e2       	ldi	r25, 0x2A	; 42
    1c2e:	38 d5       	rcall	.+2672   	; 0x26a0 <set_flash_ws2812>
    1c30:	8d c0       	rjmp	.+282    	; 0x1d4c <__vector_40+0x248>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    1c32:	6f ef       	ldi	r22, 0xFF	; 255
    1c34:	80 e5       	ldi	r24, 0x50	; 80
    1c36:	4a d3       	rcall	.+1684   	; 0x22cc <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    1c38:	80 91 e7 20 	lds	r24, 0x20E7
    1c3c:	88 23       	and	r24, r24
    1c3e:	19 f0       	breq	.+6      	; 0x1c46 <__vector_40+0x142>
    1c40:	81 30       	cpi	r24, 0x01	; 1
    1c42:	39 f0       	breq	.+14     	; 0x1c52 <__vector_40+0x14e>
    1c44:	0c c0       	rjmp	.+24     	; 0x1c5e <__vector_40+0x15a>
		case 0x00:
			pulse_state = false;
    1c46:	10 92 31 21 	sts	0x2131, r1
			pulse_state_changed = true;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 30 21 	sts	0x2130, r24
    1c50:	7d c0       	rjmp	.+250    	; 0x1d4c <__vector_40+0x248>
			break;
		case 0x01:
			pulse_state = true;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	80 93 31 21 	sts	0x2131, r24
			pulse_state_changed = true;
    1c58:	80 93 30 21 	sts	0x2130, r24
    1c5c:	77 c0       	rjmp	.+238    	; 0x1d4c <__vector_40+0x248>
			break;
		default:
			pulse_state = true;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 93 31 21 	sts	0x2131, r24
			pulse_state_changed = true;
    1c64:	80 93 30 21 	sts	0x2130, r24
    1c68:	71 c0       	rjmp	.+226    	; 0x1d4c <__vector_40+0x248>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    1c6a:	80 91 31 21 	lds	r24, 0x2131
    1c6e:	88 23       	and	r24, r24
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <__vector_40+0x178>
				pulse_state = false;
    1c72:	10 92 31 21 	sts	0x2131, r1
				pulse_state_changed = true;	
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 30 21 	sts	0x2130, r24
			}
			shutdown_received = true;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	80 93 2f 21 	sts	0x212F, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    1c82:	6f ef       	ldi	r22, 0xFF	; 255
    1c84:	23 d3       	rcall	.+1606   	; 0x22cc <send_response>
    1c86:	62 c0       	rjmp	.+196    	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    1c88:	e0 91 e7 20 	lds	r30, 0x20E7
    1c8c:	8e 2f       	mov	r24, r30
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	87 30       	cpi	r24, 0x07	; 7
    1c92:	91 05       	cpc	r25, r1
    1c94:	08 f0       	brcs	.+2      	; 0x1c98 <__vector_40+0x194>
    1c96:	5a c0       	rjmp	.+180    	; 0x1d4c <__vector_40+0x248>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	e7 5e       	subi	r30, 0xE7	; 231
    1c9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c9e:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    1ca2:	80 91 e8 20 	lds	r24, 0x20E8
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	80 93 40 21 	sts	0x2140, r24
    1cac:	90 93 41 21 	sts	0x2141, r25
    1cb0:	4d c0       	rjmp	.+154    	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    1cb2:	80 91 e8 20 	lds	r24, 0x20E8
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	80 93 fc 20 	sts	0x20FC, r24
    1cbc:	90 93 fd 20 	sts	0x20FD, r25
    1cc0:	45 c0       	rjmp	.+138    	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    1cc2:	80 91 e8 20 	lds	r24, 0x20E8
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	80 93 fa 20 	sts	0x20FA, r24
    1ccc:	90 93 fb 20 	sts	0x20FB, r25
    1cd0:	3d c0       	rjmp	.+122    	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    1cd2:	80 91 e8 20 	lds	r24, 0x20E8
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	80 93 f8 20 	sts	0x20F8, r24
    1cdc:	90 93 f9 20 	sts	0x20F9, r25
    1ce0:	35 c0       	rjmp	.+106    	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    1ce2:	80 91 e8 20 	lds	r24, 0x20E8
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	80 93 f6 20 	sts	0x20F6, r24
    1cec:	90 93 f7 20 	sts	0x20F7, r25
    1cf0:	2d c0       	rjmp	.+90     	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    1cf2:	80 91 e8 20 	lds	r24, 0x20E8
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	80 93 f4 20 	sts	0x20F4, r24
    1cfc:	90 93 f5 20 	sts	0x20F5, r25
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <__vector_40+0x248>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    1d02:	80 91 e8 20 	lds	r24, 0x20E8
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	80 93 f2 20 	sts	0x20F2, r24
    1d0c:	90 93 f3 20 	sts	0x20F3, r25
    1d10:	1d c0       	rjmp	.+58     	; 0x1d4c <__vector_40+0x248>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    1d12:	80 91 e7 20 	lds	r24, 0x20E7
    1d16:	80 93 f1 20 	sts	0x20F1, r24
    1d1a:	18 c0       	rjmp	.+48     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    1d1c:	80 91 e7 20 	lds	r24, 0x20E7
    1d20:	80 93 02 20 	sts	0x2002, r24
    1d24:	13 c0       	rjmp	.+38     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    1d26:	80 91 e7 20 	lds	r24, 0x20E7
    1d2a:	80 93 01 20 	sts	0x2001, r24
    1d2e:	0e c0       	rjmp	.+28     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    1d30:	80 91 e7 20 	lds	r24, 0x20E7
    1d34:	80 93 00 20 	sts	0x2000, r24
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    1d3a:	d9 d2       	rcall	.+1458   	; 0x22ee <send_light_data>
    1d3c:	07 c0       	rjmp	.+14     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    1d3e:	f0 d2       	rcall	.+1504   	; 0x2320 <send_battery_data>
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    1d42:	44 d3       	rcall	.+1672   	; 0x23cc <send_pulse_data>
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    1d46:	1b d3       	rcall	.+1590   	; 0x237e <send_color_data>
    1d48:	01 c0       	rjmp	.+2      	; 0x1d4c <__vector_40+0x248>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    1d4a:	04 d3       	rcall	.+1544   	; 0x2354 <send_charging_data>
		buffer_data[i] = usart_getchar(&USARTD0);
	}
	
	interpret_message();
	
	uart_done_flag = true;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 32 21 	sts	0x2132, r24
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	0f 90       	pop	r0
    1d74:	1f 90       	pop	r1
    1d76:	18 95       	reti

00001d78 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    1d80:	61 15       	cp	r22, r1
    1d82:	71 05       	cpc	r23, r1
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <uart_send_bytes+0x26>
    1d86:	8c 01       	movw	r16, r24
    1d88:	ec 01       	movw	r28, r24
    1d8a:	06 0f       	add	r16, r22
    1d8c:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    1d8e:	69 91       	ld	r22, Y+
    1d90:	80 ec       	ldi	r24, 0xC0	; 192
    1d92:	99 e0       	ldi	r25, 0x09	; 9
    1d94:	0e 94 23 1b 	call	0x3646	; 0x3646 <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    1d98:	c0 17       	cp	r28, r16
    1d9a:	d1 07       	cpc	r29, r17
    1d9c:	c1 f7       	brne	.-16     	; 0x1d8e <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <init_chargingpin>:

	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];

	set_flash_ws2812(m_led_struct, 6);
    1da8:	98 2f       	mov	r25, r24
    1daa:	97 70       	andi	r25, 0x07	; 7
    1dac:	61 e0       	ldi	r22, 0x01	; 1
    1dae:	70 e0       	ldi	r23, 0x00	; 0
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <init_chargingpin+0xe>
    1db2:	66 0f       	add	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	9a 95       	dec	r25
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <init_chargingpin+0xa>
    1dba:	86 95       	lsr	r24
    1dbc:	86 95       	lsr	r24
    1dbe:	86 95       	lsr	r24
    1dc0:	20 e2       	ldi	r18, 0x20	; 32
    1dc2:	82 9f       	mul	r24, r18
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	11 24       	eor	r1, r1
    1dc8:	42 e0       	ldi	r20, 0x02	; 2
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	9a 5f       	subi	r25, 0xFA	; 250
    1dce:	99 c6       	rjmp	.+3378   	; 0x2b02 <ioport_configure_port_pin>
    1dd0:	08 95       	ret

00001dd2 <ischarging>:
    1dd2:	80 91 e8 07 	lds	r24, 0x07E8
    1dd6:	86 95       	lsr	r24
    1dd8:	81 70       	andi	r24, 0x01	; 1
    1dda:	08 95       	ret

00001ddc <twinkle>:
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	f9 01       	movw	r30, r18
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	e2 0f       	add	r30, r18
    1de8:	f3 1f       	adc	r31, r19
    1dea:	ed 56       	subi	r30, 0x6D	; 109
    1dec:	f5 4d       	sbci	r31, 0xD5	; 213
    1dee:	80 83       	st	Z, r24
    1df0:	61 83       	std	Z+1, r22	; 0x01
    1df2:	42 83       	std	Z+2, r20	; 0x02
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	26 30       	cpi	r18, 0x06	; 6
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	89 f7       	brne	.-30     	; 0x1de0 <twinkle+0x4>
    1dfe:	66 e0       	ldi	r22, 0x06	; 6
    1e00:	83 e9       	ldi	r24, 0x93	; 147
    1e02:	9a e2       	ldi	r25, 0x2A	; 42
    1e04:	4d c4       	rjmp	.+2202   	; 0x26a0 <set_flash_ws2812>
    1e06:	08 95       	ret

00001e08 <clear_led>:
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	e8 2f       	mov	r30, r24
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	9f 01       	movw	r18, r30
    1e10:	22 0f       	add	r18, r18
    1e12:	33 1f       	adc	r19, r19
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	ed 56       	subi	r30, 0x6D	; 109
    1e1a:	f5 4d       	sbci	r31, 0xD5	; 213
    1e1c:	10 82       	st	Z, r1
    1e1e:	11 82       	std	Z+1, r1	; 0x01
    1e20:	12 82       	std	Z+2, r1	; 0x02
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	86 30       	cpi	r24, 0x06	; 6
    1e26:	89 f7       	brne	.-30     	; 0x1e0a <clear_led+0x2>
    1e28:	66 e0       	ldi	r22, 0x06	; 6
    1e2a:	83 e9       	ldi	r24, 0x93	; 147
    1e2c:	9a e2       	ldi	r25, 0x2A	; 42
    1e2e:	38 c4       	rjmp	.+2160   	; 0x26a0 <set_flash_ws2812>
    1e30:	08 95       	ret

00001e32 <load_data_color_led>:
    1e32:	ac ed       	ldi	r26, 0xDC	; 220
    1e34:	b0 e2       	ldi	r27, 0x20	; 32
    1e36:	8c 91       	ld	r24, X
    1e38:	e3 e9       	ldi	r30, 0x93	; 147
    1e3a:	fa e2       	ldi	r31, 0x2A	; 42
    1e3c:	80 83       	st	Z, r24
    1e3e:	11 96       	adiw	r26, 0x01	; 1
    1e40:	8c 91       	ld	r24, X
    1e42:	11 97       	sbiw	r26, 0x01	; 1
    1e44:	81 83       	std	Z+1, r24	; 0x01
    1e46:	12 96       	adiw	r26, 0x02	; 2
    1e48:	8c 91       	ld	r24, X
    1e4a:	12 97       	sbiw	r26, 0x02	; 2
    1e4c:	82 83       	std	Z+2, r24	; 0x02
    1e4e:	13 96       	adiw	r26, 0x03	; 3
    1e50:	8c 91       	ld	r24, X
    1e52:	13 97       	sbiw	r26, 0x03	; 3
    1e54:	83 83       	std	Z+3, r24	; 0x03
    1e56:	14 96       	adiw	r26, 0x04	; 4
    1e58:	8c 91       	ld	r24, X
    1e5a:	14 97       	sbiw	r26, 0x04	; 4
    1e5c:	84 83       	std	Z+4, r24	; 0x04
    1e5e:	15 96       	adiw	r26, 0x05	; 5
    1e60:	8c 91       	ld	r24, X
    1e62:	15 97       	sbiw	r26, 0x05	; 5
    1e64:	85 83       	std	Z+5, r24	; 0x05
    1e66:	16 96       	adiw	r26, 0x06	; 6
    1e68:	8c 91       	ld	r24, X
    1e6a:	16 97       	sbiw	r26, 0x06	; 6
    1e6c:	86 83       	std	Z+6, r24	; 0x06
    1e6e:	17 96       	adiw	r26, 0x07	; 7
    1e70:	8c 91       	ld	r24, X
    1e72:	17 97       	sbiw	r26, 0x07	; 7
    1e74:	87 83       	std	Z+7, r24	; 0x07
    1e76:	18 96       	adiw	r26, 0x08	; 8
    1e78:	8c 91       	ld	r24, X
    1e7a:	18 97       	sbiw	r26, 0x08	; 8
    1e7c:	80 87       	std	Z+8, r24	; 0x08
    1e7e:	8c 91       	ld	r24, X
    1e80:	81 87       	std	Z+9, r24	; 0x09
    1e82:	11 96       	adiw	r26, 0x01	; 1
    1e84:	8c 91       	ld	r24, X
    1e86:	11 97       	sbiw	r26, 0x01	; 1
    1e88:	82 87       	std	Z+10, r24	; 0x0a
    1e8a:	12 96       	adiw	r26, 0x02	; 2
    1e8c:	8c 91       	ld	r24, X
    1e8e:	12 97       	sbiw	r26, 0x02	; 2
    1e90:	83 87       	std	Z+11, r24	; 0x0b
    1e92:	13 96       	adiw	r26, 0x03	; 3
    1e94:	8c 91       	ld	r24, X
    1e96:	13 97       	sbiw	r26, 0x03	; 3
    1e98:	84 87       	std	Z+12, r24	; 0x0c
    1e9a:	14 96       	adiw	r26, 0x04	; 4
    1e9c:	8c 91       	ld	r24, X
    1e9e:	14 97       	sbiw	r26, 0x04	; 4
    1ea0:	85 87       	std	Z+13, r24	; 0x0d
    1ea2:	15 96       	adiw	r26, 0x05	; 5
    1ea4:	8c 91       	ld	r24, X
    1ea6:	15 97       	sbiw	r26, 0x05	; 5
    1ea8:	86 87       	std	Z+14, r24	; 0x0e
    1eaa:	16 96       	adiw	r26, 0x06	; 6
    1eac:	8c 91       	ld	r24, X
    1eae:	16 97       	sbiw	r26, 0x06	; 6
    1eb0:	87 87       	std	Z+15, r24	; 0x0f
    1eb2:	17 96       	adiw	r26, 0x07	; 7
    1eb4:	8c 91       	ld	r24, X
    1eb6:	17 97       	sbiw	r26, 0x07	; 7
    1eb8:	80 8b       	std	Z+16, r24	; 0x10
    1eba:	18 96       	adiw	r26, 0x08	; 8
    1ebc:	8c 91       	ld	r24, X
    1ebe:	81 8b       	std	Z+17, r24	; 0x11
    1ec0:	66 e0       	ldi	r22, 0x06	; 6
    1ec2:	cf 01       	movw	r24, r30
    1ec4:	ed c3       	rjmp	.+2010   	; 0x26a0 <set_flash_ws2812>
    1ec6:	08 95       	ret

00001ec8 <update_led_charge>:
    1ec8:	10 92 78 2a 	sts	0x2A78, r1
    1ecc:	80 91 35 21 	lds	r24, 0x2135
    1ed0:	88 23       	and	r24, r24
    1ed2:	59 f1       	breq	.+86     	; 0x1f2a <update_led_charge+0x62>
    1ed4:	80 91 38 21 	lds	r24, 0x2138
    1ed8:	90 91 39 21 	lds	r25, 0x2139
    1edc:	9c 01       	movw	r18, r24
    1ede:	20 56       	subi	r18, 0x60	; 96
    1ee0:	35 40       	sbci	r19, 0x05	; 5
    1ee2:	2f 35       	cpi	r18, 0x5F	; 95
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	48 f4       	brcc	.+18     	; 0x1efa <update_led_charge+0x32>
    1ee8:	80 91 fa 20 	lds	r24, 0x20FA
    1eec:	90 91 fb 20 	lds	r25, 0x20FB
    1ef0:	80 93 3c 21 	sts	0x213C, r24
    1ef4:	90 93 3d 21 	sts	0x213D, r25
    1ef8:	16 c0       	rjmp	.+44     	; 0x1f26 <update_led_charge+0x5e>
    1efa:	81 5b       	subi	r24, 0xB1	; 177
    1efc:	94 40       	sbci	r25, 0x04	; 4
    1efe:	8f 3a       	cpi	r24, 0xAF	; 175
    1f00:	91 05       	cpc	r25, r1
    1f02:	48 f4       	brcc	.+18     	; 0x1f16 <update_led_charge+0x4e>
    1f04:	80 91 f6 20 	lds	r24, 0x20F6
    1f08:	90 91 f7 20 	lds	r25, 0x20F7
    1f0c:	80 93 3c 21 	sts	0x213C, r24
    1f10:	90 93 3d 21 	sts	0x213D, r25
    1f14:	08 c0       	rjmp	.+16     	; 0x1f26 <update_led_charge+0x5e>
    1f16:	80 91 40 21 	lds	r24, 0x2140
    1f1a:	90 91 41 21 	lds	r25, 0x2141
    1f1e:	80 93 3c 21 	sts	0x213C, r24
    1f22:	90 93 3d 21 	sts	0x213D, r25
    1f26:	10 92 35 21 	sts	0x2135, r1
    1f2a:	53 df       	rcall	.-346    	; 0x1dd2 <ischarging>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <update_led_charge+0x90>
    1f30:	80 91 3f 21 	lds	r24, 0x213F
    1f34:	80 93 3e 21 	sts	0x213E, r24
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	80 93 3f 21 	sts	0x213F, r24
    1f3e:	80 91 3f 21 	lds	r24, 0x213F
    1f42:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	98 e0       	ldi	r25, 0x08	; 8
    1f4a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <tc45_enable>
    1f4e:	80 e4       	ldi	r24, 0x40	; 64
    1f50:	98 e0       	ldi	r25, 0x08	; 8
    1f52:	0e 94 a5 19 	call	0x334a	; 0x334a <tc45_disable>
    1f56:	6d df       	rcall	.-294    	; 0x1e32 <load_data_color_led>
    1f58:	80 91 3c 21 	lds	r24, 0x213C
    1f5c:	90 91 3d 21 	lds	r25, 0x213D
    1f60:	20 91 fc 20 	lds	r18, 0x20FC
    1f64:	30 91 fd 20 	lds	r19, 0x20FD
    1f68:	82 17       	cp	r24, r18
    1f6a:	93 07       	cpc	r25, r19
    1f6c:	b8 f5       	brcc	.+110    	; 0x1fdc <update_led_charge+0x114>
    1f6e:	4c df       	rcall	.-360    	; 0x1e08 <clear_led>
    1f70:	40 91 f1 20 	lds	r20, 0x20F1
    1f74:	20 91 3c 21 	lds	r18, 0x213C
    1f78:	30 91 3d 21 	lds	r19, 0x213D
    1f7c:	60 91 fc 20 	lds	r22, 0x20FC
    1f80:	70 91 fd 20 	lds	r23, 0x20FD
    1f84:	42 9f       	mul	r20, r18
    1f86:	c0 01       	movw	r24, r0
    1f88:	43 9f       	mul	r20, r19
    1f8a:	90 0d       	add	r25, r0
    1f8c:	11 24       	eor	r1, r1
    1f8e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    1f92:	e3 e9       	ldi	r30, 0x93	; 147
    1f94:	fa e2       	ldi	r31, 0x2A	; 42
    1f96:	60 83       	st	Z, r22
    1f98:	11 82       	std	Z+1, r1	; 0x01
    1f9a:	12 82       	std	Z+2, r1	; 0x02
    1f9c:	13 82       	std	Z+3, r1	; 0x03
    1f9e:	14 82       	std	Z+4, r1	; 0x04
    1fa0:	15 82       	std	Z+5, r1	; 0x05
    1fa2:	16 82       	std	Z+6, r1	; 0x06
    1fa4:	17 82       	std	Z+7, r1	; 0x07
    1fa6:	10 86       	std	Z+8, r1	; 0x08
    1fa8:	40 91 f1 20 	lds	r20, 0x20F1
    1fac:	60 91 fc 20 	lds	r22, 0x20FC
    1fb0:	70 91 fd 20 	lds	r23, 0x20FD
    1fb4:	42 9f       	mul	r20, r18
    1fb6:	c0 01       	movw	r24, r0
    1fb8:	43 9f       	mul	r20, r19
    1fba:	90 0d       	add	r25, r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    1fc2:	61 87       	std	Z+9, r22	; 0x09
    1fc4:	12 86       	std	Z+10, r1	; 0x0a
    1fc6:	13 86       	std	Z+11, r1	; 0x0b
    1fc8:	14 86       	std	Z+12, r1	; 0x0c
    1fca:	15 86       	std	Z+13, r1	; 0x0d
    1fcc:	16 86       	std	Z+14, r1	; 0x0e
    1fce:	17 86       	std	Z+15, r1	; 0x0f
    1fd0:	10 8a       	std	Z+16, r1	; 0x10
    1fd2:	11 8a       	std	Z+17, r1	; 0x11
    1fd4:	66 e0       	ldi	r22, 0x06	; 6
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	63 d3       	rcall	.+1734   	; 0x26a0 <set_flash_ws2812>
    1fda:	64 c1       	rjmp	.+712    	; 0x22a4 <update_led_charge+0x3dc>
    1fdc:	20 91 f8 20 	lds	r18, 0x20F8
    1fe0:	30 91 f9 20 	lds	r19, 0x20F9
    1fe4:	82 17       	cp	r24, r18
    1fe6:	93 07       	cpc	r25, r19
    1fe8:	08 f0       	brcs	.+2      	; 0x1fec <update_led_charge+0x124>
    1fea:	48 c0       	rjmp	.+144    	; 0x207c <update_led_charge+0x1b4>
    1fec:	0d df       	rcall	.-486    	; 0x1e08 <clear_led>
    1fee:	80 91 f1 20 	lds	r24, 0x20F1
    1ff2:	e3 e9       	ldi	r30, 0x93	; 147
    1ff4:	fa e2       	ldi	r31, 0x2A	; 42
    1ff6:	80 83       	st	Z, r24
    1ff8:	11 82       	std	Z+1, r1	; 0x01
    1ffa:	12 82       	std	Z+2, r1	; 0x02
    1ffc:	13 82       	std	Z+3, r1	; 0x03
    1ffe:	14 82       	std	Z+4, r1	; 0x04
    2000:	15 82       	std	Z+5, r1	; 0x05
    2002:	20 91 3c 21 	lds	r18, 0x213C
    2006:	30 91 3d 21 	lds	r19, 0x213D
    200a:	80 91 fc 20 	lds	r24, 0x20FC
    200e:	90 91 fd 20 	lds	r25, 0x20FD
    2012:	a0 91 f1 20 	lds	r26, 0x20F1
    2016:	60 91 f8 20 	lds	r22, 0x20F8
    201a:	70 91 f9 20 	lds	r23, 0x20F9
    201e:	a9 01       	movw	r20, r18
    2020:	48 1b       	sub	r20, r24
    2022:	59 0b       	sbc	r21, r25
    2024:	a4 9f       	mul	r26, r20
    2026:	c0 01       	movw	r24, r0
    2028:	a5 9f       	mul	r26, r21
    202a:	90 0d       	add	r25, r0
    202c:	11 24       	eor	r1, r1
    202e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    2032:	66 83       	std	Z+6, r22	; 0x06
    2034:	17 82       	std	Z+7, r1	; 0x07
    2036:	10 86       	std	Z+8, r1	; 0x08
    2038:	80 91 f1 20 	lds	r24, 0x20F1
    203c:	81 87       	std	Z+9, r24	; 0x09
    203e:	12 86       	std	Z+10, r1	; 0x0a
    2040:	13 86       	std	Z+11, r1	; 0x0b
    2042:	14 86       	std	Z+12, r1	; 0x0c
    2044:	15 86       	std	Z+13, r1	; 0x0d
    2046:	16 86       	std	Z+14, r1	; 0x0e
    2048:	80 91 fc 20 	lds	r24, 0x20FC
    204c:	90 91 fd 20 	lds	r25, 0x20FD
    2050:	40 91 f1 20 	lds	r20, 0x20F1
    2054:	60 91 f8 20 	lds	r22, 0x20F8
    2058:	70 91 f9 20 	lds	r23, 0x20F9
    205c:	28 1b       	sub	r18, r24
    205e:	39 0b       	sbc	r19, r25
    2060:	42 9f       	mul	r20, r18
    2062:	c0 01       	movw	r24, r0
    2064:	43 9f       	mul	r20, r19
    2066:	90 0d       	add	r25, r0
    2068:	11 24       	eor	r1, r1
    206a:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    206e:	67 87       	std	Z+15, r22	; 0x0f
    2070:	10 8a       	std	Z+16, r1	; 0x10
    2072:	11 8a       	std	Z+17, r1	; 0x11
    2074:	66 e0       	ldi	r22, 0x06	; 6
    2076:	cf 01       	movw	r24, r30
    2078:	13 d3       	rcall	.+1574   	; 0x26a0 <set_flash_ws2812>
    207a:	14 c1       	rjmp	.+552    	; 0x22a4 <update_led_charge+0x3dc>
    207c:	20 91 f4 20 	lds	r18, 0x20F4
    2080:	30 91 f5 20 	lds	r19, 0x20F5
    2084:	82 17       	cp	r24, r18
    2086:	93 07       	cpc	r25, r19
    2088:	08 f0       	brcs	.+2      	; 0x208c <update_led_charge+0x1c4>
    208a:	4c c0       	rjmp	.+152    	; 0x2124 <update_led_charge+0x25c>
    208c:	bd de       	rcall	.-646    	; 0x1e08 <clear_led>
    208e:	80 91 f1 20 	lds	r24, 0x20F1
    2092:	e3 e9       	ldi	r30, 0x93	; 147
    2094:	fa e2       	ldi	r31, 0x2A	; 42
    2096:	80 83       	st	Z, r24
    2098:	11 82       	std	Z+1, r1	; 0x01
    209a:	12 82       	std	Z+2, r1	; 0x02
    209c:	20 91 3c 21 	lds	r18, 0x213C
    20a0:	30 91 3d 21 	lds	r19, 0x213D
    20a4:	80 91 f8 20 	lds	r24, 0x20F8
    20a8:	90 91 f9 20 	lds	r25, 0x20F9
    20ac:	a0 91 f1 20 	lds	r26, 0x20F1
    20b0:	60 91 f4 20 	lds	r22, 0x20F4
    20b4:	70 91 f5 20 	lds	r23, 0x20F5
    20b8:	a9 01       	movw	r20, r18
    20ba:	48 1b       	sub	r20, r24
    20bc:	59 0b       	sbc	r21, r25
    20be:	a4 9f       	mul	r26, r20
    20c0:	c0 01       	movw	r24, r0
    20c2:	a5 9f       	mul	r26, r21
    20c4:	90 0d       	add	r25, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    20cc:	63 83       	std	Z+3, r22	; 0x03
    20ce:	14 82       	std	Z+4, r1	; 0x04
    20d0:	15 82       	std	Z+5, r1	; 0x05
    20d2:	80 91 f1 20 	lds	r24, 0x20F1
    20d6:	86 83       	std	Z+6, r24	; 0x06
    20d8:	17 82       	std	Z+7, r1	; 0x07
    20da:	10 86       	std	Z+8, r1	; 0x08
    20dc:	80 91 f1 20 	lds	r24, 0x20F1
    20e0:	81 87       	std	Z+9, r24	; 0x09
    20e2:	12 86       	std	Z+10, r1	; 0x0a
    20e4:	13 86       	std	Z+11, r1	; 0x0b
    20e6:	80 91 f8 20 	lds	r24, 0x20F8
    20ea:	90 91 f9 20 	lds	r25, 0x20F9
    20ee:	40 91 f1 20 	lds	r20, 0x20F1
    20f2:	60 91 f4 20 	lds	r22, 0x20F4
    20f6:	70 91 f5 20 	lds	r23, 0x20F5
    20fa:	28 1b       	sub	r18, r24
    20fc:	39 0b       	sbc	r19, r25
    20fe:	42 9f       	mul	r20, r18
    2100:	c0 01       	movw	r24, r0
    2102:	43 9f       	mul	r20, r19
    2104:	90 0d       	add	r25, r0
    2106:	11 24       	eor	r1, r1
    2108:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    210c:	64 87       	std	Z+12, r22	; 0x0c
    210e:	15 86       	std	Z+13, r1	; 0x0d
    2110:	16 86       	std	Z+14, r1	; 0x0e
    2112:	80 91 f1 20 	lds	r24, 0x20F1
    2116:	87 87       	std	Z+15, r24	; 0x0f
    2118:	10 8a       	std	Z+16, r1	; 0x10
    211a:	11 8a       	std	Z+17, r1	; 0x11
    211c:	66 e0       	ldi	r22, 0x06	; 6
    211e:	cf 01       	movw	r24, r30
    2120:	bf d2       	rcall	.+1406   	; 0x26a0 <set_flash_ws2812>
    2122:	c0 c0       	rjmp	.+384    	; 0x22a4 <update_led_charge+0x3dc>
    2124:	20 91 f2 20 	lds	r18, 0x20F2
    2128:	30 91 f3 20 	lds	r19, 0x20F3
    212c:	82 17       	cp	r24, r18
    212e:	93 07       	cpc	r25, r19
    2130:	08 f0       	brcs	.+2      	; 0x2134 <update_led_charge+0x26c>
    2132:	94 c0       	rjmp	.+296    	; 0x225c <update_led_charge+0x394>
    2134:	69 de       	rcall	.-814    	; 0x1e08 <clear_led>
    2136:	e3 e9       	ldi	r30, 0x93	; 147
    2138:	fa e2       	ldi	r31, 0x2A	; 42
    213a:	10 82       	st	Z, r1
    213c:	20 91 3c 21 	lds	r18, 0x213C
    2140:	30 91 3d 21 	lds	r19, 0x213D
    2144:	80 91 f6 20 	lds	r24, 0x20F6
    2148:	90 91 f7 20 	lds	r25, 0x20F7
    214c:	a0 91 f1 20 	lds	r26, 0x20F1
    2150:	60 91 f2 20 	lds	r22, 0x20F2
    2154:	70 91 f3 20 	lds	r23, 0x20F3
    2158:	a9 01       	movw	r20, r18
    215a:	48 1b       	sub	r20, r24
    215c:	59 0b       	sbc	r21, r25
    215e:	a4 9f       	mul	r26, r20
    2160:	c0 01       	movw	r24, r0
    2162:	a5 9f       	mul	r26, r21
    2164:	90 0d       	add	r25, r0
    2166:	11 24       	eor	r1, r1
    2168:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    216c:	61 83       	std	Z+1, r22	; 0x01
    216e:	12 82       	std	Z+2, r1	; 0x02
    2170:	13 82       	std	Z+3, r1	; 0x03
    2172:	80 91 f6 20 	lds	r24, 0x20F6
    2176:	90 91 f7 20 	lds	r25, 0x20F7
    217a:	a0 91 f1 20 	lds	r26, 0x20F1
    217e:	60 91 f2 20 	lds	r22, 0x20F2
    2182:	70 91 f3 20 	lds	r23, 0x20F3
    2186:	a9 01       	movw	r20, r18
    2188:	48 1b       	sub	r20, r24
    218a:	59 0b       	sbc	r21, r25
    218c:	a4 9f       	mul	r26, r20
    218e:	c0 01       	movw	r24, r0
    2190:	a5 9f       	mul	r26, r21
    2192:	90 0d       	add	r25, r0
    2194:	11 24       	eor	r1, r1
    2196:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    219a:	64 83       	std	Z+4, r22	; 0x04
    219c:	15 82       	std	Z+5, r1	; 0x05
    219e:	16 82       	std	Z+6, r1	; 0x06
    21a0:	80 91 f6 20 	lds	r24, 0x20F6
    21a4:	90 91 f7 20 	lds	r25, 0x20F7
    21a8:	a0 91 f1 20 	lds	r26, 0x20F1
    21ac:	60 91 f2 20 	lds	r22, 0x20F2
    21b0:	70 91 f3 20 	lds	r23, 0x20F3
    21b4:	a9 01       	movw	r20, r18
    21b6:	48 1b       	sub	r20, r24
    21b8:	59 0b       	sbc	r21, r25
    21ba:	a4 9f       	mul	r26, r20
    21bc:	c0 01       	movw	r24, r0
    21be:	a5 9f       	mul	r26, r21
    21c0:	90 0d       	add	r25, r0
    21c2:	11 24       	eor	r1, r1
    21c4:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    21c8:	67 83       	std	Z+7, r22	; 0x07
    21ca:	10 86       	std	Z+8, r1	; 0x08
    21cc:	11 86       	std	Z+9, r1	; 0x09
    21ce:	80 91 f6 20 	lds	r24, 0x20F6
    21d2:	90 91 f7 20 	lds	r25, 0x20F7
    21d6:	a0 91 f1 20 	lds	r26, 0x20F1
    21da:	60 91 f2 20 	lds	r22, 0x20F2
    21de:	70 91 f3 20 	lds	r23, 0x20F3
    21e2:	a9 01       	movw	r20, r18
    21e4:	48 1b       	sub	r20, r24
    21e6:	59 0b       	sbc	r21, r25
    21e8:	a4 9f       	mul	r26, r20
    21ea:	c0 01       	movw	r24, r0
    21ec:	a5 9f       	mul	r26, r21
    21ee:	90 0d       	add	r25, r0
    21f0:	11 24       	eor	r1, r1
    21f2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    21f6:	62 87       	std	Z+10, r22	; 0x0a
    21f8:	13 86       	std	Z+11, r1	; 0x0b
    21fa:	14 86       	std	Z+12, r1	; 0x0c
    21fc:	80 91 f6 20 	lds	r24, 0x20F6
    2200:	90 91 f7 20 	lds	r25, 0x20F7
    2204:	a0 91 f1 20 	lds	r26, 0x20F1
    2208:	60 91 f2 20 	lds	r22, 0x20F2
    220c:	70 91 f3 20 	lds	r23, 0x20F3
    2210:	a9 01       	movw	r20, r18
    2212:	48 1b       	sub	r20, r24
    2214:	59 0b       	sbc	r21, r25
    2216:	a4 9f       	mul	r26, r20
    2218:	c0 01       	movw	r24, r0
    221a:	a5 9f       	mul	r26, r21
    221c:	90 0d       	add	r25, r0
    221e:	11 24       	eor	r1, r1
    2220:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    2224:	65 87       	std	Z+13, r22	; 0x0d
    2226:	16 86       	std	Z+14, r1	; 0x0e
    2228:	17 86       	std	Z+15, r1	; 0x0f
    222a:	80 91 f6 20 	lds	r24, 0x20F6
    222e:	90 91 f7 20 	lds	r25, 0x20F7
    2232:	40 91 f1 20 	lds	r20, 0x20F1
    2236:	60 91 f2 20 	lds	r22, 0x20F2
    223a:	70 91 f3 20 	lds	r23, 0x20F3
    223e:	28 1b       	sub	r18, r24
    2240:	39 0b       	sbc	r19, r25
    2242:	42 9f       	mul	r20, r18
    2244:	c0 01       	movw	r24, r0
    2246:	43 9f       	mul	r20, r19
    2248:	90 0d       	add	r25, r0
    224a:	11 24       	eor	r1, r1
    224c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <__udivmodhi4>
    2250:	60 8b       	std	Z+16, r22	; 0x10
    2252:	11 8a       	std	Z+17, r1	; 0x11
    2254:	66 e0       	ldi	r22, 0x06	; 6
    2256:	cf 01       	movw	r24, r30
    2258:	23 d2       	rcall	.+1094   	; 0x26a0 <set_flash_ws2812>
    225a:	24 c0       	rjmp	.+72     	; 0x22a4 <update_led_charge+0x3dc>
    225c:	d5 dd       	rcall	.-1110   	; 0x1e08 <clear_led>
    225e:	e3 e9       	ldi	r30, 0x93	; 147
    2260:	fa e2       	ldi	r31, 0x2A	; 42
    2262:	10 82       	st	Z, r1
    2264:	80 91 f1 20 	lds	r24, 0x20F1
    2268:	81 83       	std	Z+1, r24	; 0x01
    226a:	12 82       	std	Z+2, r1	; 0x02
    226c:	13 82       	std	Z+3, r1	; 0x03
    226e:	80 91 f1 20 	lds	r24, 0x20F1
    2272:	84 83       	std	Z+4, r24	; 0x04
    2274:	15 82       	std	Z+5, r1	; 0x05
    2276:	16 82       	std	Z+6, r1	; 0x06
    2278:	80 91 f1 20 	lds	r24, 0x20F1
    227c:	87 83       	std	Z+7, r24	; 0x07
    227e:	10 86       	std	Z+8, r1	; 0x08
    2280:	11 86       	std	Z+9, r1	; 0x09
    2282:	80 91 f1 20 	lds	r24, 0x20F1
    2286:	82 87       	std	Z+10, r24	; 0x0a
    2288:	13 86       	std	Z+11, r1	; 0x0b
    228a:	14 86       	std	Z+12, r1	; 0x0c
    228c:	80 91 f1 20 	lds	r24, 0x20F1
    2290:	85 87       	std	Z+13, r24	; 0x0d
    2292:	16 86       	std	Z+14, r1	; 0x0e
    2294:	17 86       	std	Z+15, r1	; 0x0f
    2296:	80 91 f1 20 	lds	r24, 0x20F1
    229a:	80 8b       	std	Z+16, r24	; 0x10
    229c:	11 8a       	std	Z+17, r1	; 0x11
    229e:	66 e0       	ldi	r22, 0x06	; 6
    22a0:	cf 01       	movw	r24, r30
    22a2:	fe d1       	rcall	.+1020   	; 0x26a0 <set_flash_ws2812>
    22a4:	80 91 3c 21 	lds	r24, 0x213C
    22a8:	90 91 3d 21 	lds	r25, 0x213D
    22ac:	01 96       	adiw	r24, 0x01	; 1
    22ae:	80 93 3c 21 	sts	0x213C, r24
    22b2:	90 93 3d 21 	sts	0x213D, r25
    22b6:	08 95       	ret

000022b8 <__vector_35>:
    22b8:	1f 92       	push	r1
    22ba:	0f 92       	push	r0
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	80 e2       	ldi	r24, 0x20	; 32
    22c4:	80 93 6c 06 	sts	0x066C, r24
    22c8:	9f dd       	rcall	.-1218   	; 0x1e08 <clear_led>
    22ca:	ff cf       	rjmp	.-2      	; 0x22ca <__vector_35+0x12>

000022cc <send_response>:
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <send_response+0x6>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	6a 83       	std	Y+2, r22	; 0x02
    22da:	62 e0       	ldi	r22, 0x02	; 2
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	ce 01       	movw	r24, r28
    22e0:	01 96       	adiw	r24, 0x01	; 1
    22e2:	4a dd       	rcall	.-1388   	; 0x1d78 <uart_send_bytes>
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <send_light_data>:
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <send_light_data+0x6>
    22f4:	1f 92       	push	r1
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	90 91 3a 21 	lds	r25, 0x213A
    22fe:	80 91 3b 21 	lds	r24, 0x213B
    2302:	9b 83       	std	Y+3, r25	; 0x03
    2304:	8a 83       	std	Y+2, r24	; 0x02
    2306:	8d e4       	ldi	r24, 0x4D	; 77
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	63 e0       	ldi	r22, 0x03	; 3
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	ce 01       	movw	r24, r28
    2310:	01 96       	adiw	r24, 0x01	; 1
    2312:	32 dd       	rcall	.-1436   	; 0x1d78 <uart_send_bytes>
    2314:	23 96       	adiw	r28, 0x03	; 3
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <send_battery_data>:
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	00 d0       	rcall	.+0      	; 0x2326 <send_battery_data+0x6>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	80 91 38 21 	lds	r24, 0x2138
    232e:	90 91 39 21 	lds	r25, 0x2139
    2332:	6a e0       	ldi	r22, 0x0A	; 10
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <__divmodhi4>
    233a:	6a 83       	std	Y+2, r22	; 0x02
    233c:	82 e4       	ldi	r24, 0x42	; 66
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	62 e0       	ldi	r22, 0x02	; 2
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	ce 01       	movw	r24, r28
    2346:	01 96       	adiw	r24, 0x01	; 1
    2348:	17 dd       	rcall	.-1490   	; 0x1d78 <uart_send_bytes>
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	08 95       	ret

00002354 <send_charging_data>:
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	00 d0       	rcall	.+0      	; 0x235a <send_charging_data+0x6>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	1a 82       	std	Y+2, r1	; 0x02
    2362:	37 dd       	rcall	.-1426   	; 0x1dd2 <ischarging>
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	87 e4       	ldi	r24, 0x47	; 71
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	62 e0       	ldi	r22, 0x02	; 2
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	ce 01       	movw	r24, r28
    2370:	01 96       	adiw	r24, 0x01	; 1
    2372:	02 dd       	rcall	.-1532   	; 0x1d78 <uart_send_bytes>
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	df 91       	pop	r29
    237a:	cf 91       	pop	r28
    237c:	08 95       	ret

0000237e <send_color_data>:
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	2a 97       	sbiw	r28, 0x0a	; 10
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	fe 01       	movw	r30, r28
    238e:	31 96       	adiw	r30, 0x01	; 1
    2390:	8a e0       	ldi	r24, 0x0A	; 10
    2392:	df 01       	movw	r26, r30
    2394:	1d 92       	st	X+, r1
    2396:	8a 95       	dec	r24
    2398:	e9 f7       	brne	.-6      	; 0x2394 <send_color_data+0x16>
    239a:	83 e6       	ldi	r24, 0x63	; 99
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	31 96       	adiw	r30, 0x01	; 1
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	dc 01       	movw	r26, r24
    23a6:	a4 52       	subi	r26, 0x24	; 36
    23a8:	bf 4d       	sbci	r27, 0xDF	; 223
    23aa:	2c 91       	ld	r18, X
    23ac:	21 93       	st	Z+, r18
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	89 30       	cpi	r24, 0x09	; 9
    23b2:	91 05       	cpc	r25, r1
    23b4:	b9 f7       	brne	.-18     	; 0x23a4 <send_color_data+0x26>
    23b6:	69 e0       	ldi	r22, 0x09	; 9
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	ce 01       	movw	r24, r28
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	dc dc       	rcall	.-1608   	; 0x1d78 <uart_send_bytes>
    23c0:	2a 96       	adiw	r28, 0x0a	; 10
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <send_pulse_data>:
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <send_pulse_data+0x6>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	19 82       	std	Y+1, r1	; 0x01
    23d8:	1a 82       	std	Y+2, r1	; 0x02
    23da:	1b db       	rcall	.-2506   	; 0x1a12 <get_pulse_state>
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	80 e7       	ldi	r24, 0x70	; 112
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	63 e0       	ldi	r22, 0x03	; 3
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	ce 01       	movw	r24, r28
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	c6 dc       	rcall	.-1652   	; 0x1d78 <uart_send_bytes>
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <restore_led_from_eeprom>:
//	set_flash_ws2812(m_led_struct, 6);
}

void restore_led_from_eeprom(void)
{	
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
	/* Read LED data bytes from EEPROM to internal buffer */
	/* EEPROM_LED1_R_BYTE is the start address of the bytes , load into buffer_data*/
//	nvm_eeprom_read_buffer((uint16_t)EEPROM_LED1_R_BYTE, &buffer_data[2], 9);
	
	colors[0] = EEPROM_LED1_R_BYTE;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	e1 d4       	rcall	.+2498   	; 0x2dc2 <nvm_eeprom_read_byte>
    2400:	cc ed       	ldi	r28, 0xDC	; 220
    2402:	d0 e2       	ldi	r29, 0x20	; 32
    2404:	88 83       	st	Y, r24
	colors[1] = EEPROM_LED1_G_BYTE;
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	db d4       	rcall	.+2486   	; 0x2dc2 <nvm_eeprom_read_byte>
    240c:	89 83       	std	Y+1, r24	; 0x01
	colors[2] = EEPROM_LED1_B_BYTE;
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	d7 d4       	rcall	.+2478   	; 0x2dc2 <nvm_eeprom_read_byte>
    2414:	8a 83       	std	Y+2, r24	; 0x02

	colors[3] = EEPROM_LED2_R_BYTE;
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	d3 d4       	rcall	.+2470   	; 0x2dc2 <nvm_eeprom_read_byte>
    241c:	8b 83       	std	Y+3, r24	; 0x03
	colors[4] = EEPROM_LED2_G_BYTE;
    241e:	85 e0       	ldi	r24, 0x05	; 5
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	cf d4       	rcall	.+2462   	; 0x2dc2 <nvm_eeprom_read_byte>
    2424:	8c 83       	std	Y+4, r24	; 0x04
	colors[5] = EEPROM_LED2_B_BYTE;
    2426:	86 e0       	ldi	r24, 0x06	; 6
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	cb d4       	rcall	.+2454   	; 0x2dc2 <nvm_eeprom_read_byte>
    242c:	8d 83       	std	Y+5, r24	; 0x05
	
	colors[6] = EEPROM_LED3_R_BYTE;
    242e:	87 e0       	ldi	r24, 0x07	; 7
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	c7 d4       	rcall	.+2446   	; 0x2dc2 <nvm_eeprom_read_byte>
    2434:	8e 83       	std	Y+6, r24	; 0x06
	colors[7] = EEPROM_LED3_G_BYTE;
    2436:	88 e0       	ldi	r24, 0x08	; 8
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	c3 d4       	rcall	.+2438   	; 0x2dc2 <nvm_eeprom_read_byte>
    243c:	8f 83       	std	Y+7, r24	; 0x07
	colors[8] = EEPROM_LED3_B_BYTE;
    243e:	89 e0       	ldi	r24, 0x09	; 9
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	bf d4       	rcall	.+2430   	; 0x2dc2 <nvm_eeprom_read_byte>
    2444:	88 87       	std	Y+8, r24	; 0x08
	
	led_set_from_colors();
    2446:	85 da       	rcall	.-2806   	; 0x1952 <led_set_from_colors>
//usart_putchar(&USARTD0, 0x25);
}
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <save_led_to_eeprom>:

void save_led_to_eeprom(void) {
    244e:	08 95       	ret

00002450 <init_ws2812>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2450:	98 2f       	mov	r25, r24
    2452:	97 70       	andi	r25, 0x07	; 7
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	02 c0       	rjmp	.+4      	; 0x245e <init_ws2812+0xe>
    245a:	66 0f       	add	r22, r22
    245c:	77 1f       	adc	r23, r23
    245e:	9a 95       	dec	r25
    2460:	e2 f7       	brpl	.-8      	; 0x245a <init_ws2812+0xa>
    2462:	86 95       	lsr	r24
    2464:	86 95       	lsr	r24
    2466:	86 95       	lsr	r24
    2468:	20 e2       	ldi	r18, 0x20	; 32
    246a:	82 9f       	mul	r24, r18
    246c:	c0 01       	movw	r24, r0
    246e:	11 24       	eor	r1, r1
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	9a 5f       	subi	r25, 0xFA	; 250
    2476:	45 c3       	rjmp	.+1674   	; 0x2b02 <ioport_configure_port_pin>
    2478:	08 95       	ret

0000247a <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    247a:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    247c:	11 96       	adiw	r26, 0x01	; 1
    247e:	2c 91       	ld	r18, X
    2480:	11 97       	sbiw	r26, 0x01	; 1
    2482:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2484:	e0 e4       	ldi	r30, 0x40	; 64
    2486:	f6 e0       	ldi	r31, 0x06	; 6
    2488:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    248a:	22 23       	and	r18, r18
    248c:	0c f0       	brlt	.+2      	; 0x2490 <set_led_ws2812+0x16>
    248e:	28 c0       	rjmp	.+80     	; 0x24e0 <set_led_ws2812+0x66>
    2490:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    24c2:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    24dc:	00 00       	nop
    24de:	26 c0       	rjmp	.+76     	; 0x252c <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    24e0:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    24f6:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    24f8:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    252a:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    252c:	22 0f       	add	r18, r18
    252e:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    2530:	09 f0       	breq	.+2      	; 0x2534 <set_led_ws2812+0xba>
    2532:	ab cf       	rjmp	.-170    	; 0x248a <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    2534:	2c 91       	ld	r18, X
    2536:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2538:	e0 e4       	ldi	r30, 0x40	; 64
    253a:	f6 e0       	ldi	r31, 0x06	; 6
    253c:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    253e:	22 23       	and	r18, r18
    2540:	0c f0       	brlt	.+2      	; 0x2544 <set_led_ws2812+0xca>
    2542:	28 c0       	rjmp	.+80     	; 0x2594 <set_led_ws2812+0x11a>
    2544:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2576:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2590:	00 00       	nop
    2592:	26 c0       	rjmp	.+76     	; 0x25e0 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2594:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    25aa:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    25ac:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    25de:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    25e0:	22 0f       	add	r18, r18
    25e2:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <set_led_ws2812+0x16e>
    25e6:	ab cf       	rjmp	.-170    	; 0x253e <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    25e8:	12 96       	adiw	r26, 0x02	; 2
    25ea:	9c 91       	ld	r25, X
    25ec:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    25ee:	e0 e4       	ldi	r30, 0x40	; 64
    25f0:	f6 e0       	ldi	r31, 0x06	; 6
    25f2:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    25f4:	99 23       	and	r25, r25
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <set_led_ws2812+0x180>
    25f8:	28 c0       	rjmp	.+80     	; 0x264a <set_led_ws2812+0x1d0>
    25fa:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    262c:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2646:	00 00       	nop
    2648:	26 c0       	rjmp	.+76     	; 0x2696 <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    264a:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2660:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2662:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2694:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    2696:	99 0f       	add	r25, r25
    2698:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    269a:	09 f0       	breq	.+2      	; 0x269e <set_led_ws2812+0x224>
    269c:	ab cf       	rjmp	.-170    	; 0x25f4 <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    269e:	08 95       	ret

000026a0 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    26a8:	66 23       	and	r22, r22
    26aa:	51 f0       	breq	.+20     	; 0x26c0 <set_flash_ws2812+0x20>
    26ac:	06 2f       	mov	r16, r22
    26ae:	c8 2f       	mov	r28, r24
    26b0:	d9 2f       	mov	r29, r25
    26b2:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    26b4:	ce 01       	movw	r24, r28
    26b6:	e1 de       	rcall	.-574    	; 0x247a <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    26b8:	1f 5f       	subi	r17, 0xFF	; 255
    26ba:	23 96       	adiw	r28, 0x03	; 3
    26bc:	10 13       	cpse	r17, r16
    26be:	fa cf       	rjmp	.-12     	; 0x26b4 <set_flash_ws2812+0x14>
    26c0:	80 e4       	ldi	r24, 0x40	; 64
    26c2:	80 93 46 06 	sts	0x0646, r24
    26c6:	89 ef       	ldi	r24, 0xF9	; 249
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <set_flash_ws2812+0x2a>
    26ce:	00 c0       	rjmp	.+0      	; 0x26d0 <set_flash_ws2812+0x30>
    26d0:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	08 95       	ret

000026dc <main>:
	set_flash_ws2812(m_led_struct, 6);
}


int main(void)
{
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2a 97       	sbiw	r28, 0x0a	; 10
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	de bf       	out	0x3e, r29	; 62
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    26ea:	cd d1       	rcall	.+922    	; 0x2a86 <sysclk_init>
	//board_init();
//	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);

#ifdef ZXL_WDT_ENABLE
	/* Set the timeout period for the watchdog - 8 ms */
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    26ec:	88 e0       	ldi	r24, 0x08	; 8
    26ee:	0e 94 ed 03 	call	0x7da	; 0x7da <wdt_set_timeout_period>
    wdt_reset(); 
    26f2:	a8 95       	wdr
	wdt_enable();
    26f4:	0e 94 01 04 	call	0x802	; 0x802 <wdt_enable>
#endif	
	
	init_uart();
    26f8:	06 d9       	rcall	.-3572   	; 0x1906 <init_uart>
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    26fa:	86 e1       	ldi	r24, 0x16	; 22
    26fc:	a9 de       	rcall	.-686    	; 0x2450 <init_ws2812>
	clear_led();
    26fe:	84 db       	rcall	.-2296   	; 0x1e08 <clear_led>
	init_chargingpin(IOPORT_CREATE_PIN(PORTR, 1));
    2700:	89 e7       	ldi	r24, 0x79	; 121
    2702:	52 db       	rcall	.-2396   	; 0x1da8 <init_chargingpin>
	
	volatile uint8_t eep0 = nvm_eeprom_read_byte(0);
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	5c d3       	rcall	.+1720   	; 0x2dc2 <nvm_eeprom_read_byte>
    270a:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t eep1 = nvm_eeprom_read_byte(1);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	58 d3       	rcall	.+1712   	; 0x2dc2 <nvm_eeprom_read_byte>
    2712:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t eep2 = nvm_eeprom_read_byte(2);
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	54 d3       	rcall	.+1704   	; 0x2dc2 <nvm_eeprom_read_byte>
    271a:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t eep3 = nvm_eeprom_read_byte(3);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	50 d3       	rcall	.+1696   	; 0x2dc2 <nvm_eeprom_read_byte>
    2722:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t eep4 = nvm_eeprom_read_byte(4);
    2724:	84 e0       	ldi	r24, 0x04	; 4
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	4c d3       	rcall	.+1688   	; 0x2dc2 <nvm_eeprom_read_byte>
    272a:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t eep5 = nvm_eeprom_read_byte(5);
    272c:	85 e0       	ldi	r24, 0x05	; 5
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	48 d3       	rcall	.+1680   	; 0x2dc2 <nvm_eeprom_read_byte>
    2732:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t eep6 = nvm_eeprom_read_byte(6);
    2734:	86 e0       	ldi	r24, 0x06	; 6
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	44 d3       	rcall	.+1672   	; 0x2dc2 <nvm_eeprom_read_byte>
    273a:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t eep7 = nvm_eeprom_read_byte(7);
    273c:	87 e0       	ldi	r24, 0x07	; 7
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	40 d3       	rcall	.+1664   	; 0x2dc2 <nvm_eeprom_read_byte>
    2742:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t eep8 = nvm_eeprom_read_byte(8);
    2744:	88 e0       	ldi	r24, 0x08	; 8
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	3c d3       	rcall	.+1656   	; 0x2dc2 <nvm_eeprom_read_byte>
    274a:	89 87       	std	Y+9, r24	; 0x09
	volatile uint8_t eep9 = nvm_eeprom_read_byte(9);
    274c:	89 e0       	ldi	r24, 0x09	; 9
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	38 d3       	rcall	.+1648   	; 0x2dc2 <nvm_eeprom_read_byte>
    2752:	8a 87       	std	Y+10, r24	; 0x0a

	// init the mtch 6301
	init_mtchio();
    2754:	0e 94 11 0b 	call	0x1622	; 0x1622 <init_mtchio>
	init_i2c();
    2758:	0e 94 cb 0a 	call	0x1596	; 0x1596 <init_i2c>
	init_mtch6301();
    275c:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <init_mtch6301>
		
	// restore the state stored in the eeprom
	// restore_state_eep();
	
	//rainbow();
	restore_led_from_eeprom();
    2760:	4a de       	rcall	.-876    	; 0x23f6 <restore_led_from_eeprom>
	
	core_status = STATUS_CHARGE;
    2762:	11 e0       	ldi	r17, 0x01	; 1
    2764:	10 93 3f 21 	sts	0x213F, r17
	change_adc_channel(core_status);
    2768:	80 91 3f 21 	lds	r24, 0x213F
    276c:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
	flag_initcharge = true;
    2770:	10 93 35 21 	sts	0x2135, r17
	tc45_disable(&TCC4);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	98 e0       	ldi	r25, 0x08	; 8
    2778:	e8 d5       	rcall	.+3024   	; 0x334a <tc45_disable>
	tc45_enable(&TCC5);
    277a:	80 e4       	ldi	r24, 0x40	; 64
    277c:	98 e0       	ldi	r25, 0x08	; 8
    277e:	b3 d5       	rcall	.+2918   	; 0x32e6 <tc45_enable>
		
	init_adc(core_status);
    2780:	80 91 3f 21 	lds	r24, 0x213F
    2784:	0e 94 0f 04 	call	0x81e	; 0x81e <init_adc>
	adc_enable_interrupt();
    2788:	0e 94 7f 05 	call	0xafe	; 0xafe <adc_enable_interrupt>
	init_timer5();
    278c:	98 d8       	rcall	.-3792   	; 0x18be <init_timer5>
	init_timer4();		
    278e:	6f d8       	rcall	.-3874   	; 0x186e <init_timer4>
		flag_initcharge = true;
		tc45_disable(&TCC4);
		tc45_enable(&TCC5);
	}
	else*/
	(!ischarging()){
    2790:	20 db       	rcall	.-2496   	; 0x1dd2 <ischarging>
    2792:	81 11       	cpse	r24, r1
    2794:	11 c0       	rjmp	.+34     	; 0x27b8 <main+0xdc>
		old_core_status = core_status;
    2796:	80 91 3f 21 	lds	r24, 0x213F
    279a:	80 93 3e 21 	sts	0x213E, r24
		core_status = STATUS_BATT_READ;
    279e:	86 e0       	ldi	r24, 0x06	; 6
    27a0:	80 93 3f 21 	sts	0x213F, r24
		change_adc_channel(core_status);
    27a4:	80 91 3f 21 	lds	r24, 0x213F
    27a8:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
		tc45_disable(&TCC5);
    27ac:	80 e4       	ldi	r24, 0x40	; 64
    27ae:	98 e0       	ldi	r25, 0x08	; 8
    27b0:	cc d5       	rcall	.+2968   	; 0x334a <tc45_disable>
		tc45_enable(&TCC4);
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	98 e0       	ldi	r25, 0x08	; 8
    27b6:	97 d5       	rcall	.+2862   	; 0x32e6 <tc45_enable>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    27b8:	0f 2e       	mov	r0, r31
    27ba:	f0 e6       	ldi	r31, 0x60	; 96
    27bc:	cf 2e       	mov	r12, r31
    27be:	f6 e0       	ldi	r31, 0x06	; 6
    27c0:	df 2e       	mov	r13, r31
    27c2:	f0 2d       	mov	r31, r0
    27c4:	68 94       	set
    27c6:	bb 24       	eor	r11, r11
    27c8:	b1 f8       	bld	r11, 1
    27ca:	11 e0       	ldi	r17, 0x01	; 1
    27cc:	0f 2e       	mov	r0, r31
    27ce:	f0 ee       	ldi	r31, 0xE0	; 224
    27d0:	8f 2e       	mov	r8, r31
    27d2:	f7 e0       	ldi	r31, 0x07	; 7
    27d4:	9f 2e       	mov	r9, r31
    27d6:	f0 2d       	mov	r31, r0
    27d8:	00 e4       	ldi	r16, 0x40	; 64
    27da:	0f 2e       	mov	r0, r31
    27dc:	e1 2c       	mov	r14, r1
    27de:	f6 e0       	ldi	r31, 0x06	; 6
    27e0:	ff 2e       	mov	r15, r31
    27e2:	f0 2d       	mov	r31, r0
    27e4:	68 94       	set
    27e6:	77 24       	eor	r7, r7
    27e8:	77 f8       	bld	r7, 7
    27ea:	68 94       	set
    27ec:	aa 24       	eor	r10, r10
    27ee:	a5 f8       	bld	r10, 5
						{
							//	usart_putchar(M_USART, 0x55);

							run();
							old_core_status = core_status;
							core_status = STATUS_FFT_R;
    27f0:	68 94       	set
    27f2:	55 24       	eor	r5, r5
    27f4:	52 f8       	bld	r5, 2
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
					old_core_status = core_status;
					core_status = STATUS_BATT_READ;
    27f6:	0f 2e       	mov	r0, r31
    27f8:	f6 e0       	ldi	r31, 0x06	; 6
    27fa:	6f 2e       	mov	r6, r31
    27fc:	f0 2d       	mov	r31, r0
	
	// Insert application code here, after the board has been initialized.
	while(1)
	{
        #ifdef ZXL_WDT_ENABLE
                wdt_reset(); 
    27fe:	a8 95       	wdr
        #endif
		if (latest_gesture) {
    2800:	80 91 23 21 	lds	r24, 0x2123
    2804:	88 23       	and	r24, r24
    2806:	09 f4       	brne	.+2      	; 0x280a <main+0x12e>
    2808:	72 c0       	rjmp	.+228    	; 0x28ee <main+0x212>
			//twinkle(255, 0, 255);
			switch (latest_gesture) {
    280a:	e0 91 23 21 	lds	r30, 0x2123
    280e:	8e 2f       	mov	r24, r30
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	fc 01       	movw	r30, r24
    2814:	e0 5a       	subi	r30, 0xA0	; 160
    2816:	f1 09       	sbc	r31, r1
    2818:	e7 30       	cpi	r30, 0x07	; 7
    281a:	f1 05       	cpc	r31, r1
    281c:	08 f0       	brcs	.+2      	; 0x2820 <main+0x144>
    281e:	65 c0       	rjmp	.+202    	; 0x28ea <main+0x20e>
    2820:	e0 5e       	subi	r30, 0xE0	; 224
    2822:	fe 4f       	sbci	r31, 0xFE	; 254
    2824:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__tablejump2__>
    2828:	f7 01       	movw	r30, r14
    282a:	a5 82       	std	Z+5, r10	; 0x05
    282c:	ff e7       	ldi	r31, 0x7F	; 127
    282e:	2a e1       	ldi	r18, 0x1A	; 26
    2830:	86 e0       	ldi	r24, 0x06	; 6
    2832:	f1 50       	subi	r31, 0x01	; 1
    2834:	20 40       	sbci	r18, 0x00	; 0
    2836:	80 40       	sbci	r24, 0x00	; 0
    2838:	e1 f7       	brne	.-8      	; 0x2832 <main+0x156>
    283a:	00 c0       	rjmp	.+0      	; 0x283c <main+0x160>
    283c:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    283e:	f7 01       	movw	r30, r14
    2840:	a6 82       	std	Z+6, r10	; 0x06
    2842:	53 c0       	rjmp	.+166    	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2844:	f7 01       	movw	r30, r14
    2846:	05 83       	std	Z+5, r16	; 0x05
    2848:	ff e7       	ldi	r31, 0x7F	; 127
    284a:	2a e1       	ldi	r18, 0x1A	; 26
    284c:	86 e0       	ldi	r24, 0x06	; 6
    284e:	f1 50       	subi	r31, 0x01	; 1
    2850:	20 40       	sbci	r18, 0x00	; 0
    2852:	80 40       	sbci	r24, 0x00	; 0
    2854:	e1 f7       	brne	.-8      	; 0x284e <main+0x172>
    2856:	00 c0       	rjmp	.+0      	; 0x2858 <main+0x17c>
    2858:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    285a:	f7 01       	movw	r30, r14
    285c:	06 83       	std	Z+6, r16	; 0x06
    285e:	45 c0       	rjmp	.+138    	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2860:	f7 01       	movw	r30, r14
    2862:	75 82       	std	Z+5, r7	; 0x05
    2864:	ff e7       	ldi	r31, 0x7F	; 127
    2866:	2a e1       	ldi	r18, 0x1A	; 26
    2868:	86 e0       	ldi	r24, 0x06	; 6
    286a:	f1 50       	subi	r31, 0x01	; 1
    286c:	20 40       	sbci	r18, 0x00	; 0
    286e:	80 40       	sbci	r24, 0x00	; 0
    2870:	e1 f7       	brne	.-8      	; 0x286a <main+0x18e>
    2872:	00 c0       	rjmp	.+0      	; 0x2874 <main+0x198>
    2874:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2876:	f7 01       	movw	r30, r14
    2878:	76 82       	std	Z+6, r7	; 0x06
    287a:	37 c0       	rjmp	.+110    	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    287c:	f6 01       	movw	r30, r12
    287e:	05 83       	std	Z+5, r16	; 0x05
    2880:	ff e7       	ldi	r31, 0x7F	; 127
    2882:	2a e1       	ldi	r18, 0x1A	; 26
    2884:	86 e0       	ldi	r24, 0x06	; 6
    2886:	f1 50       	subi	r31, 0x01	; 1
    2888:	20 40       	sbci	r18, 0x00	; 0
    288a:	80 40       	sbci	r24, 0x00	; 0
    288c:	e1 f7       	brne	.-8      	; 0x2886 <main+0x1aa>
    288e:	00 c0       	rjmp	.+0      	; 0x2890 <main+0x1b4>
    2890:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2892:	f6 01       	movw	r30, r12
    2894:	06 83       	std	Z+6, r16	; 0x06
    2896:	29 c0       	rjmp	.+82     	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2898:	f4 01       	movw	r30, r8
    289a:	15 83       	std	Z+5, r17	; 0x05
    289c:	ff e7       	ldi	r31, 0x7F	; 127
    289e:	2a e1       	ldi	r18, 0x1A	; 26
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	f1 50       	subi	r31, 0x01	; 1
    28a4:	20 40       	sbci	r18, 0x00	; 0
    28a6:	80 40       	sbci	r24, 0x00	; 0
    28a8:	e1 f7       	brne	.-8      	; 0x28a2 <main+0x1c6>
    28aa:	00 c0       	rjmp	.+0      	; 0x28ac <main+0x1d0>
    28ac:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28ae:	f4 01       	movw	r30, r8
    28b0:	16 83       	std	Z+6, r17	; 0x06
    28b2:	1b c0       	rjmp	.+54     	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    28b4:	f6 01       	movw	r30, r12
    28b6:	15 83       	std	Z+5, r17	; 0x05
    28b8:	ff e7       	ldi	r31, 0x7F	; 127
    28ba:	2a e1       	ldi	r18, 0x1A	; 26
    28bc:	86 e0       	ldi	r24, 0x06	; 6
    28be:	f1 50       	subi	r31, 0x01	; 1
    28c0:	20 40       	sbci	r18, 0x00	; 0
    28c2:	80 40       	sbci	r24, 0x00	; 0
    28c4:	e1 f7       	brne	.-8      	; 0x28be <main+0x1e2>
    28c6:	00 c0       	rjmp	.+0      	; 0x28c8 <main+0x1ec>
    28c8:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28ca:	f6 01       	movw	r30, r12
    28cc:	16 83       	std	Z+6, r17	; 0x06
    28ce:	0d c0       	rjmp	.+26     	; 0x28ea <main+0x20e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    28d0:	f6 01       	movw	r30, r12
    28d2:	b5 82       	std	Z+5, r11	; 0x05
    28d4:	ff e7       	ldi	r31, 0x7F	; 127
    28d6:	2a e1       	ldi	r18, 0x1A	; 26
    28d8:	86 e0       	ldi	r24, 0x06	; 6
    28da:	f1 50       	subi	r31, 0x01	; 1
    28dc:	20 40       	sbci	r18, 0x00	; 0
    28de:	80 40       	sbci	r24, 0x00	; 0
    28e0:	e1 f7       	brne	.-8      	; 0x28da <main+0x1fe>
    28e2:	00 c0       	rjmp	.+0      	; 0x28e4 <main+0x208>
    28e4:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28e6:	f6 01       	movw	r30, r12
    28e8:	b6 82       	std	Z+6, r11	; 0x06
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 1));
					break;
				default:
				break;
			}
			latest_gesture = NONE;
    28ea:	10 92 23 21 	sts	0x2123, r1
			//twinkle(0, 0, 0);
		}
		
		if (ischarging()) {
    28ee:	71 da       	rcall	.-2846   	; 0x1dd2 <ischarging>
    28f0:	88 23       	and	r24, r24
    28f2:	f1 f0       	breq	.+60     	; 0x2930 <main+0x254>
			if (core_status != STATUS_CHARGE)
    28f4:	80 91 3f 21 	lds	r24, 0x213F
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	09 f4       	brne	.+2      	; 0x28fe <main+0x222>
    28fc:	80 cf       	rjmp	.-256    	; 0x27fe <main+0x122>
			{
				twinkle(0, 0, 255);
    28fe:	4f ef       	ldi	r20, 0xFF	; 255
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	6b da       	rcall	.-2858   	; 0x1ddc <twinkle>
				shutdown_received = false;
    2906:	10 92 2f 21 	sts	0x212F, r1
				old_core_status = core_status;
    290a:	80 91 3f 21 	lds	r24, 0x213F
    290e:	80 93 3e 21 	sts	0x213E, r24
				core_status = STATUS_CHARGE;
    2912:	10 93 3f 21 	sts	0x213F, r17
				change_adc_channel(core_status);
    2916:	80 91 3f 21 	lds	r24, 0x213F
    291a:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
				flag_initcharge = true;
    291e:	10 93 35 21 	sts	0x2135, r17
				tc45_disable(&TCC4);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	98 e0       	ldi	r25, 0x08	; 8
    2926:	11 d5       	rcall	.+2594   	; 0x334a <tc45_disable>
				tc45_enable(&TCC5);
    2928:	80 e4       	ldi	r24, 0x40	; 64
    292a:	98 e0       	ldi	r25, 0x08	; 8
    292c:	dc d4       	rcall	.+2488   	; 0x32e6 <tc45_enable>
    292e:	67 cf       	rjmp	.-306    	; 0x27fe <main+0x122>
			}
		}
		else {
			if (core_status == STATUS_CHARGE) {
    2930:	80 91 3f 21 	lds	r24, 0x213F
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	89 f4       	brne	.+34     	; 0x295a <main+0x27e>
				old_core_status = core_status;
    2938:	80 91 3f 21 	lds	r24, 0x213F
    293c:	80 93 3e 21 	sts	0x213E, r24
				core_status = STATUS_BATT_READ;
    2940:	60 92 3f 21 	sts	0x213F, r6
				change_adc_channel(core_status);
    2944:	80 91 3f 21 	lds	r24, 0x213F
    2948:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
				tc45_disable(&TCC5);
    294c:	80 e4       	ldi	r24, 0x40	; 64
    294e:	98 e0       	ldi	r25, 0x08	; 8
    2950:	fc d4       	rcall	.+2552   	; 0x334a <tc45_disable>
				tc45_enable(&TCC4);
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	98 e0       	ldi	r25, 0x08	; 8
    2956:	c7 d4       	rcall	.+2446   	; 0x32e6 <tc45_enable>
				load_data_color_led();
    2958:	6c da       	rcall	.-2856   	; 0x1e32 <load_data_color_led>
			}
			
			if (get_pulse_state() && core_status != STATUS_FFT_L && core_status != STATUS_FFT_R) {
    295a:	5b d8       	rcall	.-3914   	; 0x1a12 <get_pulse_state>
    295c:	88 23       	and	r24, r24
    295e:	49 f0       	breq	.+18     	; 0x2972 <main+0x296>
    2960:	80 91 3f 21 	lds	r24, 0x213F
    2964:	82 30       	cpi	r24, 0x02	; 2
    2966:	29 f0       	breq	.+10     	; 0x2972 <main+0x296>
    2968:	80 91 3f 21 	lds	r24, 0x213F
    296c:	84 30       	cpi	r24, 0x04	; 4
    296e:	09 f0       	breq	.+2      	; 0x2972 <main+0x296>
				trigger_pulse_state_changed();
    2970:	58 d8       	rcall	.-3920   	; 0x1a22 <trigger_pulse_state_changed>
			}
			
			if (shutdown_received) {
    2972:	80 91 2f 21 	lds	r24, 0x212F
    2976:	88 23       	and	r24, r24
    2978:	79 f0       	breq	.+30     	; 0x2998 <main+0x2bc>
				old_core_status = core_status;
    297a:	80 91 3f 21 	lds	r24, 0x213F
    297e:	80 93 3e 21 	sts	0x213E, r24
				core_status = STATUS_NULL;
    2982:	10 92 3f 21 	sts	0x213F, r1
				tc45_disable(&TCC4);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	98 e0       	ldi	r25, 0x08	; 8
    298a:	df d4       	rcall	.+2494   	; 0x334a <tc45_disable>
				save_led_to_eeprom();
    298c:	60 dd       	rcall	.-1344   	; 0x244e <save_led_to_eeprom>
				twinkle(0, 0, 0);
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	60 e0       	ldi	r22, 0x00	; 0
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	23 da       	rcall	.-3002   	; 0x1ddc <twinkle>
    2996:	33 cf       	rjmp	.-410    	; 0x27fe <main+0x122>
			}
			else if (get_and_clear_pulse_state_changed()) {
    2998:	3f d8       	rcall	.-3970   	; 0x1a18 <get_and_clear_pulse_state_changed>
    299a:	88 23       	and	r24, r24
    299c:	51 f1       	breq	.+84     	; 0x29f2 <main+0x316>
				if (get_pulse_state()) {
    299e:	39 d8       	rcall	.-3982   	; 0x1a12 <get_pulse_state>
    29a0:	88 23       	and	r24, r24
    29a2:	a1 f0       	breq	.+40     	; 0x29cc <main+0x2f0>
					// If new message is to turn on visualization and if it is already on then ignore it
					
					// Initialize the ADC by changing to correct channel
					fht_flag = true;
    29a4:	10 93 42 21 	sts	0x2142, r17
					
					old_core_status = core_status;
    29a8:	80 91 3f 21 	lds	r24, 0x213F
    29ac:	80 93 3e 21 	sts	0x213E, r24
					core_status = STATUS_FFT_L;
    29b0:	b0 92 3f 21 	sts	0x213F, r11
					change_adc_channel(core_status);
    29b4:	80 91 3f 21 	lds	r24, 0x213F
    29b8:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
					// Switch on visualization interrupt
					tc45_enable(&TCC4);
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	98 e0       	ldi	r25, 0x08	; 8
    29c0:	92 d4       	rcall	.+2340   	; 0x32e6 <tc45_enable>
					// save state to CSR- the fact that visualization is on
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x01);
    29c2:	61 2f       	mov	r22, r17
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0e 94 b7 0a 	call	0x156e	; 0x156e <write_byte_eeprom>
    29ca:	19 cf       	rjmp	.-462    	; 0x27fe <main+0x122>
					// respond to CSR
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
    29cc:	10 92 42 21 	sts	0x2142, r1
					old_core_status = core_status;
    29d0:	80 91 3f 21 	lds	r24, 0x213F
    29d4:	80 93 3e 21 	sts	0x213E, r24
					core_status = STATUS_BATT_READ;
    29d8:	60 92 3f 21 	sts	0x213F, r6
					change_adc_channel(core_status);
    29dc:	80 91 3f 21 	lds	r24, 0x213F
    29e0:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
					clear_led();
    29e4:	11 da       	rcall	.-3038   	; 0x1e08 <clear_led>
					// save the state to eeprom (Clear visualization was on)
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x00);
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	0e 94 b7 0a 	call	0x156e	; 0x156e <write_byte_eeprom>
					// Update LED from led_color_buf_data to last saved state
					load_data_color_led();
    29ee:	21 da       	rcall	.-3006   	; 0x1e32 <load_data_color_led>
    29f0:	06 cf       	rjmp	.-500    	; 0x27fe <main+0x122>
					//send_response(new_message_ID, 0x01);
				}
			}
			else {
				// if the fht led function was turned on
				if (fht_flag == true)
    29f2:	80 91 42 21 	lds	r24, 0x2142
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	09 f0       	breq	.+2      	; 0x29fc <main+0x320>
    29fa:	01 cf       	rjmp	.-510    	; 0x27fe <main+0x122>
				{
					if (flag_fft == true)
    29fc:	80 91 fe 20 	lds	r24, 0x20FE
    2a00:	88 23       	and	r24, r24
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <main+0x32a>
    2a04:	fc ce       	rjmp	.-520    	; 0x27fe <main+0x122>
					{
						
						if (core_status == STATUS_FFT_L)
    2a06:	80 91 3f 21 	lds	r24, 0x213F
    2a0a:	82 30       	cpi	r24, 0x02	; 2
    2a0c:	81 f4       	brne	.+32     	; 0x2a2e <main+0x352>
						{
							//	usart_putchar(M_USART, 0x55);

							run();
    2a0e:	0e 94 33 08 	call	0x1066	; 0x1066 <run>
							old_core_status = core_status;
    2a12:	80 91 3f 21 	lds	r24, 0x213F
    2a16:	80 93 3e 21 	sts	0x213E, r24
							core_status = STATUS_FFT_R;
    2a1a:	50 92 3f 21 	sts	0x213F, r5
							change_adc_channel(core_status);
    2a1e:	80 91 3f 21 	lds	r24, 0x213F
    2a22:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
							tc45_enable(&TCC4);
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	98 e0       	ldi	r25, 0x08	; 8
    2a2a:	5d d4       	rcall	.+2234   	; 0x32e6 <tc45_enable>
    2a2c:	29 c0       	rjmp	.+82     	; 0x2a80 <main+0x3a4>
						}
						else if (core_status == STATUS_FFT_R)
    2a2e:	80 91 3f 21 	lds	r24, 0x213F
    2a32:	84 30       	cpi	r24, 0x04	; 4
    2a34:	29 f5       	brne	.+74     	; 0x2a80 <main+0x3a4>
						{
							//	usart_putchar(M_USART, 0x66);

							run();
    2a36:	0e 94 33 08 	call	0x1066	; 0x1066 <run>
							if (ischarging())
    2a3a:	cb d9       	rcall	.-3178   	; 0x1dd2 <ischarging>
    2a3c:	88 23       	and	r24, r24
    2a3e:	99 f0       	breq	.+38     	; 0x2a66 <main+0x38a>
							{
								old_core_status = core_status;
    2a40:	80 91 3f 21 	lds	r24, 0x213F
    2a44:	80 93 3e 21 	sts	0x213E, r24
								core_status = STATUS_CHARGE;
    2a48:	10 93 3f 21 	sts	0x213F, r17
								change_adc_channel(core_status);
    2a4c:	80 91 3f 21 	lds	r24, 0x213F
    2a50:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
								flag_initcharge = true;
    2a54:	10 93 35 21 	sts	0x2135, r17
								tc45_disable(&TCC4);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	98 e0       	ldi	r25, 0x08	; 8
    2a5c:	76 d4       	rcall	.+2284   	; 0x334a <tc45_disable>
								tc45_enable(&TCC5);
    2a5e:	80 e4       	ldi	r24, 0x40	; 64
    2a60:	98 e0       	ldi	r25, 0x08	; 8
    2a62:	41 d4       	rcall	.+2178   	; 0x32e6 <tc45_enable>
    2a64:	0d c0       	rjmp	.+26     	; 0x2a80 <main+0x3a4>
							}
							else
							{
								old_core_status = core_status;
    2a66:	80 91 3f 21 	lds	r24, 0x213F
    2a6a:	80 93 3e 21 	sts	0x213E, r24
								core_status = STATUS_FFT_L;
    2a6e:	b0 92 3f 21 	sts	0x213F, r11
								change_adc_channel(core_status);
    2a72:	80 91 3f 21 	lds	r24, 0x213F
    2a76:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
								tc45_enable(&TCC4);
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	98 e0       	ldi	r25, 0x08	; 8
    2a7e:	33 d4       	rcall	.+2150   	; 0x32e6 <tc45_enable>
							}
							
						}
						
						flag_fft = false;
    2a80:	10 92 fe 20 	sts	0x20FE, r1
    2a84:	bc ce       	rjmp	.-648    	; 0x27fe <main+0x122>

00002a86 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2a86:	8f ef       	ldi	r24, 0xFF	; 255
    2a88:	80 93 70 00 	sts	0x0070, r24
    2a8c:	80 93 71 00 	sts	0x0071, r24
    2a90:	80 93 72 00 	sts	0x0072, r24
    2a94:	80 93 73 00 	sts	0x0073, r24
    2a98:	80 93 74 00 	sts	0x0074, r24
    2a9c:	80 93 75 00 	sts	0x0075, r24
    2aa0:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2aa4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2aa6:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2aa8:	e0 e5       	ldi	r30, 0x50	; 80
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	82 60       	ori	r24, 0x02	; 2
    2ab0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ab2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2ab4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2ab6:	81 ff       	sbrs	r24, 1
    2ab8:	fd cf       	rjmp	.-6      	; 0x2ab4 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2aba:	61 e0       	ldi	r22, 0x01	; 1
    2abc:	80 e4       	ldi	r24, 0x40	; 64
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	7a d1       	rcall	.+756    	; 0x2db6 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ac2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2ac4:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2ac6:	e0 e5       	ldi	r30, 0x50	; 80
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	8e 7f       	andi	r24, 0xFE	; 254
    2ace:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ad0:	9f bf       	out	0x3f, r25	; 63
    2ad2:	08 95       	ret

00002ad4 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ad4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2ad6:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2ad8:	e8 2f       	mov	r30, r24
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	e0 59       	subi	r30, 0x90	; 144
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	60 95       	com	r22
    2ae2:	80 81       	ld	r24, Z
    2ae4:	68 23       	and	r22, r24
    2ae6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ae8:	9f bf       	out	0x3f, r25	; 63
    2aea:	08 95       	ret

00002aec <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2aec:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2aee:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2af0:	e8 2f       	mov	r30, r24
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	e0 59       	subi	r30, 0x90	; 144
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 81       	ld	r24, Z
    2afa:	68 2b       	or	r22, r24
    2afc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2afe:	9f bf       	out	0x3f, r25	; 63
    2b00:	08 95       	ret

00002b02 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	fc 01       	movw	r30, r24
    2b08:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2b0e:	c6 2f       	mov	r28, r22
    2b10:	d0 e0       	ldi	r29, 0x00	; 0
    2b12:	de 01       	movw	r26, r28
    2b14:	02 2e       	mov	r0, r18
    2b16:	02 c0       	rjmp	.+4      	; 0x2b1c <ioport_configure_port_pin+0x1a>
    2b18:	b5 95       	asr	r27
    2b1a:	a7 95       	ror	r26
    2b1c:	0a 94       	dec	r0
    2b1e:	e2 f7       	brpl	.-8      	; 0x2b18 <ioport_configure_port_pin+0x16>
    2b20:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2b22:	50 83       	st	Z, r21
    2b24:	2f 5f       	subi	r18, 0xFF	; 255
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2b2a:	28 30       	cpi	r18, 0x08	; 8
    2b2c:	31 05       	cpc	r19, r1
    2b2e:	89 f7       	brne	.-30     	; 0x2b12 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2b30:	40 ff       	sbrs	r20, 0
    2b32:	0a c0       	rjmp	.+20     	; 0x2b48 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2b34:	41 ff       	sbrs	r20, 1
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2b38:	fc 01       	movw	r30, r24
    2b3a:	65 83       	std	Z+5, r22	; 0x05
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2b3e:	fc 01       	movw	r30, r24
    2b40:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2b42:	fc 01       	movw	r30, r24
    2b44:	61 83       	std	Z+1, r22	; 0x01
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2b48:	fc 01       	movw	r30, r24
    2b4a:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    2b52:	9c 01       	movw	r18, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2b54:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2b56:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2b58:	21 15       	cp	r18, r1
    2b5a:	32 40       	sbci	r19, 0x02	; 2
    2b5c:	21 f4       	brne	.+8      	; 0x2b66 <adc_set_callback+0x14>
		adca_callback = callback;
    2b5e:	60 93 ab 2a 	sts	0x2AAB, r22
    2b62:	70 93 ac 2a 	sts	0x2AAC, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2b66:	9f bf       	out	0x3f, r25	; 63
    2b68:	08 95       	ret

00002b6a <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2b6a:	81 15       	cp	r24, r1
    2b6c:	92 40       	sbci	r25, 0x02	; 2
    2b6e:	59 f4       	brne	.+22     	; 0x2b86 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2b70:	80 91 43 21 	lds	r24, 0x2143
    2b74:	91 e0       	ldi	r25, 0x01	; 1
    2b76:	98 0f       	add	r25, r24
    2b78:	90 93 43 21 	sts	0x2143, r25
    2b7c:	81 11       	cpse	r24, r1
    2b7e:	03 c0       	rjmp	.+6      	; 0x2b86 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2b80:	62 e0       	ldi	r22, 0x02	; 2
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	a7 cf       	rjmp	.-178    	; 0x2ad4 <sysclk_enable_module>
    2b86:	08 95       	ret

00002b88 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2b88:	81 15       	cp	r24, r1
    2b8a:	92 40       	sbci	r25, 0x02	; 2
    2b8c:	51 f4       	brne	.+20     	; 0x2ba2 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2b8e:	80 91 43 21 	lds	r24, 0x2143
    2b92:	81 50       	subi	r24, 0x01	; 1
    2b94:	80 93 43 21 	sts	0x2143, r24
    2b98:	81 11       	cpse	r24, r1
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	a5 cf       	rjmp	.-182    	; 0x2aec <sysclk_disable_module>
    2ba2:	08 95       	ret

00002ba4 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2bac:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2bae:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2bb0:	dc df       	rcall	.-72     	; 0x2b6a <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2bb2:	88 81       	ld	r24, Y
    2bb4:	81 60       	ori	r24, 0x01	; 1
    2bb6:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bb8:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2bba:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2bbc:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2bbe:	e5 ea       	ldi	r30, 0xA5	; 165
    2bc0:	fa e2       	ldi	r31, 0x2A	; 42
    2bc2:	81 81       	ldd	r24, Z+1	; 0x01
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bc8:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	1f 91       	pop	r17
    2bd0:	08 95       	ret

00002bd2 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    2bd2:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2bd4:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2bd6:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    2bd8:	fc 01       	movw	r30, r24
    2bda:	20 81       	ld	r18, Z
    2bdc:	2e 7f       	andi	r18, 0xFE	; 254
    2bde:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    2be0:	d3 df       	rcall	.-90     	; 0x2b88 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2be2:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2be4:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2be6:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2be8:	e5 ea       	ldi	r30, 0xA5	; 165
    2bea:	fa e2       	ldi	r31, 0x2A	; 42
    2bec:	81 81       	ldd	r24, Z+1	; 0x01
    2bee:	81 50       	subi	r24, 0x01	; 1
    2bf0:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2bf2:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    2bf4:	cf 91       	pop	r28
    2bf6:	08 95       	ret

00002bf8 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2bf8:	1f 92       	push	r1
    2bfa:	0f 92       	push	r0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	0f 92       	push	r0
    2c00:	11 24       	eor	r1, r1
    2c02:	2f 93       	push	r18
    2c04:	3f 93       	push	r19
    2c06:	4f 93       	push	r20
    2c08:	5f 93       	push	r21
    2c0a:	6f 93       	push	r22
    2c0c:	7f 93       	push	r23
    2c0e:	8f 93       	push	r24
    2c10:	9f 93       	push	r25
    2c12:	af 93       	push	r26
    2c14:	bf 93       	push	r27
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2c1a:	40 91 24 02 	lds	r20, 0x0224
    2c1e:	50 91 25 02 	lds	r21, 0x0225
    2c22:	e0 91 ab 2a 	lds	r30, 0x2AAB
    2c26:	f0 91 ac 2a 	lds	r31, 0x2AAC
    2c2a:	61 e0       	ldi	r22, 0x01	; 1
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	92 e0       	ldi	r25, 0x02	; 2
    2c30:	09 95       	icall
}
    2c32:	ff 91       	pop	r31
    2c34:	ef 91       	pop	r30
    2c36:	bf 91       	pop	r27
    2c38:	af 91       	pop	r26
    2c3a:	9f 91       	pop	r25
    2c3c:	8f 91       	pop	r24
    2c3e:	7f 91       	pop	r23
    2c40:	6f 91       	pop	r22
    2c42:	5f 91       	pop	r21
    2c44:	4f 91       	pop	r20
    2c46:	3f 91       	pop	r19
    2c48:	2f 91       	pop	r18
    2c4a:	0f 90       	pop	r0
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	0f 90       	pop	r0
    2c50:	1f 90       	pop	r1
    2c52:	18 95       	reti

00002c54 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2c62:	81 15       	cp	r24, r1
    2c64:	22 e0       	ldi	r18, 0x02	; 2
    2c66:	92 07       	cpc	r25, r18
    2c68:	61 f5       	brne	.+88     	; 0x2cc2 <adc_write_configuration+0x6e>
    2c6a:	8b 01       	movw	r16, r22
    2c6c:	ec 01       	movw	r28, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2c6e:	61 e2       	ldi	r22, 0x21	; 33
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	f0 d0       	rcall	.+480    	; 0x2e56 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2c76:	e8 2e       	mov	r14, r24
    2c78:	f1 2c       	mov	r15, r1
    2c7a:	60 e2       	ldi	r22, 0x20	; 32
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	ea d0       	rcall	.+468    	; 0x2e56 <nvm_read_byte>
		data <<= 8;
    2c82:	fe 2c       	mov	r15, r14
    2c84:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    2c86:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2c88:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    2c8a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	6d df       	rcall	.-294    	; 0x2b6a <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2c90:	88 81       	ld	r24, Y
    2c92:	81 70       	andi	r24, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	98 83       	st	Y, r25
	adc->CAL = cal;
    2c98:	ec 86       	std	Y+12, r14	; 0x0c
    2c9a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    2c9c:	f8 01       	movw	r30, r16
    2c9e:	24 81       	ldd	r18, Z+4	; 0x04
    2ca0:	35 81       	ldd	r19, Z+5	; 0x05
    2ca2:	28 8f       	std	Y+24, r18	; 0x18
    2ca4:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    2ca6:	91 81       	ldd	r25, Z+1	; 0x01
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    2cae:	92 81       	ldd	r25, Z+2	; 0x02
    2cb0:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    2cb2:	90 81       	ld	r25, Z
    2cb4:	99 83       	std	Y+1, r25	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    2cb6:	96 81       	ldd	r25, Z+6	; 0x06
    2cb8:	98 87       	std	Y+8, r25	; 0x08

	adc->CTRLA = enable;
    2cba:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	64 df       	rcall	.-312    	; 0x2b88 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2cc0:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    2cc2:	df 91       	pop	r29
    2cc4:	cf 91       	pop	r28
    2cc6:	1f 91       	pop	r17
    2cc8:	0f 91       	pop	r16
    2cca:	ff 90       	pop	r15
    2ccc:	ef 90       	pop	r14
    2cce:	df 90       	pop	r13
    2cd0:	08 95       	ret

00002cd2 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2cd2:	ff 92       	push	r15
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ce0:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2ce2:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2ce4:	42 df       	rcall	.-380    	; 0x2b6a <adc_enable_clock>

	conf->cmp = adc->CMP;
    2ce6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ce8:	99 8d       	ldd	r25, Y+25	; 0x19
    2cea:	f8 01       	movw	r30, r16
    2cec:	84 83       	std	Z+4, r24	; 0x04
    2cee:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    2cf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf6:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    2cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfa:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    2d00:	88 85       	ldd	r24, Y+8	; 0x08
    2d02:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    2d04:	ce 01       	movw	r24, r28
    2d06:	40 df       	rcall	.-384    	; 0x2b88 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d08:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	08 95       	ret

00002d16 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2d16:	ff 92       	push	r15
    2d18:	0f 93       	push	r16
    2d1a:	1f 93       	push	r17
    2d1c:	cf 93       	push	r28
    2d1e:	df 93       	push	r29
    2d20:	ec 01       	movw	r28, r24
    2d22:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d24:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2d26:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    2d28:	20 df       	rcall	.-448    	; 0x2b6a <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    2d34:	81 81       	ldd	r24, Z+1	; 0x01
    2d36:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    2d38:	83 81       	ldd	r24, Z+3	; 0x03
    2d3a:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    2d3c:	84 81       	ldd	r24, Z+4	; 0x04
    2d3e:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    2d40:	85 81       	ldd	r24, Z+5	; 0x05
    2d42:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    2d44:	86 81       	ldd	r24, Z+6	; 0x06
    2d46:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    2d48:	87 81       	ldd	r24, Z+7	; 0x07
    2d4a:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    2d4c:	80 85       	ldd	r24, Z+8	; 0x08
    2d4e:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    2d50:	81 85       	ldd	r24, Z+9	; 0x09
    2d52:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    2d54:	ce 01       	movw	r24, r28
    2d56:	18 df       	rcall	.-464    	; 0x2b88 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d58:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	ff 90       	pop	r15
    2d64:	08 95       	ret

00002d66 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    2d66:	ff 92       	push	r15
    2d68:	0f 93       	push	r16
    2d6a:	1f 93       	push	r17
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	ec 01       	movw	r28, r24
    2d72:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d74:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2d76:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    2d78:	f8 de       	rcall	.-528    	; 0x2b6a <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    2d7a:	88 a1       	ldd	r24, Y+32	; 0x20
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    2d80:	8a a1       	ldd	r24, Y+34	; 0x22
    2d82:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    2d84:	89 a1       	ldd	r24, Y+33	; 0x21
    2d86:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    2d88:	8e a1       	ldd	r24, Y+38	; 0x26
    2d8a:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    2d8c:	8f a1       	ldd	r24, Y+39	; 0x27
    2d8e:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    2d90:	88 a5       	ldd	r24, Y+40	; 0x28
    2d92:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    2d94:	89 a5       	ldd	r24, Y+41	; 0x29
    2d96:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    2d98:	8a a5       	ldd	r24, Y+42	; 0x2a
    2d9a:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    2d9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d9e:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    2da0:	8c a5       	ldd	r24, Y+44	; 0x2c
    2da2:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    2da4:	ce 01       	movw	r24, r28
    2da6:	f0 de       	rcall	.-544    	; 0x2b88 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2da8:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	08 95       	ret

00002db6 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2db6:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2db8:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2dba:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2dbc:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2dbe:	60 83       	st	Z, r22
	ret                             // Return to caller
    2dc0:	08 95       	ret

00002dc2 <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    2dc2:	9c 01       	movw	r18, r24
    2dc4:	e0 ec       	ldi	r30, 0xC0	; 192
    2dc6:	f1 e0       	ldi	r31, 0x01	; 1
    2dc8:	97 85       	ldd	r25, Z+15	; 0x0f
    2dca:	99 23       	and	r25, r25
    2dcc:	ec f3       	brlt	.-6      	; 0x2dc8 <nvm_eeprom_read_byte+0x6>
    2dce:	f9 01       	movw	r30, r18
    2dd0:	f0 5f       	subi	r31, 0xF0	; 240
    2dd2:	80 81       	ld	r24, Z
    2dd4:	08 95       	ret

00002dd6 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2dd6:	e0 ec       	ldi	r30, 0xC0	; 192
    2dd8:	f1 e0       	ldi	r31, 0x01	; 1
    2dda:	87 85       	ldd	r24, Z+15	; 0x0f
    2ddc:	88 23       	and	r24, r24
    2dde:	ec f3       	brlt	.-6      	; 0x2dda <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2de0:	80 91 cf 01 	lds	r24, 0x01CF
    2de4:	81 ff       	sbrs	r24, 1
    2de6:	07 c0       	rjmp	.+14     	; 0x2df6 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    2de8:	86 e3       	ldi	r24, 0x36	; 54
    2dea:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2dee:	61 e0       	ldi	r22, 0x01	; 1
    2df0:	8b ec       	ldi	r24, 0xCB	; 203
    2df2:	91 e0       	ldi	r25, 0x01	; 1
    2df4:	e0 cf       	rjmp	.-64     	; 0x2db6 <ccp_write_io>
    2df6:	08 95       	ret

00002df8 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2df8:	e0 ec       	ldi	r30, 0xC0	; 192
    2dfa:	f1 e0       	ldi	r31, 0x01	; 1
    2dfc:	97 85       	ldd	r25, Z+15	; 0x0f
    2dfe:	99 23       	and	r25, r25
    2e00:	ec f3       	brlt	.-6      	; 0x2dfc <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    2e02:	e8 2f       	mov	r30, r24
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	f0 5f       	subi	r31, 0xF0	; 240
    2e08:	60 83       	st	Z, r22
    2e0a:	08 95       	ret

00002e0c <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	18 2f       	mov	r17, r24
    2e18:	f9 2e       	mov	r15, r25
    2e1a:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    2e1c:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    2e20:	da df       	rcall	.-76     	; 0x2dd6 <nvm_eeprom_flush_buffer>
    2e22:	e0 ec       	ldi	r30, 0xC0	; 192
    2e24:	f1 e0       	ldi	r31, 0x01	; 1
    2e26:	27 85       	ldd	r18, Z+15	; 0x0f
    2e28:	22 23       	and	r18, r18
    2e2a:	ec f3       	brlt	.-6      	; 0x2e26 <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    2e2c:	6c 2f       	mov	r22, r28
    2e2e:	81 2f       	mov	r24, r17
    2e30:	e3 df       	rcall	.-58     	; 0x2df8 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    2e32:	c0 ec       	ldi	r28, 0xC0	; 192
    2e34:	d1 e0       	ldi	r29, 0x01	; 1
    2e36:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    2e38:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    2e3a:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2e3c:	85 e3       	ldi	r24, 0x35	; 53
    2e3e:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	8b ec       	ldi	r24, 0xCB	; 203
    2e44:	91 e0       	ldi	r25, 0x01	; 1
    2e46:	b7 df       	rcall	.-146    	; 0x2db6 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    2e48:	0a 87       	std	Y+10, r16	; 0x0a
}
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	08 95       	ret

00002e56 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    2e56:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    2e5a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    2e5c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    2e5e:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    2e62:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    2e64:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    2e68:	08 95       	ret

00002e6a <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    2e6a:	1f 92       	push	r1
    2e6c:	0f 92       	push	r0
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	0f 92       	push	r0
    2e72:	11 24       	eor	r1, r1
    2e74:	2f 93       	push	r18
    2e76:	3f 93       	push	r19
    2e78:	4f 93       	push	r20
    2e7a:	5f 93       	push	r21
    2e7c:	6f 93       	push	r22
    2e7e:	7f 93       	push	r23
    2e80:	8f 93       	push	r24
    2e82:	9f 93       	push	r25
    2e84:	af 93       	push	r26
    2e86:	bf 93       	push	r27
    2e88:	ef 93       	push	r30
    2e8a:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    2e8c:	e0 91 5e 21 	lds	r30, 0x215E
    2e90:	f0 91 5f 21 	lds	r31, 0x215F
    2e94:	30 97       	sbiw	r30, 0x00	; 0
    2e96:	09 f0       	breq	.+2      	; 0x2e9a <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    2e98:	09 95       	icall
	}
}
    2e9a:	ff 91       	pop	r31
    2e9c:	ef 91       	pop	r30
    2e9e:	bf 91       	pop	r27
    2ea0:	af 91       	pop	r26
    2ea2:	9f 91       	pop	r25
    2ea4:	8f 91       	pop	r24
    2ea6:	7f 91       	pop	r23
    2ea8:	6f 91       	pop	r22
    2eaa:	5f 91       	pop	r21
    2eac:	4f 91       	pop	r20
    2eae:	3f 91       	pop	r19
    2eb0:	2f 91       	pop	r18
    2eb2:	0f 90       	pop	r0
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	0f 90       	pop	r0
    2eb8:	1f 90       	pop	r1
    2eba:	18 95       	reti

00002ebc <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    2ebc:	1f 92       	push	r1
    2ebe:	0f 92       	push	r0
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	0f 92       	push	r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	2f 93       	push	r18
    2ec8:	3f 93       	push	r19
    2eca:	4f 93       	push	r20
    2ecc:	5f 93       	push	r21
    2ece:	6f 93       	push	r22
    2ed0:	7f 93       	push	r23
    2ed2:	8f 93       	push	r24
    2ed4:	9f 93       	push	r25
    2ed6:	af 93       	push	r26
    2ed8:	bf 93       	push	r27
    2eda:	ef 93       	push	r30
    2edc:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    2ede:	e0 91 5c 21 	lds	r30, 0x215C
    2ee2:	f0 91 5d 21 	lds	r31, 0x215D
    2ee6:	30 97       	sbiw	r30, 0x00	; 0
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <__vector_13+0x30>
		tc45_tcc4_err_callback();
    2eea:	09 95       	icall
	}
}
    2eec:	ff 91       	pop	r31
    2eee:	ef 91       	pop	r30
    2ef0:	bf 91       	pop	r27
    2ef2:	af 91       	pop	r26
    2ef4:	9f 91       	pop	r25
    2ef6:	8f 91       	pop	r24
    2ef8:	7f 91       	pop	r23
    2efa:	6f 91       	pop	r22
    2efc:	5f 91       	pop	r21
    2efe:	4f 91       	pop	r20
    2f00:	3f 91       	pop	r19
    2f02:	2f 91       	pop	r18
    2f04:	0f 90       	pop	r0
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	0f 90       	pop	r0
    2f0a:	1f 90       	pop	r1
    2f0c:	18 95       	reti

00002f0e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    2f0e:	1f 92       	push	r1
    2f10:	0f 92       	push	r0
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	0f 92       	push	r0
    2f16:	11 24       	eor	r1, r1
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	6f 93       	push	r22
    2f22:	7f 93       	push	r23
    2f24:	8f 93       	push	r24
    2f26:	9f 93       	push	r25
    2f28:	af 93       	push	r26
    2f2a:	bf 93       	push	r27
    2f2c:	ef 93       	push	r30
    2f2e:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    2f30:	e0 91 5a 21 	lds	r30, 0x215A
    2f34:	f0 91 5b 21 	lds	r31, 0x215B
    2f38:	30 97       	sbiw	r30, 0x00	; 0
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    2f3c:	09 95       	icall
	}
}
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	2f 93       	push	r18
    2f6c:	3f 93       	push	r19
    2f6e:	4f 93       	push	r20
    2f70:	5f 93       	push	r21
    2f72:	6f 93       	push	r22
    2f74:	7f 93       	push	r23
    2f76:	8f 93       	push	r24
    2f78:	9f 93       	push	r25
    2f7a:	af 93       	push	r26
    2f7c:	bf 93       	push	r27
    2f7e:	ef 93       	push	r30
    2f80:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    2f82:	e0 91 58 21 	lds	r30, 0x2158
    2f86:	f0 91 59 21 	lds	r31, 0x2159
    2f8a:	30 97       	sbiw	r30, 0x00	; 0
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    2f8e:	09 95       	icall
	}
}
    2f90:	ff 91       	pop	r31
    2f92:	ef 91       	pop	r30
    2f94:	bf 91       	pop	r27
    2f96:	af 91       	pop	r26
    2f98:	9f 91       	pop	r25
    2f9a:	8f 91       	pop	r24
    2f9c:	7f 91       	pop	r23
    2f9e:	6f 91       	pop	r22
    2fa0:	5f 91       	pop	r21
    2fa2:	4f 91       	pop	r20
    2fa4:	3f 91       	pop	r19
    2fa6:	2f 91       	pop	r18
    2fa8:	0f 90       	pop	r0
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	0f 90       	pop	r0
    2fae:	1f 90       	pop	r1
    2fb0:	18 95       	reti

00002fb2 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    2fb2:	1f 92       	push	r1
    2fb4:	0f 92       	push	r0
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	0f 92       	push	r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	2f 93       	push	r18
    2fbe:	3f 93       	push	r19
    2fc0:	4f 93       	push	r20
    2fc2:	5f 93       	push	r21
    2fc4:	6f 93       	push	r22
    2fc6:	7f 93       	push	r23
    2fc8:	8f 93       	push	r24
    2fca:	9f 93       	push	r25
    2fcc:	af 93       	push	r26
    2fce:	bf 93       	push	r27
    2fd0:	ef 93       	push	r30
    2fd2:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    2fd4:	e0 91 56 21 	lds	r30, 0x2156
    2fd8:	f0 91 57 21 	lds	r31, 0x2157
    2fdc:	30 97       	sbiw	r30, 0x00	; 0
    2fde:	09 f0       	breq	.+2      	; 0x2fe2 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    2fe0:	09 95       	icall
	}
}
    2fe2:	ff 91       	pop	r31
    2fe4:	ef 91       	pop	r30
    2fe6:	bf 91       	pop	r27
    2fe8:	af 91       	pop	r26
    2fea:	9f 91       	pop	r25
    2fec:	8f 91       	pop	r24
    2fee:	7f 91       	pop	r23
    2ff0:	6f 91       	pop	r22
    2ff2:	5f 91       	pop	r21
    2ff4:	4f 91       	pop	r20
    2ff6:	3f 91       	pop	r19
    2ff8:	2f 91       	pop	r18
    2ffa:	0f 90       	pop	r0
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	0f 90       	pop	r0
    3000:	1f 90       	pop	r1
    3002:	18 95       	reti

00003004 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    3004:	1f 92       	push	r1
    3006:	0f 92       	push	r0
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	0f 92       	push	r0
    300c:	11 24       	eor	r1, r1
    300e:	2f 93       	push	r18
    3010:	3f 93       	push	r19
    3012:	4f 93       	push	r20
    3014:	5f 93       	push	r21
    3016:	6f 93       	push	r22
    3018:	7f 93       	push	r23
    301a:	8f 93       	push	r24
    301c:	9f 93       	push	r25
    301e:	af 93       	push	r26
    3020:	bf 93       	push	r27
    3022:	ef 93       	push	r30
    3024:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    3026:	e0 91 54 21 	lds	r30, 0x2154
    302a:	f0 91 55 21 	lds	r31, 0x2155
    302e:	30 97       	sbiw	r30, 0x00	; 0
    3030:	09 f0       	breq	.+2      	; 0x3034 <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    3032:	09 95       	icall
	}
}
    3034:	ff 91       	pop	r31
    3036:	ef 91       	pop	r30
    3038:	bf 91       	pop	r27
    303a:	af 91       	pop	r26
    303c:	9f 91       	pop	r25
    303e:	8f 91       	pop	r24
    3040:	7f 91       	pop	r23
    3042:	6f 91       	pop	r22
    3044:	5f 91       	pop	r21
    3046:	4f 91       	pop	r20
    3048:	3f 91       	pop	r19
    304a:	2f 91       	pop	r18
    304c:	0f 90       	pop	r0
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	0f 90       	pop	r0
    3052:	1f 90       	pop	r1
    3054:	18 95       	reti

00003056 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    3056:	1f 92       	push	r1
    3058:	0f 92       	push	r0
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	0f 92       	push	r0
    305e:	11 24       	eor	r1, r1
    3060:	2f 93       	push	r18
    3062:	3f 93       	push	r19
    3064:	4f 93       	push	r20
    3066:	5f 93       	push	r21
    3068:	6f 93       	push	r22
    306a:	7f 93       	push	r23
    306c:	8f 93       	push	r24
    306e:	9f 93       	push	r25
    3070:	af 93       	push	r26
    3072:	bf 93       	push	r27
    3074:	ef 93       	push	r30
    3076:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    3078:	e0 91 52 21 	lds	r30, 0x2152
    307c:	f0 91 53 21 	lds	r31, 0x2153
    3080:	30 97       	sbiw	r30, 0x00	; 0
    3082:	09 f0       	breq	.+2      	; 0x3086 <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    3084:	09 95       	icall
	}
}
    3086:	ff 91       	pop	r31
    3088:	ef 91       	pop	r30
    308a:	bf 91       	pop	r27
    308c:	af 91       	pop	r26
    308e:	9f 91       	pop	r25
    3090:	8f 91       	pop	r24
    3092:	7f 91       	pop	r23
    3094:	6f 91       	pop	r22
    3096:	5f 91       	pop	r21
    3098:	4f 91       	pop	r20
    309a:	3f 91       	pop	r19
    309c:	2f 91       	pop	r18
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	0f 90       	pop	r0
    30a4:	1f 90       	pop	r1
    30a6:	18 95       	reti

000030a8 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    30a8:	1f 92       	push	r1
    30aa:	0f 92       	push	r0
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	0f 92       	push	r0
    30b0:	11 24       	eor	r1, r1
    30b2:	2f 93       	push	r18
    30b4:	3f 93       	push	r19
    30b6:	4f 93       	push	r20
    30b8:	5f 93       	push	r21
    30ba:	6f 93       	push	r22
    30bc:	7f 93       	push	r23
    30be:	8f 93       	push	r24
    30c0:	9f 93       	push	r25
    30c2:	af 93       	push	r26
    30c4:	bf 93       	push	r27
    30c6:	ef 93       	push	r30
    30c8:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    30ca:	e0 91 50 21 	lds	r30, 0x2150
    30ce:	f0 91 51 21 	lds	r31, 0x2151
    30d2:	30 97       	sbiw	r30, 0x00	; 0
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <__vector_19+0x30>
		tc45_tcc5_err_callback();
    30d6:	09 95       	icall
	}
}
    30d8:	ff 91       	pop	r31
    30da:	ef 91       	pop	r30
    30dc:	bf 91       	pop	r27
    30de:	af 91       	pop	r26
    30e0:	9f 91       	pop	r25
    30e2:	8f 91       	pop	r24
    30e4:	7f 91       	pop	r23
    30e6:	6f 91       	pop	r22
    30e8:	5f 91       	pop	r21
    30ea:	4f 91       	pop	r20
    30ec:	3f 91       	pop	r19
    30ee:	2f 91       	pop	r18
    30f0:	0f 90       	pop	r0
    30f2:	0f be       	out	0x3f, r0	; 63
    30f4:	0f 90       	pop	r0
    30f6:	1f 90       	pop	r1
    30f8:	18 95       	reti

000030fa <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    30fa:	1f 92       	push	r1
    30fc:	0f 92       	push	r0
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	0f 92       	push	r0
    3102:	11 24       	eor	r1, r1
    3104:	2f 93       	push	r18
    3106:	3f 93       	push	r19
    3108:	4f 93       	push	r20
    310a:	5f 93       	push	r21
    310c:	6f 93       	push	r22
    310e:	7f 93       	push	r23
    3110:	8f 93       	push	r24
    3112:	9f 93       	push	r25
    3114:	af 93       	push	r26
    3116:	bf 93       	push	r27
    3118:	ef 93       	push	r30
    311a:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    311c:	e0 91 4e 21 	lds	r30, 0x214E
    3120:	f0 91 4f 21 	lds	r31, 0x214F
    3124:	30 97       	sbiw	r30, 0x00	; 0
    3126:	09 f0       	breq	.+2      	; 0x312a <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    3128:	09 95       	icall
	}
}
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	bf 91       	pop	r27
    3130:	af 91       	pop	r26
    3132:	9f 91       	pop	r25
    3134:	8f 91       	pop	r24
    3136:	7f 91       	pop	r23
    3138:	6f 91       	pop	r22
    313a:	5f 91       	pop	r21
    313c:	4f 91       	pop	r20
    313e:	3f 91       	pop	r19
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	0f 90       	pop	r0
    3148:	1f 90       	pop	r1
    314a:	18 95       	reti

0000314c <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    314c:	1f 92       	push	r1
    314e:	0f 92       	push	r0
    3150:	0f b6       	in	r0, 0x3f	; 63
    3152:	0f 92       	push	r0
    3154:	11 24       	eor	r1, r1
    3156:	2f 93       	push	r18
    3158:	3f 93       	push	r19
    315a:	4f 93       	push	r20
    315c:	5f 93       	push	r21
    315e:	6f 93       	push	r22
    3160:	7f 93       	push	r23
    3162:	8f 93       	push	r24
    3164:	9f 93       	push	r25
    3166:	af 93       	push	r26
    3168:	bf 93       	push	r27
    316a:	ef 93       	push	r30
    316c:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    316e:	e0 91 4c 21 	lds	r30, 0x214C
    3172:	f0 91 4d 21 	lds	r31, 0x214D
    3176:	30 97       	sbiw	r30, 0x00	; 0
    3178:	09 f0       	breq	.+2      	; 0x317c <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    317a:	09 95       	icall
	}
}
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	bf 91       	pop	r27
    3182:	af 91       	pop	r26
    3184:	9f 91       	pop	r25
    3186:	8f 91       	pop	r24
    3188:	7f 91       	pop	r23
    318a:	6f 91       	pop	r22
    318c:	5f 91       	pop	r21
    318e:	4f 91       	pop	r20
    3190:	3f 91       	pop	r19
    3192:	2f 91       	pop	r18
    3194:	0f 90       	pop	r0
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	0f 90       	pop	r0
    319a:	1f 90       	pop	r1
    319c:	18 95       	reti

0000319e <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    319e:	1f 92       	push	r1
    31a0:	0f 92       	push	r0
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	0f 92       	push	r0
    31a6:	11 24       	eor	r1, r1
    31a8:	2f 93       	push	r18
    31aa:	3f 93       	push	r19
    31ac:	4f 93       	push	r20
    31ae:	5f 93       	push	r21
    31b0:	6f 93       	push	r22
    31b2:	7f 93       	push	r23
    31b4:	8f 93       	push	r24
    31b6:	9f 93       	push	r25
    31b8:	af 93       	push	r26
    31ba:	bf 93       	push	r27
    31bc:	ef 93       	push	r30
    31be:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    31c0:	e0 91 4a 21 	lds	r30, 0x214A
    31c4:	f0 91 4b 21 	lds	r31, 0x214B
    31c8:	30 97       	sbiw	r30, 0x00	; 0
    31ca:	09 f0       	breq	.+2      	; 0x31ce <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    31cc:	09 95       	icall
	}
}
    31ce:	ff 91       	pop	r31
    31d0:	ef 91       	pop	r30
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	7f 91       	pop	r23
    31dc:	6f 91       	pop	r22
    31de:	5f 91       	pop	r21
    31e0:	4f 91       	pop	r20
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	0f 90       	pop	r0
    31ec:	1f 90       	pop	r1
    31ee:	18 95       	reti

000031f0 <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    31f0:	1f 92       	push	r1
    31f2:	0f 92       	push	r0
    31f4:	0f b6       	in	r0, 0x3f	; 63
    31f6:	0f 92       	push	r0
    31f8:	11 24       	eor	r1, r1
    31fa:	2f 93       	push	r18
    31fc:	3f 93       	push	r19
    31fe:	4f 93       	push	r20
    3200:	5f 93       	push	r21
    3202:	6f 93       	push	r22
    3204:	7f 93       	push	r23
    3206:	8f 93       	push	r24
    3208:	9f 93       	push	r25
    320a:	af 93       	push	r26
    320c:	bf 93       	push	r27
    320e:	ef 93       	push	r30
    3210:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    3212:	e0 91 48 21 	lds	r30, 0x2148
    3216:	f0 91 49 21 	lds	r31, 0x2149
    321a:	30 97       	sbiw	r30, 0x00	; 0
    321c:	09 f0       	breq	.+2      	; 0x3220 <__vector_37+0x30>
		tc45_tcd5_err_callback();
    321e:	09 95       	icall
	}
}
    3220:	ff 91       	pop	r31
    3222:	ef 91       	pop	r30
    3224:	bf 91       	pop	r27
    3226:	af 91       	pop	r26
    3228:	9f 91       	pop	r25
    322a:	8f 91       	pop	r24
    322c:	7f 91       	pop	r23
    322e:	6f 91       	pop	r22
    3230:	5f 91       	pop	r21
    3232:	4f 91       	pop	r20
    3234:	3f 91       	pop	r19
    3236:	2f 91       	pop	r18
    3238:	0f 90       	pop	r0
    323a:	0f be       	out	0x3f, r0	; 63
    323c:	0f 90       	pop	r0
    323e:	1f 90       	pop	r1
    3240:	18 95       	reti

00003242 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    3242:	1f 92       	push	r1
    3244:	0f 92       	push	r0
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	0f 92       	push	r0
    324a:	11 24       	eor	r1, r1
    324c:	2f 93       	push	r18
    324e:	3f 93       	push	r19
    3250:	4f 93       	push	r20
    3252:	5f 93       	push	r21
    3254:	6f 93       	push	r22
    3256:	7f 93       	push	r23
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	af 93       	push	r26
    325e:	bf 93       	push	r27
    3260:	ef 93       	push	r30
    3262:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    3264:	e0 91 46 21 	lds	r30, 0x2146
    3268:	f0 91 47 21 	lds	r31, 0x2147
    326c:	30 97       	sbiw	r30, 0x00	; 0
    326e:	09 f0       	breq	.+2      	; 0x3272 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    3270:	09 95       	icall
	}
}
    3272:	ff 91       	pop	r31
    3274:	ef 91       	pop	r30
    3276:	bf 91       	pop	r27
    3278:	af 91       	pop	r26
    327a:	9f 91       	pop	r25
    327c:	8f 91       	pop	r24
    327e:	7f 91       	pop	r23
    3280:	6f 91       	pop	r22
    3282:	5f 91       	pop	r21
    3284:	4f 91       	pop	r20
    3286:	3f 91       	pop	r19
    3288:	2f 91       	pop	r18
    328a:	0f 90       	pop	r0
    328c:	0f be       	out	0x3f, r0	; 63
    328e:	0f 90       	pop	r0
    3290:	1f 90       	pop	r1
    3292:	18 95       	reti

00003294 <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    3294:	1f 92       	push	r1
    3296:	0f 92       	push	r0
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	0f 92       	push	r0
    329c:	11 24       	eor	r1, r1
    329e:	2f 93       	push	r18
    32a0:	3f 93       	push	r19
    32a2:	4f 93       	push	r20
    32a4:	5f 93       	push	r21
    32a6:	6f 93       	push	r22
    32a8:	7f 93       	push	r23
    32aa:	8f 93       	push	r24
    32ac:	9f 93       	push	r25
    32ae:	af 93       	push	r26
    32b0:	bf 93       	push	r27
    32b2:	ef 93       	push	r30
    32b4:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    32b6:	e0 91 44 21 	lds	r30, 0x2144
    32ba:	f0 91 45 21 	lds	r31, 0x2145
    32be:	30 97       	sbiw	r30, 0x00	; 0
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    32c2:	09 95       	icall
	}
}
    32c4:	ff 91       	pop	r31
    32c6:	ef 91       	pop	r30
    32c8:	bf 91       	pop	r27
    32ca:	af 91       	pop	r26
    32cc:	9f 91       	pop	r25
    32ce:	8f 91       	pop	r24
    32d0:	7f 91       	pop	r23
    32d2:	6f 91       	pop	r22
    32d4:	5f 91       	pop	r21
    32d6:	4f 91       	pop	r20
    32d8:	3f 91       	pop	r19
    32da:	2f 91       	pop	r18
    32dc:	0f 90       	pop	r0
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	0f 90       	pop	r0
    32e2:	1f 90       	pop	r1
    32e4:	18 95       	reti

000032e6 <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    32e6:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    32e8:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    32ea:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    32ec:	28 2f       	mov	r18, r24
    32ee:	39 2f       	mov	r19, r25
    32f0:	21 15       	cp	r18, r1
    32f2:	88 e0       	ldi	r24, 0x08	; 8
    32f4:	38 07       	cpc	r19, r24
    32f6:	39 f4       	brne	.+14     	; 0x3306 <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    32f8:	61 e0       	ldi	r22, 0x01	; 1
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	eb db       	rcall	.-2090   	; 0x2ad4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    32fe:	64 e0       	ldi	r22, 0x04	; 4
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	e8 db       	rcall	.-2096   	; 0x2ad4 <sysclk_enable_module>
    3304:	17 c0       	rjmp	.+46     	; 0x3334 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    3306:	20 34       	cpi	r18, 0x40	; 64
    3308:	88 e0       	ldi	r24, 0x08	; 8
    330a:	38 07       	cpc	r19, r24
    330c:	39 f4       	brne	.+14     	; 0x331c <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    330e:	62 e0       	ldi	r22, 0x02	; 2
    3310:	83 e0       	ldi	r24, 0x03	; 3
    3312:	e0 db       	rcall	.-2112   	; 0x2ad4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3314:	64 e0       	ldi	r22, 0x04	; 4
    3316:	83 e0       	ldi	r24, 0x03	; 3
    3318:	dd db       	rcall	.-2118   	; 0x2ad4 <sysclk_enable_module>
    331a:	0c c0       	rjmp	.+24     	; 0x3334 <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    331c:	20 34       	cpi	r18, 0x40	; 64
    331e:	39 40       	sbci	r19, 0x09	; 9
    3320:	39 f4       	brne	.+14     	; 0x3330 <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    3322:	62 e0       	ldi	r22, 0x02	; 2
    3324:	84 e0       	ldi	r24, 0x04	; 4
    3326:	d6 db       	rcall	.-2132   	; 0x2ad4 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3328:	64 e0       	ldi	r22, 0x04	; 4
    332a:	84 e0       	ldi	r24, 0x04	; 4
    332c:	d3 db       	rcall	.-2138   	; 0x2ad4 <sysclk_enable_module>
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3330:	cf bf       	out	0x3f, r28	; 63
    3332:	09 c0       	rjmp	.+18     	; 0x3346 <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3334:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    3336:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3338:	e5 ea       	ldi	r30, 0xA5	; 165
    333a:	fa e2       	ldi	r31, 0x2A	; 42
    333c:	81 81       	ldd	r24, Z+1	; 0x01
    333e:	8f 5f       	subi	r24, 0xFF	; 255
    3340:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3342:	9f bf       	out	0x3f, r25	; 63
    3344:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    3346:	cf 91       	pop	r28
    3348:	08 95       	ret

0000334a <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    334a:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    334c:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    334e:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3350:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    3352:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3354:	e5 ea       	ldi	r30, 0xA5	; 165
    3356:	fa e2       	ldi	r31, 0x2A	; 42
    3358:	21 81       	ldd	r18, Z+1	; 0x01
    335a:	21 50       	subi	r18, 0x01	; 1
    335c:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    335e:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3360:	28 2f       	mov	r18, r24
    3362:	39 2f       	mov	r19, r25
    3364:	21 15       	cp	r18, r1
    3366:	88 e0       	ldi	r24, 0x08	; 8
    3368:	38 07       	cpc	r19, r24
    336a:	39 f4       	brne	.+14     	; 0x337a <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	83 e0       	ldi	r24, 0x03	; 3
    3370:	bd db       	rcall	.-2182   	; 0x2aec <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3372:	64 e0       	ldi	r22, 0x04	; 4
    3374:	83 e0       	ldi	r24, 0x03	; 3
    3376:	ba db       	rcall	.-2188   	; 0x2aec <sysclk_disable_module>
    3378:	17 c0       	rjmp	.+46     	; 0x33a8 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    337a:	20 34       	cpi	r18, 0x40	; 64
    337c:	88 e0       	ldi	r24, 0x08	; 8
    337e:	38 07       	cpc	r19, r24
    3380:	39 f4       	brne	.+14     	; 0x3390 <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3382:	62 e0       	ldi	r22, 0x02	; 2
    3384:	83 e0       	ldi	r24, 0x03	; 3
    3386:	b2 db       	rcall	.-2204   	; 0x2aec <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3388:	64 e0       	ldi	r22, 0x04	; 4
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	af db       	rcall	.-2210   	; 0x2aec <sysclk_disable_module>
    338e:	0c c0       	rjmp	.+24     	; 0x33a8 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    3390:	20 34       	cpi	r18, 0x40	; 64
    3392:	39 40       	sbci	r19, 0x09	; 9
    3394:	39 f4       	brne	.+14     	; 0x33a4 <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    3396:	61 e0       	ldi	r22, 0x01	; 1
    3398:	84 e0       	ldi	r24, 0x04	; 4
    339a:	a8 db       	rcall	.-2224   	; 0x2aec <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    339c:	64 e0       	ldi	r22, 0x04	; 4
    339e:	84 e0       	ldi	r24, 0x04	; 4
    33a0:	a5 db       	rcall	.-2230   	; 0x2aec <sysclk_disable_module>
    33a2:	02 c0       	rjmp	.+4      	; 0x33a8 <tc45_disable+0x5e>
    33a4:	cf bf       	out	0x3f, r28	; 63
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <tc45_disable+0x60>
    33a8:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    33aa:	cf 91       	pop	r28
    33ac:	08 95       	ret

000033ae <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    33ae:	81 15       	cp	r24, r1
    33b0:	28 e0       	ldi	r18, 0x08	; 8
    33b2:	92 07       	cpc	r25, r18
    33b4:	29 f4       	brne	.+10     	; 0x33c0 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    33b6:	60 93 5e 21 	sts	0x215E, r22
    33ba:	70 93 5f 21 	sts	0x215F, r23
    33be:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    33c0:	80 34       	cpi	r24, 0x40	; 64
    33c2:	28 e0       	ldi	r18, 0x08	; 8
    33c4:	92 07       	cpc	r25, r18
    33c6:	29 f4       	brne	.+10     	; 0x33d2 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    33c8:	60 93 52 21 	sts	0x2152, r22
    33cc:	70 93 53 21 	sts	0x2153, r23
    33d0:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    33d2:	80 34       	cpi	r24, 0x40	; 64
    33d4:	99 40       	sbci	r25, 0x09	; 9
    33d6:	21 f4       	brne	.+8      	; 0x33e0 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    33d8:	60 93 4a 21 	sts	0x214A, r22
    33dc:	70 93 4b 21 	sts	0x214B, r23
    33e0:	08 95       	ret

000033e2 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    33e2:	1f 92       	push	r1
    33e4:	0f 92       	push	r0
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	0f 92       	push	r0
    33ea:	11 24       	eor	r1, r1
    33ec:	2f 93       	push	r18
    33ee:	3f 93       	push	r19
    33f0:	4f 93       	push	r20
    33f2:	5f 93       	push	r21
    33f4:	6f 93       	push	r22
    33f6:	7f 93       	push	r23
    33f8:	8f 93       	push	r24
    33fa:	9f 93       	push	r25
    33fc:	af 93       	push	r26
    33fe:	bf 93       	push	r27
    3400:	cf 93       	push	r28
    3402:	df 93       	push	r29
    3404:	ef 93       	push	r30
    3406:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3408:	e0 91 60 21 	lds	r30, 0x2160
    340c:	f0 91 61 21 	lds	r31, 0x2161
    3410:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3412:	83 ff       	sbrs	r24, 3
    3414:	08 c0       	rjmp	.+16     	; 0x3426 <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    3416:	88 60       	ori	r24, 0x08	; 8
    3418:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    341a:	83 e0       	ldi	r24, 0x03	; 3
    341c:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    341e:	86 ef       	ldi	r24, 0xF6	; 246
    3420:	80 93 6a 21 	sts	0x216A, r24
    3424:	95 c0       	rjmp	.+298    	; 0x3550 <__vector_11+0x16e>
    3426:	98 2f       	mov	r25, r24
    3428:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    342a:	31 f0       	breq	.+12     	; 0x3438 <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    342c:	83 e0       	ldi	r24, 0x03	; 3
    342e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    3430:	8f ef       	ldi	r24, 0xFF	; 255
    3432:	80 93 6a 21 	sts	0x216A, r24
    3436:	8c c0       	rjmp	.+280    	; 0x3550 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    3438:	86 ff       	sbrs	r24, 6
    343a:	43 c0       	rjmp	.+134    	; 0x34c2 <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    343c:	c0 e6       	ldi	r28, 0x60	; 96
    343e:	d1 e2       	ldi	r29, 0x21	; 33
    3440:	aa 81       	ldd	r26, Y+2	; 0x02
    3442:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	9d 81       	ldd	r25, Y+5	; 0x05
    3448:	14 96       	adiw	r26, 0x04	; 4
    344a:	2d 91       	ld	r18, X+
    344c:	3c 91       	ld	r19, X
    344e:	15 97       	sbiw	r26, 0x05	; 5
    3450:	82 17       	cp	r24, r18
    3452:	93 07       	cpc	r25, r19
    3454:	6c f4       	brge	.+26     	; 0x3470 <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    3456:	9c 01       	movw	r18, r24
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	20 93 64 21 	sts	0x2164, r18
    3460:	30 93 65 21 	sts	0x2165, r19
    3464:	a8 0f       	add	r26, r24
    3466:	b9 1f       	adc	r27, r25
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	8c 91       	ld	r24, X
    346c:	87 83       	std	Z+7, r24	; 0x07
    346e:	70 c0       	rjmp	.+224    	; 0x3550 <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    3470:	80 91 66 21 	lds	r24, 0x2166
    3474:	90 91 67 21 	lds	r25, 0x2167
    3478:	18 96       	adiw	r26, 0x08	; 8
    347a:	2d 91       	ld	r18, X+
    347c:	3c 91       	ld	r19, X
    347e:	19 97       	sbiw	r26, 0x09	; 9
    3480:	82 17       	cp	r24, r18
    3482:	93 07       	cpc	r25, r19
    3484:	c8 f4       	brcc	.+50     	; 0x34b8 <__vector_11+0xd6>

		if (transfer.read) {
    3486:	20 91 68 21 	lds	r18, 0x2168
    348a:	22 23       	and	r18, r18
    348c:	21 f0       	breq	.+8      	; 0x3496 <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    348e:	86 81       	ldd	r24, Z+6	; 0x06
    3490:	81 60       	ori	r24, 0x01	; 1
    3492:	86 83       	std	Z+6, r24	; 0x06
    3494:	5d c0       	rjmp	.+186    	; 0x3550 <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    3496:	16 96       	adiw	r26, 0x06	; 6
    3498:	2d 91       	ld	r18, X+
    349a:	3c 91       	ld	r19, X
    349c:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    349e:	ac 01       	movw	r20, r24
    34a0:	4f 5f       	subi	r20, 0xFF	; 255
    34a2:	5f 4f       	sbci	r21, 0xFF	; 255
    34a4:	40 93 66 21 	sts	0x2166, r20
    34a8:	50 93 67 21 	sts	0x2167, r21
    34ac:	d9 01       	movw	r26, r18
    34ae:	a8 0f       	add	r26, r24
    34b0:	b9 1f       	adc	r27, r25
    34b2:	8c 91       	ld	r24, X
    34b4:	87 83       	std	Z+7, r24	; 0x07
    34b6:	4c c0       	rjmp	.+152    	; 0x3550 <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    34b8:	83 e0       	ldi	r24, 0x03	; 3
    34ba:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    34bc:	10 92 6a 21 	sts	0x216A, r1
    34c0:	47 c0       	rjmp	.+142    	; 0x3550 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    34c2:	88 23       	and	r24, r24
    34c4:	0c f0       	brlt	.+2      	; 0x34c8 <__vector_11+0xe6>
    34c6:	41 c0       	rjmp	.+130    	; 0x354a <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    34c8:	c0 e6       	ldi	r28, 0x60	; 96
    34ca:	d1 e2       	ldi	r29, 0x21	; 33
    34cc:	aa 81       	ldd	r26, Y+2	; 0x02
    34ce:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    34d0:	8e 81       	ldd	r24, Y+6	; 0x06
    34d2:	9f 81       	ldd	r25, Y+7	; 0x07
    34d4:	18 96       	adiw	r26, 0x08	; 8
    34d6:	2d 91       	ld	r18, X+
    34d8:	3c 91       	ld	r19, X
    34da:	19 97       	sbiw	r26, 0x09	; 9
    34dc:	82 17       	cp	r24, r18
    34de:	93 07       	cpc	r25, r19
    34e0:	70 f5       	brcc	.+92     	; 0x353e <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    34e2:	16 96       	adiw	r26, 0x06	; 6
    34e4:	6d 91       	ld	r22, X+
    34e6:	7c 91       	ld	r23, X
    34e8:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    34ea:	9c 01       	movw	r18, r24
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	20 93 66 21 	sts	0x2166, r18
    34f4:	30 93 67 21 	sts	0x2167, r19
    34f8:	47 81       	ldd	r20, Z+7	; 0x07
    34fa:	86 0f       	add	r24, r22
    34fc:	97 1f       	adc	r25, r23
    34fe:	ec 01       	movw	r28, r24
    3500:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    3502:	eb 01       	movw	r28, r22
    3504:	88 81       	ld	r24, Y
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	18 96       	adiw	r26, 0x08	; 8
    350c:	4d 91       	ld	r20, X+
    350e:	5c 91       	ld	r21, X
    3510:	19 97       	sbiw	r26, 0x09	; 9
    3512:	48 17       	cp	r20, r24
    3514:	59 07       	cpc	r21, r25
    3516:	21 f0       	breq	.+8      	; 0x3520 <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    3518:	18 96       	adiw	r26, 0x08	; 8
    351a:	8d 93       	st	X+, r24
    351c:	9c 93       	st	X, r25
    351e:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    3520:	18 96       	adiw	r26, 0x08	; 8
    3522:	8d 91       	ld	r24, X+
    3524:	9c 91       	ld	r25, X
    3526:	19 97       	sbiw	r26, 0x09	; 9
    3528:	28 17       	cp	r18, r24
    352a:	39 07       	cpc	r19, r25
    352c:	18 f4       	brcc	.+6      	; 0x3534 <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	83 83       	std	Z+3, r24	; 0x03
    3532:	0e c0       	rjmp	.+28     	; 0x3550 <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3534:	87 e0       	ldi	r24, 0x07	; 7
    3536:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    3538:	10 92 6a 21 	sts	0x216A, r1
    353c:	09 c0       	rjmp	.+18     	; 0x3550 <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    353e:	83 e0       	ldi	r24, 0x03	; 3
    3540:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3542:	89 ef       	ldi	r24, 0xF9	; 249
    3544:	80 93 6a 21 	sts	0x216A, r24
    3548:	03 c0       	rjmp	.+6      	; 0x3550 <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    354a:	8b ef       	ldi	r24, 0xFB	; 251
    354c:	80 93 6a 21 	sts	0x216A, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    3550:	ff 91       	pop	r31
    3552:	ef 91       	pop	r30
    3554:	df 91       	pop	r29
    3556:	cf 91       	pop	r28
    3558:	bf 91       	pop	r27
    355a:	af 91       	pop	r26
    355c:	9f 91       	pop	r25
    355e:	8f 91       	pop	r24
    3560:	7f 91       	pop	r23
    3562:	6f 91       	pop	r22
    3564:	5f 91       	pop	r21
    3566:	4f 91       	pop	r20
    3568:	3f 91       	pop	r19
    356a:	2f 91       	pop	r18
    356c:	0f 90       	pop	r0
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	0f 90       	pop	r0
    3572:	1f 90       	pop	r1
    3574:	18 95       	reti

00003576 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3576:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3578:	db 01       	movw	r26, r22
    357a:	14 96       	adiw	r26, 0x04	; 4
    357c:	8c 91       	ld	r24, X
    357e:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    3580:	88 eb       	ldi	r24, 0xB8	; 184
    3582:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    3588:	e0 e6       	ldi	r30, 0x60	; 96
    358a:	f1 e2       	ldi	r31, 0x21	; 33
    358c:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    358e:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    3590:	e0 ea       	ldi	r30, 0xA0	; 160
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	82 81       	ldd	r24, Z+2	; 0x02
    3596:	82 60       	ori	r24, 0x02	; 2
    3598:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    359a:	78 94       	sei

	return STATUS_OK;
}
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	08 95       	ret

000035a0 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    35a0:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    35a2:	89 2b       	or	r24, r25
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <twi_master_transfer+0x8>
    35a6:	49 c0       	rjmp	.+146    	; 0x363a <twi_master_transfer+0x9a>
    35a8:	61 15       	cp	r22, r1
    35aa:	71 05       	cpc	r23, r1
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <twi_master_transfer+0x10>
    35ae:	47 c0       	rjmp	.+142    	; 0x363e <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    35b0:	fb 01       	movw	r30, r22
    35b2:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    35b4:	80 91 69 21 	lds	r24, 0x2169
    35b8:	88 23       	and	r24, r24
    35ba:	19 f0       	breq	.+6      	; 0x35c2 <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    35bc:	99 23       	and	r25, r25
    35be:	f1 f3       	breq	.-4      	; 0x35bc <twi_master_transfer+0x1c>
    35c0:	40 c0       	rjmp	.+128    	; 0x3642 <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    35c2:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    35c4:	f8 94       	cli
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    35c6:	e0 e6       	ldi	r30, 0x60	; 96
    35c8:	f1 e2       	ldi	r31, 0x21	; 33
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    35ce:	90 e8       	ldi	r25, 0x80	; 128
    35d0:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35d2:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    35d4:	a0 83       	st	Z, r26
    35d6:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    35d8:	62 83       	std	Z+2, r22	; 0x02
    35da:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    35dc:	14 82       	std	Z+4, r1	; 0x04
    35de:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    35e0:	16 82       	std	Z+6, r1	; 0x06
    35e2:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    35e4:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    35e6:	fb 01       	movw	r30, r22
    35e8:	80 81       	ld	r24, Z
    35ea:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    35ec:	24 81       	ldd	r18, Z+4	; 0x04
    35ee:	35 81       	ldd	r19, Z+5	; 0x05
    35f0:	23 2b       	or	r18, r19
    35f2:	11 f4       	brne	.+4      	; 0x35f8 <twi_master_transfer+0x58>
    35f4:	41 11       	cpse	r20, r1
    35f6:	03 c0       	rjmp	.+6      	; 0x35fe <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    35f8:	16 96       	adiw	r26, 0x06	; 6
    35fa:	8c 93       	st	X, r24
    35fc:	03 c0       	rjmp	.+6      	; 0x3604 <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    35fe:	81 60       	ori	r24, 0x01	; 1
    3600:	16 96       	adiw	r26, 0x06	; 6
    3602:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    3604:	e0 e6       	ldi	r30, 0x60	; 96
    3606:	f1 e2       	ldi	r31, 0x21	; 33
    3608:	82 85       	ldd	r24, Z+10	; 0x0a
    360a:	80 38       	cpi	r24, 0x80	; 128
    360c:	e9 f3       	breq	.-6      	; 0x3608 <twi_master_transfer+0x68>

	while (! twim_idle(transfer.bus)) { barrier(); }
    360e:	e0 91 60 21 	lds	r30, 0x2160
    3612:	f0 91 61 21 	lds	r31, 0x2161
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3616:	84 81       	ldd	r24, Z+4	; 0x04
    3618:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    361a:	81 30       	cpi	r24, 0x01	; 1
    361c:	49 f0       	breq	.+18     	; 0x3630 <twi_master_transfer+0x90>
    361e:	a0 e6       	ldi	r26, 0x60	; 96
    3620:	b1 e2       	ldi	r27, 0x21	; 33
    3622:	ed 91       	ld	r30, X+
    3624:	fc 91       	ld	r31, X
    3626:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3628:	84 81       	ldd	r24, Z+4	; 0x04
    362a:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    362c:	81 30       	cpi	r24, 0x01	; 1
    362e:	c9 f7       	brne	.-14     	; 0x3622 <twi_master_transfer+0x82>

	status_code_t const status = transfer.status;
    3630:	e0 e6       	ldi	r30, 0x60	; 96
    3632:	f1 e2       	ldi	r31, 0x21	; 33
    3634:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    3636:	11 86       	std	Z+9, r1	; 0x09
    3638:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    363a:	88 ef       	ldi	r24, 0xF8	; 248
    363c:	08 95       	ret
    363e:	88 ef       	ldi	r24, 0xF8	; 248
    3640:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    3642:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    3644:	08 95       	ret

00003646 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3646:	fc 01       	movw	r30, r24
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	95 ff       	sbrs	r25, 5
    364c:	fd cf       	rjmp	.-6      	; 0x3648 <usart_putchar+0x2>
    364e:	60 83       	st	Z, r22
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	08 95       	ret

00003656 <usart_getchar>:
    3656:	fc 01       	movw	r30, r24
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	99 23       	and	r25, r25
    365c:	ec f7       	brge	.-6      	; 0x3658 <usart_getchar+0x2>
    365e:	80 81       	ld	r24, Z
    3660:	08 95       	ret

00003662 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3662:	2f 92       	push	r2
    3664:	3f 92       	push	r3
    3666:	4f 92       	push	r4
    3668:	5f 92       	push	r5
    366a:	6f 92       	push	r6
    366c:	7f 92       	push	r7
    366e:	8f 92       	push	r8
    3670:	9f 92       	push	r9
    3672:	af 92       	push	r10
    3674:	bf 92       	push	r11
    3676:	cf 92       	push	r12
    3678:	df 92       	push	r13
    367a:	ef 92       	push	r14
    367c:	ff 92       	push	r15
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	1c 01       	movw	r2, r24
    3686:	2a 01       	movw	r4, r20
    3688:	3b 01       	movw	r6, r22
    368a:	48 01       	movw	r8, r16
    368c:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    368e:	d9 01       	movw	r26, r18
    3690:	c8 01       	movw	r24, r16
    3692:	68 94       	set
    3694:	12 f8       	bld	r1, 2
    3696:	b6 95       	lsr	r27
    3698:	a7 95       	ror	r26
    369a:	97 95       	ror	r25
    369c:	87 95       	ror	r24
    369e:	16 94       	lsr	r1
    36a0:	d1 f7       	brne	.-12     	; 0x3696 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    36a2:	b9 01       	movw	r22, r18
    36a4:	a8 01       	movw	r20, r16
    36a6:	03 2e       	mov	r0, r19
    36a8:	36 e1       	ldi	r19, 0x16	; 22
    36aa:	76 95       	lsr	r23
    36ac:	67 95       	ror	r22
    36ae:	57 95       	ror	r21
    36b0:	47 95       	ror	r20
    36b2:	3a 95       	dec	r19
    36b4:	d1 f7       	brne	.-12     	; 0x36aa <usart_set_baudrate+0x48>
    36b6:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    36b8:	f1 01       	movw	r30, r2
    36ba:	23 81       	ldd	r18, Z+3	; 0x03
    36bc:	22 fd       	sbrc	r18, 2
    36be:	08 c0       	rjmp	.+16     	; 0x36d0 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    36c0:	b6 95       	lsr	r27
    36c2:	a7 95       	ror	r26
    36c4:	97 95       	ror	r25
    36c6:	87 95       	ror	r24
		min_rate /= 2;
    36c8:	76 95       	lsr	r23
    36ca:	67 95       	ror	r22
    36cc:	57 95       	ror	r21
    36ce:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    36d0:	84 15       	cp	r24, r4
    36d2:	95 05       	cpc	r25, r5
    36d4:	a6 05       	cpc	r26, r6
    36d6:	b7 05       	cpc	r27, r7
    36d8:	08 f4       	brcc	.+2      	; 0x36dc <usart_set_baudrate+0x7a>
    36da:	aa c0       	rjmp	.+340    	; 0x3830 <usart_set_baudrate+0x1ce>
    36dc:	44 16       	cp	r4, r20
    36de:	55 06       	cpc	r5, r21
    36e0:	66 06       	cpc	r6, r22
    36e2:	77 06       	cpc	r7, r23
    36e4:	08 f4       	brcc	.+2      	; 0x36e8 <usart_set_baudrate+0x86>
    36e6:	a6 c0       	rjmp	.+332    	; 0x3834 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    36e8:	f1 01       	movw	r30, r2
    36ea:	83 81       	ldd	r24, Z+3	; 0x03
    36ec:	82 fd       	sbrc	r24, 2
    36ee:	04 c0       	rjmp	.+8      	; 0x36f8 <usart_set_baudrate+0x96>
		baud *= 2;
    36f0:	44 0c       	add	r4, r4
    36f2:	55 1c       	adc	r5, r5
    36f4:	66 1c       	adc	r6, r6
    36f6:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    36f8:	c5 01       	movw	r24, r10
    36fa:	b4 01       	movw	r22, r8
    36fc:	a3 01       	movw	r20, r6
    36fe:	92 01       	movw	r18, r4
    3700:	a4 d3       	rcall	.+1864   	; 0x3e4a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    3702:	2f 3f       	cpi	r18, 0xFF	; 255
    3704:	31 05       	cpc	r19, r1
    3706:	41 05       	cpc	r20, r1
    3708:	51 05       	cpc	r21, r1
    370a:	08 f4       	brcc	.+2      	; 0x370e <usart_set_baudrate+0xac>
    370c:	95 c0       	rjmp	.+298    	; 0x3838 <usart_set_baudrate+0x1d6>
    370e:	c1 2c       	mov	r12, r1
    3710:	d1 2c       	mov	r13, r1
    3712:	76 01       	movw	r14, r12
    3714:	ca 94       	dec	r12
    3716:	c9 ef       	ldi	r28, 0xF9	; 249
    3718:	05 c0       	rjmp	.+10     	; 0x3724 <usart_set_baudrate+0xc2>
    371a:	2c 15       	cp	r18, r12
    371c:	3d 05       	cpc	r19, r13
    371e:	4e 05       	cpc	r20, r14
    3720:	5f 05       	cpc	r21, r15
    3722:	68 f0       	brcs	.+26     	; 0x373e <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    3724:	cc 0c       	add	r12, r12
    3726:	dd 1c       	adc	r13, r13
    3728:	ee 1c       	adc	r14, r14
    372a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    372c:	cd 3f       	cpi	r28, 0xFD	; 253
    372e:	14 f4       	brge	.+4      	; 0x3734 <usart_set_baudrate+0xd2>
			limit |= 1;
    3730:	68 94       	set
    3732:	c0 f8       	bld	r12, 0
    3734:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3736:	c7 30       	cpi	r28, 0x07	; 7
    3738:	81 f7       	brne	.-32     	; 0x371a <usart_set_baudrate+0xb8>
    373a:	8c 2f       	mov	r24, r28
    373c:	54 c0       	rjmp	.+168    	; 0x37e6 <usart_set_baudrate+0x184>
    373e:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    3740:	cc 23       	and	r28, r28
    3742:	0c f0       	brlt	.+2      	; 0x3746 <usart_set_baudrate+0xe4>
    3744:	50 c0       	rjmp	.+160    	; 0x37e6 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3746:	d3 01       	movw	r26, r6
    3748:	c2 01       	movw	r24, r4
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	aa 1f       	adc	r26, r26
    3750:	bb 1f       	adc	r27, r27
    3752:	88 0f       	add	r24, r24
    3754:	99 1f       	adc	r25, r25
    3756:	aa 1f       	adc	r26, r26
    3758:	bb 1f       	adc	r27, r27
    375a:	88 0f       	add	r24, r24
    375c:	99 1f       	adc	r25, r25
    375e:	aa 1f       	adc	r26, r26
    3760:	bb 1f       	adc	r27, r27
    3762:	85 01       	movw	r16, r10
    3764:	74 01       	movw	r14, r8
    3766:	e8 1a       	sub	r14, r24
    3768:	f9 0a       	sbc	r15, r25
    376a:	0a 0b       	sbc	r16, r26
    376c:	1b 0b       	sbc	r17, r27
    376e:	d8 01       	movw	r26, r16
    3770:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3772:	ce 3f       	cpi	r28, 0xFE	; 254
    3774:	ec f4       	brge	.+58     	; 0x37b0 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3776:	2d ef       	ldi	r18, 0xFD	; 253
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	2c 1b       	sub	r18, r28
    377c:	31 09       	sbc	r19, r1
    377e:	c7 fd       	sbrc	r28, 7
    3780:	33 95       	inc	r19
    3782:	04 c0       	rjmp	.+8      	; 0x378c <usart_set_baudrate+0x12a>
    3784:	88 0f       	add	r24, r24
    3786:	99 1f       	adc	r25, r25
    3788:	aa 1f       	adc	r26, r26
    378a:	bb 1f       	adc	r27, r27
    378c:	2a 95       	dec	r18
    378e:	d2 f7       	brpl	.-12     	; 0x3784 <usart_set_baudrate+0x122>
    3790:	73 01       	movw	r14, r6
    3792:	62 01       	movw	r12, r4
    3794:	f6 94       	lsr	r15
    3796:	e7 94       	ror	r14
    3798:	d7 94       	ror	r13
    379a:	c7 94       	ror	r12
    379c:	bc 01       	movw	r22, r24
    379e:	cd 01       	movw	r24, r26
    37a0:	6c 0d       	add	r22, r12
    37a2:	7d 1d       	adc	r23, r13
    37a4:	8e 1d       	adc	r24, r14
    37a6:	9f 1d       	adc	r25, r15
    37a8:	a3 01       	movw	r20, r6
    37aa:	92 01       	movw	r18, r4
    37ac:	4e d3       	rcall	.+1692   	; 0x3e4a <__udivmodsi4>
    37ae:	36 c0       	rjmp	.+108    	; 0x381c <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    37b0:	23 e0       	ldi	r18, 0x03	; 3
    37b2:	2c 0f       	add	r18, r28
    37b4:	83 01       	movw	r16, r6
    37b6:	72 01       	movw	r14, r4
    37b8:	04 c0       	rjmp	.+8      	; 0x37c2 <usart_set_baudrate+0x160>
    37ba:	ee 0c       	add	r14, r14
    37bc:	ff 1c       	adc	r15, r15
    37be:	00 1f       	adc	r16, r16
    37c0:	11 1f       	adc	r17, r17
    37c2:	2a 95       	dec	r18
    37c4:	d2 f7       	brpl	.-12     	; 0x37ba <usart_set_baudrate+0x158>
    37c6:	a8 01       	movw	r20, r16
    37c8:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    37ca:	67 01       	movw	r12, r14
    37cc:	78 01       	movw	r14, r16
    37ce:	f6 94       	lsr	r15
    37d0:	e7 94       	ror	r14
    37d2:	d7 94       	ror	r13
    37d4:	c7 94       	ror	r12
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	6c 0d       	add	r22, r12
    37dc:	7d 1d       	adc	r23, r13
    37de:	8e 1d       	adc	r24, r14
    37e0:	9f 1d       	adc	r25, r15
    37e2:	33 d3       	rcall	.+1638   	; 0x3e4a <__udivmodsi4>
    37e4:	1b c0       	rjmp	.+54     	; 0x381c <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    37e6:	8d 5f       	subi	r24, 0xFD	; 253
    37e8:	a3 01       	movw	r20, r6
    37ea:	92 01       	movw	r18, r4
    37ec:	04 c0       	rjmp	.+8      	; 0x37f6 <usart_set_baudrate+0x194>
    37ee:	22 0f       	add	r18, r18
    37f0:	33 1f       	adc	r19, r19
    37f2:	44 1f       	adc	r20, r20
    37f4:	55 1f       	adc	r21, r21
    37f6:	8a 95       	dec	r24
    37f8:	d2 f7       	brpl	.-12     	; 0x37ee <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    37fa:	da 01       	movw	r26, r20
    37fc:	c9 01       	movw	r24, r18
    37fe:	b6 95       	lsr	r27
    3800:	a7 95       	ror	r26
    3802:	97 95       	ror	r25
    3804:	87 95       	ror	r24
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	68 0d       	add	r22, r8
    380c:	79 1d       	adc	r23, r9
    380e:	8a 1d       	adc	r24, r10
    3810:	9b 1d       	adc	r25, r11
    3812:	1b d3       	rcall	.+1590   	; 0x3e4a <__udivmodsi4>
    3814:	21 50       	subi	r18, 0x01	; 1
    3816:	31 09       	sbc	r19, r1
    3818:	41 09       	sbc	r20, r1
    381a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    381c:	83 2f       	mov	r24, r19
    381e:	8f 70       	andi	r24, 0x0F	; 15
    3820:	c2 95       	swap	r28
    3822:	c0 7f       	andi	r28, 0xF0	; 240
    3824:	c8 2b       	or	r28, r24
    3826:	f1 01       	movw	r30, r2
    3828:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    382a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	1c c0       	rjmp	.+56     	; 0x3868 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	1a c0       	rjmp	.+52     	; 0x3868 <usart_set_baudrate+0x206>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	18 c0       	rjmp	.+48     	; 0x3868 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3838:	d3 01       	movw	r26, r6
    383a:	c2 01       	movw	r24, r4
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	88 0f       	add	r24, r24
    3846:	99 1f       	adc	r25, r25
    3848:	aa 1f       	adc	r26, r26
    384a:	bb 1f       	adc	r27, r27
    384c:	88 0f       	add	r24, r24
    384e:	99 1f       	adc	r25, r25
    3850:	aa 1f       	adc	r26, r26
    3852:	bb 1f       	adc	r27, r27
    3854:	85 01       	movw	r16, r10
    3856:	74 01       	movw	r14, r8
    3858:	e8 1a       	sub	r14, r24
    385a:	f9 0a       	sbc	r15, r25
    385c:	0a 0b       	sbc	r16, r26
    385e:	1b 0b       	sbc	r17, r27
    3860:	d8 01       	movw	r26, r16
    3862:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3864:	c9 ef       	ldi	r28, 0xF9	; 249
    3866:	87 cf       	rjmp	.-242    	; 0x3776 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3868:	cf 91       	pop	r28
    386a:	1f 91       	pop	r17
    386c:	0f 91       	pop	r16
    386e:	ff 90       	pop	r15
    3870:	ef 90       	pop	r14
    3872:	df 90       	pop	r13
    3874:	cf 90       	pop	r12
    3876:	bf 90       	pop	r11
    3878:	af 90       	pop	r10
    387a:	9f 90       	pop	r9
    387c:	8f 90       	pop	r8
    387e:	7f 90       	pop	r7
    3880:	6f 90       	pop	r6
    3882:	5f 90       	pop	r5
    3884:	4f 90       	pop	r4
    3886:	3f 90       	pop	r3
    3888:	2f 90       	pop	r2
    388a:	08 95       	ret

0000388c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    388c:	0f 93       	push	r16
    388e:	1f 93       	push	r17
    3890:	cf 93       	push	r28
    3892:	df 93       	push	r29
    3894:	ec 01       	movw	r28, r24
    3896:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3898:	89 2b       	or	r24, r25
    389a:	09 f4       	brne	.+2      	; 0x389e <usart_init_rs232+0x12>
    389c:	77 c0       	rjmp	.+238    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    389e:	c1 15       	cp	r28, r1
    38a0:	84 e0       	ldi	r24, 0x04	; 4
    38a2:	d8 07       	cpc	r29, r24
    38a4:	21 f4       	brne	.+8      	; 0x38ae <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    38a6:	64 e0       	ldi	r22, 0x04	; 4
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	14 d9       	rcall	.-3544   	; 0x2ad4 <sysclk_enable_module>
    38ac:	6f c0       	rjmp	.+222    	; 0x398c <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    38ae:	c0 38       	cpi	r28, 0x80	; 128
    38b0:	e1 e0       	ldi	r30, 0x01	; 1
    38b2:	de 07       	cpc	r29, r30
    38b4:	21 f4       	brne	.+8      	; 0x38be <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    38b6:	62 e0       	ldi	r22, 0x02	; 2
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	0c d9       	rcall	.-3560   	; 0x2ad4 <sysclk_enable_module>
    38bc:	67 c0       	rjmp	.+206    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    38be:	c1 15       	cp	r28, r1
    38c0:	f1 e0       	ldi	r31, 0x01	; 1
    38c2:	df 07       	cpc	r29, r31
    38c4:	21 f4       	brne	.+8      	; 0x38ce <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    38c6:	61 e0       	ldi	r22, 0x01	; 1
    38c8:	80 e0       	ldi	r24, 0x00	; 0
    38ca:	04 d9       	rcall	.-3576   	; 0x2ad4 <sysclk_enable_module>
    38cc:	5f c0       	rjmp	.+190    	; 0x398c <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    38ce:	c0 38       	cpi	r28, 0x80	; 128
    38d0:	83 e0       	ldi	r24, 0x03	; 3
    38d2:	d8 07       	cpc	r29, r24
    38d4:	21 f4       	brne	.+8      	; 0x38de <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    38d6:	61 e0       	ldi	r22, 0x01	; 1
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	fc d8       	rcall	.-3592   	; 0x2ad4 <sysclk_enable_module>
    38dc:	57 c0       	rjmp	.+174    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    38de:	c1 15       	cp	r28, r1
    38e0:	e2 e0       	ldi	r30, 0x02	; 2
    38e2:	de 07       	cpc	r29, r30
    38e4:	21 f4       	brne	.+8      	; 0x38ee <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38e6:	62 e0       	ldi	r22, 0x02	; 2
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	f4 d8       	rcall	.-3608   	; 0x2ad4 <sysclk_enable_module>
    38ec:	4f c0       	rjmp	.+158    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    38ee:	c1 15       	cp	r28, r1
    38f0:	f3 e0       	ldi	r31, 0x03	; 3
    38f2:	df 07       	cpc	r29, r31
    38f4:	21 f4       	brne	.+8      	; 0x38fe <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    38f6:	64 e0       	ldi	r22, 0x04	; 4
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	ec d8       	rcall	.-3624   	; 0x2ad4 <sysclk_enable_module>
    38fc:	47 c0       	rjmp	.+142    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    38fe:	c1 15       	cp	r28, r1
    3900:	88 e0       	ldi	r24, 0x08	; 8
    3902:	d8 07       	cpc	r29, r24
    3904:	21 f4       	brne	.+8      	; 0x390e <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3906:	61 e0       	ldi	r22, 0x01	; 1
    3908:	83 e0       	ldi	r24, 0x03	; 3
    390a:	e4 d8       	rcall	.-3640   	; 0x2ad4 <sysclk_enable_module>
    390c:	3f c0       	rjmp	.+126    	; 0x398c <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    390e:	c0 34       	cpi	r28, 0x40	; 64
    3910:	e8 e0       	ldi	r30, 0x08	; 8
    3912:	de 07       	cpc	r29, r30
    3914:	21 f4       	brne	.+8      	; 0x391e <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3916:	62 e0       	ldi	r22, 0x02	; 2
    3918:	83 e0       	ldi	r24, 0x03	; 3
    391a:	dc d8       	rcall	.-3656   	; 0x2ad4 <sysclk_enable_module>
    391c:	37 c0       	rjmp	.+110    	; 0x398c <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    391e:	c0 34       	cpi	r28, 0x40	; 64
    3920:	f9 e0       	ldi	r31, 0x09	; 9
    3922:	df 07       	cpc	r29, r31
    3924:	21 f4       	brne	.+8      	; 0x392e <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    3926:	62 e0       	ldi	r22, 0x02	; 2
    3928:	84 e0       	ldi	r24, 0x04	; 4
    392a:	d4 d8       	rcall	.-3672   	; 0x2ad4 <sysclk_enable_module>
    392c:	2f c0       	rjmp	.+94     	; 0x398c <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    392e:	c0 3b       	cpi	r28, 0xB0	; 176
    3930:	88 e0       	ldi	r24, 0x08	; 8
    3932:	d8 07       	cpc	r29, r24
    3934:	21 f4       	brne	.+8      	; 0x393e <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3936:	64 e0       	ldi	r22, 0x04	; 4
    3938:	83 e0       	ldi	r24, 0x03	; 3
    393a:	cc d8       	rcall	.-3688   	; 0x2ad4 <sysclk_enable_module>
    393c:	27 c0       	rjmp	.+78     	; 0x398c <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    393e:	c0 3e       	cpi	r28, 0xE0	; 224
    3940:	e8 e0       	ldi	r30, 0x08	; 8
    3942:	de 07       	cpc	r29, r30
    3944:	21 f4       	brne	.+8      	; 0x394e <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3946:	68 e0       	ldi	r22, 0x08	; 8
    3948:	83 e0       	ldi	r24, 0x03	; 3
    394a:	c4 d8       	rcall	.-3704   	; 0x2ad4 <sysclk_enable_module>
    394c:	1f c0       	rjmp	.+62     	; 0x398c <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    394e:	c0 3c       	cpi	r28, 0xC0	; 192
    3950:	f8 e0       	ldi	r31, 0x08	; 8
    3952:	df 07       	cpc	r29, r31
    3954:	21 f4       	brne	.+8      	; 0x395e <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3956:	60 e1       	ldi	r22, 0x10	; 16
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	bc d8       	rcall	.-3720   	; 0x2ad4 <sysclk_enable_module>
    395c:	17 c0       	rjmp	.+46     	; 0x398c <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    395e:	c0 3c       	cpi	r28, 0xC0	; 192
    3960:	89 e0       	ldi	r24, 0x09	; 9
    3962:	d8 07       	cpc	r29, r24
    3964:	21 f4       	brne	.+8      	; 0x396e <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3966:	60 e1       	ldi	r22, 0x10	; 16
    3968:	84 e0       	ldi	r24, 0x04	; 4
    396a:	b4 d8       	rcall	.-3736   	; 0x2ad4 <sysclk_enable_module>
    396c:	0f c0       	rjmp	.+30     	; 0x398c <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    396e:	c0 38       	cpi	r28, 0x80	; 128
    3970:	e4 e0       	ldi	r30, 0x04	; 4
    3972:	de 07       	cpc	r29, r30
    3974:	21 f4       	brne	.+8      	; 0x397e <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3976:	60 e4       	ldi	r22, 0x40	; 64
    3978:	83 e0       	ldi	r24, 0x03	; 3
    397a:	ac d8       	rcall	.-3752   	; 0x2ad4 <sysclk_enable_module>
    397c:	07 c0       	rjmp	.+14     	; 0x398c <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    397e:	c0 36       	cpi	r28, 0x60	; 96
    3980:	f4 e0       	ldi	r31, 0x04	; 4
    3982:	df 07       	cpc	r29, r31
    3984:	19 f4       	brne	.+6      	; 0x398c <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    3986:	60 e8       	ldi	r22, 0x80	; 128
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	a4 d8       	rcall	.-3768   	; 0x2ad4 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    398c:	8c 81       	ldd	r24, Y+4	; 0x04
    398e:	8f 73       	andi	r24, 0x3F	; 63
    3990:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3992:	f8 01       	movw	r30, r16
    3994:	94 81       	ldd	r25, Z+4	; 0x04
    3996:	85 81       	ldd	r24, Z+5	; 0x05
    3998:	89 2b       	or	r24, r25
    399a:	96 81       	ldd	r25, Z+6	; 0x06
    399c:	91 11       	cpse	r25, r1
    399e:	98 e0       	ldi	r25, 0x08	; 8
    39a0:	89 2b       	or	r24, r25
    39a2:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    39a4:	f8 01       	movw	r30, r16
    39a6:	40 81       	ld	r20, Z
    39a8:	51 81       	ldd	r21, Z+1	; 0x01
    39aa:	62 81       	ldd	r22, Z+2	; 0x02
    39ac:	73 81       	ldd	r23, Z+3	; 0x03
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	18 e4       	ldi	r17, 0x48	; 72
    39b2:	28 ee       	ldi	r18, 0xE8	; 232
    39b4:	31 e0       	ldi	r19, 0x01	; 1
    39b6:	ce 01       	movw	r24, r28
    39b8:	54 de       	rcall	.-856    	; 0x3662 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    39ba:	9b 81       	ldd	r25, Y+3	; 0x03
    39bc:	98 60       	ori	r25, 0x08	; 8
    39be:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    39c0:	9b 81       	ldd	r25, Y+3	; 0x03
    39c2:	90 61       	ori	r25, 0x10	; 16
    39c4:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    39c6:	df 91       	pop	r29
    39c8:	cf 91       	pop	r28
    39ca:	1f 91       	pop	r17
    39cc:	0f 91       	pop	r16
    39ce:	08 95       	ret

000039d0 <__subsf3>:
    39d0:	50 58       	subi	r21, 0x80	; 128

000039d2 <__addsf3>:
    39d2:	bb 27       	eor	r27, r27
    39d4:	aa 27       	eor	r26, r26
    39d6:	0e d0       	rcall	.+28     	; 0x39f4 <__addsf3x>
    39d8:	70 c1       	rjmp	.+736    	; 0x3cba <__fp_round>
    39da:	61 d1       	rcall	.+706    	; 0x3c9e <__fp_pscA>
    39dc:	30 f0       	brcs	.+12     	; 0x39ea <__addsf3+0x18>
    39de:	66 d1       	rcall	.+716    	; 0x3cac <__fp_pscB>
    39e0:	20 f0       	brcs	.+8      	; 0x39ea <__addsf3+0x18>
    39e2:	31 f4       	brne	.+12     	; 0x39f0 <__addsf3+0x1e>
    39e4:	9f 3f       	cpi	r25, 0xFF	; 255
    39e6:	11 f4       	brne	.+4      	; 0x39ec <__addsf3+0x1a>
    39e8:	1e f4       	brtc	.+6      	; 0x39f0 <__addsf3+0x1e>
    39ea:	56 c1       	rjmp	.+684    	; 0x3c98 <__fp_nan>
    39ec:	0e f4       	brtc	.+2      	; 0x39f0 <__addsf3+0x1e>
    39ee:	e0 95       	com	r30
    39f0:	e7 fb       	bst	r30, 7
    39f2:	4c c1       	rjmp	.+664    	; 0x3c8c <__fp_inf>

000039f4 <__addsf3x>:
    39f4:	e9 2f       	mov	r30, r25
    39f6:	72 d1       	rcall	.+740    	; 0x3cdc <__fp_split3>
    39f8:	80 f3       	brcs	.-32     	; 0x39da <__addsf3+0x8>
    39fa:	ba 17       	cp	r27, r26
    39fc:	62 07       	cpc	r22, r18
    39fe:	73 07       	cpc	r23, r19
    3a00:	84 07       	cpc	r24, r20
    3a02:	95 07       	cpc	r25, r21
    3a04:	18 f0       	brcs	.+6      	; 0x3a0c <__addsf3x+0x18>
    3a06:	71 f4       	brne	.+28     	; 0x3a24 <__addsf3x+0x30>
    3a08:	9e f5       	brtc	.+102    	; 0x3a70 <__addsf3x+0x7c>
    3a0a:	8a c1       	rjmp	.+788    	; 0x3d20 <__fp_zero>
    3a0c:	0e f4       	brtc	.+2      	; 0x3a10 <__addsf3x+0x1c>
    3a0e:	e0 95       	com	r30
    3a10:	0b 2e       	mov	r0, r27
    3a12:	ba 2f       	mov	r27, r26
    3a14:	a0 2d       	mov	r26, r0
    3a16:	0b 01       	movw	r0, r22
    3a18:	b9 01       	movw	r22, r18
    3a1a:	90 01       	movw	r18, r0
    3a1c:	0c 01       	movw	r0, r24
    3a1e:	ca 01       	movw	r24, r20
    3a20:	a0 01       	movw	r20, r0
    3a22:	11 24       	eor	r1, r1
    3a24:	ff 27       	eor	r31, r31
    3a26:	59 1b       	sub	r21, r25
    3a28:	99 f0       	breq	.+38     	; 0x3a50 <__addsf3x+0x5c>
    3a2a:	59 3f       	cpi	r21, 0xF9	; 249
    3a2c:	50 f4       	brcc	.+20     	; 0x3a42 <__addsf3x+0x4e>
    3a2e:	50 3e       	cpi	r21, 0xE0	; 224
    3a30:	68 f1       	brcs	.+90     	; 0x3a8c <__addsf3x+0x98>
    3a32:	1a 16       	cp	r1, r26
    3a34:	f0 40       	sbci	r31, 0x00	; 0
    3a36:	a2 2f       	mov	r26, r18
    3a38:	23 2f       	mov	r18, r19
    3a3a:	34 2f       	mov	r19, r20
    3a3c:	44 27       	eor	r20, r20
    3a3e:	58 5f       	subi	r21, 0xF8	; 248
    3a40:	f3 cf       	rjmp	.-26     	; 0x3a28 <__addsf3x+0x34>
    3a42:	46 95       	lsr	r20
    3a44:	37 95       	ror	r19
    3a46:	27 95       	ror	r18
    3a48:	a7 95       	ror	r26
    3a4a:	f0 40       	sbci	r31, 0x00	; 0
    3a4c:	53 95       	inc	r21
    3a4e:	c9 f7       	brne	.-14     	; 0x3a42 <__addsf3x+0x4e>
    3a50:	7e f4       	brtc	.+30     	; 0x3a70 <__addsf3x+0x7c>
    3a52:	1f 16       	cp	r1, r31
    3a54:	ba 0b       	sbc	r27, r26
    3a56:	62 0b       	sbc	r22, r18
    3a58:	73 0b       	sbc	r23, r19
    3a5a:	84 0b       	sbc	r24, r20
    3a5c:	ba f0       	brmi	.+46     	; 0x3a8c <__addsf3x+0x98>
    3a5e:	91 50       	subi	r25, 0x01	; 1
    3a60:	a1 f0       	breq	.+40     	; 0x3a8a <__addsf3x+0x96>
    3a62:	ff 0f       	add	r31, r31
    3a64:	bb 1f       	adc	r27, r27
    3a66:	66 1f       	adc	r22, r22
    3a68:	77 1f       	adc	r23, r23
    3a6a:	88 1f       	adc	r24, r24
    3a6c:	c2 f7       	brpl	.-16     	; 0x3a5e <__addsf3x+0x6a>
    3a6e:	0e c0       	rjmp	.+28     	; 0x3a8c <__addsf3x+0x98>
    3a70:	ba 0f       	add	r27, r26
    3a72:	62 1f       	adc	r22, r18
    3a74:	73 1f       	adc	r23, r19
    3a76:	84 1f       	adc	r24, r20
    3a78:	48 f4       	brcc	.+18     	; 0x3a8c <__addsf3x+0x98>
    3a7a:	87 95       	ror	r24
    3a7c:	77 95       	ror	r23
    3a7e:	67 95       	ror	r22
    3a80:	b7 95       	ror	r27
    3a82:	f7 95       	ror	r31
    3a84:	9e 3f       	cpi	r25, 0xFE	; 254
    3a86:	08 f0       	brcs	.+2      	; 0x3a8a <__addsf3x+0x96>
    3a88:	b3 cf       	rjmp	.-154    	; 0x39f0 <__addsf3+0x1e>
    3a8a:	93 95       	inc	r25
    3a8c:	88 0f       	add	r24, r24
    3a8e:	08 f0       	brcs	.+2      	; 0x3a92 <__addsf3x+0x9e>
    3a90:	99 27       	eor	r25, r25
    3a92:	ee 0f       	add	r30, r30
    3a94:	97 95       	ror	r25
    3a96:	87 95       	ror	r24
    3a98:	08 95       	ret

00003a9a <__cmpsf2>:
    3a9a:	d4 d0       	rcall	.+424    	; 0x3c44 <__fp_cmp>
    3a9c:	08 f4       	brcc	.+2      	; 0x3aa0 <__cmpsf2+0x6>
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	08 95       	ret

00003aa2 <__divsf3>:
    3aa2:	0c d0       	rcall	.+24     	; 0x3abc <__divsf3x>
    3aa4:	0a c1       	rjmp	.+532    	; 0x3cba <__fp_round>
    3aa6:	02 d1       	rcall	.+516    	; 0x3cac <__fp_pscB>
    3aa8:	40 f0       	brcs	.+16     	; 0x3aba <__divsf3+0x18>
    3aaa:	f9 d0       	rcall	.+498    	; 0x3c9e <__fp_pscA>
    3aac:	30 f0       	brcs	.+12     	; 0x3aba <__divsf3+0x18>
    3aae:	21 f4       	brne	.+8      	; 0x3ab8 <__divsf3+0x16>
    3ab0:	5f 3f       	cpi	r21, 0xFF	; 255
    3ab2:	19 f0       	breq	.+6      	; 0x3aba <__divsf3+0x18>
    3ab4:	eb c0       	rjmp	.+470    	; 0x3c8c <__fp_inf>
    3ab6:	51 11       	cpse	r21, r1
    3ab8:	34 c1       	rjmp	.+616    	; 0x3d22 <__fp_szero>
    3aba:	ee c0       	rjmp	.+476    	; 0x3c98 <__fp_nan>

00003abc <__divsf3x>:
    3abc:	0f d1       	rcall	.+542    	; 0x3cdc <__fp_split3>
    3abe:	98 f3       	brcs	.-26     	; 0x3aa6 <__divsf3+0x4>

00003ac0 <__divsf3_pse>:
    3ac0:	99 23       	and	r25, r25
    3ac2:	c9 f3       	breq	.-14     	; 0x3ab6 <__divsf3+0x14>
    3ac4:	55 23       	and	r21, r21
    3ac6:	b1 f3       	breq	.-20     	; 0x3ab4 <__divsf3+0x12>
    3ac8:	95 1b       	sub	r25, r21
    3aca:	55 0b       	sbc	r21, r21
    3acc:	bb 27       	eor	r27, r27
    3ace:	aa 27       	eor	r26, r26
    3ad0:	62 17       	cp	r22, r18
    3ad2:	73 07       	cpc	r23, r19
    3ad4:	84 07       	cpc	r24, r20
    3ad6:	38 f0       	brcs	.+14     	; 0x3ae6 <__divsf3_pse+0x26>
    3ad8:	9f 5f       	subi	r25, 0xFF	; 255
    3ada:	5f 4f       	sbci	r21, 0xFF	; 255
    3adc:	22 0f       	add	r18, r18
    3ade:	33 1f       	adc	r19, r19
    3ae0:	44 1f       	adc	r20, r20
    3ae2:	aa 1f       	adc	r26, r26
    3ae4:	a9 f3       	breq	.-22     	; 0x3ad0 <__divsf3_pse+0x10>
    3ae6:	33 d0       	rcall	.+102    	; 0x3b4e <__divsf3_pse+0x8e>
    3ae8:	0e 2e       	mov	r0, r30
    3aea:	3a f0       	brmi	.+14     	; 0x3afa <__divsf3_pse+0x3a>
    3aec:	e0 e8       	ldi	r30, 0x80	; 128
    3aee:	30 d0       	rcall	.+96     	; 0x3b50 <__divsf3_pse+0x90>
    3af0:	91 50       	subi	r25, 0x01	; 1
    3af2:	50 40       	sbci	r21, 0x00	; 0
    3af4:	e6 95       	lsr	r30
    3af6:	00 1c       	adc	r0, r0
    3af8:	ca f7       	brpl	.-14     	; 0x3aec <__divsf3_pse+0x2c>
    3afa:	29 d0       	rcall	.+82     	; 0x3b4e <__divsf3_pse+0x8e>
    3afc:	fe 2f       	mov	r31, r30
    3afe:	27 d0       	rcall	.+78     	; 0x3b4e <__divsf3_pse+0x8e>
    3b00:	66 0f       	add	r22, r22
    3b02:	77 1f       	adc	r23, r23
    3b04:	88 1f       	adc	r24, r24
    3b06:	bb 1f       	adc	r27, r27
    3b08:	26 17       	cp	r18, r22
    3b0a:	37 07       	cpc	r19, r23
    3b0c:	48 07       	cpc	r20, r24
    3b0e:	ab 07       	cpc	r26, r27
    3b10:	b0 e8       	ldi	r27, 0x80	; 128
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <__divsf3_pse+0x56>
    3b14:	bb 0b       	sbc	r27, r27
    3b16:	80 2d       	mov	r24, r0
    3b18:	bf 01       	movw	r22, r30
    3b1a:	ff 27       	eor	r31, r31
    3b1c:	93 58       	subi	r25, 0x83	; 131
    3b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b20:	2a f0       	brmi	.+10     	; 0x3b2c <__divsf3_pse+0x6c>
    3b22:	9e 3f       	cpi	r25, 0xFE	; 254
    3b24:	51 05       	cpc	r21, r1
    3b26:	68 f0       	brcs	.+26     	; 0x3b42 <__divsf3_pse+0x82>
    3b28:	b1 c0       	rjmp	.+354    	; 0x3c8c <__fp_inf>
    3b2a:	fb c0       	rjmp	.+502    	; 0x3d22 <__fp_szero>
    3b2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3b2e:	ec f3       	brlt	.-6      	; 0x3b2a <__divsf3_pse+0x6a>
    3b30:	98 3e       	cpi	r25, 0xE8	; 232
    3b32:	dc f3       	brlt	.-10     	; 0x3b2a <__divsf3_pse+0x6a>
    3b34:	86 95       	lsr	r24
    3b36:	77 95       	ror	r23
    3b38:	67 95       	ror	r22
    3b3a:	b7 95       	ror	r27
    3b3c:	f7 95       	ror	r31
    3b3e:	9f 5f       	subi	r25, 0xFF	; 255
    3b40:	c9 f7       	brne	.-14     	; 0x3b34 <__divsf3_pse+0x74>
    3b42:	88 0f       	add	r24, r24
    3b44:	91 1d       	adc	r25, r1
    3b46:	96 95       	lsr	r25
    3b48:	87 95       	ror	r24
    3b4a:	97 f9       	bld	r25, 7
    3b4c:	08 95       	ret
    3b4e:	e1 e0       	ldi	r30, 0x01	; 1
    3b50:	66 0f       	add	r22, r22
    3b52:	77 1f       	adc	r23, r23
    3b54:	88 1f       	adc	r24, r24
    3b56:	bb 1f       	adc	r27, r27
    3b58:	62 17       	cp	r22, r18
    3b5a:	73 07       	cpc	r23, r19
    3b5c:	84 07       	cpc	r24, r20
    3b5e:	ba 07       	cpc	r27, r26
    3b60:	20 f0       	brcs	.+8      	; 0x3b6a <__divsf3_pse+0xaa>
    3b62:	62 1b       	sub	r22, r18
    3b64:	73 0b       	sbc	r23, r19
    3b66:	84 0b       	sbc	r24, r20
    3b68:	ba 0b       	sbc	r27, r26
    3b6a:	ee 1f       	adc	r30, r30
    3b6c:	88 f7       	brcc	.-30     	; 0x3b50 <__divsf3_pse+0x90>
    3b6e:	e0 95       	com	r30
    3b70:	08 95       	ret

00003b72 <__fixunssfsi>:
    3b72:	bc d0       	rcall	.+376    	; 0x3cec <__fp_splitA>
    3b74:	88 f0       	brcs	.+34     	; 0x3b98 <__fixunssfsi+0x26>
    3b76:	9f 57       	subi	r25, 0x7F	; 127
    3b78:	90 f0       	brcs	.+36     	; 0x3b9e <__fixunssfsi+0x2c>
    3b7a:	b9 2f       	mov	r27, r25
    3b7c:	99 27       	eor	r25, r25
    3b7e:	b7 51       	subi	r27, 0x17	; 23
    3b80:	a0 f0       	brcs	.+40     	; 0x3baa <__fixunssfsi+0x38>
    3b82:	d1 f0       	breq	.+52     	; 0x3bb8 <__fixunssfsi+0x46>
    3b84:	66 0f       	add	r22, r22
    3b86:	77 1f       	adc	r23, r23
    3b88:	88 1f       	adc	r24, r24
    3b8a:	99 1f       	adc	r25, r25
    3b8c:	1a f0       	brmi	.+6      	; 0x3b94 <__fixunssfsi+0x22>
    3b8e:	ba 95       	dec	r27
    3b90:	c9 f7       	brne	.-14     	; 0x3b84 <__fixunssfsi+0x12>
    3b92:	12 c0       	rjmp	.+36     	; 0x3bb8 <__fixunssfsi+0x46>
    3b94:	b1 30       	cpi	r27, 0x01	; 1
    3b96:	81 f0       	breq	.+32     	; 0x3bb8 <__fixunssfsi+0x46>
    3b98:	c3 d0       	rcall	.+390    	; 0x3d20 <__fp_zero>
    3b9a:	b1 e0       	ldi	r27, 0x01	; 1
    3b9c:	08 95       	ret
    3b9e:	c0 c0       	rjmp	.+384    	; 0x3d20 <__fp_zero>
    3ba0:	67 2f       	mov	r22, r23
    3ba2:	78 2f       	mov	r23, r24
    3ba4:	88 27       	eor	r24, r24
    3ba6:	b8 5f       	subi	r27, 0xF8	; 248
    3ba8:	39 f0       	breq	.+14     	; 0x3bb8 <__fixunssfsi+0x46>
    3baa:	b9 3f       	cpi	r27, 0xF9	; 249
    3bac:	cc f3       	brlt	.-14     	; 0x3ba0 <__fixunssfsi+0x2e>
    3bae:	86 95       	lsr	r24
    3bb0:	77 95       	ror	r23
    3bb2:	67 95       	ror	r22
    3bb4:	b3 95       	inc	r27
    3bb6:	d9 f7       	brne	.-10     	; 0x3bae <__fixunssfsi+0x3c>
    3bb8:	3e f4       	brtc	.+14     	; 0x3bc8 <__fixunssfsi+0x56>
    3bba:	90 95       	com	r25
    3bbc:	80 95       	com	r24
    3bbe:	70 95       	com	r23
    3bc0:	61 95       	neg	r22
    3bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc8:	08 95       	ret

00003bca <__floatunsisf>:
    3bca:	e8 94       	clt
    3bcc:	09 c0       	rjmp	.+18     	; 0x3be0 <__floatsisf+0x12>

00003bce <__floatsisf>:
    3bce:	97 fb       	bst	r25, 7
    3bd0:	3e f4       	brtc	.+14     	; 0x3be0 <__floatsisf+0x12>
    3bd2:	90 95       	com	r25
    3bd4:	80 95       	com	r24
    3bd6:	70 95       	com	r23
    3bd8:	61 95       	neg	r22
    3bda:	7f 4f       	sbci	r23, 0xFF	; 255
    3bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	99 23       	and	r25, r25
    3be2:	a9 f0       	breq	.+42     	; 0x3c0e <__floatsisf+0x40>
    3be4:	f9 2f       	mov	r31, r25
    3be6:	96 e9       	ldi	r25, 0x96	; 150
    3be8:	bb 27       	eor	r27, r27
    3bea:	93 95       	inc	r25
    3bec:	f6 95       	lsr	r31
    3bee:	87 95       	ror	r24
    3bf0:	77 95       	ror	r23
    3bf2:	67 95       	ror	r22
    3bf4:	b7 95       	ror	r27
    3bf6:	f1 11       	cpse	r31, r1
    3bf8:	f8 cf       	rjmp	.-16     	; 0x3bea <__floatsisf+0x1c>
    3bfa:	fa f4       	brpl	.+62     	; 0x3c3a <__floatsisf+0x6c>
    3bfc:	bb 0f       	add	r27, r27
    3bfe:	11 f4       	brne	.+4      	; 0x3c04 <__floatsisf+0x36>
    3c00:	60 ff       	sbrs	r22, 0
    3c02:	1b c0       	rjmp	.+54     	; 0x3c3a <__floatsisf+0x6c>
    3c04:	6f 5f       	subi	r22, 0xFF	; 255
    3c06:	7f 4f       	sbci	r23, 0xFF	; 255
    3c08:	8f 4f       	sbci	r24, 0xFF	; 255
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	16 c0       	rjmp	.+44     	; 0x3c3a <__floatsisf+0x6c>
    3c0e:	88 23       	and	r24, r24
    3c10:	11 f0       	breq	.+4      	; 0x3c16 <__floatsisf+0x48>
    3c12:	96 e9       	ldi	r25, 0x96	; 150
    3c14:	11 c0       	rjmp	.+34     	; 0x3c38 <__floatsisf+0x6a>
    3c16:	77 23       	and	r23, r23
    3c18:	21 f0       	breq	.+8      	; 0x3c22 <__floatsisf+0x54>
    3c1a:	9e e8       	ldi	r25, 0x8E	; 142
    3c1c:	87 2f       	mov	r24, r23
    3c1e:	76 2f       	mov	r23, r22
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <__floatsisf+0x5e>
    3c22:	66 23       	and	r22, r22
    3c24:	71 f0       	breq	.+28     	; 0x3c42 <__floatsisf+0x74>
    3c26:	96 e8       	ldi	r25, 0x86	; 134
    3c28:	86 2f       	mov	r24, r22
    3c2a:	70 e0       	ldi	r23, 0x00	; 0
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	2a f0       	brmi	.+10     	; 0x3c3a <__floatsisf+0x6c>
    3c30:	9a 95       	dec	r25
    3c32:	66 0f       	add	r22, r22
    3c34:	77 1f       	adc	r23, r23
    3c36:	88 1f       	adc	r24, r24
    3c38:	da f7       	brpl	.-10     	; 0x3c30 <__floatsisf+0x62>
    3c3a:	88 0f       	add	r24, r24
    3c3c:	96 95       	lsr	r25
    3c3e:	87 95       	ror	r24
    3c40:	97 f9       	bld	r25, 7
    3c42:	08 95       	ret

00003c44 <__fp_cmp>:
    3c44:	99 0f       	add	r25, r25
    3c46:	00 08       	sbc	r0, r0
    3c48:	55 0f       	add	r21, r21
    3c4a:	aa 0b       	sbc	r26, r26
    3c4c:	e0 e8       	ldi	r30, 0x80	; 128
    3c4e:	fe ef       	ldi	r31, 0xFE	; 254
    3c50:	16 16       	cp	r1, r22
    3c52:	17 06       	cpc	r1, r23
    3c54:	e8 07       	cpc	r30, r24
    3c56:	f9 07       	cpc	r31, r25
    3c58:	c0 f0       	brcs	.+48     	; 0x3c8a <__fp_cmp+0x46>
    3c5a:	12 16       	cp	r1, r18
    3c5c:	13 06       	cpc	r1, r19
    3c5e:	e4 07       	cpc	r30, r20
    3c60:	f5 07       	cpc	r31, r21
    3c62:	98 f0       	brcs	.+38     	; 0x3c8a <__fp_cmp+0x46>
    3c64:	62 1b       	sub	r22, r18
    3c66:	73 0b       	sbc	r23, r19
    3c68:	84 0b       	sbc	r24, r20
    3c6a:	95 0b       	sbc	r25, r21
    3c6c:	39 f4       	brne	.+14     	; 0x3c7c <__fp_cmp+0x38>
    3c6e:	0a 26       	eor	r0, r26
    3c70:	61 f0       	breq	.+24     	; 0x3c8a <__fp_cmp+0x46>
    3c72:	23 2b       	or	r18, r19
    3c74:	24 2b       	or	r18, r20
    3c76:	25 2b       	or	r18, r21
    3c78:	21 f4       	brne	.+8      	; 0x3c82 <__fp_cmp+0x3e>
    3c7a:	08 95       	ret
    3c7c:	0a 26       	eor	r0, r26
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <__fp_cmp+0x3e>
    3c80:	a1 40       	sbci	r26, 0x01	; 1
    3c82:	a6 95       	lsr	r26
    3c84:	8f ef       	ldi	r24, 0xFF	; 255
    3c86:	81 1d       	adc	r24, r1
    3c88:	81 1d       	adc	r24, r1
    3c8a:	08 95       	ret

00003c8c <__fp_inf>:
    3c8c:	97 f9       	bld	r25, 7
    3c8e:	9f 67       	ori	r25, 0x7F	; 127
    3c90:	80 e8       	ldi	r24, 0x80	; 128
    3c92:	70 e0       	ldi	r23, 0x00	; 0
    3c94:	60 e0       	ldi	r22, 0x00	; 0
    3c96:	08 95       	ret

00003c98 <__fp_nan>:
    3c98:	9f ef       	ldi	r25, 0xFF	; 255
    3c9a:	80 ec       	ldi	r24, 0xC0	; 192
    3c9c:	08 95       	ret

00003c9e <__fp_pscA>:
    3c9e:	00 24       	eor	r0, r0
    3ca0:	0a 94       	dec	r0
    3ca2:	16 16       	cp	r1, r22
    3ca4:	17 06       	cpc	r1, r23
    3ca6:	18 06       	cpc	r1, r24
    3ca8:	09 06       	cpc	r0, r25
    3caa:	08 95       	ret

00003cac <__fp_pscB>:
    3cac:	00 24       	eor	r0, r0
    3cae:	0a 94       	dec	r0
    3cb0:	12 16       	cp	r1, r18
    3cb2:	13 06       	cpc	r1, r19
    3cb4:	14 06       	cpc	r1, r20
    3cb6:	05 06       	cpc	r0, r21
    3cb8:	08 95       	ret

00003cba <__fp_round>:
    3cba:	09 2e       	mov	r0, r25
    3cbc:	03 94       	inc	r0
    3cbe:	00 0c       	add	r0, r0
    3cc0:	11 f4       	brne	.+4      	; 0x3cc6 <__fp_round+0xc>
    3cc2:	88 23       	and	r24, r24
    3cc4:	52 f0       	brmi	.+20     	; 0x3cda <__fp_round+0x20>
    3cc6:	bb 0f       	add	r27, r27
    3cc8:	40 f4       	brcc	.+16     	; 0x3cda <__fp_round+0x20>
    3cca:	bf 2b       	or	r27, r31
    3ccc:	11 f4       	brne	.+4      	; 0x3cd2 <__fp_round+0x18>
    3cce:	60 ff       	sbrs	r22, 0
    3cd0:	04 c0       	rjmp	.+8      	; 0x3cda <__fp_round+0x20>
    3cd2:	6f 5f       	subi	r22, 0xFF	; 255
    3cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cda:	08 95       	ret

00003cdc <__fp_split3>:
    3cdc:	57 fd       	sbrc	r21, 7
    3cde:	90 58       	subi	r25, 0x80	; 128
    3ce0:	44 0f       	add	r20, r20
    3ce2:	55 1f       	adc	r21, r21
    3ce4:	59 f0       	breq	.+22     	; 0x3cfc <__fp_splitA+0x10>
    3ce6:	5f 3f       	cpi	r21, 0xFF	; 255
    3ce8:	71 f0       	breq	.+28     	; 0x3d06 <__fp_splitA+0x1a>
    3cea:	47 95       	ror	r20

00003cec <__fp_splitA>:
    3cec:	88 0f       	add	r24, r24
    3cee:	97 fb       	bst	r25, 7
    3cf0:	99 1f       	adc	r25, r25
    3cf2:	61 f0       	breq	.+24     	; 0x3d0c <__fp_splitA+0x20>
    3cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf6:	79 f0       	breq	.+30     	; 0x3d16 <__fp_splitA+0x2a>
    3cf8:	87 95       	ror	r24
    3cfa:	08 95       	ret
    3cfc:	12 16       	cp	r1, r18
    3cfe:	13 06       	cpc	r1, r19
    3d00:	14 06       	cpc	r1, r20
    3d02:	55 1f       	adc	r21, r21
    3d04:	f2 cf       	rjmp	.-28     	; 0x3cea <__fp_split3+0xe>
    3d06:	46 95       	lsr	r20
    3d08:	f1 df       	rcall	.-30     	; 0x3cec <__fp_splitA>
    3d0a:	08 c0       	rjmp	.+16     	; 0x3d1c <__fp_splitA+0x30>
    3d0c:	16 16       	cp	r1, r22
    3d0e:	17 06       	cpc	r1, r23
    3d10:	18 06       	cpc	r1, r24
    3d12:	99 1f       	adc	r25, r25
    3d14:	f1 cf       	rjmp	.-30     	; 0x3cf8 <__fp_splitA+0xc>
    3d16:	86 95       	lsr	r24
    3d18:	71 05       	cpc	r23, r1
    3d1a:	61 05       	cpc	r22, r1
    3d1c:	08 94       	sec
    3d1e:	08 95       	ret

00003d20 <__fp_zero>:
    3d20:	e8 94       	clt

00003d22 <__fp_szero>:
    3d22:	bb 27       	eor	r27, r27
    3d24:	66 27       	eor	r22, r22
    3d26:	77 27       	eor	r23, r23
    3d28:	cb 01       	movw	r24, r22
    3d2a:	97 f9       	bld	r25, 7
    3d2c:	08 95       	ret

00003d2e <__gesf2>:
    3d2e:	8a df       	rcall	.-236    	; 0x3c44 <__fp_cmp>
    3d30:	08 f4       	brcc	.+2      	; 0x3d34 <__gesf2+0x6>
    3d32:	8f ef       	ldi	r24, 0xFF	; 255
    3d34:	08 95       	ret

00003d36 <__mulsf3>:
    3d36:	0b d0       	rcall	.+22     	; 0x3d4e <__mulsf3x>
    3d38:	c0 cf       	rjmp	.-128    	; 0x3cba <__fp_round>
    3d3a:	b1 df       	rcall	.-158    	; 0x3c9e <__fp_pscA>
    3d3c:	28 f0       	brcs	.+10     	; 0x3d48 <__mulsf3+0x12>
    3d3e:	b6 df       	rcall	.-148    	; 0x3cac <__fp_pscB>
    3d40:	18 f0       	brcs	.+6      	; 0x3d48 <__mulsf3+0x12>
    3d42:	95 23       	and	r25, r21
    3d44:	09 f0       	breq	.+2      	; 0x3d48 <__mulsf3+0x12>
    3d46:	a2 cf       	rjmp	.-188    	; 0x3c8c <__fp_inf>
    3d48:	a7 cf       	rjmp	.-178    	; 0x3c98 <__fp_nan>
    3d4a:	11 24       	eor	r1, r1
    3d4c:	ea cf       	rjmp	.-44     	; 0x3d22 <__fp_szero>

00003d4e <__mulsf3x>:
    3d4e:	c6 df       	rcall	.-116    	; 0x3cdc <__fp_split3>
    3d50:	a0 f3       	brcs	.-24     	; 0x3d3a <__mulsf3+0x4>

00003d52 <__mulsf3_pse>:
    3d52:	95 9f       	mul	r25, r21
    3d54:	d1 f3       	breq	.-12     	; 0x3d4a <__mulsf3+0x14>
    3d56:	95 0f       	add	r25, r21
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	55 1f       	adc	r21, r21
    3d5c:	62 9f       	mul	r22, r18
    3d5e:	f0 01       	movw	r30, r0
    3d60:	72 9f       	mul	r23, r18
    3d62:	bb 27       	eor	r27, r27
    3d64:	f0 0d       	add	r31, r0
    3d66:	b1 1d       	adc	r27, r1
    3d68:	63 9f       	mul	r22, r19
    3d6a:	aa 27       	eor	r26, r26
    3d6c:	f0 0d       	add	r31, r0
    3d6e:	b1 1d       	adc	r27, r1
    3d70:	aa 1f       	adc	r26, r26
    3d72:	64 9f       	mul	r22, r20
    3d74:	66 27       	eor	r22, r22
    3d76:	b0 0d       	add	r27, r0
    3d78:	a1 1d       	adc	r26, r1
    3d7a:	66 1f       	adc	r22, r22
    3d7c:	82 9f       	mul	r24, r18
    3d7e:	22 27       	eor	r18, r18
    3d80:	b0 0d       	add	r27, r0
    3d82:	a1 1d       	adc	r26, r1
    3d84:	62 1f       	adc	r22, r18
    3d86:	73 9f       	mul	r23, r19
    3d88:	b0 0d       	add	r27, r0
    3d8a:	a1 1d       	adc	r26, r1
    3d8c:	62 1f       	adc	r22, r18
    3d8e:	83 9f       	mul	r24, r19
    3d90:	a0 0d       	add	r26, r0
    3d92:	61 1d       	adc	r22, r1
    3d94:	22 1f       	adc	r18, r18
    3d96:	74 9f       	mul	r23, r20
    3d98:	33 27       	eor	r19, r19
    3d9a:	a0 0d       	add	r26, r0
    3d9c:	61 1d       	adc	r22, r1
    3d9e:	23 1f       	adc	r18, r19
    3da0:	84 9f       	mul	r24, r20
    3da2:	60 0d       	add	r22, r0
    3da4:	21 1d       	adc	r18, r1
    3da6:	82 2f       	mov	r24, r18
    3da8:	76 2f       	mov	r23, r22
    3daa:	6a 2f       	mov	r22, r26
    3dac:	11 24       	eor	r1, r1
    3dae:	9f 57       	subi	r25, 0x7F	; 127
    3db0:	50 40       	sbci	r21, 0x00	; 0
    3db2:	8a f0       	brmi	.+34     	; 0x3dd6 <__mulsf3_pse+0x84>
    3db4:	e1 f0       	breq	.+56     	; 0x3dee <__mulsf3_pse+0x9c>
    3db6:	88 23       	and	r24, r24
    3db8:	4a f0       	brmi	.+18     	; 0x3dcc <__mulsf3_pse+0x7a>
    3dba:	ee 0f       	add	r30, r30
    3dbc:	ff 1f       	adc	r31, r31
    3dbe:	bb 1f       	adc	r27, r27
    3dc0:	66 1f       	adc	r22, r22
    3dc2:	77 1f       	adc	r23, r23
    3dc4:	88 1f       	adc	r24, r24
    3dc6:	91 50       	subi	r25, 0x01	; 1
    3dc8:	50 40       	sbci	r21, 0x00	; 0
    3dca:	a9 f7       	brne	.-22     	; 0x3db6 <__mulsf3_pse+0x64>
    3dcc:	9e 3f       	cpi	r25, 0xFE	; 254
    3dce:	51 05       	cpc	r21, r1
    3dd0:	70 f0       	brcs	.+28     	; 0x3dee <__mulsf3_pse+0x9c>
    3dd2:	5c cf       	rjmp	.-328    	; 0x3c8c <__fp_inf>
    3dd4:	a6 cf       	rjmp	.-180    	; 0x3d22 <__fp_szero>
    3dd6:	5f 3f       	cpi	r21, 0xFF	; 255
    3dd8:	ec f3       	brlt	.-6      	; 0x3dd4 <__mulsf3_pse+0x82>
    3dda:	98 3e       	cpi	r25, 0xE8	; 232
    3ddc:	dc f3       	brlt	.-10     	; 0x3dd4 <__mulsf3_pse+0x82>
    3dde:	86 95       	lsr	r24
    3de0:	77 95       	ror	r23
    3de2:	67 95       	ror	r22
    3de4:	b7 95       	ror	r27
    3de6:	f7 95       	ror	r31
    3de8:	e7 95       	ror	r30
    3dea:	9f 5f       	subi	r25, 0xFF	; 255
    3dec:	c1 f7       	brne	.-16     	; 0x3dde <__mulsf3_pse+0x8c>
    3dee:	fe 2b       	or	r31, r30
    3df0:	88 0f       	add	r24, r24
    3df2:	91 1d       	adc	r25, r1
    3df4:	96 95       	lsr	r25
    3df6:	87 95       	ror	r24
    3df8:	97 f9       	bld	r25, 7
    3dfa:	08 95       	ret

00003dfc <__udivmodhi4>:
    3dfc:	aa 1b       	sub	r26, r26
    3dfe:	bb 1b       	sub	r27, r27
    3e00:	51 e1       	ldi	r21, 0x11	; 17
    3e02:	07 c0       	rjmp	.+14     	; 0x3e12 <__udivmodhi4_ep>

00003e04 <__udivmodhi4_loop>:
    3e04:	aa 1f       	adc	r26, r26
    3e06:	bb 1f       	adc	r27, r27
    3e08:	a6 17       	cp	r26, r22
    3e0a:	b7 07       	cpc	r27, r23
    3e0c:	10 f0       	brcs	.+4      	; 0x3e12 <__udivmodhi4_ep>
    3e0e:	a6 1b       	sub	r26, r22
    3e10:	b7 0b       	sbc	r27, r23

00003e12 <__udivmodhi4_ep>:
    3e12:	88 1f       	adc	r24, r24
    3e14:	99 1f       	adc	r25, r25
    3e16:	5a 95       	dec	r21
    3e18:	a9 f7       	brne	.-22     	; 0x3e04 <__udivmodhi4_loop>
    3e1a:	80 95       	com	r24
    3e1c:	90 95       	com	r25
    3e1e:	bc 01       	movw	r22, r24
    3e20:	cd 01       	movw	r24, r26
    3e22:	08 95       	ret

00003e24 <__divmodhi4>:
    3e24:	97 fb       	bst	r25, 7
    3e26:	07 2e       	mov	r0, r23
    3e28:	16 f4       	brtc	.+4      	; 0x3e2e <__divmodhi4+0xa>
    3e2a:	00 94       	com	r0
    3e2c:	06 d0       	rcall	.+12     	; 0x3e3a <__divmodhi4_neg1>
    3e2e:	77 fd       	sbrc	r23, 7
    3e30:	08 d0       	rcall	.+16     	; 0x3e42 <__divmodhi4_neg2>
    3e32:	e4 df       	rcall	.-56     	; 0x3dfc <__udivmodhi4>
    3e34:	07 fc       	sbrc	r0, 7
    3e36:	05 d0       	rcall	.+10     	; 0x3e42 <__divmodhi4_neg2>
    3e38:	3e f4       	brtc	.+14     	; 0x3e48 <__divmodhi4_exit>

00003e3a <__divmodhi4_neg1>:
    3e3a:	90 95       	com	r25
    3e3c:	81 95       	neg	r24
    3e3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e40:	08 95       	ret

00003e42 <__divmodhi4_neg2>:
    3e42:	70 95       	com	r23
    3e44:	61 95       	neg	r22
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255

00003e48 <__divmodhi4_exit>:
    3e48:	08 95       	ret

00003e4a <__udivmodsi4>:
    3e4a:	a1 e2       	ldi	r26, 0x21	; 33
    3e4c:	1a 2e       	mov	r1, r26
    3e4e:	aa 1b       	sub	r26, r26
    3e50:	bb 1b       	sub	r27, r27
    3e52:	fd 01       	movw	r30, r26
    3e54:	0d c0       	rjmp	.+26     	; 0x3e70 <__udivmodsi4_ep>

00003e56 <__udivmodsi4_loop>:
    3e56:	aa 1f       	adc	r26, r26
    3e58:	bb 1f       	adc	r27, r27
    3e5a:	ee 1f       	adc	r30, r30
    3e5c:	ff 1f       	adc	r31, r31
    3e5e:	a2 17       	cp	r26, r18
    3e60:	b3 07       	cpc	r27, r19
    3e62:	e4 07       	cpc	r30, r20
    3e64:	f5 07       	cpc	r31, r21
    3e66:	20 f0       	brcs	.+8      	; 0x3e70 <__udivmodsi4_ep>
    3e68:	a2 1b       	sub	r26, r18
    3e6a:	b3 0b       	sbc	r27, r19
    3e6c:	e4 0b       	sbc	r30, r20
    3e6e:	f5 0b       	sbc	r31, r21

00003e70 <__udivmodsi4_ep>:
    3e70:	66 1f       	adc	r22, r22
    3e72:	77 1f       	adc	r23, r23
    3e74:	88 1f       	adc	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	1a 94       	dec	r1
    3e7a:	69 f7       	brne	.-38     	; 0x3e56 <__udivmodsi4_loop>
    3e7c:	60 95       	com	r22
    3e7e:	70 95       	com	r23
    3e80:	80 95       	com	r24
    3e82:	90 95       	com	r25
    3e84:	9b 01       	movw	r18, r22
    3e86:	ac 01       	movw	r20, r24
    3e88:	bd 01       	movw	r22, r26
    3e8a:	cf 01       	movw	r24, r30
    3e8c:	08 95       	ret

00003e8e <__tablejump2__>:
    3e8e:	ee 0f       	add	r30, r30
    3e90:	ff 1f       	adc	r31, r31
    3e92:	05 90       	lpm	r0, Z+
    3e94:	f4 91       	lpm	r31, Z
    3e96:	e0 2d       	mov	r30, r0
    3e98:	09 94       	ijmp

00003e9a <_exit>:
    3e9a:	f8 94       	cli

00003e9c <__stop_program>:
    3e9c:	ff cf       	rjmp	.-2      	; 0x3e9c <__stop_program>
