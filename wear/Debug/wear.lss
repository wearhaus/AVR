
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004140  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00802000  00004140  000041f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009af  00802100  00802100  000042f4  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  000042f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000042fe  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004330  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000708  00000000  00000000  00004370  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00015edb  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003396  00000000  00000000  0001a953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000bd9f  00000000  00000000  0001dce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000016b8  00000000  00000000  00029a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002cd47  00000000  00000000  0002b140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000678a  00000000  00000000  00057e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000828  00000000  00000000  0005e618  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000c8b4  00000000  00000000  0005ee40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c3       	rjmp	.+1948   	; 0x79e <__ctors_end>
       2:	00 00       	nop
       4:	e9 c3       	rjmp	.+2002   	; 0x7d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c3       	rjmp	.+1998   	; 0x7d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c3       	rjmp	.+1994   	; 0x7d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c3       	rjmp	.+1990   	; 0x7d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c3       	rjmp	.+1986   	; 0x7d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c3       	rjmp	.+1982   	; 0x7d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c3       	rjmp	.+1978   	; 0x7d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c3       	rjmp	.+1974   	; 0x7d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_9>
      28:	d7 c3       	rjmp	.+1966   	; 0x7d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__vector_11>
      30:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__vector_12>
      34:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__vector_13>
      38:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__vector_14>
      3c:	0c 94 f5 18 	jmp	0x31ea	; 0x31ea <__vector_15>
      40:	0c 94 1e 19 	jmp	0x323c	; 0x323c <__vector_16>
      44:	0c 94 47 19 	jmp	0x328e	; 0x328e <__vector_17>
      48:	0c 94 70 19 	jmp	0x32e0	; 0x32e0 <__vector_18>
      4c:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__vector_19>
      50:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__vector_20>
      54:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__vector_21>
      58:	bf c3       	rjmp	.+1918   	; 0x7d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_23>
      60:	bb c3       	rjmp	.+1910   	; 0x7d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c3       	rjmp	.+1906   	; 0x7d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c3       	rjmp	.+1902   	; 0x7d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c3       	rjmp	.+1898   	; 0x7d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c3       	rjmp	.+1894   	; 0x7d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c3       	rjmp	.+1890   	; 0x7d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c3       	rjmp	.+1886   	; 0x7d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c3       	rjmp	.+1882   	; 0x7d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c3       	rjmp	.+1878   	; 0x7d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c3       	rjmp	.+1874   	; 0x7d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__vector_34>
      8c:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__vector_35>
      90:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__vector_36>
      94:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__vector_37>
      98:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <__vector_38>
      9c:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__vector_39>
      a0:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__vector_40>
      a4:	99 c3       	rjmp	.+1842   	; 0x7d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	97 c3       	rjmp	.+1838   	; 0x7d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	18 0c       	add	r1, r8
      ae:	1d 0c       	add	r1, r13
      b0:	4f 0c       	add	r4, r15
      b2:	4f 0c       	add	r4, r15
      b4:	4f 0c       	add	r4, r15
      b6:	4f 0c       	add	r4, r15
      b8:	4f 0c       	add	r4, r15
      ba:	4f 0c       	add	r4, r15
      bc:	4f 0c       	add	r4, r15
      be:	4f 0c       	add	r4, r15
      c0:	4f 0c       	add	r4, r15
      c2:	4f 0c       	add	r4, r15
      c4:	4f 0c       	add	r4, r15
      c6:	4f 0c       	add	r4, r15
      c8:	4f 0c       	add	r4, r15
      ca:	4f 0c       	add	r4, r15
      cc:	22 0c       	add	r2, r2
      ce:	4f 0c       	add	r4, r15
      d0:	4f 0c       	add	r4, r15
      d2:	4f 0c       	add	r4, r15
      d4:	4f 0c       	add	r4, r15
      d6:	4f 0c       	add	r4, r15
      d8:	4f 0c       	add	r4, r15
      da:	4f 0c       	add	r4, r15
      dc:	4f 0c       	add	r4, r15
      de:	4f 0c       	add	r4, r15
      e0:	4f 0c       	add	r4, r15
      e2:	4f 0c       	add	r4, r15
      e4:	4f 0c       	add	r4, r15
      e6:	4f 0c       	add	r4, r15
      e8:	4f 0c       	add	r4, r15
      ea:	4f 0c       	add	r4, r15
      ec:	4f 0c       	add	r4, r15
      ee:	27 0c       	add	r2, r7
      f0:	2c 0c       	add	r2, r12
      f2:	4f 0c       	add	r4, r15
      f4:	4f 0c       	add	r4, r15
      f6:	4f 0c       	add	r4, r15
      f8:	4f 0c       	add	r4, r15
      fa:	4f 0c       	add	r4, r15
      fc:	4f 0c       	add	r4, r15
      fe:	4f 0c       	add	r4, r15
     100:	4f 0c       	add	r4, r15
     102:	4f 0c       	add	r4, r15
     104:	4f 0c       	add	r4, r15
     106:	4f 0c       	add	r4, r15
     108:	4f 0c       	add	r4, r15
     10a:	4f 0c       	add	r4, r15
     10c:	4f 0c       	add	r4, r15
     10e:	31 0c       	add	r3, r1
     110:	36 0c       	add	r3, r6
     112:	4f 0c       	add	r4, r15
     114:	4f 0c       	add	r4, r15
     116:	4f 0c       	add	r4, r15
     118:	4f 0c       	add	r4, r15
     11a:	4f 0c       	add	r4, r15
     11c:	4f 0c       	add	r4, r15
     11e:	4f 0c       	add	r4, r15
     120:	4f 0c       	add	r4, r15
     122:	4f 0c       	add	r4, r15
     124:	4f 0c       	add	r4, r15
     126:	4f 0c       	add	r4, r15
     128:	4f 0c       	add	r4, r15
     12a:	4f 0c       	add	r4, r15
     12c:	4f 0c       	add	r4, r15
     12e:	3b 0c       	add	r3, r11
     130:	40 0c       	add	r4, r0
     132:	4f 0c       	add	r4, r15
     134:	4f 0c       	add	r4, r15
     136:	4f 0c       	add	r4, r15
     138:	4f 0c       	add	r4, r15
     13a:	4f 0c       	add	r4, r15
     13c:	4f 0c       	add	r4, r15
     13e:	4f 0c       	add	r4, r15
     140:	4f 0c       	add	r4, r15
     142:	4f 0c       	add	r4, r15
     144:	4f 0c       	add	r4, r15
     146:	4f 0c       	add	r4, r15
     148:	4f 0c       	add	r4, r15
     14a:	4f 0c       	add	r4, r15
     14c:	4f 0c       	add	r4, r15
     14e:	45 0c       	add	r4, r5
     150:	4a 0c       	add	r4, r10
     152:	0f 0f       	add	r16, r31
     154:	1e 0f       	add	r17, r30
     156:	62 0f       	add	r22, r18
     158:	67 0f       	add	r22, r23
     15a:	6c 0f       	add	r22, r28
     15c:	71 0f       	add	r23, r17
     15e:	8c 0f       	add	r24, r28
     160:	8c 0f       	add	r24, r28
     162:	8c 0f       	add	r24, r28
     164:	8c 0f       	add	r24, r28
     166:	8c 0f       	add	r24, r28
     168:	8c 0f       	add	r24, r28
     16a:	8c 0f       	add	r24, r28
     16c:	8c 0f       	add	r24, r28
     16e:	8c 0f       	add	r24, r28
     170:	8c 0f       	add	r24, r28
     172:	8c 0f       	add	r24, r28
     174:	8c 0f       	add	r24, r28
     176:	8c 0f       	add	r24, r28
     178:	8c 0f       	add	r24, r28
     17a:	8c 0f       	add	r24, r28
     17c:	8c 0f       	add	r24, r28
     17e:	8c 0f       	add	r24, r28
     180:	8c 0f       	add	r24, r28
     182:	8c 0f       	add	r24, r28
     184:	8c 0f       	add	r24, r28
     186:	8c 0f       	add	r24, r28
     188:	8c 0f       	add	r24, r28
     18a:	8c 0f       	add	r24, r28
     18c:	8c 0f       	add	r24, r28
     18e:	8c 0f       	add	r24, r28
     190:	8c 0f       	add	r24, r28
     192:	8c 0f       	add	r24, r28
     194:	8c 0f       	add	r24, r28
     196:	8c 0f       	add	r24, r28
     198:	8c 0f       	add	r24, r28
     19a:	8c 0f       	add	r24, r28
     19c:	8c 0f       	add	r24, r28
     19e:	8c 0f       	add	r24, r28
     1a0:	8c 0f       	add	r24, r28
     1a2:	8c 0f       	add	r24, r28
     1a4:	8c 0f       	add	r24, r28
     1a6:	8c 0f       	add	r24, r28
     1a8:	8c 0f       	add	r24, r28
     1aa:	8c 0f       	add	r24, r28
     1ac:	8c 0f       	add	r24, r28
     1ae:	8c 0f       	add	r24, r28
     1b0:	8c 0f       	add	r24, r28
     1b2:	8c 0f       	add	r24, r28
     1b4:	8c 0f       	add	r24, r28
     1b6:	8c 0f       	add	r24, r28
     1b8:	8c 0f       	add	r24, r28
     1ba:	8c 0f       	add	r24, r28
     1bc:	8c 0f       	add	r24, r28
     1be:	8c 0f       	add	r24, r28
     1c0:	8c 0f       	add	r24, r28
     1c2:	8c 0f       	add	r24, r28
     1c4:	8c 0f       	add	r24, r28
     1c6:	8c 0f       	add	r24, r28
     1c8:	8c 0f       	add	r24, r28
     1ca:	8c 0f       	add	r24, r28
     1cc:	8c 0f       	add	r24, r28
     1ce:	8c 0f       	add	r24, r28
     1d0:	8c 0f       	add	r24, r28
     1d2:	8c 0f       	add	r24, r28
     1d4:	78 0f       	add	r23, r24
     1d6:	86 0e       	add	r8, r22
     1d8:	8c 0f       	add	r24, r28
     1da:	8c 0f       	add	r24, r28
     1dc:	8c 0f       	add	r24, r28
     1de:	7e 0f       	add	r23, r30
     1e0:	87 0f       	add	r24, r23
     1e2:	8c 0f       	add	r24, r28
     1e4:	8c 0f       	add	r24, r28
     1e6:	8c 0f       	add	r24, r28
     1e8:	8c 0f       	add	r24, r28
     1ea:	76 0f       	add	r23, r22
     1ec:	8c 0f       	add	r24, r28
     1ee:	8c 0f       	add	r24, r28
     1f0:	f3 0e       	add	r15, r19
     1f2:	8c 0f       	add	r24, r28
     1f4:	8c 0f       	add	r24, r28
     1f6:	8c 0f       	add	r24, r28
     1f8:	80 0f       	add	r24, r16
     1fa:	8c 0f       	add	r24, r28
     1fc:	8c 0f       	add	r24, r28
     1fe:	8c 0f       	add	r24, r28
     200:	8c 0f       	add	r24, r28
     202:	8c 0f       	add	r24, r28
     204:	8c 0f       	add	r24, r28
     206:	8c 0f       	add	r24, r28
     208:	8c 0f       	add	r24, r28
     20a:	8c 0f       	add	r24, r28
     20c:	8c 0f       	add	r24, r28
     20e:	8c 0f       	add	r24, r28
     210:	8c 0f       	add	r24, r28
     212:	8c 0f       	add	r24, r28
     214:	8c 0f       	add	r24, r28
     216:	7c 0f       	add	r23, r28
     218:	8c 0f       	add	r24, r28
     21a:	8c 0f       	add	r24, r28
     21c:	8c 0f       	add	r24, r28
     21e:	8c 0f       	add	r24, r28
     220:	8c 0f       	add	r24, r28
     222:	8c 0f       	add	r24, r28
     224:	8c 0f       	add	r24, r28
     226:	8c 0f       	add	r24, r28
     228:	8c 0f       	add	r24, r28
     22a:	8c 0f       	add	r24, r28
     22c:	8c 0f       	add	r24, r28
     22e:	8c 0f       	add	r24, r28
     230:	7a 0f       	add	r23, r26
     232:	2a 0f       	add	r18, r26
     234:	32 0f       	add	r19, r18
     236:	3a 0f       	add	r19, r26
     238:	42 0f       	add	r20, r18
     23a:	4a 0f       	add	r20, r26
     23c:	52 0f       	add	r21, r18
     23e:	5a 0f       	add	r21, r26
     240:	4d 15       	cp	r20, r13
     242:	93 15       	cp	r25, r3
     244:	a1 15       	cp	r26, r1
     246:	77 15       	cp	r23, r7
     248:	5b 15       	cp	r21, r11
     24a:	85 15       	cp	r24, r5
     24c:	69 15       	cp	r22, r9

0000024e <__trampolines_end>:
     24e:	00 00       	nop
     250:	14 00       	.word	0x0014	; ????
     252:	50 00       	.word	0x0050	; ????
     254:	b4 00       	.word	0x00b4	; ????
     256:	40 01       	movw	r8, r0
     258:	f3 01       	movw	r30, r6
     25a:	cd 02       	muls	r28, r29
     25c:	cd 03       	fmulsu	r20, r21
     25e:	f3 04       	cpc	r15, r3
     260:	3d 06       	cpc	r3, r29
     262:	ad 07       	cpc	r26, r29
     264:	3f 09       	sbc	r19, r15
     266:	f4 0a       	sbc	r15, r20
     268:	c9 0c       	add	r12, r9
     26a:	bf 0e       	add	r11, r31
     26c:	d4 10       	cpse	r13, r4
     26e:	07 13       	cpse	r16, r23
     270:	55 15       	cp	r21, r5
     272:	be 17       	cp	r27, r30
     274:	41 1a       	sub	r4, r17
     276:	db 1c       	adc	r13, r11
     278:	8b 1f       	adc	r24, r27
     27a:	50 22       	and	r5, r16
     27c:	27 25       	eor	r18, r7
     27e:	0f 28       	or	r0, r15
     280:	06 2b       	or	r16, r22
     282:	0a 2e       	mov	r0, r26
     284:	19 31       	cpi	r17, 0x19	; 25
     286:	32 34       	cpi	r19, 0x42	; 66
     288:	52 37       	cpi	r21, 0x72	; 114
     28a:	77 3a       	cpi	r23, 0xA7	; 167
     28c:	a0 3d       	cpi	r26, 0xD0	; 208
     28e:	cb 40       	sbci	r28, 0x0B	; 11
     290:	f5 43       	sbci	r31, 0x35	; 53
     292:	1c 47       	sbci	r17, 0x7C	; 124
     294:	3f 4a       	sbci	r19, 0xAF	; 175
     296:	5c 4d       	sbci	r21, 0xDC	; 220
     298:	70 50       	subi	r23, 0x00	; 0
     29a:	7a 53       	subi	r23, 0x3A	; 58
     29c:	78 56       	subi	r23, 0x68	; 104
     29e:	67 59       	subi	r22, 0x97	; 151
     2a0:	47 5c       	subi	r20, 0xC7	; 199
     2a2:	15 5f       	subi	r17, 0xF5	; 245
     2a4:	cf 61       	ori	r28, 0x1F	; 31
     2a6:	75 64       	ori	r23, 0x45	; 69
     2a8:	03 67       	ori	r16, 0x73	; 115
     2aa:	79 69       	ori	r23, 0x99	; 153
     2ac:	d6 6b       	ori	r29, 0xB6	; 182
     2ae:	16 6e       	ori	r17, 0xE6	; 230
     2b0:	3a 70       	andi	r19, 0x0A	; 10
     2b2:	3f 72       	andi	r19, 0x2F	; 47
     2b4:	26 74       	andi	r18, 0x46	; 70
     2b6:	eb 75       	andi	r30, 0x5B	; 91
     2b8:	8f 77       	andi	r24, 0x7F	; 127
     2ba:	0f 79       	andi	r16, 0x9F	; 159
     2bc:	6d 7a       	andi	r22, 0xAD	; 173
     2be:	a5 7b       	andi	r26, 0xB5	; 181
     2c0:	b8 7c       	andi	r27, 0xC8	; 200
     2c2:	a5 7d       	andi	r26, 0xD5	; 213
     2c4:	6c 7e       	andi	r22, 0xEC	; 236
     2c6:	0b 7f       	andi	r16, 0xFB	; 251
     2c8:	83 7f       	andi	r24, 0xF3	; 243
     2ca:	d3 7f       	andi	r29, 0xF3	; 243
     2cc:	fb 7f       	andi	r31, 0xFB	; 251
     2ce:	fb 7f       	andi	r31, 0xFB	; 251
     2d0:	d3 7f       	andi	r29, 0xF3	; 243
     2d2:	83 7f       	andi	r24, 0xF3	; 243
     2d4:	0b 7f       	andi	r16, 0xFB	; 251
     2d6:	6c 7e       	andi	r22, 0xEC	; 236
     2d8:	a5 7d       	andi	r26, 0xD5	; 213
     2da:	b8 7c       	andi	r27, 0xC8	; 200
     2dc:	a5 7b       	andi	r26, 0xB5	; 181
     2de:	6d 7a       	andi	r22, 0xAD	; 173
     2e0:	0f 79       	andi	r16, 0x9F	; 159
     2e2:	8f 77       	andi	r24, 0x7F	; 127
     2e4:	eb 75       	andi	r30, 0x5B	; 91
     2e6:	26 74       	andi	r18, 0x46	; 70
     2e8:	3f 72       	andi	r19, 0x2F	; 47
     2ea:	3a 70       	andi	r19, 0x0A	; 10
     2ec:	16 6e       	ori	r17, 0xE6	; 230
     2ee:	d6 6b       	ori	r29, 0xB6	; 182
     2f0:	79 69       	ori	r23, 0x99	; 153
     2f2:	03 67       	ori	r16, 0x73	; 115
     2f4:	75 64       	ori	r23, 0x45	; 69
     2f6:	cf 61       	ori	r28, 0x1F	; 31
     2f8:	15 5f       	subi	r17, 0xF5	; 245
     2fa:	47 5c       	subi	r20, 0xC7	; 199
     2fc:	67 59       	subi	r22, 0x97	; 151
     2fe:	78 56       	subi	r23, 0x68	; 104
     300:	7a 53       	subi	r23, 0x3A	; 58
     302:	70 50       	subi	r23, 0x00	; 0
     304:	5c 4d       	sbci	r21, 0xDC	; 220
     306:	3f 4a       	sbci	r19, 0xAF	; 175
     308:	1c 47       	sbci	r17, 0x7C	; 124
     30a:	f5 43       	sbci	r31, 0x35	; 53
     30c:	cb 40       	sbci	r28, 0x0B	; 11
     30e:	a0 3d       	cpi	r26, 0xD0	; 208
     310:	77 3a       	cpi	r23, 0xA7	; 167
     312:	52 37       	cpi	r21, 0x72	; 114
     314:	32 34       	cpi	r19, 0x42	; 66
     316:	19 31       	cpi	r17, 0x19	; 25
     318:	0a 2e       	mov	r0, r26
     31a:	06 2b       	or	r16, r22
     31c:	0f 28       	or	r0, r15
     31e:	27 25       	eor	r18, r7
     320:	50 22       	and	r5, r16
     322:	8b 1f       	adc	r24, r27
     324:	db 1c       	adc	r13, r11
     326:	41 1a       	sub	r4, r17
     328:	be 17       	cp	r27, r30
     32a:	55 15       	cp	r21, r5
     32c:	07 13       	cpse	r16, r23
     32e:	d4 10       	cpse	r13, r4
     330:	bf 0e       	add	r11, r31
     332:	c9 0c       	add	r12, r9
     334:	f4 0a       	sbc	r15, r20
     336:	3f 09       	sbc	r19, r15
     338:	ad 07       	cpc	r26, r29
     33a:	3d 06       	cpc	r3, r29
     33c:	f3 04       	cpc	r15, r3
     33e:	cd 03       	fmulsu	r20, r21
     340:	cd 02       	muls	r28, r29
     342:	f3 01       	movw	r30, r6
     344:	40 01       	movw	r8, r0
     346:	b4 00       	.word	0x00b4	; ????
     348:	50 00       	.word	0x0050	; ????
     34a:	14 00       	.word	0x0014	; ????
	...

0000034e <_lin_table>:
     34e:	00 01 01 02 02 02 02 03 03 03 03 03 03 04 04 04     ................
     35e:	04 04 04 04 04 05 05 05 05 05 05 05 05 05 05 06     ................
     36e:	06 06 06 06 06 06 06 06 06 06 06 07 07 07 07 07     ................
     37e:	07 07 07 07 07 07 07 07 07 08 08 08 08 08 08 08     ................
     38e:	08 08 08 08 08 08 08 08 08 09 09 09 09 09 09 09     ................
     39e:	09 09 09 09 09 09 09 09 09 09 09 0a 0a 0a 0a 0a     ................
     3ae:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0b     ................
     3be:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
     3ce:	0b 0b 0b 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     3de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
     3ee:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     3fe:	0d 0d 0d 0d 0d 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     40e:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     41e:	0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     42e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     43e:	0f 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     44e:	00 06 08 0a 0b 0d 0e 0f 10 11 12 13 14 14 15 16     ................
     45e:	17 17 18 19 19 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f 1f     ................
     46e:	20 20 21 21 22 22 23 23 24 24 25 25 26 26 26 27       !!""##$$%%&&&'
     47e:	27 28 28 28 29 29 2a 2a 2a 2b 2b 2b 2c 2c 2d 2d     '((())***+++,,--
     48e:	2d 2e 2e 2e 2f 2f 2f 30 30 30 31 31 31 32 32 32     -...///000111222
     49e:	33 33 33 34 34 34 34 35 35 35 36 36 36 37 37 37     3334444555666777
     4ae:	37 38 38 38 39 39 39 39 3a 3a 3a 3b 3b 3b 3b 3c     78889999:::;;;;<
     4be:	3c 3c 3c 3d 3d 3d 3d 3e 3e 3e 3e 3f 3f 3f 3f 40     <<<====>>>>????@
     4ce:	00 0b 10 14 17 19 1c 1e 20 22 24 26 27 29 2a 2c     ........ "$&')*,
     4de:	2d 2f 30 31 33 34 35 36 37 39 3a 3b 3c 3d 3e 3f     -/01345679:;<=>?
     4ee:	40 41 42 43 44 45 46 47 48 48 49 4a 4b 4c 4d 4e     @ABCDEFGHHIJKLMN
     4fe:	4e 4f 50 51 52 52 53 54 55 55 56 57 58 58 59 5a     NOPQRRSTUUVWXXYZ
     50e:	5b 5b 5c 5d 5d 5e 5f 5f 60 61 61 62 63 63 64 65     [[\]]^__`aabccde
     51e:	65 66 66 67 68 68 69 6a 6a 6b 6b 6c 6d 6d 6e 6e     effghhijjkklmmnn
     52e:	6f 6f 70 71 71 72 72 73 73 74 74 75 76 76 77 77     oopqqrrssttuvvww
     53e:	78 78 79 79 7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7f 7f     xxyyzz{{||}}~~..
     54e:	00 10 17 1c 20 24 27 2a 2d 30 33 35 37 3a 3c 3e     .... $'*-0357:<>
     55e:	40 42 44 46 48 49 4b 4d 4e 50 52 53 55 56 58 59     @BDFHIKMNPRSUVXY
     56e:	5b 5c 5d 5f 60 61 63 64 65 66 68 69 6a 6b 6d 6e     [\]_`acdefhijkmn
     57e:	6f 70 71 72 73 74 76 77 78 79 7a 7b 7c 7d 7e 7f     opqrstvwxyz{|}~.
     58e:	80 81 82 83 84 85 86 87 88 89 8a 8b 8b 8c 8d 8e     ................
     59e:	8f 90 91 92 93 94 94 95 96 97 98 99 99 9a 9b 9c     ................
     5ae:	9d 9e 9e 9f a0 a1 a2 a2 a3 a4 a5 a6 a6 a7 a8 a9     ................
     5be:	a9 aa ab ac ac ad ae af af b0 b1 b1 b2 b3 b4 b4     ................
     5ce:	b5 b6 b6 b7 b8 b9 b9 ba bb bb bc bd bd be bf bf     ................
     5de:	c0 c1 c1 c2 c3 c3 c4 c5 c5 c6 c7 c7 c8 c8 c9 ca     ................
     5ee:	ca cb cc cc cd ce ce cf cf d0 d1 d1 d2 d2 d3 d4     ................
     5fe:	d4 d5 d5 d6 d7 d7 d8 d8 d9 da da db db dc dd dd     ................
     60e:	de de df df e0 e1 e1 e2 e2 e3 e3 e4 e5 e5 e6 e6     ................
     61e:	e7 e7 e8 e8 e9 ea ea eb eb ec ec ed ed ee ee ef     ................
     62e:	ef f0 f1 f1 f2 f2 f3 f3 f4 f4 f5 f5 f6 f6 f7 f7     ................
     63e:	f8 f8 f9 f9 fa fa fb fb fc fc fd fd fe fe ff ff     ................

0000064e <_reorder_table>:
     64e:	70 07 78 0f 74 17 7c 1f 72 27 7a 2f 76 37 7e 3f     p.x.t.|.r'z/v7~?
     65e:	71 47 79 4f 75 57 7d 5f 73 67 7b 6f 60 03 68 0b     qGyOuW}_sg{o`.h.
     66e:	64 13 6c 1b 62 23 6a 2b 66 33 6e 3b 61 43 69 4b     d.l.b#j+f3n;aCiK
     67e:	65 53 6d 5b 50 05 58 0d 54 15 5c 1d 52 25 5a 2d     eSm[P.X.T.\.R%Z-
     68e:	56 35 5e 3d 51 45 59 4d 40 01 48 09 44 11 4c 19     V5^=QEYM@.H.D.L.
     69e:	42 21 4a 29 46 31 4e 39 30 06 38 0e 34 16 3c 1e     B!J)F1N90.8.4.<.
     6ae:	32 26 3a 2e 20 02 28 0a 24 12 2c 1a 10 04 18 0c     2&:. .(.$.,.....

000006be <_cas_constants>:
     6be:	42 76 fc 30 82 5a 82 5a fc 30 42 76 8a 7d f9 18     Bv.0.Z.Z.0Bv.}..
     6ce:	42 76 fc 30 6e 6a 1d 47 82 5a 82 5a 1d 47 6e 6a     Bv.0nj.G.Z.Z.Gnj
     6de:	fc 30 42 76 f9 18 8a 7d 62 7f 8c 0c 8a 7d f9 18     .0Bv...}b....}..
     6ee:	7d 7a 28 25 42 76 fc 30 e3 70 57 3c 6e 6a 1d 47     }z(%Bv.0.pW<nj.G
     6fe:	f2 62 34 51 82 5a 82 5a 34 51 f2 62 1d 47 6e 6a     .b4Q.Z.Z4Q.b.Gnj
     70e:	57 3c e3 70 fc 30 42 76 28 25 7d 7a f9 18 8a 7d     W<.p.0Bv(%}z...}
     71e:	8c 0c 62 7f d9 7f 48 06 62 7f 8c 0c 9d 7e c8 12     ..b...H.b....~..
     72e:	8a 7d f9 18 2a 7c 1a 1f 7d 7a 28 25 85 78 1f 2b     .}..*|..}z(%.x.+
     73e:	42 76 fc 30 b6 73 ba 36 e3 70 57 3c ca 6d ce 41     Bv.0.s.6.pW<.m.A
     74e:	6e 6a 1d 47 d0 66 40 4c f2 62 34 51 d7 5e f6 55     nj.G.f@L.b4Q.^.U
     75e:	82 5a 82 5a f6 55 d7 5e 34 51 f2 62 40 4c d0 66     .Z.Z.U.^4Q.b@L.f
     76e:	1d 47 6e 6a ce 41 ca 6d 57 3c e3 70 ba 36 b6 73     .Gnj.A.mW<.p.6.s
     77e:	fc 30 42 76 1f 2b 85 78 28 25 7d 7a 1a 1f 2a 7c     .0Bv.+.x(%}z..*|
     78e:	f9 18 8a 7d c8 12 9d 7e 8c 0c 62 7f 48 06 d9 7f     ...}...~..b.H...

0000079e <__ctors_end>:
     79e:	11 24       	eor	r1, r1
     7a0:	1f be       	out	0x3f, r1	; 63
     7a2:	cf ef       	ldi	r28, 0xFF	; 255
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df e2       	ldi	r29, 0x2F	; 47
     7a8:	de bf       	out	0x3e, r29	; 62

000007aa <__do_copy_data>:
     7aa:	11 e2       	ldi	r17, 0x21	; 33
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e2       	ldi	r27, 0x20	; 32
     7b0:	e0 e4       	ldi	r30, 0x40	; 64
     7b2:	f1 e4       	ldi	r31, 0x41	; 65
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__do_copy_data+0x10>
     7b6:	05 90       	lpm	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	a0 30       	cpi	r26, 0x00	; 0
     7bc:	b1 07       	cpc	r27, r17
     7be:	d9 f7       	brne	.-10     	; 0x7b6 <__do_copy_data+0xc>

000007c0 <__do_clear_bss>:
     7c0:	2a e2       	ldi	r18, 0x2A	; 42
     7c2:	a0 e0       	ldi	r26, 0x00	; 0
     7c4:	b1 e2       	ldi	r27, 0x21	; 33
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <.do_clear_bss_start>

000007c8 <.do_clear_bss_loop>:
     7c8:	1d 92       	st	X+, r1

000007ca <.do_clear_bss_start>:
     7ca:	af 3a       	cpi	r26, 0xAF	; 175
     7cc:	b2 07       	cpc	r27, r18
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <.do_clear_bss_loop>
     7d0:	0e 94 a0 14 	call	0x2940	; 0x2940 <main>
     7d4:	0c 94 9e 20 	jmp	0x413c	; 0x413c <_exit>

000007d8 <__bad_interrupt>:
     7d8:	13 cc       	rjmp	.-2010   	; 0x0 <__vectors>

000007da <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     7da:	60 91 80 00 	lds	r22, 0x0080
     7de:	62 70       	andi	r22, 0x02	; 2
     7e0:	61 60       	ori	r22, 0x01	; 1
     7e2:	24 e0       	ldi	r18, 0x04	; 4
     7e4:	82 9f       	mul	r24, r18
     7e6:	c0 01       	movw	r24, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	8c 73       	andi	r24, 0x3C	; 60
     7ec:	68 2b       	or	r22, r24
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 20 18 	call	0x3040	; 0x3040 <ccp_write_io>
     7f6:	e0 e8       	ldi	r30, 0x80	; 128
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	80 fd       	sbrc	r24, 0
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <wdt_set_timeout_period+0x20>
     800:	08 95       	ret

00000802 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     802:	60 91 80 00 	lds	r22, 0x0080
     806:	6c 73       	andi	r22, 0x3C	; 60
     808:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     80a:	80 e8       	ldi	r24, 0x80	; 128
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 20 18 	call	0x3040	; 0x3040 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     812:	e0 e8       	ldi	r30, 0x80	; 128
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	80 fd       	sbrc	r24, 0
     81a:	fd cf       	rjmp	.-6      	; 0x816 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     81c:	08 95       	ret

0000081e <init_adc>:
	mean_med_l = start_bubble(bubble_med_l);
	mean_high_l = start_bubble(bubble_high_l);
	
	mean_low_r = start_bubble(bubble_low_r);
	mean_med_r = start_bubble(bubble_med_r);
	mean_high_r = start_bubble(bubble_high_r);
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	61 97       	sbiw	r28, 0x11	; 17
     82a:	cd bf       	out	0x3d, r28	; 61
     82c:	de bf       	out	0x3e, r29	; 62
     82e:	18 2f       	mov	r17, r24
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <adc_read_configuration>
     83e:	99 81       	ldd	r25, Y+1	; 0x01
     840:	2a 81       	ldd	r18, Y+2	; 0x02
     842:	2f 78       	andi	r18, 0x8F	; 143
     844:	22 61       	ori	r18, 0x12	; 18
     846:	2a 83       	std	Y+2, r18	; 0x02
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	91 7e       	andi	r25, 0xE1	; 225
     84e:	90 61       	ori	r25, 0x10	; 16
     850:	99 83       	std	Y+1, r25	; 0x01
     852:	1b 82       	std	Y+3, r1	; 0x03
     854:	8f b7       	in	r24, 0x3f	; 63
     856:	f8 94       	cli
     858:	98 e0       	ldi	r25, 0x08	; 8
     85a:	90 93 08 02 	sts	0x0208, r25
     85e:	8f bf       	out	0x3f, r24	; 63
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	0e 94 6f 17 	call	0x2ede	; 0x2ede <adc_write_configuration>
     86e:	ae 01       	movw	r20, r28
     870:	48 5f       	subi	r20, 0xF8	; 248
     872:	5f 4f       	sbci	r21, 0xFF	; 255
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <adcch_read_configuration>
     87e:	14 30       	cpi	r17, 0x04	; 4
     880:	b9 f0       	breq	.+46     	; 0x8b0 <init_adc+0x92>
     882:	28 f4       	brcc	.+10     	; 0x88e <init_adc+0x70>
     884:	11 30       	cpi	r17, 0x01	; 1
     886:	41 f0       	breq	.+16     	; 0x898 <init_adc+0x7a>
     888:	12 30       	cpi	r17, 0x02	; 2
     88a:	61 f0       	breq	.+24     	; 0x8a4 <init_adc+0x86>
     88c:	21 c0       	rjmp	.+66     	; 0x8d0 <init_adc+0xb2>
     88e:	15 30       	cpi	r17, 0x05	; 5
     890:	a9 f0       	breq	.+42     	; 0x8bc <init_adc+0x9e>
     892:	16 30       	cpi	r17, 0x06	; 6
     894:	c1 f0       	breq	.+48     	; 0x8c6 <init_adc+0xa8>
     896:	1c c0       	rjmp	.+56     	; 0x8d0 <init_adc+0xb2>
     898:	19 8a       	std	Y+17, r1	; 0x11
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	88 87       	std	Y+8, r24	; 0x08
     89e:	80 e2       	ldi	r24, 0x20	; 32
     8a0:	89 87       	std	Y+9, r24	; 0x09
     8a2:	16 c0       	rjmp	.+44     	; 0x8d0 <init_adc+0xb2>
     8a4:	19 8a       	std	Y+17, r1	; 0x11
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	88 87       	std	Y+8, r24	; 0x08
     8aa:	88 e0       	ldi	r24, 0x08	; 8
     8ac:	89 87       	std	Y+9, r24	; 0x09
     8ae:	10 c0       	rjmp	.+32     	; 0x8d0 <init_adc+0xb2>
     8b0:	19 8a       	std	Y+17, r1	; 0x11
     8b2:	8a e0       	ldi	r24, 0x0A	; 10
     8b4:	88 87       	std	Y+8, r24	; 0x08
     8b6:	83 e1       	ldi	r24, 0x13	; 19
     8b8:	89 87       	std	Y+9, r24	; 0x09
     8ba:	0a c0       	rjmp	.+20     	; 0x8d0 <init_adc+0xb2>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	88 87       	std	Y+8, r24	; 0x08
     8c0:	80 e6       	ldi	r24, 0x60	; 96
     8c2:	89 87       	std	Y+9, r24	; 0x09
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <init_adc+0xb2>
     8c6:	18 86       	std	Y+8, r1	; 0x08
     8c8:	88 e0       	ldi	r24, 0x08	; 8
     8ca:	89 87       	std	Y+9, r24	; 0x09
     8cc:	86 e4       	ldi	r24, 0x46	; 70
     8ce:	89 8b       	std	Y+17, r24	; 0x11
     8d0:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d2:	1c 86       	std	Y+12, r1	; 0x0c
     8d4:	80 7f       	andi	r24, 0xF0	; 240
     8d6:	8a 87       	std	Y+10, r24	; 0x0a
     8d8:	ae 01       	movw	r20, r28
     8da:	48 5f       	subi	r20, 0xF8	; 248
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <adcch_write_configuration>
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <adc_enable>
     8f0:	9f b7       	in	r25, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	e0 e0       	ldi	r30, 0x00	; 0
     8f6:	f2 e0       	ldi	r31, 0x02	; 2
     8f8:	80 81       	ld	r24, Z
     8fa:	84 60       	ori	r24, 0x04	; 4
     8fc:	80 83       	st	Z, r24
     8fe:	9f bf       	out	0x3f, r25	; 63
     900:	86 81       	ldd	r24, Z+6	; 0x06
     902:	80 ff       	sbrs	r24, 0
     904:	fd cf       	rjmp	.-6      	; 0x900 <init_adc+0xe2>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	80 93 06 02 	sts	0x0206, r24
     90c:	61 96       	adiw	r28, 0x11	; 17
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	de bf       	out	0x3e, r29	; 62
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	08 95       	ret

0000091a <change_adc_channel>:
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	2a 97       	sbiw	r28, 0x0a	; 10
     926:	cd bf       	out	0x3d, r28	; 61
     928:	de bf       	out	0x3e, r29	; 62
     92a:	18 2f       	mov	r17, r24
     92c:	ae 01       	movw	r20, r28
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <adcch_read_configuration>
     93c:	14 30       	cpi	r17, 0x04	; 4
     93e:	b9 f0       	breq	.+46     	; 0x96e <change_adc_channel+0x54>
     940:	28 f4       	brcc	.+10     	; 0x94c <change_adc_channel+0x32>
     942:	11 30       	cpi	r17, 0x01	; 1
     944:	41 f0       	breq	.+16     	; 0x956 <change_adc_channel+0x3c>
     946:	12 30       	cpi	r17, 0x02	; 2
     948:	61 f0       	breq	.+24     	; 0x962 <change_adc_channel+0x48>
     94a:	21 c0       	rjmp	.+66     	; 0x98e <change_adc_channel+0x74>
     94c:	15 30       	cpi	r17, 0x05	; 5
     94e:	a9 f0       	breq	.+42     	; 0x97a <change_adc_channel+0x60>
     950:	16 30       	cpi	r17, 0x06	; 6
     952:	c1 f0       	breq	.+48     	; 0x984 <change_adc_channel+0x6a>
     954:	1c c0       	rjmp	.+56     	; 0x98e <change_adc_channel+0x74>
     956:	1a 86       	std	Y+10, r1	; 0x0a
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	80 e2       	ldi	r24, 0x20	; 32
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	16 c0       	rjmp	.+44     	; 0x98e <change_adc_channel+0x74>
     962:	1a 86       	std	Y+10, r1	; 0x0a
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	89 83       	std	Y+1, r24	; 0x01
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	8a 83       	std	Y+2, r24	; 0x02
     96c:	10 c0       	rjmp	.+32     	; 0x98e <change_adc_channel+0x74>
     96e:	1a 86       	std	Y+10, r1	; 0x0a
     970:	8a e0       	ldi	r24, 0x0A	; 10
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	83 e1       	ldi	r24, 0x13	; 19
     976:	8a 83       	std	Y+2, r24	; 0x02
     978:	0a c0       	rjmp	.+20     	; 0x98e <change_adc_channel+0x74>
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	89 83       	std	Y+1, r24	; 0x01
     97e:	80 e6       	ldi	r24, 0x60	; 96
     980:	8a 83       	std	Y+2, r24	; 0x02
     982:	05 c0       	rjmp	.+10     	; 0x98e <change_adc_channel+0x74>
     984:	19 82       	std	Y+1, r1	; 0x01
     986:	88 e0       	ldi	r24, 0x08	; 8
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	86 e4       	ldi	r24, 0x46	; 70
     98c:	8a 87       	std	Y+10, r24	; 0x0a
     98e:	ae 01       	movw	r20, r28
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <adcch_write_configuration>
     99e:	2a 96       	adiw	r28, 0x0a	; 10
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	08 95       	ret

000009ac <adc_callback>:
     9ac:	80 91 41 21 	lds	r24, 0x2141
     9b0:	84 30       	cpi	r24, 0x04	; 4
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <adc_callback+0xa>
     9b4:	4c c0       	rjmp	.+152    	; 0xa4e <adc_callback+0xa2>
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <adc_callback+0x16>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	51 f0       	breq	.+20     	; 0x9d0 <adc_callback+0x24>
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	09 f1       	breq	.+66     	; 0xa02 <adc_callback+0x56>
     9c0:	08 95       	ret
     9c2:	85 30       	cpi	r24, 0x05	; 5
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <adc_callback+0x1c>
     9c6:	69 c0       	rjmp	.+210    	; 0xa9a <adc_callback+0xee>
     9c8:	86 30       	cpi	r24, 0x06	; 6
     9ca:	09 f4       	brne	.+2      	; 0x9ce <adc_callback+0x22>
     9cc:	75 c0       	rjmp	.+234    	; 0xab8 <adc_callback+0x10c>
     9ce:	08 95       	ret
     9d0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <ischarging>
     9d4:	81 11       	cpse	r24, r1
     9d6:	92 c0       	rjmp	.+292    	; 0xafc <adc_callback+0x150>
     9d8:	80 91 41 21 	lds	r24, 0x2141
     9dc:	80 93 40 21 	sts	0x2140, r24
     9e0:	86 e0       	ldi	r24, 0x06	; 6
     9e2:	80 93 41 21 	sts	0x2141, r24
     9e6:	80 91 41 21 	lds	r24, 0x2141
     9ea:	97 df       	rcall	.-210    	; 0x91a <change_adc_channel>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	98 e0       	ldi	r25, 0x08	; 8
     9f0:	0e 94 b8 1a 	call	0x3570	; 0x3570 <tc45_enable>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	98 e0       	ldi	r25, 0x08	; 8
     9f8:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <tc45_disable>
     9fc:	0c 94 06 10 	jmp	0x200c	; 0x200c <load_data_color_led>
     a00:	08 95       	ret
     a02:	80 91 01 21 	lds	r24, 0x2101
     a06:	90 91 02 21 	lds	r25, 0x2102
     a0a:	9c 01       	movw	r18, r24
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	20 93 01 21 	sts	0x2101, r18
     a14:	30 93 02 21 	sts	0x2102, r19
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	fc 01       	movw	r30, r24
     a1e:	ee 58       	subi	r30, 0x8E	; 142
     a20:	f6 4d       	sbci	r31, 0xD6	; 214
     a22:	40 83       	st	Z, r20
     a24:	51 83       	std	Z+1, r21	; 0x01
     a26:	80 91 01 21 	lds	r24, 0x2101
     a2a:	90 91 02 21 	lds	r25, 0x2102
     a2e:	80 38       	cpi	r24, 0x80	; 128
     a30:	91 05       	cpc	r25, r1
     a32:	08 f4       	brcc	.+2      	; 0xa36 <adc_callback+0x8a>
     a34:	63 c0       	rjmp	.+198    	; 0xafc <adc_callback+0x150>
     a36:	10 92 01 21 	sts	0x2101, r1
     a3a:	10 92 02 21 	sts	0x2102, r1
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 00 21 	sts	0x2100, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	98 e0       	ldi	r25, 0x08	; 8
     a48:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <tc45_disable>
     a4c:	08 95       	ret
     a4e:	80 91 01 21 	lds	r24, 0x2101
     a52:	90 91 02 21 	lds	r25, 0x2102
     a56:	9c 01       	movw	r18, r24
     a58:	2f 5f       	subi	r18, 0xFF	; 255
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	20 93 01 21 	sts	0x2101, r18
     a60:	30 93 02 21 	sts	0x2102, r19
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	fc 01       	movw	r30, r24
     a6a:	ee 58       	subi	r30, 0x8E	; 142
     a6c:	f6 4d       	sbci	r31, 0xD6	; 214
     a6e:	40 83       	st	Z, r20
     a70:	51 83       	std	Z+1, r21	; 0x01
     a72:	80 91 01 21 	lds	r24, 0x2101
     a76:	90 91 02 21 	lds	r25, 0x2102
     a7a:	80 38       	cpi	r24, 0x80	; 128
     a7c:	91 05       	cpc	r25, r1
     a7e:	08 f4       	brcc	.+2      	; 0xa82 <adc_callback+0xd6>
     a80:	3d c0       	rjmp	.+122    	; 0xafc <adc_callback+0x150>
     a82:	10 92 01 21 	sts	0x2101, r1
     a86:	10 92 02 21 	sts	0x2102, r1
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 00 21 	sts	0x2100, r24
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	98 e0       	ldi	r25, 0x08	; 8
     a94:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <tc45_disable>
     a98:	08 95       	ret
     a9a:	40 93 3c 21 	sts	0x213C, r20
     a9e:	50 93 3d 21 	sts	0x213D, r21
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	80 93 39 21 	sts	0x2139, r24
     aa8:	80 91 40 21 	lds	r24, 0x2140
     aac:	80 93 41 21 	sts	0x2141, r24
     ab0:	80 91 41 21 	lds	r24, 0x2141
     ab4:	32 cf       	rjmp	.-412    	; 0x91a <change_adc_channel>
     ab6:	08 95       	ret
     ab8:	40 93 3a 21 	sts	0x213A, r20
     abc:	50 93 3b 21 	sts	0x213B, r21
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	80 93 38 21 	sts	0x2138, r24
     ac6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <ischarging>
     aca:	88 23       	and	r24, r24
     acc:	b9 f0       	breq	.+46     	; 0xafc <adc_callback+0x150>
     ace:	4f ef       	ldi	r20, 0xFF	; 255
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <twinkle>
     ad8:	80 91 41 21 	lds	r24, 0x2141
     adc:	80 93 40 21 	sts	0x2140, r24
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	80 93 41 21 	sts	0x2141, r24
     ae6:	80 91 41 21 	lds	r24, 0x2141
     aea:	17 df       	rcall	.-466    	; 0x91a <change_adc_channel>
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	98 e0       	ldi	r25, 0x08	; 8
     af0:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <tc45_disable>
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	98 e0       	ldi	r25, 0x08	; 8
     af8:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <tc45_enable>
     afc:	08 95       	ret

00000afe <adc_enable_interrupt>:
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	2a 97       	sbiw	r28, 0x0a	; 10
     b08:	cd bf       	out	0x3d, r28	; 61
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <adc_disable>
     b14:	ae 01       	movw	r20, r28
     b16:	4f 5f       	subi	r20, 0xFF	; 255
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <adcch_read_configuration>
     b24:	e0 ea       	ldi	r30, 0xA0	; 160
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	82 83       	std	Z+2, r24	; 0x02
     b2e:	66 ed       	ldi	r22, 0xD6	; 214
     b30:	74 e0       	ldi	r23, 0x04	; 4
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	92 e0       	ldi	r25, 0x02	; 2
     b36:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <adc_set_callback>
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	8c 7f       	andi	r24, 0xFC	; 252
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	8b 83       	std	Y+3, r24	; 0x03
     b42:	ae 01       	movw	r20, r28
     b44:	4f 5f       	subi	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	92 e0       	ldi	r25, 0x02	; 2
     b4e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <adcch_write_configuration>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <adc_enable>
     b5a:	78 94       	sei
     b5c:	2a 96       	adiw	r28, 0x0a	; 10
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <mean>:


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b68:	66 23       	and	r22, r22
     b6a:	69 f0       	breq	.+26     	; 0xb86 <mean+0x1e>
     b6c:	fc 01       	movw	r30, r24
     b6e:	ac 01       	movw	r20, r24
     b70:	46 0f       	add	r20, r22
     b72:	51 1d       	adc	r21, r1
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
	{
		m += a[i];
     b78:	21 91       	ld	r18, Z+
     b7a:	82 0f       	add	r24, r18
     b7c:	91 1d       	adc	r25, r1


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b7e:	e4 17       	cp	r30, r20
     b80:	f5 07       	cpc	r31, r21
     b82:	d1 f7       	brne	.-12     	; 0xb78 <mean+0x10>
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <mean+0x22>



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
	}
	return m/order;
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
     b90:	86 2f       	mov	r24, r22
}
     b92:	08 95       	ret

00000b94 <updateLEDs>:
		return 3;
	}
}

void updateLEDs()
{
     b94:	8f 92       	push	r8
     b96:	9f 92       	push	r9
     b98:	af 92       	push	r10
     b9a:	bf 92       	push	r11
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29

//	bool playing = isplaying();
//	bool charging = ischarging();

		// get and bin the power of frequencies to colors
		low_power_old = low_power;
     ba8:	80 91 17 21 	lds	r24, 0x2117
     bac:	90 91 18 21 	lds	r25, 0x2118
     bb0:	a0 91 19 21 	lds	r26, 0x2119
     bb4:	b0 91 1a 21 	lds	r27, 0x211A
     bb8:	80 93 0b 21 	sts	0x210B, r24
     bbc:	90 93 0c 21 	sts	0x210C, r25
     bc0:	a0 93 0d 21 	sts	0x210D, r26
     bc4:	b0 93 0e 21 	sts	0x210E, r27
		mid_power_old = mid_power;
     bc8:	80 91 13 21 	lds	r24, 0x2113
     bcc:	90 91 14 21 	lds	r25, 0x2114
     bd0:	a0 91 15 21 	lds	r26, 0x2115
     bd4:	b0 91 16 21 	lds	r27, 0x2116
     bd8:	80 93 07 21 	sts	0x2107, r24
     bdc:	90 93 08 21 	sts	0x2108, r25
     be0:	a0 93 09 21 	sts	0x2109, r26
     be4:	b0 93 0a 21 	sts	0x210A, r27
		high_power_old = high_power;
     be8:	80 91 0f 21 	lds	r24, 0x210F
     bec:	90 91 10 21 	lds	r25, 0x2110
     bf0:	a0 91 11 21 	lds	r26, 0x2111
     bf4:	b0 91 12 21 	lds	r27, 0x2112
     bf8:	80 93 03 21 	sts	0x2103, r24
     bfc:	90 93 04 21 	sts	0x2104, r25
     c00:	a0 93 05 21 	sts	0x2105, r26
     c04:	b0 93 06 21 	sts	0x2106, r27

		low_power = 0;
     c08:	10 92 17 21 	sts	0x2117, r1
     c0c:	10 92 18 21 	sts	0x2118, r1
     c10:	10 92 19 21 	sts	0x2119, r1
     c14:	10 92 1a 21 	sts	0x211A, r1
		mid_power = 0;
     c18:	10 92 13 21 	sts	0x2113, r1
     c1c:	10 92 14 21 	sts	0x2114, r1
     c20:	10 92 15 21 	sts	0x2115, r1
     c24:	10 92 16 21 	sts	0x2116, r1
		high_power = 0;
     c28:	10 92 0f 21 	sts	0x210F, r1
     c2c:	10 92 10 21 	sts	0x2110, r1
     c30:	10 92 11 21 	sts	0x2111, r1
     c34:	10 92 12 21 	sts	0x2112, r1

		for (int i = 0; i < lows; i++){
     c38:	00 91 0f 20 	lds	r16, 0x200F
     c3c:	10 91 10 20 	lds	r17, 0x2010
     c40:	10 16       	cp	r1, r16
     c42:	11 06       	cpc	r1, r17
     c44:	44 f5       	brge	.+80     	; 0xc96 <updateLEDs+0x102>
     c46:	81 2c       	mov	r8, r1
     c48:	91 2c       	mov	r9, r1
     c4a:	54 01       	movw	r10, r8
     c4c:	0f 2e       	mov	r0, r31
     c4e:	ff ea       	ldi	r31, 0xAF	; 175
     c50:	ef 2e       	mov	r14, r31
     c52:	f5 e2       	ldi	r31, 0x25	; 37
     c54:	ff 2e       	mov	r15, r31
     c56:	f0 2d       	mov	r31, r0
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
			low_power += fht_lin_out[i];
     c5c:	f7 01       	movw	r30, r14
     c5e:	81 91       	ld	r24, Z+
     c60:	91 91       	ld	r25, Z+
     c62:	7f 01       	movw	r14, r30
     c64:	bc 01       	movw	r22, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__floatunsisf>
     c6e:	9b 01       	movw	r18, r22
     c70:	ac 01       	movw	r20, r24
     c72:	c5 01       	movw	r24, r10
     c74:	b4 01       	movw	r22, r8
     c76:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__addsf3>
     c7a:	4b 01       	movw	r8, r22
     c7c:	5c 01       	movw	r10, r24

		low_power = 0;
		mid_power = 0;
		high_power = 0;

		for (int i = 0; i < lows; i++){
     c7e:	21 96       	adiw	r28, 0x01	; 1
     c80:	c0 17       	cp	r28, r16
     c82:	d1 07       	cpc	r29, r17
     c84:	5c f3       	brlt	.-42     	; 0xc5c <updateLEDs+0xc8>
     c86:	60 93 17 21 	sts	0x2117, r22
     c8a:	70 93 18 21 	sts	0x2118, r23
     c8e:	80 93 19 21 	sts	0x2119, r24
     c92:	90 93 1a 21 	sts	0x211A, r25
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     c96:	c0 91 0d 20 	lds	r28, 0x200D
     c9a:	d0 91 0e 20 	lds	r29, 0x200E
     c9e:	c0 0f       	add	r28, r16
     ca0:	d1 1f       	adc	r29, r17
     ca2:	0c 17       	cp	r16, r28
     ca4:	1d 07       	cpc	r17, r29
     ca6:	6c f5       	brge	.+90     	; 0xd02 <updateLEDs+0x16e>
     ca8:	80 90 13 21 	lds	r8, 0x2113
     cac:	90 90 14 21 	lds	r9, 0x2114
     cb0:	a0 90 15 21 	lds	r10, 0x2115
     cb4:	b0 90 16 21 	lds	r11, 0x2116
     cb8:	c8 01       	movw	r24, r16
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	9c 01       	movw	r18, r24
     cc0:	21 55       	subi	r18, 0x51	; 81
     cc2:	3a 4d       	sbci	r19, 0xDA	; 218
     cc4:	79 01       	movw	r14, r18
			mid_power += fht_lin_out[i];
     cc6:	f7 01       	movw	r30, r14
     cc8:	81 91       	ld	r24, Z+
     cca:	91 91       	ld	r25, Z+
     ccc:	7f 01       	movw	r14, r30
     cce:	bc 01       	movw	r22, r24
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__floatunsisf>
     cd8:	9b 01       	movw	r18, r22
     cda:	ac 01       	movw	r20, r24
     cdc:	c5 01       	movw	r24, r10
     cde:	b4 01       	movw	r22, r8
     ce0:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__addsf3>
     ce4:	4b 01       	movw	r8, r22
     ce6:	5c 01       	movw	r10, r24
		high_power = 0;

		for (int i = 0; i < lows; i++){
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     ce8:	0f 5f       	subi	r16, 0xFF	; 255
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	0c 17       	cp	r16, r28
     cee:	1d 07       	cpc	r17, r29
     cf0:	54 f3       	brlt	.-44     	; 0xcc6 <updateLEDs+0x132>
     cf2:	60 93 13 21 	sts	0x2113, r22
     cf6:	70 93 14 21 	sts	0x2114, r23
     cfa:	80 93 15 21 	sts	0x2115, r24
     cfe:	90 93 16 21 	sts	0x2116, r25
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     d02:	e0 90 0b 20 	lds	r14, 0x200B
     d06:	f0 90 0c 20 	lds	r15, 0x200C
     d0a:	ec 0e       	add	r14, r28
     d0c:	fd 1e       	adc	r15, r29
     d0e:	ce 15       	cp	r28, r14
     d10:	df 05       	cpc	r29, r15
     d12:	54 f5       	brge	.+84     	; 0xd68 <updateLEDs+0x1d4>
     d14:	80 90 0f 21 	lds	r8, 0x210F
     d18:	90 90 10 21 	lds	r9, 0x2110
     d1c:	a0 90 11 21 	lds	r10, 0x2111
     d20:	b0 90 12 21 	lds	r11, 0x2112
     d24:	8e 01       	movw	r16, r28
     d26:	00 0f       	add	r16, r16
     d28:	11 1f       	adc	r17, r17
     d2a:	01 55       	subi	r16, 0x51	; 81
     d2c:	1a 4d       	sbci	r17, 0xDA	; 218
			high_power += fht_lin_out[i];
     d2e:	f8 01       	movw	r30, r16
     d30:	81 91       	ld	r24, Z+
     d32:	91 91       	ld	r25, Z+
     d34:	8f 01       	movw	r16, r30
     d36:	bc 01       	movw	r22, r24
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__floatunsisf>
     d40:	9b 01       	movw	r18, r22
     d42:	ac 01       	movw	r20, r24
     d44:	c5 01       	movw	r24, r10
     d46:	b4 01       	movw	r22, r8
     d48:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <__addsf3>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     d50:	21 96       	adiw	r28, 0x01	; 1
     d52:	ce 15       	cp	r28, r14
     d54:	df 05       	cpc	r29, r15
     d56:	5c f3       	brlt	.-42     	; 0xd2e <updateLEDs+0x19a>
     d58:	60 93 0f 21 	sts	0x210F, r22
     d5c:	70 93 10 21 	sts	0x2110, r23
     d60:	80 93 11 21 	sts	0x2111, r24
     d64:	90 93 12 21 	sts	0x2112, r25
		if (high_power < high_power_old*damp){
			high_power = high_power_old*damp;
		}*/

		// AGC - automatic gain control
		if ( low_power > maxim || mid_power > maxim || high_power > maxim)  {
     d68:	10 91 17 21 	lds	r17, 0x2117
     d6c:	d0 91 18 21 	lds	r29, 0x2118
     d70:	c0 91 19 21 	lds	r28, 0x2119
     d74:	00 91 1a 21 	lds	r16, 0x211A
     d78:	80 90 07 20 	lds	r8, 0x2007
     d7c:	90 90 08 20 	lds	r9, 0x2008
     d80:	a0 90 09 20 	lds	r10, 0x2009
     d84:	b0 90 0a 20 	lds	r11, 0x200A
     d88:	a5 01       	movw	r20, r10
     d8a:	94 01       	movw	r18, r8
     d8c:	61 2f       	mov	r22, r17
     d8e:	7d 2f       	mov	r23, r29
     d90:	8c 2f       	mov	r24, r28
     d92:	90 2f       	mov	r25, r16
     d94:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__gesf2>
     d98:	18 16       	cp	r1, r24
     d9a:	ec f0       	brlt	.+58     	; 0xdd6 <updateLEDs+0x242>
     d9c:	20 91 13 21 	lds	r18, 0x2113
     da0:	30 91 14 21 	lds	r19, 0x2114
     da4:	40 91 15 21 	lds	r20, 0x2115
     da8:	50 91 16 21 	lds	r21, 0x2116
     dac:	c5 01       	movw	r24, r10
     dae:	b4 01       	movw	r22, r8
     db0:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__cmpsf2>
     db4:	88 23       	and	r24, r24
     db6:	7c f0       	brlt	.+30     	; 0xdd6 <updateLEDs+0x242>
     db8:	20 91 0f 21 	lds	r18, 0x210F
     dbc:	30 91 10 21 	lds	r19, 0x2110
     dc0:	40 91 11 21 	lds	r20, 0x2111
     dc4:	50 91 12 21 	lds	r21, 0x2112
     dc8:	c5 01       	movw	r24, r10
     dca:	b4 01       	movw	r22, r8
     dcc:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <__cmpsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	0c f0       	brlt	.+2      	; 0xdd6 <updateLEDs+0x242>
     dd4:	45 c0       	rjmp	.+138    	; 0xe60 <updateLEDs+0x2cc>
	    	vrem = max(low_power, mid_power);
     dd6:	a0 90 13 21 	lds	r10, 0x2113
     dda:	b0 90 14 21 	lds	r11, 0x2114
     dde:	e0 90 15 21 	lds	r14, 0x2115
     de2:	f0 90 16 21 	lds	r15, 0x2116
     de6:	2a 2d       	mov	r18, r10
     de8:	3b 2d       	mov	r19, r11
     dea:	4e 2d       	mov	r20, r14
     dec:	5f 2d       	mov	r21, r15
     dee:	61 2f       	mov	r22, r17
     df0:	7d 2f       	mov	r23, r29
     df2:	8c 2f       	mov	r24, r28
     df4:	90 2f       	mov	r25, r16
     df6:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__gesf2>
     dfa:	18 16       	cp	r1, r24
     dfc:	24 f0       	brlt	.+8      	; 0xe06 <updateLEDs+0x272>
     dfe:	1a 2d       	mov	r17, r10
     e00:	db 2d       	mov	r29, r11
     e02:	ce 2d       	mov	r28, r14
     e04:	0f 2d       	mov	r16, r15
	    	vrem = max(vrem, high_power);
     e06:	a0 90 0f 21 	lds	r10, 0x210F
     e0a:	b0 90 10 21 	lds	r11, 0x2110
     e0e:	e0 90 11 21 	lds	r14, 0x2111
     e12:	f0 90 12 21 	lds	r15, 0x2112
     e16:	2a 2d       	mov	r18, r10
     e18:	3b 2d       	mov	r19, r11
     e1a:	4e 2d       	mov	r20, r14
     e1c:	5f 2d       	mov	r21, r15
     e1e:	61 2f       	mov	r22, r17
     e20:	7d 2f       	mov	r23, r29
     e22:	8c 2f       	mov	r24, r28
     e24:	90 2f       	mov	r25, r16
     e26:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <__gesf2>
     e2a:	18 16       	cp	r1, r24
     e2c:	24 f0       	brlt	.+8      	; 0xe36 <updateLEDs+0x2a2>
     e2e:	1a 2d       	mov	r17, r10
     e30:	db 2d       	mov	r29, r11
     e32:	ce 2d       	mov	r28, r14
     e34:	0f 2d       	mov	r16, r15
     e36:	81 2f       	mov	r24, r17
     e38:	9d 2f       	mov	r25, r29
     e3a:	ac 2f       	mov	r26, r28
     e3c:	b0 2f       	mov	r27, r16
     e3e:	80 93 6e 29 	sts	0x296E, r24
     e42:	90 93 6f 29 	sts	0x296F, r25
     e46:	a0 93 70 29 	sts	0x2970, r26
     e4a:	b0 93 71 29 	sts	0x2971, r27
	    	maxim = vrem;
     e4e:	80 93 07 20 	sts	0x2007, r24
     e52:	90 93 08 20 	sts	0x2008, r25
     e56:	a0 93 09 20 	sts	0x2009, r26
     e5a:	b0 93 0a 20 	sts	0x200A, r27
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <updateLEDs+0x2f4>
	  	} 
	  	else {
	    	maxim *= agc;
     e60:	20 91 03 20 	lds	r18, 0x2003
     e64:	30 91 04 20 	lds	r19, 0x2004
     e68:	40 91 05 20 	lds	r20, 0x2005
     e6c:	50 91 06 20 	lds	r21, 0x2006
     e70:	c5 01       	movw	r24, r10
     e72:	b4 01       	movw	r22, r8
     e74:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__mulsf3>
     e78:	60 93 07 20 	sts	0x2007, r22
     e7c:	70 93 08 20 	sts	0x2008, r23
     e80:	80 93 09 20 	sts	0x2009, r24
     e84:	90 93 0a 20 	sts	0x200A, r25
	  	}
		// map values to agc adjusted
		float slope = 255/(maxim-min);
     e88:	20 91 1b 21 	lds	r18, 0x211B
     e8c:	30 91 1c 21 	lds	r19, 0x211C
     e90:	40 91 1d 21 	lds	r20, 0x211D
     e94:	50 91 1e 21 	lds	r21, 0x211E
     e98:	60 91 07 20 	lds	r22, 0x2007
     e9c:	70 91 08 20 	lds	r23, 0x2008
     ea0:	80 91 09 20 	lds	r24, 0x2009
     ea4:	90 91 0a 20 	lds	r25, 0x200A
     ea8:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <__subsf3>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	8f e7       	ldi	r24, 0x7F	; 127
     eb6:	93 e4       	ldi	r25, 0x43	; 67
     eb8:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <__divsf3>
     ebc:	4b 01       	movw	r8, r22
     ebe:	5c 01       	movw	r10, r24
		
	  	ledLevelLow = (uint8_t)(low_power*slope);
     ec0:	20 91 17 21 	lds	r18, 0x2117
     ec4:	30 91 18 21 	lds	r19, 0x2118
     ec8:	40 91 19 21 	lds	r20, 0x2119
     ecc:	50 91 1a 21 	lds	r21, 0x211A
     ed0:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__mulsf3>
     ed4:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fixunssfsi>
     ed8:	d6 2f       	mov	r29, r22
     eda:	60 93 99 25 	sts	0x2599, r22
	  	ledLevelMid = (uint8_t)(mid_power*slope);
     ede:	20 91 13 21 	lds	r18, 0x2113
     ee2:	30 91 14 21 	lds	r19, 0x2114
     ee6:	40 91 15 21 	lds	r20, 0x2115
     eea:	50 91 16 21 	lds	r21, 0x2116
     eee:	c5 01       	movw	r24, r10
     ef0:	b4 01       	movw	r22, r8
     ef2:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__mulsf3>
     ef6:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fixunssfsi>
     efa:	c6 2f       	mov	r28, r22
     efc:	60 93 6c 28 	sts	0x286C, r22
	  	ledLevelHigh = (uint8_t)(high_power*slope);
     f00:	20 91 0f 21 	lds	r18, 0x210F
     f04:	30 91 10 21 	lds	r19, 0x2110
     f08:	40 91 11 21 	lds	r20, 0x2111
     f0c:	50 91 12 21 	lds	r21, 0x2112
     f10:	c5 01       	movw	r24, r10
     f12:	b4 01       	movw	r22, r8
     f14:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <__mulsf3>
     f18:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <__fixunssfsi>
     f1c:	60 93 6d 29 	sts	0x296D, r22
		
     lowf[point_low] = ledLevelLow;
     f20:	80 91 23 21 	lds	r24, 0x2123
     f24:	90 91 24 21 	lds	r25, 0x2124
     f28:	fc 01       	movw	r30, r24
     f2a:	ea 54       	subi	r30, 0x4A	; 74
     f2c:	ff 4d       	sbci	r31, 0xDF	; 223
     f2e:	d0 83       	st	Z, r29
	 midf[point_mid] = ledLevelMid;
     f30:	e0 91 21 21 	lds	r30, 0x2121
     f34:	f0 91 22 21 	lds	r31, 0x2122
     f38:	df 01       	movw	r26, r30
     f3a:	a0 5e       	subi	r26, 0xE0	; 224
     f3c:	bf 4d       	sbci	r27, 0xDF	; 223
     f3e:	cc 93       	st	X, r28
	 highf[point_high] = ledLevelHigh;
     f40:	20 91 1f 21 	lds	r18, 0x211F
     f44:	30 91 20 21 	lds	r19, 0x2120
     f48:	d9 01       	movw	r26, r18
     f4a:	af 5e       	subi	r26, 0xEF	; 239
     f4c:	bf 4d       	sbci	r27, 0xDF	; 223
     f4e:	6c 93       	st	X, r22
	 point_low++;
     f50:	01 96       	adiw	r24, 0x01	; 1
	 point_mid++;
	 point_high++;
	 point_low %= order_low;
     f52:	6e e1       	ldi	r22, 0x1E	; 30
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     f5a:	80 93 23 21 	sts	0x2123, r24
     f5e:	90 93 24 21 	sts	0x2124, r25
		
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
     f62:	cf 01       	movw	r24, r30
     f64:	01 96       	adiw	r24, 0x01	; 1
	 point_high++;
	 point_low %= order_low;
	 point_mid %= order_mid;
     f66:	66 e9       	ldi	r22, 0x96	; 150
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     f6e:	80 93 21 21 	sts	0x2121, r24
     f72:	90 93 22 21 	sts	0x2122, r25
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
	 point_high++;
     f76:	c9 01       	movw	r24, r18
     f78:	01 96       	adiw	r24, 0x01	; 1
	 point_low %= order_low;
	 point_mid %= order_mid;
	 point_high %= order_high;
     f7a:	6f e0       	ldi	r22, 0x0F	; 15
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     f82:	80 93 1f 21 	sts	0x211F, r24
     f86:	90 93 20 21 	sts	0x2120, r25
	 
	ledLevelHigh = mean(highf, order_high);
     f8a:	6f e0       	ldi	r22, 0x0F	; 15
     f8c:	81 e1       	ldi	r24, 0x11	; 17
     f8e:	90 e2       	ldi	r25, 0x20	; 32
     f90:	eb dd       	rcall	.-1066   	; 0xb68 <mean>
     f92:	d8 2f       	mov	r29, r24
     f94:	80 93 6d 29 	sts	0x296D, r24
	ledLevelMid = mean(midf, order_mid);
     f98:	66 e9       	ldi	r22, 0x96	; 150
     f9a:	80 e2       	ldi	r24, 0x20	; 32
     f9c:	90 e2       	ldi	r25, 0x20	; 32
     f9e:	e4 dd       	rcall	.-1080   	; 0xb68 <mean>
     fa0:	c8 2f       	mov	r28, r24
     fa2:	80 93 6c 28 	sts	0x286C, r24
	ledLevelLow = mean(lowf, order_low);
     fa6:	6e e1       	ldi	r22, 0x1E	; 30
     fa8:	86 eb       	ldi	r24, 0xB6	; 182
     faa:	90 e2       	ldi	r25, 0x20	; 32
     fac:	dd dd       	rcall	.-1094   	; 0xb68 <mean>
		 
	ledLevelLow = 100*ledLevelLow/LOW_DIVIDER;
     fae:	60 91 02 20 	lds	r22, 0x2002
     fb2:	24 e6       	ldi	r18, 0x64	; 100
     fb4:	28 9f       	mul	r18, r24
     fb6:	c0 01       	movw	r24, r0
     fb8:	11 24       	eor	r1, r1
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     fc0:	16 2f       	mov	r17, r22
     fc2:	60 93 99 25 	sts	0x2599, r22
	ledLevelMid = 100*ledLevelMid/MID_DIVIDER;
     fc6:	a0 91 01 20 	lds	r26, 0x2001
     fca:	2c 9f       	mul	r18, r28
     fcc:	c0 01       	movw	r24, r0
     fce:	11 24       	eor	r1, r1
     fd0:	6a 2f       	mov	r22, r26
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     fd8:	60 93 6c 28 	sts	0x286C, r22
	ledLevelHigh = 100*ledLevelHigh/HIGH_DIVIDER;
     fdc:	30 91 00 20 	lds	r19, 0x2000
     fe0:	2d 9f       	mul	r18, r29
     fe2:	c0 01       	movw	r24, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	63 2f       	mov	r22, r19
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
     fee:	86 2f       	mov	r24, r22
     ff0:	60 93 6d 29 	sts	0x296D, r22
	}
	if (ledLevelLow > 255){
		ledLevelLow = 255;
	}
	
	if (colors[0] <= colors[1] && colors[0] <= colors[2]) {
     ff4:	ec ed       	ldi	r30, 0xDC	; 220
     ff6:	f0 e2       	ldi	r31, 0x20	; 32
     ff8:	20 81       	ld	r18, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	92 17       	cp	r25, r18
     ffe:	40 f0       	brcs	.+16     	; 0x1010 <updateLEDs+0x47c>
    1000:	20 81       	ld	r18, Z
    1002:	92 81       	ldd	r25, Z+2	; 0x02
    1004:	92 17       	cp	r25, r18
    1006:	20 f0       	brcs	.+8      	; 0x1010 <updateLEDs+0x47c>
		twinkle(0, ledLevelHigh, ledLevelLow);
    1008:	41 2f       	mov	r20, r17
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	d4 d7       	rcall	.+4008   	; 0x1fb6 <twinkle>
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <updateLEDs+0x4bc>
	}
	else if (colors[1] <= colors[0] && colors[1] <= colors[2]) {
    1010:	ec ed       	ldi	r30, 0xDC	; 220
    1012:	f0 e2       	ldi	r31, 0x20	; 32
    1014:	21 81       	ldd	r18, Z+1	; 0x01
    1016:	90 81       	ld	r25, Z
    1018:	92 17       	cp	r25, r18
    101a:	40 f0       	brcs	.+16     	; 0x102c <updateLEDs+0x498>
    101c:	21 81       	ldd	r18, Z+1	; 0x01
    101e:	92 81       	ldd	r25, Z+2	; 0x02
    1020:	92 17       	cp	r25, r18
    1022:	20 f0       	brcs	.+8      	; 0x102c <updateLEDs+0x498>
		twinkle(ledLevelHigh, 0, ledLevelLow);
    1024:	41 2f       	mov	r20, r17
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	c6 d7       	rcall	.+3980   	; 0x1fb6 <twinkle>
    102a:	12 c0       	rjmp	.+36     	; 0x1050 <updateLEDs+0x4bc>
	}
	else if (colors[2] <= colors[0] && colors[2] <= colors[1]) {
    102c:	ec ed       	ldi	r30, 0xDC	; 220
    102e:	f0 e2       	ldi	r31, 0x20	; 32
    1030:	22 81       	ldd	r18, Z+2	; 0x02
    1032:	90 81       	ld	r25, Z
    1034:	92 17       	cp	r25, r18
    1036:	40 f0       	brcs	.+16     	; 0x1048 <updateLEDs+0x4b4>
    1038:	22 81       	ldd	r18, Z+2	; 0x02
    103a:	91 81       	ldd	r25, Z+1	; 0x01
    103c:	92 17       	cp	r25, r18
    103e:	20 f0       	brcs	.+8      	; 0x1048 <updateLEDs+0x4b4>
		twinkle(ledLevelHigh, ledLevelLow, 0);
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	61 2f       	mov	r22, r17
    1044:	b8 d7       	rcall	.+3952   	; 0x1fb6 <twinkle>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <updateLEDs+0x4bc>
	}
	else {
		twinkle(0, ledLevelHigh, ledLevelLow);
    1048:	41 2f       	mov	r20, r17
    104a:	68 2f       	mov	r22, r24
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	b3 d7       	rcall	.+3942   	; 0x1fb6 <twinkle>
	}
	
	// update LEDs

}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	bf 90       	pop	r11
    105e:	af 90       	pop	r10
    1060:	9f 90       	pop	r9
    1062:	8f 90       	pop	r8
    1064:	08 95       	ret

00001066 <run>:

void run(){
    1066:	2f 92       	push	r2
    1068:	3f 92       	push	r3
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	1f 93       	push	r17
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
}

static inline void fht_window(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this applies a window to the data for better frequency resolution
  asm volatile (
    109c:	c2 e7       	ldi	r28, 0x72	; 114
    109e:	d9 e2       	ldi	r29, 0x29	; 41
    10a0:	ee e4       	ldi	r30, 0x4E	; 78
    10a2:	f2 e0       	ldi	r31, 0x02	; 2
    10a4:	ff 24       	eor	r15, r15
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	65 91       	lpm	r22, Z+
    10aa:	75 91       	lpm	r23, Z+
    10ac:	08 81       	ld	r16, Y
    10ae:	19 81       	ldd	r17, Y+1	; 0x01
    10b0:	97 03       	fmuls	r17, r23
    10b2:	20 01       	movw	r4, r0
    10b4:	0e 03       	fmul	r16, r22
    10b6:	4f 1c       	adc	r4, r15
    10b8:	10 01       	movw	r2, r0
    10ba:	9e 03       	fmulsu	r17, r22
    10bc:	5f 08       	sbc	r5, r15
    10be:	30 0c       	add	r3, r0
    10c0:	41 1c       	adc	r4, r1
    10c2:	5f 1c       	adc	r5, r15
    10c4:	f8 03       	fmulsu	r23, r16
    10c6:	5f 08       	sbc	r5, r15
    10c8:	30 0c       	add	r3, r0
    10ca:	41 1c       	adc	r4, r1
    10cc:	5f 1c       	adc	r5, r15
    10ce:	49 92       	st	Y+, r4
    10d0:	59 92       	st	Y+, r5
    10d2:	4a 95       	dec	r20
    10d4:	49 f7       	brne	.-46     	; 0x10a8 <run+0x42>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r15", "r16", "r17", "r20", "r30", "r31",
   "r22", "r23", "r28", "r29"
  );

  // get the clobbers off the stack
  asm volatile (
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	3f 90       	pop	r3
    10e6:	2f 90       	pop	r2
    10e8:	11 24       	eor	r1, r1
}

static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    10ea:	2f 92       	push	r2
    10ec:	3f 92       	push	r3
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
  "push r29 \n"
  );


  // move values to bit reversed locations
  asm volatile (
    10f6:	ee e4       	ldi	r30, 0x4E	; 78
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	48 e3       	ldi	r20, 0x38	; 56
    10fc:	a5 91       	lpm	r26, Z+
    10fe:	bb 27       	eor	r27, r27
    1100:	aa 0f       	add	r26, r26
    1102:	bb 1f       	adc	r27, r27
    1104:	ae 58       	subi	r26, 0x8E	; 142
    1106:	b6 4d       	sbci	r27, 0xD6	; 214
    1108:	2d 90       	ld	r2, X+
    110a:	3c 90       	ld	r3, X
    110c:	c5 91       	lpm	r28, Z+
    110e:	dd 27       	eor	r29, r29
    1110:	cc 0f       	add	r28, r28
    1112:	dd 1f       	adc	r29, r29
    1114:	ce 58       	subi	r28, 0x8E	; 142
    1116:	d6 4d       	sbci	r29, 0xD6	; 214
    1118:	68 80       	ld	r6, Y
    111a:	79 80       	ldd	r7, Y+1	; 0x01
    111c:	7c 92       	st	X, r7
    111e:	6e 92       	st	-X, r6
    1120:	28 82       	st	Y, r2
    1122:	39 82       	std	Y+1, r3	; 0x01
    1124:	4a 95       	dec	r20
    1126:	51 f7       	brne	.-44     	; 0x10fc <run+0x96>
  : "r2", "r3", "r6", "r7", "r20",
    "r26", "r27", "r28", "r29", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	7f 90       	pop	r7
    112e:	6f 90       	pop	r6
    1130:	3f 90       	pop	r3
    1132:	2f 90       	pop	r2


static inline void fht_run(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1134:	2f 92       	push	r2
    1136:	3f 92       	push	r3
    1138:	4f 92       	push	r4
    113a:	5f 92       	push	r5
    113c:	6f 92       	push	r6
    113e:	7f 92       	push	r7
    1140:	8f 92       	push	r8
    1142:	9f 92       	push	r9
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
  "push r29 \n"
  );
 
  // do first 3 butterflies - only 1 multiply, minimizes data fetches
  // initialize
  asm volatile (
    1158:	ff 24       	eor	r15, r15
    115a:	00 e1       	ldi	r16, 0x10	; 16
    115c:	e0 2e       	mov	r14, r16
    115e:	c2 e7       	ldi	r28, 0x72	; 114
    1160:	d9 e2       	ldi	r29, 0x29	; 41
    1162:	68 80       	ld	r6, Y
    1164:	79 80       	ldd	r7, Y+1	; 0x01
    1166:	4a 80       	ldd	r4, Y+2	; 0x02
    1168:	5b 80       	ldd	r5, Y+3	; 0x03
    116a:	75 94       	asr	r7
    116c:	67 94       	ror	r6
    116e:	43 01       	movw	r8, r6
    1170:	55 94       	asr	r5
    1172:	47 94       	ror	r4
    1174:	64 0c       	add	r6, r4
    1176:	75 1c       	adc	r7, r5
    1178:	84 18       	sub	r8, r4
    117a:	95 08       	sbc	r9, r5
    117c:	ac 80       	ldd	r10, Y+4	; 0x04
    117e:	bd 80       	ldd	r11, Y+5	; 0x05
    1180:	4e 80       	ldd	r4, Y+6	; 0x06
    1182:	5f 80       	ldd	r5, Y+7	; 0x07
    1184:	b5 94       	asr	r11
    1186:	a7 94       	ror	r10
    1188:	65 01       	movw	r12, r10
    118a:	55 94       	asr	r5
    118c:	47 94       	ror	r4
    118e:	a4 0c       	add	r10, r4
    1190:	b5 1c       	adc	r11, r5
    1192:	c4 18       	sub	r12, r4
    1194:	d5 08       	sbc	r13, r5
    1196:	68 85       	ldd	r22, Y+8	; 0x08
    1198:	79 85       	ldd	r23, Y+9	; 0x09
    119a:	4a 84       	ldd	r4, Y+10	; 0x0a
    119c:	5b 84       	ldd	r5, Y+11	; 0x0b
    119e:	75 95       	asr	r23
    11a0:	67 95       	ror	r22
    11a2:	8b 01       	movw	r16, r22
    11a4:	55 94       	asr	r5
    11a6:	47 94       	ror	r4
    11a8:	64 0d       	add	r22, r4
    11aa:	75 1d       	adc	r23, r5
    11ac:	04 19       	sub	r16, r4
    11ae:	15 09       	sbc	r17, r5
    11b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    11b4:	4e 84       	ldd	r4, Y+14	; 0x0e
    11b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	9c 01       	movw	r18, r24
    11be:	55 94       	asr	r5
    11c0:	47 94       	ror	r4
    11c2:	84 0d       	add	r24, r4
    11c4:	95 1d       	adc	r25, r5
    11c6:	24 19       	sub	r18, r4
    11c8:	35 09       	sbc	r19, r5
    11ca:	75 94       	asr	r7
    11cc:	67 94       	ror	r6
    11ce:	23 01       	movw	r4, r6
    11d0:	b5 94       	asr	r11
    11d2:	a7 94       	ror	r10
    11d4:	6a 0c       	add	r6, r10
    11d6:	7b 1c       	adc	r7, r11
    11d8:	4a 18       	sub	r4, r10
    11da:	5b 08       	sbc	r5, r11
    11dc:	95 94       	asr	r9
    11de:	87 94       	ror	r8
    11e0:	54 01       	movw	r10, r8
    11e2:	d5 94       	asr	r13
    11e4:	c7 94       	ror	r12
    11e6:	8c 0c       	add	r8, r12
    11e8:	9d 1c       	adc	r9, r13
    11ea:	ac 18       	sub	r10, r12
    11ec:	bd 08       	sbc	r11, r13
    11ee:	75 95       	asr	r23
    11f0:	67 95       	ror	r22
    11f2:	6b 01       	movw	r12, r22
    11f4:	95 95       	asr	r25
    11f6:	87 95       	ror	r24
    11f8:	68 0f       	add	r22, r24
    11fa:	79 1f       	adc	r23, r25
    11fc:	c8 1a       	sub	r12, r24
    11fe:	d9 0a       	sbc	r13, r25
    1200:	75 94       	asr	r7
    1202:	67 94       	ror	r6
    1204:	13 01       	movw	r2, r6
    1206:	75 95       	asr	r23
    1208:	67 95       	ror	r22
    120a:	66 0e       	add	r6, r22
    120c:	77 1e       	adc	r7, r23
    120e:	26 1a       	sub	r2, r22
    1210:	37 0a       	sbc	r3, r23
    1212:	42 e8       	ldi	r20, 0x82	; 130
    1214:	5a e5       	ldi	r21, 0x5A	; 90
    1216:	15 03       	mulsu	r17, r21
    1218:	c0 01       	movw	r24, r0
    121a:	04 9f       	mul	r16, r20
    121c:	b0 01       	movw	r22, r0
    121e:	14 03       	mulsu	r17, r20
    1220:	9f 09       	sbc	r25, r15
    1222:	70 0d       	add	r23, r0
    1224:	81 1d       	adc	r24, r1
    1226:	9f 1d       	adc	r25, r15
    1228:	50 9f       	mul	r21, r16
    122a:	70 0d       	add	r23, r0
    122c:	81 1d       	adc	r24, r1
    122e:	9f 1d       	adc	r25, r15
    1230:	95 94       	asr	r9
    1232:	87 94       	ror	r8
    1234:	84 01       	movw	r16, r8
    1236:	88 0e       	add	r8, r24
    1238:	99 1e       	adc	r9, r25
    123a:	08 1b       	sub	r16, r24
    123c:	19 0b       	sbc	r17, r25
    123e:	55 94       	asr	r5
    1240:	47 94       	ror	r4
    1242:	d2 01       	movw	r26, r4
    1244:	d5 94       	asr	r13
    1246:	c7 94       	ror	r12
    1248:	4c 0c       	add	r4, r12
    124a:	5d 1c       	adc	r5, r13
    124c:	ac 19       	sub	r26, r12
    124e:	bd 09       	sbc	r27, r13
    1250:	35 03       	mulsu	r19, r21
    1252:	c0 01       	movw	r24, r0
    1254:	24 9f       	mul	r18, r20
    1256:	b0 01       	movw	r22, r0
    1258:	34 03       	mulsu	r19, r20
    125a:	9f 09       	sbc	r25, r15
    125c:	70 0d       	add	r23, r0
    125e:	81 1d       	adc	r24, r1
    1260:	9f 1d       	adc	r25, r15
    1262:	52 9f       	mul	r21, r18
    1264:	70 0d       	add	r23, r0
    1266:	81 1d       	adc	r24, r1
    1268:	9f 1d       	adc	r25, r15
    126a:	b5 94       	asr	r11
    126c:	a7 94       	ror	r10
    126e:	65 01       	movw	r12, r10
    1270:	a8 0e       	add	r10, r24
    1272:	b9 1e       	adc	r11, r25
    1274:	c8 1a       	sub	r12, r24
    1276:	d9 0a       	sbc	r13, r25
    1278:	69 92       	st	Y+, r6
    127a:	79 92       	st	Y+, r7
    127c:	89 92       	st	Y+, r8
    127e:	99 92       	st	Y+, r9
    1280:	49 92       	st	Y+, r4
    1282:	59 92       	st	Y+, r5
    1284:	a9 92       	st	Y+, r10
    1286:	b9 92       	st	Y+, r11
    1288:	29 92       	st	Y+, r2
    128a:	39 92       	st	Y+, r3
    128c:	09 93       	st	Y+, r16
    128e:	19 93       	st	Y+, r17
    1290:	a9 93       	st	Y+, r26
    1292:	b9 93       	st	Y+, r27
    1294:	c9 92       	st	Y+, r12
    1296:	d9 92       	st	Y+, r13
    1298:	ea 94       	dec	r14
    129a:	09 f0       	breq	.+2      	; 0x129e <run+0x238>
    129c:	62 cf       	rjmp	.-316    	; 0x1162 <run+0xfc>
  "rjmp 1b \n"
  );

  // remainder of the butterflies (fourth and higher)
  // initialize
  asm volatile (
    129e:	00 e2       	ldi	r16, 0x20	; 32
    12a0:	c0 2e       	mov	r12, r16
    12a2:	dd 24       	eor	r13, r13
    12a4:	0a e2       	ldi	r16, 0x2A	; 42
    12a6:	90 2e       	mov	r9, r16
    12a8:	ee eb       	ldi	r30, 0xBE	; 190
    12aa:	f6 e0       	ldi	r31, 0x06	; 6
    12ac:	00 e1       	ldi	r16, 0x10	; 16
    12ae:	a0 2e       	mov	r10, r16
    12b0:	bb 24       	eor	r11, r11
    12b2:	04 e0       	ldi	r16, 0x04	; 4
    12b4:	e0 2e       	mov	r14, r16
    12b6:	a2 e7       	ldi	r26, 0x72	; 114
    12b8:	b9 e2       	ldi	r27, 0x29	; 41
    12ba:	ed 01       	movw	r28, r26
    12bc:	ca 0d       	add	r28, r10
    12be:	db 1d       	adc	r29, r11
    12c0:	8e 2c       	mov	r8, r14
    12c2:	2d 90       	ld	r2, X+
    12c4:	3c 90       	ld	r3, X
    12c6:	48 80       	ld	r4, Y
    12c8:	59 80       	ldd	r5, Y+1	; 0x01
    12ca:	35 94       	asr	r3
    12cc:	27 94       	ror	r2
    12ce:	31 01       	movw	r6, r2
    12d0:	55 94       	asr	r5
    12d2:	47 94       	ror	r4
    12d4:	64 0c       	add	r6, r4
    12d6:	75 1c       	adc	r7, r5
    12d8:	24 18       	sub	r2, r4
    12da:	35 08       	sbc	r3, r5
    12dc:	29 92       	st	Y+, r2
    12de:	39 92       	st	Y+, r3
    12e0:	7c 92       	st	X, r7
    12e2:	6e 92       	st	-X, r6
    12e4:	ac 0d       	add	r26, r12
    12e6:	bd 1d       	adc	r27, r13
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	ea 94       	dec	r14
    12ec:	08 81       	ld	r16, Y
    12ee:	19 81       	ldd	r17, Y+1	; 0x01
    12f0:	3c 91       	ld	r19, X
    12f2:	2e 91       	ld	r18, -X
    12f4:	45 91       	lpm	r20, Z+
    12f6:	55 91       	lpm	r21, Z+
    12f8:	65 91       	lpm	r22, Z+
    12fa:	75 91       	lpm	r23, Z+
    12fc:	15 02       	muls	r17, r21
    12fe:	20 01       	movw	r4, r0
    1300:	04 9f       	mul	r16, r20
    1302:	10 01       	movw	r2, r0
    1304:	14 03       	mulsu	r17, r20
    1306:	5f 08       	sbc	r5, r15
    1308:	30 0c       	add	r3, r0
    130a:	41 1c       	adc	r4, r1
    130c:	5f 1c       	adc	r5, r15
    130e:	50 9f       	mul	r21, r16
    1310:	30 0c       	add	r3, r0
    1312:	41 1c       	adc	r4, r1
    1314:	5f 1c       	adc	r5, r15
    1316:	37 02       	muls	r19, r23
    1318:	30 01       	movw	r6, r0
    131a:	26 9f       	mul	r18, r22
    131c:	20 0c       	add	r2, r0
    131e:	31 1c       	adc	r3, r1
    1320:	46 1c       	adc	r4, r6
    1322:	57 1c       	adc	r5, r7
    1324:	36 03       	mulsu	r19, r22
    1326:	5f 08       	sbc	r5, r15
    1328:	30 0c       	add	r3, r0
    132a:	41 1c       	adc	r4, r1
    132c:	5f 1c       	adc	r5, r15
    132e:	72 9f       	mul	r23, r18
    1330:	30 0c       	add	r3, r0
    1332:	41 1c       	adc	r4, r1
    1334:	5f 1c       	adc	r5, r15
    1336:	0e 01       	movw	r0, r28
    1338:	ca 19       	sub	r28, r10
    133a:	db 09       	sbc	r29, r11
    133c:	28 80       	ld	r2, Y
    133e:	39 80       	ldd	r3, Y+1	; 0x01
    1340:	35 94       	asr	r3
    1342:	27 94       	ror	r2
    1344:	31 01       	movw	r6, r2
    1346:	64 0c       	add	r6, r4
    1348:	75 1c       	adc	r7, r5
    134a:	24 18       	sub	r2, r4
    134c:	35 08       	sbc	r3, r5
    134e:	68 82       	st	Y, r6
    1350:	79 82       	std	Y+1, r7	; 0x01
    1352:	e0 01       	movw	r28, r0
    1354:	29 92       	st	Y+, r2
    1356:	39 92       	st	Y+, r3
    1358:	17 02       	muls	r17, r23
    135a:	20 01       	movw	r4, r0
    135c:	06 9f       	mul	r16, r22
    135e:	10 01       	movw	r2, r0
    1360:	16 03       	mulsu	r17, r22
    1362:	5f 08       	sbc	r5, r15
    1364:	30 0c       	add	r3, r0
    1366:	41 1c       	adc	r4, r1
    1368:	5f 1c       	adc	r5, r15
    136a:	70 9f       	mul	r23, r16
    136c:	30 0c       	add	r3, r0
    136e:	41 1c       	adc	r4, r1
    1370:	5f 1c       	adc	r5, r15
    1372:	35 02       	muls	r19, r21
    1374:	30 01       	movw	r6, r0
    1376:	24 9f       	mul	r18, r20
    1378:	20 18       	sub	r2, r0
    137a:	31 08       	sbc	r3, r1
    137c:	46 08       	sbc	r4, r6
    137e:	57 08       	sbc	r5, r7
    1380:	34 03       	mulsu	r19, r20
    1382:	5f 1c       	adc	r5, r15
    1384:	30 18       	sub	r3, r0
    1386:	41 08       	sbc	r4, r1
    1388:	5f 08       	sbc	r5, r15
    138a:	52 9f       	mul	r21, r18
    138c:	30 18       	sub	r3, r0
    138e:	41 08       	sbc	r4, r1
    1390:	5f 08       	sbc	r5, r15
    1392:	0d 01       	movw	r0, r26
    1394:	aa 19       	sub	r26, r10
    1396:	bb 09       	sbc	r27, r11
    1398:	2d 90       	ld	r2, X+
    139a:	3c 90       	ld	r3, X
    139c:	35 94       	asr	r3
    139e:	27 94       	ror	r2
    13a0:	31 01       	movw	r6, r2
    13a2:	64 0c       	add	r6, r4
    13a4:	75 1c       	adc	r7, r5
    13a6:	24 18       	sub	r2, r4
    13a8:	35 08       	sbc	r3, r5
    13aa:	7c 92       	st	X, r7
    13ac:	6e 92       	st	-X, r6
    13ae:	d0 01       	movw	r26, r0
    13b0:	2d 92       	st	X+, r2
    13b2:	3c 92       	st	X, r3
    13b4:	12 97       	sbiw	r26, 0x02	; 2
    13b6:	ea 94       	dec	r14
    13b8:	09 f0       	breq	.+2      	; 0x13bc <run+0x356>
    13ba:	98 cf       	rjmp	.-208    	; 0x12ec <run+0x286>
    13bc:	de 01       	movw	r26, r28
    13be:	aa 19       	sub	r26, r10
    13c0:	bb 09       	sbc	r27, r11
    13c2:	2d 90       	ld	r2, X+
    13c4:	3c 90       	ld	r3, X
    13c6:	48 80       	ld	r4, Y
    13c8:	59 80       	ldd	r5, Y+1	; 0x01
    13ca:	35 94       	asr	r3
    13cc:	27 94       	ror	r2
    13ce:	31 01       	movw	r6, r2
    13d0:	55 94       	asr	r5
    13d2:	47 94       	ror	r4
    13d4:	64 0c       	add	r6, r4
    13d6:	75 1c       	adc	r7, r5
    13d8:	24 18       	sub	r2, r4
    13da:	35 08       	sbc	r3, r5
    13dc:	28 82       	st	Y, r2
    13de:	39 82       	std	Y+1, r3	; 0x01
    13e0:	7c 92       	st	X, r7
    13e2:	6e 92       	st	-X, r6
    13e4:	c5 01       	movw	r24, r10
    13e6:	96 95       	lsr	r25
    13e8:	87 95       	ror	r24
    13ea:	c8 0f       	add	r28, r24
    13ec:	d9 1f       	adc	r29, r25
    13ee:	c2 37       	cpi	r28, 0x72	; 114
    13f0:	d9 05       	cpc	r29, r9
    13f2:	40 f4       	brcc	.+16     	; 0x1404 <run+0x39e>
    13f4:	de 01       	movw	r26, r28
    13f6:	ca 0d       	add	r28, r10
    13f8:	db 1d       	adc	r29, r11
    13fa:	e8 2c       	mov	r14, r8
    13fc:	ea 19       	sub	r30, r10
    13fe:	fb 09       	sbc	r31, r11
    1400:	34 96       	adiw	r30, 0x04	; 4
    1402:	5f cf       	rjmp	.-322    	; 0x12c2 <run+0x25c>
    1404:	85 fc       	sbrc	r8, 5
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <run+0x3ae>
    1408:	ea 2c       	mov	r14, r10
    140a:	e6 94       	lsr	r14
    140c:	56 01       	movw	r10, r12
    140e:	cc 0c       	add	r12, r12
    1410:	dd 1c       	adc	r13, r13
    1412:	51 cf       	rjmp	.-350    	; 0x12b6 <run+0x250>
   "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "r24", "r25",
   "r26", "r27", "r28", "r29", "r30", "r31" // clobber list for whole thing
  );

  // get the clobbers off the stack
  asm volatile (
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	7f 90       	pop	r7
    142e:	6f 90       	pop	r6
    1430:	5f 90       	pop	r5
    1432:	4f 90       	pop	r4
    1434:	3f 90       	pop	r3
    1436:	2f 90       	pop	r2
    1438:	11 24       	eor	r1, r1
}

static inline void fht_mag_lin(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    143a:	2f 92       	push	r2
    143c:	3f 92       	push	r3
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this returns an 16b unsigned value which is 16*((img^2 + real^2)^0.5)
  asm volatile (
    1452:	a2 e7       	ldi	r26, 0x72	; 114
    1454:	b9 e2       	ldi	r27, 0x29	; 41
    1456:	cf ea       	ldi	r28, 0xAF	; 175
    1458:	d5 e2       	ldi	r29, 0x25	; 37
    145a:	e2 e7       	ldi	r30, 0x72	; 114
    145c:	fa e2       	ldi	r31, 0x2A	; 42
    145e:	4f 01       	movw	r8, r30
    1460:	ff 24       	eor	r15, r15
    1462:	40 e4       	ldi	r20, 0x40	; 64
    1464:	0d 91       	ld	r16, X+
    1466:	1d 91       	ld	r17, X+
    1468:	98 01       	movw	r18, r16
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <run+0x412>
    146c:	f4 01       	movw	r30, r8
    146e:	0d 91       	ld	r16, X+
    1470:	1d 91       	ld	r17, X+
    1472:	32 91       	ld	r19, -Z
    1474:	22 91       	ld	r18, -Z
    1476:	4f 01       	movw	r8, r30
    1478:	11 02       	muls	r17, r17
    147a:	20 01       	movw	r4, r0
    147c:	00 9f       	mul	r16, r16
    147e:	10 01       	movw	r2, r0
    1480:	98 03       	fmulsu	r17, r16
    1482:	5f 08       	sbc	r5, r15
    1484:	30 0c       	add	r3, r0
    1486:	41 1c       	adc	r4, r1
    1488:	5f 1c       	adc	r5, r15
    148a:	33 02       	muls	r19, r19
    148c:	30 01       	movw	r6, r0
    148e:	22 9f       	mul	r18, r18
    1490:	20 0c       	add	r2, r0
    1492:	31 1c       	adc	r3, r1
    1494:	46 1c       	adc	r4, r6
    1496:	57 1c       	adc	r5, r7
    1498:	ba 03       	fmulsu	r19, r18
    149a:	5f 08       	sbc	r5, r15
    149c:	30 0c       	add	r3, r0
    149e:	41 1c       	adc	r4, r1
    14a0:	5f 1c       	adc	r5, r15
    14a2:	11 27       	eor	r17, r17
    14a4:	55 20       	and	r5, r5
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <run+0x45a>
    14a8:	18 e0       	ldi	r17, 0x08	; 8
    14aa:	f2 01       	movw	r30, r4
    14ac:	f0 34       	cpi	r31, 0x40	; 64
    14ae:	28 f5       	brcc	.+74     	; 0x14fa <run+0x494>
    14b0:	33 0c       	add	r3, r3
    14b2:	ee 1f       	adc	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	33 0c       	add	r3, r3
    14b8:	ee 1f       	adc	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	1a 95       	dec	r17
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <run+0x494>
    14c0:	44 20       	and	r4, r4
    14c2:	69 f0       	breq	.+26     	; 0x14de <run+0x478>
    14c4:	14 e0       	ldi	r17, 0x04	; 4
    14c6:	f4 2d       	mov	r31, r4
    14c8:	e3 2d       	mov	r30, r3
    14ca:	f0 34       	cpi	r31, 0x40	; 64
    14cc:	b0 f4       	brcc	.+44     	; 0x14fa <run+0x494>
    14ce:	22 0c       	add	r2, r2
    14d0:	ee 1f       	adc	r30, r30
    14d2:	ff 1f       	adc	r31, r31
    14d4:	22 0c       	add	r2, r2
    14d6:	ee 1f       	adc	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	1a 95       	dec	r17
    14dc:	f6 cf       	rjmp	.-20     	; 0x14ca <run+0x464>
    14de:	f1 01       	movw	r30, r2
    14e0:	f0 34       	cpi	r31, 0x40	; 64
    14e2:	58 f4       	brcc	.+22     	; 0x14fa <run+0x494>
    14e4:	f0 31       	cpi	r31, 0x10	; 16
    14e6:	60 f4       	brcc	.+24     	; 0x1500 <run+0x49a>
    14e8:	f1 30       	cpi	r31, 0x01	; 1
    14ea:	78 f0       	brcs	.+30     	; 0x150a <run+0x4a4>
    14ec:	f2 95       	swap	r31
    14ee:	e2 95       	swap	r30
    14f0:	ef 70       	andi	r30, 0x0F	; 15
    14f2:	ef 2b       	or	r30, r31
    14f4:	e6 95       	lsr	r30
    14f6:	f1 e0       	ldi	r31, 0x01	; 1
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <run+0x4a4>
    14fa:	ef 2f       	mov	r30, r31
    14fc:	f2 e0       	ldi	r31, 0x02	; 2
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <run+0x4a4>
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	ef 2f       	mov	r30, r31
    1506:	e0 68       	ori	r30, 0x80	; 128
    1508:	f1 e0       	ldi	r31, 0x01	; 1
    150a:	e2 5b       	subi	r30, 0xB2	; 178
    150c:	fc 4f       	sbci	r31, 0xFC	; 252
    150e:	04 91       	lpm	r16, Z
    1510:	22 27       	eor	r18, r18
    1512:	11 23       	and	r17, r17
    1514:	21 f0       	breq	.+8      	; 0x151e <run+0x4b8>
    1516:	00 0f       	add	r16, r16
    1518:	22 1f       	adc	r18, r18
    151a:	1a 95       	dec	r17
    151c:	e1 f7       	brne	.-8      	; 0x1516 <run+0x4b0>
    151e:	09 93       	st	Y+, r16
    1520:	29 93       	st	Y+, r18
    1522:	4a 95       	dec	r20
    1524:	09 f0       	breq	.+2      	; 0x1528 <run+0x4c2>
    1526:	a2 cf       	rjmp	.-188    	; 0x146c <run+0x406>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r16", "r17", "r26", "r27",
   "r28", "r29", "r30", "r31", "r15", "r18", "r19", "r20", "r8" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	11 24       	eor	r1, r1
	fht_window(); // window the data for better frequency response
	fht_reorder(); // reorder the data before doing the fht
	fht_run(); // process the data in the fht
	fht_mag_lin(); // take the output of the fht
	
	updateLEDs();
    1542:	28 db       	rcall	.-2480   	; 0xb94 <updateLEDs>
	flag_fft = false;
    1544:	10 92 00 21 	sts	0x2100, r1
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	af 90       	pop	r10
    155c:	9f 90       	pop	r9
    155e:	8f 90       	pop	r8
    1560:	7f 90       	pop	r7
    1562:	6f 90       	pop	r6
    1564:	5f 90       	pop	r5
    1566:	4f 90       	pop	r4
    1568:	3f 90       	pop	r3
    156a:	2f 90       	pop	r2
    156c:	08 95       	ret

0000156e <write_byte_eeprom>:

/*
	return false when the procedure was failed, true when success
*/
bool write_byte_eeprom(uint8_t addr, uint8_t data)
{
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	16 2f       	mov	r17, r22
	uint8_t rev_data;
	
	nvm_eeprom_write_byte(addr, data);
    1576:	c8 2f       	mov	r28, r24
    1578:	d0 e0       	ldi	r29, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	0e 94 4b 18 	call	0x3096	; 0x3096 <nvm_eeprom_write_byte>
	rev_data = nvm_eeprom_read_byte(addr);
    1580:	ce 01       	movw	r24, r28
    1582:	0e 94 26 18 	call	0x304c	; 0x304c <nvm_eeprom_read_byte>
	if (rev_data == data)
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	18 13       	cpse	r17, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else
	{
		return false;
	}	
    158c:	89 2f       	mov	r24, r25
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <init_i2c>:
		.no_wait		= false
	};
	
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	29 97       	sbiw	r28, 0x09	; 9
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	80 e8       	ldi	r24, 0x80	; 128
    15a6:	9a e1       	ldi	r25, 0x1A	; 26
    15a8:	a6 e0       	ldi	r26, 0x06	; 6
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	ab 83       	std	Y+3, r26	; 0x03
    15b2:	bc 83       	std	Y+4, r27	; 0x04
    15b4:	83 e2       	ldi	r24, 0x23	; 35
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	af 83       	std	Y+7, r26	; 0x07
    15c2:	b8 87       	std	Y+8, r27	; 0x08
    15c4:	80 e5       	ldi	r24, 0x50	; 80
    15c6:	89 87       	std	Y+9, r24	; 0x09
    15c8:	60 e4       	ldi	r22, 0x40	; 64
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <sysclk_enable_module>
    15d0:	be 01       	movw	r22, r28
    15d2:	6f 5f       	subi	r22, 0xFF	; 255
    15d4:	7f 4f       	sbci	r23, 0xFF	; 255
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	0e 94 00 1c 	call	0x3800	; 0x3800 <twi_master_init>
    15de:	e0 e8       	ldi	r30, 0x80	; 128
    15e0:	f4 e0       	ldi	r31, 0x04	; 4
    15e2:	81 81       	ldd	r24, Z+1	; 0x01
    15e4:	88 60       	ori	r24, 0x08	; 8
    15e6:	81 83       	std	Z+1, r24	; 0x01
    15e8:	78 94       	sei
    15ea:	29 96       	adiw	r28, 0x09	; 9
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <init_mtch6301>:
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	59 e1       	ldi	r21, 0x19	; 25
    15fa:	60 e2       	ldi	r22, 0x20	; 32
    15fc:	80 e4       	ldi	r24, 0x40	; 64
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1604:	80 e2       	ldi	r24, 0x20	; 32
    1606:	80 93 b0 00 	sts	0x00B0, r24
    160a:	e0 e4       	ldi	r30, 0x40	; 64
    160c:	f6 e0       	ldi	r31, 0x06	; 6
    160e:	82 87       	std	Z+10, r24	; 0x0a
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	81 87       	std	Z+9, r24	; 0x09
    1614:	e0 ea       	ldi	r30, 0xA0	; 160
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	78 94       	sei
    1620:	08 95       	ret

00001622 <init_mtchio>:
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	60 e2       	ldi	r22, 0x20	; 32
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	96 e0       	ldi	r25, 0x06	; 6
    162c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	60 e4       	ldi	r22, 0x40	; 64
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	96 e0       	ldi	r25, 0x06	; 6
    163a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e8       	ldi	r22, 0x80	; 128
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	96 e0       	ldi	r25, 0x06	; 6
    1648:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e4       	ldi	r22, 0x40	; 64
    1652:	80 e6       	ldi	r24, 0x60	; 96
    1654:	96 e0       	ldi	r25, 0x06	; 6
    1656:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	50 e0       	ldi	r21, 0x00	; 0
    165e:	61 e0       	ldi	r22, 0x01	; 1
    1660:	80 ee       	ldi	r24, 0xE0	; 224
    1662:	97 e0       	ldi	r25, 0x07	; 7
    1664:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	61 e0       	ldi	r22, 0x01	; 1
    166e:	80 e6       	ldi	r24, 0x60	; 96
    1670:	96 e0       	ldi	r25, 0x06	; 6
    1672:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	62 e0       	ldi	r22, 0x02	; 2
    167c:	80 e6       	ldi	r24, 0x60	; 96
    167e:	96 e0       	ldi	r25, 0x06	; 6
    1680:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1684:	08 95       	ret

00001686 <cmd_write_register>:
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	61 97       	sbiw	r28, 0x11	; 17
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	95 e5       	ldi	r25, 0x55	; 85
    1696:	99 83       	std	Y+1, r25	; 0x01
    1698:	94 e0       	ldi	r25, 0x04	; 4
    169a:	9a 83       	std	Y+2, r25	; 0x02
    169c:	95 e1       	ldi	r25, 0x15	; 21
    169e:	9b 83       	std	Y+3, r25	; 0x03
    16a0:	8c 83       	std	Y+4, r24	; 0x04
    16a2:	6d 83       	std	Y+5, r22	; 0x05
    16a4:	4e 83       	std	Y+6, r20	; 0x06
    16a6:	be 01       	movw	r22, r28
    16a8:	69 5f       	subi	r22, 0xF9	; 249
    16aa:	7f 4f       	sbci	r23, 0xFF	; 255
    16ac:	8b e0       	ldi	r24, 0x0B	; 11
    16ae:	fb 01       	movw	r30, r22
    16b0:	11 92       	st	Z+, r1
    16b2:	8a 95       	dec	r24
    16b4:	e9 f7       	brne	.-6      	; 0x16b0 <cmd_write_register+0x2a>
    16b6:	85 e2       	ldi	r24, 0x25	; 37
    16b8:	8f 83       	std	Y+7, r24	; 0x07
    16ba:	ce 01       	movw	r24, r28
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	8d 87       	std	Y+13, r24	; 0x0d
    16c0:	9e 87       	std	Y+14, r25	; 0x0e
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
    16c8:	98 8b       	std	Y+16, r25	; 0x10
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	80 e8       	ldi	r24, 0x80	; 128
    16ce:	94 e0       	ldi	r25, 0x04	; 4
    16d0:	0e 94 15 1c 	call	0x382a	; 0x382a <twi_master_transfer>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	80 93 30 21 	sts	0x2130, r24
    16da:	61 96       	adiw	r28, 0x11	; 17
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <cmd_read_register>:
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	60 97       	sbiw	r28, 0x10	; 16
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	95 e5       	ldi	r25, 0x55	; 85
    16f6:	99 83       	std	Y+1, r25	; 0x01
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	96 e1       	ldi	r25, 0x16	; 22
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8c 83       	std	Y+4, r24	; 0x04
    1702:	6d 83       	std	Y+5, r22	; 0x05
    1704:	be 01       	movw	r22, r28
    1706:	6a 5f       	subi	r22, 0xFA	; 250
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8b e0       	ldi	r24, 0x0B	; 11
    170c:	fb 01       	movw	r30, r22
    170e:	11 92       	st	Z+, r1
    1710:	8a 95       	dec	r24
    1712:	e9 f7       	brne	.-6      	; 0x170e <cmd_read_register+0x28>
    1714:	85 e2       	ldi	r24, 0x25	; 37
    1716:	8e 83       	std	Y+6, r24	; 0x06
    1718:	ce 01       	movw	r24, r28
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	8c 87       	std	Y+12, r24	; 0x0c
    171e:	9d 87       	std	Y+13, r25	; 0x0d
    1720:	85 e0       	ldi	r24, 0x05	; 5
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	8e 87       	std	Y+14, r24	; 0x0e
    1726:	9f 87       	std	Y+15, r25	; 0x0f
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	80 e8       	ldi	r24, 0x80	; 128
    172c:	94 e0       	ldi	r25, 0x04	; 4
    172e:	0e 94 15 1c 	call	0x382a	; 0x382a <twi_master_transfer>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	80 93 30 21 	sts	0x2130, r24
    1738:	60 96       	adiw	r28, 0x10	; 16
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	de bf       	out	0x3e, r29	; 62
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	08 95       	ret

00001744 <read_register>:
    1744:	d0 df       	rcall	.-96     	; 0x16e6 <cmd_read_register>
    1746:	82 e1       	ldi	r24, 0x12	; 18
    1748:	97 e2       	ldi	r25, 0x27	; 39
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <read_register+0xc>
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	21 f0       	breq	.+8      	; 0x1758 <read_register+0x14>
    1750:	20 91 d4 20 	lds	r18, 0x20D4
    1754:	21 30       	cpi	r18, 0x01	; 1
    1756:	d1 f3       	breq	.-12     	; 0x174c <read_register+0x8>
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	80 93 d4 20 	sts	0x20D4, r24
    175e:	80 91 2b 21 	lds	r24, 0x212B
    1762:	08 95       	ret

00001764 <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	2f 93       	push	r18
    1774:	3f 93       	push	r19
    1776:	4f 93       	push	r20
    1778:	5f 93       	push	r21
    177a:	6f 93       	push	r22
    177c:	7f 93       	push	r23
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	af 93       	push	r26
    1784:	bf 93       	push	r27
    1786:	ef 93       	push	r30
    1788:	ff 93       	push	r31
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	61 97       	sbiw	r28, 0x11	; 17
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
    179e:	80 91 30 21 	lds	r24, 0x2130
    17a2:	88 23       	and	r24, r24
    17a4:	21 f0       	breq	.+8      	; 0x17ae <__vector_9+0x4a>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	09 f4       	brne	.+2      	; 0x17ac <__vector_9+0x48>
    17aa:	7f c0       	rjmp	.+254    	; 0x18aa <__vector_9+0x146>
    17ac:	9c c0       	rjmp	.+312    	; 0x18e6 <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
    17ae:	fe 01       	movw	r30, r28
    17b0:	3c 96       	adiw	r30, 0x0c	; 12
    17b2:	86 e0       	ldi	r24, 0x06	; 6
    17b4:	df 01       	movw	r26, r30
    17b6:	1d 92       	st	X+, r1
    17b8:	8a 95       	dec	r24
    17ba:	e9 f7       	brne	.-6      	; 0x17b6 <__vector_9+0x52>
	
	twi_package_t package = {
    17bc:	be 01       	movw	r22, r28
    17be:	6f 5f       	subi	r22, 0xFF	; 255
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8b e0       	ldi	r24, 0x0B	; 11
    17c4:	db 01       	movw	r26, r22
    17c6:	1d 92       	st	X+, r1
    17c8:	8a 95       	dec	r24
    17ca:	e9 f7       	brne	.-6      	; 0x17c6 <__vector_9+0x62>
    17cc:	85 e2       	ldi	r24, 0x25	; 37
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	ef 83       	std	Y+7, r30	; 0x07
    17d2:	f8 87       	std	Y+8, r31	; 0x08
    17d4:	86 e0       	ldi	r24, 0x06	; 6
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	89 87       	std	Y+9, r24	; 0x09
    17da:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	80 e8       	ldi	r24, 0x80	; 128
    17e0:	94 e0       	ldi	r25, 0x04	; 4
    17e2:	0e 94 15 1c 	call	0x382a	; 0x382a <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	82 fb       	bst	r24, 2
    17ea:	00 27       	eor	r16, r16
    17ec:	00 f9       	bld	r16, 0
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	00 93 73 2a 	sts	0x2A73, r16
	
	if (m_touch_pkg->tch == 0)
    17f4:	01 2b       	or	r16, r17
    17f6:	09 f4       	brne	.+2      	; 0x17fa <__vector_9+0x96>
    17f8:	76 c0       	rjmp	.+236    	; 0x18e6 <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    17fa:	a2 e7       	ldi	r26, 0x72	; 114
    17fc:	ba e2       	ldi	r27, 0x2A	; 42
    17fe:	88 77       	andi	r24, 0x78	; 120
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	95 95       	asr	r25
    1804:	87 95       	ror	r24
    1806:	95 95       	asr	r25
    1808:	87 95       	ror	r24
    180a:	95 95       	asr	r25
    180c:	87 95       	ror	r24
    180e:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    1810:	8e 85       	ldd	r24, Y+14	; 0x0e
    1812:	e8 2f       	mov	r30, r24
    1814:	ef 77       	andi	r30, 0x7F	; 127
    1816:	17 96       	adiw	r26, 0x07	; 7
    1818:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    181a:	8e 2f       	mov	r24, r30
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	70 97       	sbiw	r30, 0x10	; 16
    1822:	e3 35       	cpi	r30, 0x53	; 83
    1824:	f1 05       	cpc	r31, r1
    1826:	d8 f5       	brcc	.+118    	; 0x189e <__vector_9+0x13a>
    1828:	ea 5a       	subi	r30, 0xAA	; 170
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    1830:	80 ea       	ldi	r24, 0xA0	; 160
    1832:	80 93 25 21 	sts	0x2125, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	35 c0       	rjmp	.+106    	; 0x18a4 <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    183a:	81 ea       	ldi	r24, 0xA1	; 161
    183c:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	30 c0       	rjmp	.+96     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    1844:	82 ea       	ldi	r24, 0xA2	; 162
    1846:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	2b c0       	rjmp	.+86     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    184e:	83 ea       	ldi	r24, 0xA3	; 163
    1850:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	26 c0       	rjmp	.+76     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    1858:	83 ea       	ldi	r24, 0xA3	; 163
    185a:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	21 c0       	rjmp	.+66     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    1862:	84 ea       	ldi	r24, 0xA4	; 164
    1864:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	1c c0       	rjmp	.+56     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    186c:	84 ea       	ldi	r24, 0xA4	; 164
    186e:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    1872:	85 e0       	ldi	r24, 0x05	; 5
    1874:	17 c0       	rjmp	.+46     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    1876:	85 ea       	ldi	r24, 0xA5	; 165
    1878:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    187c:	86 e0       	ldi	r24, 0x06	; 6
    187e:	12 c0       	rjmp	.+36     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    1880:	85 ea       	ldi	r24, 0xA5	; 165
    1882:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    188a:	86 ea       	ldi	r24, 0xA6	; 166
    188c:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    1890:	87 e0       	ldi	r24, 0x07	; 7
    1892:	08 c0       	rjmp	.+16     	; 0x18a4 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    1894:	86 ea       	ldi	r24, 0xA6	; 166
    1896:	80 93 25 21 	sts	0x2125, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    189e:	10 92 25 21 	sts	0x2125, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    18a2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    18a4:	80 93 2f 21 	sts	0x212F, r24
    18a8:	1e c0       	rjmp	.+60     	; 0x18e6 <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    18aa:	be 01       	movw	r22, r28
    18ac:	6f 5f       	subi	r22, 0xFF	; 255
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8b e0       	ldi	r24, 0x0B	; 11
    18b2:	fb 01       	movw	r30, r22
    18b4:	11 92       	st	Z+, r1
    18b6:	8a 95       	dec	r24
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <__vector_9+0x150>
    18ba:	85 e2       	ldi	r24, 0x25	; 37
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	06 e2       	ldi	r16, 0x26	; 38
    18c0:	11 e2       	ldi	r17, 0x21	; 33
    18c2:	0f 83       	std	Y+7, r16	; 0x07
    18c4:	18 87       	std	Y+8, r17	; 0x08
    18c6:	89 e0       	ldi	r24, 0x09	; 9
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	89 87       	std	Y+9, r24	; 0x09
    18cc:	9a 87       	std	Y+10, r25	; 0x0a
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	80 e8       	ldi	r24, 0x80	; 128
    18d2:	94 e0       	ldi	r25, 0x04	; 4
    18d4:	0e 94 15 1c 	call	0x382a	; 0x382a <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    18d8:	10 92 30 21 	sts	0x2130, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    18dc:	d8 01       	movw	r26, r16
    18de:	13 96       	adiw	r26, 0x03	; 3
    18e0:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    18e2:	80 93 d4 20 	sts	0x20D4, r24
			break;
		default:
			return;
	}
    18e6:	61 96       	adiw	r28, 0x11	; 17
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <timer4_overflow_interrupt_callback>:
 * \note  OVFIF is cleared
 */
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
    1916:	e0 e0       	ldi	r30, 0x00	; 0
    1918:	f8 e0       	ldi	r31, 0x08	; 8
    191a:	84 85       	ldd	r24, Z+12	; 0x0c
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	84 87       	std	Z+12, r24	; 0x0c

static inline void timer4_overflow_interrupt_callback(void)
{
	tc45_clear_overflow(&TCC4);

	flag_timer4 = true;
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	80 93 7b 2a 	sts	0x2A7B, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1926:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1928:	f8 94       	cli
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    192a:	e0 e0       	ldi	r30, 0x00	; 0
    192c:	f2 e0       	ldi	r31, 0x02	; 2
    192e:	80 81       	ld	r24, Z
    1930:	84 60       	ori	r24, 0x04	; 4
    1932:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1934:	9f bf       	out	0x3f, r25	; 63
    1936:	08 95       	ret

00001938 <timerD5_overflow_interrupt_callback>:
	//usart_putchar(&USARTD0, 0x28);
}

static inline timerD5_overflow_interrupt_callback(void)
{
	flag_timerd5 = true;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	80 93 7c 2a 	sts	0x2A7C, r24
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTFLAGS |= TC5_OVFIF_bm;
    193e:	e0 e4       	ldi	r30, 0x40	; 64
    1940:	f9 e0       	ldi	r31, 0x09	; 9
    1942:	84 85       	ldd	r24, Z+12	; 0x0c
    1944:	81 60       	ori	r24, 0x01	; 1
    1946:	84 87       	std	Z+12, r24	; 0x0c
	//wdt_reset(); // kick the watchdog - DEPRECATED
	
	tc45_clear_overflow(&TCD5);
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}
    1948:	08 95       	ret

0000194a <timer5_overflow_interrupt_callback>:
	adc_start_conversion(&ADCA, ADC_CH0);
}

static inline void timer5_overflow_interrupt_callback(void)
{
	flag_timer5 = true;/*
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	80 93 7a 2a 	sts	0x2A7A, r24
    1950:	e0 e4       	ldi	r30, 0x40	; 64
    1952:	f8 e0       	ldi	r31, 0x08	; 8
    1954:	84 85       	ldd	r24, Z+12	; 0x0c
    1956:	81 60       	ori	r24, 0x01	; 1
    1958:	84 87       	std	Z+12, r24	; 0x0c
	if (flag_initcharge) {
		flag_initcharge = false;
		init_charge();
	}*/
	tc45_clear_overflow(&TCC5);
	update_led_charge();
    195a:	a3 c3       	rjmp	.+1862   	; 0x20a2 <update_led_charge>
    195c:	08 95       	ret

0000195e <init_timer4>:
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}

void init_timer4(void)
{
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
	/*
	 * Configure TCC4 to generate 50ms overflow interrupt
	 * using 4MHz (0.25us) resolution clock (20us = 80 * 0.25us)
	 */
	/* Unmask clock for TCC4 */
	tc45_enable(&TCC4);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	98 e0       	ldi	r25, 0x08	; 8
    1966:	0e 94 b8 1a 	call	0x3570	; 0x3570 <tc45_enable>
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    196a:	c0 e0       	ldi	r28, 0x00	; 0
    196c:	d8 e0       	ldi	r29, 0x08	; 8
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	8c 7f       	andi	r24, 0xFC	; 252
    1972:	8e 83       	std	Y+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    1974:	8e 81       	ldd	r24, Y+6	; 0x06
    1976:	81 60       	ori	r24, 0x01	; 1
    1978:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	88 7f       	andi	r24, 0xF8	; 248
    197e:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC4,	timer4_overflow_interrupt_callback);
    1980:	6b e8       	ldi	r22, 0x8B	; 139
    1982:	7c e0       	ldi	r23, 0x0C	; 12
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	98 e0       	ldi	r25, 0x08	; 8
    1988:	0e 94 1c 1b 	call	0x3638	; 0x3638 <tc45_set_overflow_interrupt_callback>
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    198c:	80 e5       	ldi	r24, 0x50	; 80
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	8e a3       	std	Y+38, r24	; 0x26
    1992:	9f a3       	std	Y+39, r25	; 0x27
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    1994:	88 81       	ld	r24, Y
    1996:	80 7f       	andi	r24, 0xF0	; 240
    1998:	84 60       	ori	r24, 0x04	; 4
    199a:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    199c:	e0 ea       	ldi	r30, 0xA0	; 160
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	81 60       	ori	r24, 0x01	; 1
    19a4:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCC4, 80);
	tc45_set_resolution(&TCC4, 4000000);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    19a6:	78 94       	sei
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <init_timer5>:

void init_timer5(void)
{
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    19b2:	c0 e4       	ldi	r28, 0x40	; 64
    19b4:	d8 e0       	ldi	r29, 0x08	; 8
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	8c 7f       	andi	r24, 0xFC	; 252
    19ba:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    19bc:	8e 81       	ldd	r24, Y+6	; 0x06
    19be:	82 60       	ori	r24, 0x02	; 2
    19c0:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	88 7f       	andi	r24, 0xF8	; 248
    19c6:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC5, TC45_INT_LVL_MED);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC5,	timer5_overflow_interrupt_callback);
    19c8:	65 ea       	ldi	r22, 0xA5	; 165
    19ca:	7c e0       	ldi	r23, 0x0C	; 12
    19cc:	80 e4       	ldi	r24, 0x40	; 64
    19ce:	98 e0       	ldi	r25, 0x08	; 8
    19d0:	0e 94 1c 1b 	call	0x3638	; 0x3638 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    19d4:	84 e2       	ldi	r24, 0x24	; 36
    19d6:	94 ef       	ldi	r25, 0xF4	; 244
    19d8:	8e a3       	std	Y+38, r24	; 0x26
    19da:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    19dc:	88 81       	ld	r24, Y
    19de:	80 7f       	andi	r24, 0xF0	; 240
    19e0:	86 60       	ori	r24, 0x06	; 6
    19e2:	88 83       	st	Y, r24
    19e4:	e0 ea       	ldi	r30, 0xA0	; 160
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	82 81       	ldd	r24, Z+2	; 0x02
    19ea:	82 60       	ori	r24, 0x02	; 2
    19ec:	82 83       	std	Z+2, r24	; 0x02
//	tc45_set_resolution(&TCC5, 500000);
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
    19ee:	78 94       	sei
}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <init_timerd5>:

void init_timerd5(void)
{
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
	tc45_enable(&TCD5);
    19fa:	80 e4       	ldi	r24, 0x40	; 64
    19fc:	99 e0       	ldi	r25, 0x09	; 9
    19fe:	0e 94 b8 1a 	call	0x3570	; 0x3570 <tc45_enable>
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    1a02:	c0 e4       	ldi	r28, 0x40	; 64
    1a04:	d9 e0       	ldi	r29, 0x09	; 9
    1a06:	8e 81       	ldd	r24, Y+6	; 0x06
    1a08:	8c 7f       	andi	r24, 0xFC	; 252
    1a0a:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    1a0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0e:	81 60       	ori	r24, 0x01	; 1
    1a10:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	88 7f       	andi	r24, 0xF8	; 248
    1a16:	89 83       	std	Y+1, r24	; 0x01
	tc45_set_overflow_interrupt_level(&TCD5, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCD5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCD5,	timerD5_overflow_interrupt_callback);
    1a18:	6c e9       	ldi	r22, 0x9C	; 156
    1a1a:	7c e0       	ldi	r23, 0x0C	; 12
    1a1c:	80 e4       	ldi	r24, 0x40	; 64
    1a1e:	99 e0       	ldi	r25, 0x09	; 9
    1a20:	0e 94 1c 1b 	call	0x3638	; 0x3638 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    1a24:	82 ea       	ldi	r24, 0xA2	; 162
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	8e a3       	std	Y+38, r24	; 0x26
    1a2a:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    1a2c:	88 81       	ld	r24, Y
    1a2e:	80 7f       	andi	r24, 0xF0	; 240
    1a30:	87 60       	ori	r24, 0x07	; 7
    1a32:	88 83       	st	Y, r24
    1a34:	e0 ea       	ldi	r30, 0xA0	; 160
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	81 60       	ori	r24, 0x01	; 1
    1a3c:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCD5, 162);//EVERY 5ms
	tc45_set_resolution(&TCD5, 31250);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    1a3e:	78 94       	sei
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <init_uart>:
	}
}

uint8_t* get_current_colors(void) {
	return colors;
}
    1a46:	43 e0       	ldi	r20, 0x03	; 3
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	68 e0       	ldi	r22, 0x08	; 8
    1a4c:	80 e6       	ldi	r24, 0x60	; 96
    1a4e:	96 e0       	ldi	r25, 0x06	; 6
    1a50:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1a54:	40 e0       	ldi	r20, 0x00	; 0
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	64 e0       	ldi	r22, 0x04	; 4
    1a5a:	80 e6       	ldi	r24, 0x60	; 96
    1a5c:	96 e0       	ldi	r25, 0x06	; 6
    1a5e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <ioport_configure_port_pin>
    1a62:	65 ed       	ldi	r22, 0xD5	; 213
    1a64:	70 e2       	ldi	r23, 0x20	; 32
    1a66:	80 ec       	ldi	r24, 0xC0	; 192
    1a68:	99 e0       	ldi	r25, 0x09	; 9
    1a6a:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <usart_init_rs232>
    1a6e:	e0 ec       	ldi	r30, 0xC0	; 192
    1a70:	f9 e0       	ldi	r31, 0x09	; 9
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	80 63       	ori	r24, 0x30	; 48
    1a76:	82 83       	std	Z+2, r24	; 0x02
    1a78:	e0 ea       	ldi	r30, 0xA0	; 160
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	82 83       	std	Z+2, r24	; 0x02
    1a82:	78 94       	sei
    1a84:	08 95       	ret

00001a86 <uart_send_status>:
    1a86:	68 2f       	mov	r22, r24
    1a88:	80 ec       	ldi	r24, 0xC0	; 192
    1a8a:	98 e0       	ldi	r25, 0x08	; 8
    1a8c:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <usart_putchar>
    1a90:	08 95       	ret

00001a92 <led_set_from_colors>:
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	ac ed       	ldi	r26, 0xDC	; 220
    1a98:	b0 e2       	ldi	r27, 0x20	; 32
    1a9a:	8c 91       	ld	r24, X
    1a9c:	e5 e9       	ldi	r30, 0x95	; 149
    1a9e:	fa e2       	ldi	r31, 0x2A	; 42
    1aa0:	80 83       	st	Z, r24
    1aa2:	11 96       	adiw	r26, 0x01	; 1
    1aa4:	8c 91       	ld	r24, X
    1aa6:	11 97       	sbiw	r26, 0x01	; 1
    1aa8:	81 83       	std	Z+1, r24	; 0x01
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	8c 91       	ld	r24, X
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	82 83       	std	Z+2, r24	; 0x02
    1ab2:	8c 91       	ld	r24, X
    1ab4:	81 87       	std	Z+9, r24	; 0x09
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	8c 91       	ld	r24, X
    1aba:	11 97       	sbiw	r26, 0x01	; 1
    1abc:	82 87       	std	Z+10, r24	; 0x0a
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	8c 91       	ld	r24, X
    1ac2:	12 97       	sbiw	r26, 0x02	; 2
    1ac4:	83 87       	std	Z+11, r24	; 0x0b
    1ac6:	13 96       	adiw	r26, 0x03	; 3
    1ac8:	8c 91       	ld	r24, X
    1aca:	13 97       	sbiw	r26, 0x03	; 3
    1acc:	83 83       	std	Z+3, r24	; 0x03
    1ace:	14 96       	adiw	r26, 0x04	; 4
    1ad0:	8c 91       	ld	r24, X
    1ad2:	14 97       	sbiw	r26, 0x04	; 4
    1ad4:	84 83       	std	Z+4, r24	; 0x04
    1ad6:	15 96       	adiw	r26, 0x05	; 5
    1ad8:	8c 91       	ld	r24, X
    1ada:	15 97       	sbiw	r26, 0x05	; 5
    1adc:	85 83       	std	Z+5, r24	; 0x05
    1ade:	13 96       	adiw	r26, 0x03	; 3
    1ae0:	8c 91       	ld	r24, X
    1ae2:	13 97       	sbiw	r26, 0x03	; 3
    1ae4:	84 87       	std	Z+12, r24	; 0x0c
    1ae6:	14 96       	adiw	r26, 0x04	; 4
    1ae8:	8c 91       	ld	r24, X
    1aea:	14 97       	sbiw	r26, 0x04	; 4
    1aec:	85 87       	std	Z+13, r24	; 0x0d
    1aee:	15 96       	adiw	r26, 0x05	; 5
    1af0:	8c 91       	ld	r24, X
    1af2:	15 97       	sbiw	r26, 0x05	; 5
    1af4:	86 87       	std	Z+14, r24	; 0x0e
    1af6:	16 96       	adiw	r26, 0x06	; 6
    1af8:	8c 91       	ld	r24, X
    1afa:	16 97       	sbiw	r26, 0x06	; 6
    1afc:	86 83       	std	Z+6, r24	; 0x06
    1afe:	17 96       	adiw	r26, 0x07	; 7
    1b00:	8c 91       	ld	r24, X
    1b02:	17 97       	sbiw	r26, 0x07	; 7
    1b04:	87 83       	std	Z+7, r24	; 0x07
    1b06:	18 96       	adiw	r26, 0x08	; 8
    1b08:	8c 91       	ld	r24, X
    1b0a:	18 97       	sbiw	r26, 0x08	; 8
    1b0c:	80 87       	std	Z+8, r24	; 0x08
    1b0e:	16 96       	adiw	r26, 0x06	; 6
    1b10:	8c 91       	ld	r24, X
    1b12:	16 97       	sbiw	r26, 0x06	; 6
    1b14:	87 87       	std	Z+15, r24	; 0x0f
    1b16:	17 96       	adiw	r26, 0x07	; 7
    1b18:	8c 91       	ld	r24, X
    1b1a:	17 97       	sbiw	r26, 0x07	; 7
    1b1c:	80 8b       	std	Z+16, r24	; 0x10
    1b1e:	18 96       	adiw	r26, 0x08	; 8
    1b20:	8c 91       	ld	r24, X
    1b22:	81 8b       	std	Z+17, r24	; 0x11
    1b24:	c0 e0       	ldi	r28, 0x00	; 0
    1b26:	d0 e0       	ldi	r29, 0x00	; 0
    1b28:	fe 01       	movw	r30, r28
    1b2a:	e4 52       	subi	r30, 0x24	; 36
    1b2c:	ff 4d       	sbci	r31, 0xDF	; 223
    1b2e:	60 81       	ld	r22, Z
    1b30:	21 96       	adiw	r28, 0x01	; 1
    1b32:	ce 01       	movw	r24, r28
    1b34:	0e 94 4b 18 	call	0x3096	; 0x3096 <nvm_eeprom_write_byte>
    1b38:	c9 30       	cpi	r28, 0x09	; 9
    1b3a:	d1 05       	cpc	r29, r1
    1b3c:	a9 f7       	brne	.-22     	; 0x1b28 <led_set_from_colors+0x96>
    1b3e:	36 d2       	rcall	.+1132   	; 0x1fac <ischarging>
    1b40:	81 11       	cpse	r24, r1
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <led_set_from_colors+0xba>
    1b44:	66 e0       	ldi	r22, 0x06	; 6
    1b46:	85 e9       	ldi	r24, 0x95	; 149
    1b48:	9a e2       	ldi	r25, 0x2A	; 42
    1b4a:	dc d6       	rcall	.+3512   	; 0x2904 <set_flash_ws2812>
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <get_pulse_state>:

bool get_pulse_state(void) {
	return pulse_state;
}
    1b52:	80 91 33 21 	lds	r24, 0x2133
    1b56:	08 95       	ret

00001b58 <get_and_clear_pulse_state_changed>:

bool get_and_clear_pulse_state_changed(void) {
	bool changed = pulse_state_changed;
    1b58:	80 91 32 21 	lds	r24, 0x2132
	pulse_state_changed = false;
    1b5c:	10 92 32 21 	sts	0x2132, r1
	return changed;
}
    1b60:	08 95       	ret

00001b62 <trigger_pulse_state_changed>:

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 32 21 	sts	0x2132, r24
    1b68:	08 95       	ret

00001b6a <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	4f 93       	push	r20
    1b7a:	5f 93       	push	r21
    1b7c:	6f 93       	push	r22
    1b7e:	7f 93       	push	r23
    1b80:	8f 93       	push	r24
    1b82:	9f 93       	push	r25
    1b84:	af 93       	push	r26
    1b86:	bf 93       	push	r27
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    1b8c:	80 ec       	ldi	r24, 0xC0	; 192
    1b8e:	98 e0       	ldi	r25, 0x08	; 8
    1b90:	0e 94 76 1c 	call	0x38ec	; 0x38ec <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    1b94:	90 91 36 21 	lds	r25, 0x2136
    1b98:	91 11       	cpse	r25, r1
    1b9a:	0e c0       	rjmp	.+28     	; 0x1bb8 <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    1b9c:	8f 30       	cpi	r24, 0x0F	; 15
    1b9e:	49 f4       	brne	.+18     	; 0x1bb2 <__vector_23+0x48>
		{
			num_rx ++;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	80 93 36 21 	sts	0x2136, r24
			uart_length = 6;
    1ba6:	96 e0       	ldi	r25, 0x06	; 6
    1ba8:	90 93 f2 20 	sts	0x20F2, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    1bac:	80 93 35 21 	sts	0x2135, r24
    1bb0:	38 c0       	rjmp	.+112    	; 0x1c22 <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1bb2:	10 92 36 21 	sts	0x2136, r1
    1bb6:	35 c0       	rjmp	.+106    	; 0x1c22 <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    1bb8:	29 2f       	mov	r18, r25
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	60 91 f2 20 	lds	r22, 0x20F2
    1bc0:	46 2f       	mov	r20, r22
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	4f 5f       	subi	r20, 0xFF	; 255
    1bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc8:	24 17       	cp	r18, r20
    1bca:	35 07       	cpc	r19, r21
    1bcc:	f1 f4       	brne	.+60     	; 0x1c0a <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1bce:	10 92 36 21 	sts	0x2136, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1bd2:	80 3f       	cpi	r24, 0xF0	; 240
    1bd4:	a9 f4       	brne	.+42     	; 0x1c00 <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1bd6:	20 91 7d 2a 	lds	r18, 0x2A7D
    1bda:	22 23       	and	r18, r18
    1bdc:	61 f0       	breq	.+24     	; 0x1bf6 <__vector_23+0x8c>
    1bde:	4d e7       	ldi	r20, 0x7D	; 125
    1be0:	5a e2       	ldi	r21, 0x2A	; 42
    1be2:	fa 01       	movw	r30, r20
    1be4:	80 e0       	ldi	r24, 0x00	; 0
	{
		sum += rxvalue[i];
    1be6:	91 91       	ld	r25, Z+
    1be8:	89 0f       	add	r24, r25
    1bea:	9e 2f       	mov	r25, r30
    1bec:	94 1b       	sub	r25, r20

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1bee:	92 17       	cp	r25, r18
    1bf0:	d0 f3       	brcs	.-12     	; 0x1be6 <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	05 c0       	rjmp	.+10     	; 0x1c00 <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1bf6:	10 92 35 21 	sts	0x2135, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    1bfa:	8f ef       	ldi	r24, 0xFF	; 255
    1bfc:	44 df       	rcall	.-376    	; 0x1a86 <uart_send_status>
    1bfe:	11 c0       	rjmp	.+34     	; 0x1c22 <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1c00:	10 92 35 21 	sts	0x2135, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    1c04:	8c e0       	ldi	r24, 0x0C	; 12
    1c06:	3f df       	rcall	.-386    	; 0x1a86 <uart_send_status>
    1c08:	0c c0       	rjmp	.+24     	; 0x1c22 <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	e4 58       	subi	r30, 0x84	; 132
    1c0e:	f5 4d       	sbci	r31, 0xD5	; 213
    1c10:	80 83       	st	Z, r24
		num_rx ++;
    1c12:	9f 5f       	subi	r25, 0xFF	; 255
    1c14:	90 93 36 21 	sts	0x2136, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    1c18:	80 91 7d 2a 	lds	r24, 0x2A7D
    1c1c:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    1c1e:	80 93 f2 20 	sts	0x20F2, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    1c22:	ff 91       	pop	r31
    1c24:	ef 91       	pop	r30
    1c26:	bf 91       	pop	r27
    1c28:	af 91       	pop	r26
    1c2a:	9f 91       	pop	r25
    1c2c:	8f 91       	pop	r24
    1c2e:	7f 91       	pop	r23
    1c30:	6f 91       	pop	r22
    1c32:	5f 91       	pop	r21
    1c34:	4f 91       	pop	r20
    1c36:	3f 91       	pop	r19
    1c38:	2f 91       	pop	r18
    1c3a:	0f 90       	pop	r0
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	0f 90       	pop	r0
    1c40:	1f 90       	pop	r1
    1c42:	18 95       	reti

00001c44 <uartCmdValid>:


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    switch(cmd){
    1c44:	89 34       	cpi	r24, 0x49	; 73
    1c46:	50 f4       	brcc	.+20     	; 0x1c5c <uartCmdValid+0x18>
    1c48:	87 34       	cpi	r24, 0x47	; 71
    1c4a:	a0 f4       	brcc	.+40     	; 0x1c74 <uartCmdValid+0x30>
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	a0 f0       	brcs	.+40     	; 0x1c78 <uartCmdValid+0x34>
    1c50:	87 30       	cpi	r24, 0x07	; 7
    1c52:	80 f0       	brcs	.+32     	; 0x1c74 <uartCmdValid+0x30>
    1c54:	82 54       	subi	r24, 0x42	; 66
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	78 f4       	brcc	.+30     	; 0x1c78 <uartCmdValid+0x34>
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <uartCmdValid+0x30>
    1c5c:	84 35       	cpi	r24, 0x54	; 84
    1c5e:	51 f0       	breq	.+20     	; 0x1c74 <uartCmdValid+0x30>
    1c60:	28 f4       	brcc	.+10     	; 0x1c6c <uartCmdValid+0x28>
    1c62:	8d 34       	cpi	r24, 0x4D	; 77
    1c64:	39 f0       	breq	.+14     	; 0x1c74 <uartCmdValid+0x30>
    1c66:	80 35       	cpi	r24, 0x50	; 80
    1c68:	39 f4       	brne	.+14     	; 0x1c78 <uartCmdValid+0x34>
    1c6a:	04 c0       	rjmp	.+8      	; 0x1c74 <uartCmdValid+0x30>
    1c6c:	83 36       	cpi	r24, 0x63	; 99
    1c6e:	11 f0       	breq	.+4      	; 0x1c74 <uartCmdValid+0x30>
    1c70:	80 37       	cpi	r24, 0x70	; 112
    1c72:	11 f4       	brne	.+4      	; 0x1c78 <uartCmdValid+0x34>
		case UART_GET_PULSE:
		case UART_GET_COLOR:
		case UART_GET_CHARGING:
		case UART_SET_MTCH:
		case UART_GET_MTCH:
			retval=true;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	08 95       	ret
}


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    1c78:	80 e0       	ldi	r24, 0x00	; 0
		default:
			break;
	}
	return retval;

}
    1c7a:	08 95       	ret

00001c7c <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    1c7c:	1f 92       	push	r1
    1c7e:	0f 92       	push	r0
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	0f 92       	push	r0
    1c84:	11 24       	eor	r1, r1
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ef 93       	push	r30
    1ca0:	ff 93       	push	r31
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	50 e0       	ldi	r21, 0x00	; 0
/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	 unsigned int count=0;
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    1caa:	e0 ec       	ldi	r30, 0xC0	; 192
    1cac:	f9 e0       	ldi	r31, 0x09	; 9
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <__vector_40+0x42>

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
#ifdef LIMIT_LOOP //do not wait for ever.
               if(count++>10000)
    1cb0:	9c 01       	movw	r18, r24
    1cb2:	2f 5f       	subi	r18, 0xFF	; 255
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	81 31       	cpi	r24, 0x11	; 17
    1cb8:	97 42       	sbci	r25, 0x27	; 39
    1cba:	78 f4       	brcc	.+30     	; 0x1cda <__vector_40+0x5e>
    1cbc:	c9 01       	movw	r24, r18
    1cbe:	21 81       	ldd	r18, Z+1	; 0x01
	}*/
	

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
    1cc0:	22 23       	and	r18, r18
    1cc2:	b4 f7       	brge	.-20     	; 0x1cb0 <__vector_40+0x34>
#endif		
	      }
		//do not read when error
		if(errflag)
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
    1cc4:	20 81       	ld	r18, Z
    1cc6:	da 01       	movw	r26, r20
    1cc8:	ab 51       	subi	r26, 0x1B	; 27
    1cca:	bf 4d       	sbci	r27, 0xDF	; 223
    1ccc:	2c 93       	st	X, r18
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	4b 30       	cpi	r20, 0x0B	; 11
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	99 f7       	brne	.-26     	; 0x1cbe <__vector_40+0x42>
    1cd8:	23 c1       	rjmp	.+582    	; 0x1f20 <__vector_40+0x2a4>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    1cda:	80 91 e5 20 	lds	r24, 0x20E5
    1cde:	b2 df       	rcall	.-156    	; 0x1c44 <uartCmdValid>
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <__vector_40+0x6a>
    1ce4:	19 c1       	rjmp	.+562    	; 0x1f18 <__vector_40+0x29c>
    1ce6:	80 91 e6 20 	lds	r24, 0x20E6
    1cea:	89 30       	cpi	r24, 0x09	; 9
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <__vector_40+0x74>
    1cee:	14 c1       	rjmp	.+552    	; 0x1f18 <__vector_40+0x29c>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    1cf0:	e0 91 e5 20 	lds	r30, 0x20E5
    1cf4:	8e 2f       	mov	r24, r30
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	31 97       	sbiw	r30, 0x01	; 1
    1cfc:	e0 37       	cpi	r30, 0x70	; 112
    1cfe:	f1 05       	cpc	r31, r1
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <__vector_40+0x88>
    1d02:	0a c1       	rjmp	.+532    	; 0x1f18 <__vector_40+0x29c>
    1d04:	e7 55       	subi	r30, 0x57	; 87
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__tablejump2__>
		case UART_SET_COLOR:
	#ifdef LIMIT_LOOP //only handle correct format	
			if(buffer_data[1]!=UART_COLOR_LEN)
    1d0c:	80 91 e6 20 	lds	r24, 0x20E6
    1d10:	89 30       	cpi	r24, 0x09	; 9
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <__vector_40+0x9a>
    1d14:	01 c1       	rjmp	.+514    	; 0x1f18 <__vector_40+0x29c>
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
    1d16:	6f ef       	ldi	r22, 0xFF	; 255
    1d18:	83 e4       	ldi	r24, 0x43	; 67
    1d1a:	e5 d3       	rcall	.+1994   	; 0x24e6 <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    1d1c:	a5 ee       	ldi	r26, 0xE5	; 229
    1d1e:	b0 e2       	ldi	r27, 0x20	; 32
    1d20:	12 96       	adiw	r26, 0x02	; 2
    1d22:	8c 91       	ld	r24, X
    1d24:	12 97       	sbiw	r26, 0x02	; 2
    1d26:	e5 e9       	ldi	r30, 0x95	; 149
    1d28:	fa e2       	ldi	r31, 0x2A	; 42
    1d2a:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    1d2c:	13 96       	adiw	r26, 0x03	; 3
    1d2e:	8c 91       	ld	r24, X
    1d30:	13 97       	sbiw	r26, 0x03	; 3
    1d32:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    1d34:	14 96       	adiw	r26, 0x04	; 4
    1d36:	8c 91       	ld	r24, X
    1d38:	14 97       	sbiw	r26, 0x04	; 4
    1d3a:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    1d3c:	12 96       	adiw	r26, 0x02	; 2
    1d3e:	8c 91       	ld	r24, X
    1d40:	12 97       	sbiw	r26, 0x02	; 2
    1d42:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    1d44:	13 96       	adiw	r26, 0x03	; 3
    1d46:	8c 91       	ld	r24, X
    1d48:	13 97       	sbiw	r26, 0x03	; 3
    1d4a:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    1d4c:	14 96       	adiw	r26, 0x04	; 4
    1d4e:	8c 91       	ld	r24, X
    1d50:	14 97       	sbiw	r26, 0x04	; 4
    1d52:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    1d54:	15 96       	adiw	r26, 0x05	; 5
    1d56:	8c 91       	ld	r24, X
    1d58:	15 97       	sbiw	r26, 0x05	; 5
    1d5a:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    1d5c:	16 96       	adiw	r26, 0x06	; 6
    1d5e:	8c 91       	ld	r24, X
    1d60:	16 97       	sbiw	r26, 0x06	; 6
    1d62:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    1d64:	17 96       	adiw	r26, 0x07	; 7
    1d66:	8c 91       	ld	r24, X
    1d68:	17 97       	sbiw	r26, 0x07	; 7
    1d6a:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    1d6c:	15 96       	adiw	r26, 0x05	; 5
    1d6e:	8c 91       	ld	r24, X
    1d70:	15 97       	sbiw	r26, 0x05	; 5
    1d72:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    1d74:	16 96       	adiw	r26, 0x06	; 6
    1d76:	8c 91       	ld	r24, X
    1d78:	16 97       	sbiw	r26, 0x06	; 6
    1d7a:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    1d7c:	17 96       	adiw	r26, 0x07	; 7
    1d7e:	8c 91       	ld	r24, X
    1d80:	17 97       	sbiw	r26, 0x07	; 7
    1d82:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    1d84:	18 96       	adiw	r26, 0x08	; 8
    1d86:	8c 91       	ld	r24, X
    1d88:	18 97       	sbiw	r26, 0x08	; 8
    1d8a:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    1d8c:	19 96       	adiw	r26, 0x09	; 9
    1d8e:	8c 91       	ld	r24, X
    1d90:	19 97       	sbiw	r26, 0x09	; 9
    1d92:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    1d94:	1a 96       	adiw	r26, 0x0a	; 10
    1d96:	8c 91       	ld	r24, X
    1d98:	1a 97       	sbiw	r26, 0x0a	; 10
    1d9a:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    1d9c:	18 96       	adiw	r26, 0x08	; 8
    1d9e:	8c 91       	ld	r24, X
    1da0:	18 97       	sbiw	r26, 0x08	; 8
    1da2:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    1da4:	19 96       	adiw	r26, 0x09	; 9
    1da6:	8c 91       	ld	r24, X
    1da8:	19 97       	sbiw	r26, 0x09	; 9
    1daa:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    1dac:	1a 96       	adiw	r26, 0x0a	; 10
    1dae:	8c 91       	ld	r24, X
    1db0:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    1db2:	c0 e0       	ldi	r28, 0x00	; 0
    1db4:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    1db6:	fe 01       	movw	r30, r28
    1db8:	e9 51       	subi	r30, 0x19	; 25
    1dba:	ff 4d       	sbci	r31, 0xDF	; 223
    1dbc:	80 81       	ld	r24, Z
    1dbe:	fe 01       	movw	r30, r28
    1dc0:	e4 52       	subi	r30, 0x24	; 36
    1dc2:	ff 4d       	sbci	r31, 0xDF	; 223
    1dc4:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    1dc6:	60 81       	ld	r22, Z
    1dc8:	21 96       	adiw	r28, 0x01	; 1
    1dca:	ce 01       	movw	r24, r28
    1dcc:	0e 94 4b 18 	call	0x3096	; 0x3096 <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    1dd0:	c9 30       	cpi	r28, 0x09	; 9
    1dd2:	d1 05       	cpc	r29, r1
    1dd4:	81 f7       	brne	.-32     	; 0x1db6 <__vector_40+0x13a>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    1dd6:	ea d0       	rcall	.+468    	; 0x1fac <ischarging>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	9e c0       	rjmp	.+316    	; 0x1f18 <__vector_40+0x29c>
		set_flash_ws2812(m_led_struct, 6);
    1ddc:	66 e0       	ldi	r22, 0x06	; 6
    1dde:	85 e9       	ldi	r24, 0x95	; 149
    1de0:	9a e2       	ldi	r25, 0x2A	; 42
    1de2:	90 d5       	rcall	.+2848   	; 0x2904 <set_flash_ws2812>
    1de4:	99 c0       	rjmp	.+306    	; 0x1f18 <__vector_40+0x29c>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    1de6:	6f ef       	ldi	r22, 0xFF	; 255
    1de8:	80 e5       	ldi	r24, 0x50	; 80
    1dea:	7d d3       	rcall	.+1786   	; 0x24e6 <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    1dec:	80 91 e7 20 	lds	r24, 0x20E7
    1df0:	88 23       	and	r24, r24
    1df2:	19 f0       	breq	.+6      	; 0x1dfa <__vector_40+0x17e>
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	39 f0       	breq	.+14     	; 0x1e06 <__vector_40+0x18a>
    1df8:	0c c0       	rjmp	.+24     	; 0x1e12 <__vector_40+0x196>
		case 0x00:
			pulse_state = false;
    1dfa:	10 92 33 21 	sts	0x2133, r1
			pulse_state_changed = true;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 32 21 	sts	0x2132, r24
    1e04:	89 c0       	rjmp	.+274    	; 0x1f18 <__vector_40+0x29c>
			break;
		case 0x01:
			pulse_state = true;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	80 93 33 21 	sts	0x2133, r24
			pulse_state_changed = true;
    1e0c:	80 93 32 21 	sts	0x2132, r24
    1e10:	83 c0       	rjmp	.+262    	; 0x1f18 <__vector_40+0x29c>
			break;
		default:
			pulse_state = true;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 93 33 21 	sts	0x2133, r24
			pulse_state_changed = true;
    1e18:	80 93 32 21 	sts	0x2132, r24
    1e1c:	7d c0       	rjmp	.+250    	; 0x1f18 <__vector_40+0x29c>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    1e1e:	80 91 33 21 	lds	r24, 0x2133
    1e22:	88 23       	and	r24, r24
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <__vector_40+0x1b4>
				pulse_state = false;
    1e26:	10 92 33 21 	sts	0x2133, r1
				pulse_state_changed = true;	
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 32 21 	sts	0x2132, r24
			}
			shutdown_received = true;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	80 93 31 21 	sts	0x2131, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    1e36:	6f ef       	ldi	r22, 0xFF	; 255
    1e38:	56 d3       	rcall	.+1708   	; 0x24e6 <send_response>
    1e3a:	6e c0       	rjmp	.+220    	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    1e3c:	80 91 e7 20 	lds	r24, 0x20E7
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	87 30       	cpi	r24, 0x07	; 7
    1e44:	91 05       	cpc	r25, r1
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <__vector_40+0x1ce>
    1e48:	67 c0       	rjmp	.+206    	; 0x1f18 <__vector_40+0x29c>
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e7 5e       	subi	r30, 0xE7	; 231
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    1e54:	80 91 e8 20 	lds	r24, 0x20E8
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	80 93 42 21 	sts	0x2142, r24
    1e5e:	90 93 43 21 	sts	0x2143, r25
    1e62:	5a c0       	rjmp	.+180    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    1e64:	80 91 e8 20 	lds	r24, 0x20E8
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	80 93 fe 20 	sts	0x20FE, r24
    1e6e:	90 93 ff 20 	sts	0x20FF, r25
    1e72:	52 c0       	rjmp	.+164    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    1e74:	80 91 e8 20 	lds	r24, 0x20E8
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	80 93 fc 20 	sts	0x20FC, r24
    1e7e:	90 93 fd 20 	sts	0x20FD, r25
    1e82:	4a c0       	rjmp	.+148    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    1e84:	80 91 e8 20 	lds	r24, 0x20E8
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	80 93 fa 20 	sts	0x20FA, r24
    1e8e:	90 93 fb 20 	sts	0x20FB, r25
    1e92:	42 c0       	rjmp	.+132    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    1e94:	80 91 e8 20 	lds	r24, 0x20E8
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	80 93 f8 20 	sts	0x20F8, r24
    1e9e:	90 93 f9 20 	sts	0x20F9, r25
    1ea2:	3a c0       	rjmp	.+116    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    1ea4:	80 91 e8 20 	lds	r24, 0x20E8
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	80 93 f6 20 	sts	0x20F6, r24
    1eae:	90 93 f7 20 	sts	0x20F7, r25
    1eb2:	32 c0       	rjmp	.+100    	; 0x1f18 <__vector_40+0x29c>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    1eb4:	80 91 e8 20 	lds	r24, 0x20E8
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	80 93 f4 20 	sts	0x20F4, r24
    1ebe:	90 93 f5 20 	sts	0x20F5, r25
    1ec2:	2a c0       	rjmp	.+84     	; 0x1f18 <__vector_40+0x29c>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    1ec4:	80 91 e7 20 	lds	r24, 0x20E7
    1ec8:	80 93 f3 20 	sts	0x20F3, r24
    1ecc:	25 c0       	rjmp	.+74     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    1ece:	80 91 e7 20 	lds	r24, 0x20E7
    1ed2:	80 93 02 20 	sts	0x2002, r24
    1ed6:	20 c0       	rjmp	.+64     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    1ed8:	80 91 e7 20 	lds	r24, 0x20E7
    1edc:	80 93 01 20 	sts	0x2001, r24
    1ee0:	1b c0       	rjmp	.+54     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    1ee2:	80 91 e7 20 	lds	r24, 0x20E7
    1ee6:	80 93 00 20 	sts	0x2000, r24
    1eea:	16 c0       	rjmp	.+44     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    1eec:	0d d3       	rcall	.+1562   	; 0x2508 <send_light_data>
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    1ef0:	24 d3       	rcall	.+1608   	; 0x253a <send_battery_data>
    1ef2:	12 c0       	rjmp	.+36     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    1ef4:	9d d3       	rcall	.+1850   	; 0x2630 <send_pulse_data>
    1ef6:	10 c0       	rjmp	.+32     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    1ef8:	74 d3       	rcall	.+1768   	; 0x25e2 <send_color_data>
    1efa:	0e c0       	rjmp	.+28     	; 0x1f18 <__vector_40+0x29c>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    1efc:	38 d3       	rcall	.+1648   	; 0x256e <send_charging_data>
    1efe:	0c c0       	rjmp	.+24     	; 0x1f18 <__vector_40+0x29c>
		set_flash_ws2812(m_led_struct, 6);
	}
}

static inline void set_mtch_register_from_buffer(void) {
	cmd_write_register(buffer_data[2], buffer_data[3], buffer_data[4]);
    1f00:	e5 ee       	ldi	r30, 0xE5	; 229
    1f02:	f0 e2       	ldi	r31, 0x20	; 32
    1f04:	44 81       	ldd	r20, Z+4	; 0x04
    1f06:	63 81       	ldd	r22, Z+3	; 0x03
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	bd db       	rcall	.-2182   	; 0x1686 <cmd_write_register>
    1f0c:	05 c0       	rjmp	.+10     	; 0x1f18 <__vector_40+0x29c>
		case UART_SET_MTCH:
			set_mtch_register_from_buffer();
			break;
			
		case UART_GET_MTCH:
			send_mtch_data(buffer_data[2], buffer_data[3]);
    1f0e:	e5 ee       	ldi	r30, 0xE5	; 229
    1f10:	f0 e2       	ldi	r31, 0x20	; 32
    1f12:	63 81       	ldd	r22, Z+3	; 0x03
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	40 d3       	rcall	.+1664   	; 0x2598 <send_mtch_data>
	{
	interpret_message();
          errflag=0;
	}
	
	uart_done_flag = true;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 34 21 	sts	0x2134, r24
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <__vector_40+0x2b0>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    1f20:	80 91 e5 20 	lds	r24, 0x20E5
    1f24:	8f de       	rcall	.-738    	; 0x1c44 <uartCmdValid>
    1f26:	81 11       	cpse	r24, r1
    1f28:	e3 ce       	rjmp	.-570    	; 0x1cf0 <__vector_40+0x74>
    1f2a:	f6 cf       	rjmp	.-20     	; 0x1f18 <__vector_40+0x29c>
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	bf 91       	pop	r27
    1f36:	af 91       	pop	r26
    1f38:	9f 91       	pop	r25
    1f3a:	8f 91       	pop	r24
    1f3c:	7f 91       	pop	r23
    1f3e:	6f 91       	pop	r22
    1f40:	5f 91       	pop	r21
    1f42:	4f 91       	pop	r20
    1f44:	3f 91       	pop	r19
    1f46:	2f 91       	pop	r18
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	0f 90       	pop	r0
    1f4e:	1f 90       	pop	r1
    1f50:	18 95       	reti

00001f52 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    1f5a:	61 15       	cp	r22, r1
    1f5c:	71 05       	cpc	r23, r1
    1f5e:	61 f0       	breq	.+24     	; 0x1f78 <uart_send_bytes+0x26>
    1f60:	8c 01       	movw	r16, r24
    1f62:	ec 01       	movw	r28, r24
    1f64:	06 0f       	add	r16, r22
    1f66:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    1f68:	69 91       	ld	r22, Y+
    1f6a:	80 ec       	ldi	r24, 0xC0	; 192
    1f6c:	99 e0       	ldi	r25, 0x09	; 9
    1f6e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    1f72:	c0 17       	cp	r28, r16
    1f74:	d1 07       	cpc	r29, r17
    1f76:	c1 f7       	brne	.-16     	; 0x1f68 <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <init_chargingpin>:

	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];

	set_flash_ws2812(m_led_struct, 6);
    1f82:	98 2f       	mov	r25, r24
    1f84:	97 70       	andi	r25, 0x07	; 7
    1f86:	61 e0       	ldi	r22, 0x01	; 1
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <init_chargingpin+0xe>
    1f8c:	66 0f       	add	r22, r22
    1f8e:	77 1f       	adc	r23, r23
    1f90:	9a 95       	dec	r25
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <init_chargingpin+0xa>
    1f94:	86 95       	lsr	r24
    1f96:	86 95       	lsr	r24
    1f98:	86 95       	lsr	r24
    1f9a:	20 e2       	ldi	r18, 0x20	; 32
    1f9c:	82 9f       	mul	r24, r18
    1f9e:	c0 01       	movw	r24, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	42 e0       	ldi	r20, 0x02	; 2
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	9a 5f       	subi	r25, 0xFA	; 250
    1fa8:	f1 c6       	rjmp	.+3554   	; 0x2d8c <ioport_configure_port_pin>
    1faa:	08 95       	ret

00001fac <ischarging>:
    1fac:	80 91 e8 07 	lds	r24, 0x07E8
    1fb0:	86 95       	lsr	r24
    1fb2:	81 70       	andi	r24, 0x01	; 1
    1fb4:	08 95       	ret

00001fb6 <twinkle>:
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	eb 56       	subi	r30, 0x6B	; 107
    1fc6:	f5 4d       	sbci	r31, 0xD5	; 213
    1fc8:	80 83       	st	Z, r24
    1fca:	61 83       	std	Z+1, r22	; 0x01
    1fcc:	42 83       	std	Z+2, r20	; 0x02
    1fce:	2f 5f       	subi	r18, 0xFF	; 255
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	26 30       	cpi	r18, 0x06	; 6
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	89 f7       	brne	.-30     	; 0x1fba <twinkle+0x4>
    1fd8:	66 e0       	ldi	r22, 0x06	; 6
    1fda:	85 e9       	ldi	r24, 0x95	; 149
    1fdc:	9a e2       	ldi	r25, 0x2A	; 42
    1fde:	92 c4       	rjmp	.+2340   	; 0x2904 <set_flash_ws2812>
    1fe0:	08 95       	ret

00001fe2 <clear_led>:
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	e8 2f       	mov	r30, r24
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	9f 01       	movw	r18, r30
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	eb 56       	subi	r30, 0x6B	; 107
    1ff4:	f5 4d       	sbci	r31, 0xD5	; 213
    1ff6:	10 82       	st	Z, r1
    1ff8:	11 82       	std	Z+1, r1	; 0x01
    1ffa:	12 82       	std	Z+2, r1	; 0x02
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	86 30       	cpi	r24, 0x06	; 6
    2000:	89 f7       	brne	.-30     	; 0x1fe4 <clear_led+0x2>
    2002:	66 e0       	ldi	r22, 0x06	; 6
    2004:	85 e9       	ldi	r24, 0x95	; 149
    2006:	9a e2       	ldi	r25, 0x2A	; 42
    2008:	7d c4       	rjmp	.+2298   	; 0x2904 <set_flash_ws2812>
    200a:	08 95       	ret

0000200c <load_data_color_led>:
    200c:	ac ed       	ldi	r26, 0xDC	; 220
    200e:	b0 e2       	ldi	r27, 0x20	; 32
    2010:	8c 91       	ld	r24, X
    2012:	e5 e9       	ldi	r30, 0x95	; 149
    2014:	fa e2       	ldi	r31, 0x2A	; 42
    2016:	80 83       	st	Z, r24
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	8c 91       	ld	r24, X
    201c:	11 97       	sbiw	r26, 0x01	; 1
    201e:	81 83       	std	Z+1, r24	; 0x01
    2020:	12 96       	adiw	r26, 0x02	; 2
    2022:	8c 91       	ld	r24, X
    2024:	12 97       	sbiw	r26, 0x02	; 2
    2026:	82 83       	std	Z+2, r24	; 0x02
    2028:	13 96       	adiw	r26, 0x03	; 3
    202a:	8c 91       	ld	r24, X
    202c:	13 97       	sbiw	r26, 0x03	; 3
    202e:	83 83       	std	Z+3, r24	; 0x03
    2030:	14 96       	adiw	r26, 0x04	; 4
    2032:	8c 91       	ld	r24, X
    2034:	14 97       	sbiw	r26, 0x04	; 4
    2036:	84 83       	std	Z+4, r24	; 0x04
    2038:	15 96       	adiw	r26, 0x05	; 5
    203a:	8c 91       	ld	r24, X
    203c:	15 97       	sbiw	r26, 0x05	; 5
    203e:	85 83       	std	Z+5, r24	; 0x05
    2040:	16 96       	adiw	r26, 0x06	; 6
    2042:	8c 91       	ld	r24, X
    2044:	16 97       	sbiw	r26, 0x06	; 6
    2046:	86 83       	std	Z+6, r24	; 0x06
    2048:	17 96       	adiw	r26, 0x07	; 7
    204a:	8c 91       	ld	r24, X
    204c:	17 97       	sbiw	r26, 0x07	; 7
    204e:	87 83       	std	Z+7, r24	; 0x07
    2050:	18 96       	adiw	r26, 0x08	; 8
    2052:	8c 91       	ld	r24, X
    2054:	18 97       	sbiw	r26, 0x08	; 8
    2056:	80 87       	std	Z+8, r24	; 0x08
    2058:	8c 91       	ld	r24, X
    205a:	81 87       	std	Z+9, r24	; 0x09
    205c:	11 96       	adiw	r26, 0x01	; 1
    205e:	8c 91       	ld	r24, X
    2060:	11 97       	sbiw	r26, 0x01	; 1
    2062:	82 87       	std	Z+10, r24	; 0x0a
    2064:	12 96       	adiw	r26, 0x02	; 2
    2066:	8c 91       	ld	r24, X
    2068:	12 97       	sbiw	r26, 0x02	; 2
    206a:	83 87       	std	Z+11, r24	; 0x0b
    206c:	13 96       	adiw	r26, 0x03	; 3
    206e:	8c 91       	ld	r24, X
    2070:	13 97       	sbiw	r26, 0x03	; 3
    2072:	84 87       	std	Z+12, r24	; 0x0c
    2074:	14 96       	adiw	r26, 0x04	; 4
    2076:	8c 91       	ld	r24, X
    2078:	14 97       	sbiw	r26, 0x04	; 4
    207a:	85 87       	std	Z+13, r24	; 0x0d
    207c:	15 96       	adiw	r26, 0x05	; 5
    207e:	8c 91       	ld	r24, X
    2080:	15 97       	sbiw	r26, 0x05	; 5
    2082:	86 87       	std	Z+14, r24	; 0x0e
    2084:	16 96       	adiw	r26, 0x06	; 6
    2086:	8c 91       	ld	r24, X
    2088:	16 97       	sbiw	r26, 0x06	; 6
    208a:	87 87       	std	Z+15, r24	; 0x0f
    208c:	17 96       	adiw	r26, 0x07	; 7
    208e:	8c 91       	ld	r24, X
    2090:	17 97       	sbiw	r26, 0x07	; 7
    2092:	80 8b       	std	Z+16, r24	; 0x10
    2094:	18 96       	adiw	r26, 0x08	; 8
    2096:	8c 91       	ld	r24, X
    2098:	81 8b       	std	Z+17, r24	; 0x11
    209a:	66 e0       	ldi	r22, 0x06	; 6
    209c:	cf 01       	movw	r24, r30
    209e:	32 c4       	rjmp	.+2148   	; 0x2904 <set_flash_ws2812>
    20a0:	08 95       	ret

000020a2 <update_led_charge>:
    20a2:	10 92 7a 2a 	sts	0x2A7A, r1
    20a6:	80 91 37 21 	lds	r24, 0x2137
    20aa:	88 23       	and	r24, r24
    20ac:	59 f1       	breq	.+86     	; 0x2104 <update_led_charge+0x62>
    20ae:	80 91 3a 21 	lds	r24, 0x213A
    20b2:	90 91 3b 21 	lds	r25, 0x213B
    20b6:	9c 01       	movw	r18, r24
    20b8:	20 56       	subi	r18, 0x60	; 96
    20ba:	35 40       	sbci	r19, 0x05	; 5
    20bc:	2f 35       	cpi	r18, 0x5F	; 95
    20be:	31 05       	cpc	r19, r1
    20c0:	48 f4       	brcc	.+18     	; 0x20d4 <update_led_charge+0x32>
    20c2:	80 91 fc 20 	lds	r24, 0x20FC
    20c6:	90 91 fd 20 	lds	r25, 0x20FD
    20ca:	80 93 3e 21 	sts	0x213E, r24
    20ce:	90 93 3f 21 	sts	0x213F, r25
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <update_led_charge+0x5e>
    20d4:	81 5b       	subi	r24, 0xB1	; 177
    20d6:	94 40       	sbci	r25, 0x04	; 4
    20d8:	8f 3a       	cpi	r24, 0xAF	; 175
    20da:	91 05       	cpc	r25, r1
    20dc:	48 f4       	brcc	.+18     	; 0x20f0 <update_led_charge+0x4e>
    20de:	80 91 f8 20 	lds	r24, 0x20F8
    20e2:	90 91 f9 20 	lds	r25, 0x20F9
    20e6:	80 93 3e 21 	sts	0x213E, r24
    20ea:	90 93 3f 21 	sts	0x213F, r25
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <update_led_charge+0x5e>
    20f0:	80 91 42 21 	lds	r24, 0x2142
    20f4:	90 91 43 21 	lds	r25, 0x2143
    20f8:	80 93 3e 21 	sts	0x213E, r24
    20fc:	90 93 3f 21 	sts	0x213F, r25
    2100:	10 92 37 21 	sts	0x2137, r1
    2104:	53 df       	rcall	.-346    	; 0x1fac <ischarging>
    2106:	81 11       	cpse	r24, r1
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <update_led_charge+0x90>
    210a:	80 91 41 21 	lds	r24, 0x2141
    210e:	80 93 40 21 	sts	0x2140, r24
    2112:	86 e0       	ldi	r24, 0x06	; 6
    2114:	80 93 41 21 	sts	0x2141, r24
    2118:	80 91 41 21 	lds	r24, 0x2141
    211c:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	98 e0       	ldi	r25, 0x08	; 8
    2124:	0e 94 b8 1a 	call	0x3570	; 0x3570 <tc45_enable>
    2128:	80 e4       	ldi	r24, 0x40	; 64
    212a:	98 e0       	ldi	r25, 0x08	; 8
    212c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <tc45_disable>
    2130:	6d df       	rcall	.-294    	; 0x200c <load_data_color_led>
    2132:	80 91 3e 21 	lds	r24, 0x213E
    2136:	90 91 3f 21 	lds	r25, 0x213F
    213a:	20 91 fe 20 	lds	r18, 0x20FE
    213e:	30 91 ff 20 	lds	r19, 0x20FF
    2142:	82 17       	cp	r24, r18
    2144:	93 07       	cpc	r25, r19
    2146:	b8 f5       	brcc	.+110    	; 0x21b6 <update_led_charge+0x114>
    2148:	4c df       	rcall	.-360    	; 0x1fe2 <clear_led>
    214a:	40 91 f3 20 	lds	r20, 0x20F3
    214e:	20 91 3e 21 	lds	r18, 0x213E
    2152:	30 91 3f 21 	lds	r19, 0x213F
    2156:	60 91 fe 20 	lds	r22, 0x20FE
    215a:	70 91 ff 20 	lds	r23, 0x20FF
    215e:	42 9f       	mul	r20, r18
    2160:	c0 01       	movw	r24, r0
    2162:	43 9f       	mul	r20, r19
    2164:	90 0d       	add	r25, r0
    2166:	11 24       	eor	r1, r1
    2168:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    216c:	e5 e9       	ldi	r30, 0x95	; 149
    216e:	fa e2       	ldi	r31, 0x2A	; 42
    2170:	60 83       	st	Z, r22
    2172:	11 82       	std	Z+1, r1	; 0x01
    2174:	12 82       	std	Z+2, r1	; 0x02
    2176:	13 82       	std	Z+3, r1	; 0x03
    2178:	14 82       	std	Z+4, r1	; 0x04
    217a:	15 82       	std	Z+5, r1	; 0x05
    217c:	16 82       	std	Z+6, r1	; 0x06
    217e:	17 82       	std	Z+7, r1	; 0x07
    2180:	10 86       	std	Z+8, r1	; 0x08
    2182:	40 91 f3 20 	lds	r20, 0x20F3
    2186:	60 91 fe 20 	lds	r22, 0x20FE
    218a:	70 91 ff 20 	lds	r23, 0x20FF
    218e:	42 9f       	mul	r20, r18
    2190:	c0 01       	movw	r24, r0
    2192:	43 9f       	mul	r20, r19
    2194:	90 0d       	add	r25, r0
    2196:	11 24       	eor	r1, r1
    2198:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    219c:	61 87       	std	Z+9, r22	; 0x09
    219e:	12 86       	std	Z+10, r1	; 0x0a
    21a0:	13 86       	std	Z+11, r1	; 0x0b
    21a2:	14 86       	std	Z+12, r1	; 0x0c
    21a4:	15 86       	std	Z+13, r1	; 0x0d
    21a6:	16 86       	std	Z+14, r1	; 0x0e
    21a8:	17 86       	std	Z+15, r1	; 0x0f
    21aa:	10 8a       	std	Z+16, r1	; 0x10
    21ac:	11 8a       	std	Z+17, r1	; 0x11
    21ae:	66 e0       	ldi	r22, 0x06	; 6
    21b0:	cf 01       	movw	r24, r30
    21b2:	a8 d3       	rcall	.+1872   	; 0x2904 <set_flash_ws2812>
    21b4:	64 c1       	rjmp	.+712    	; 0x247e <update_led_charge+0x3dc>
    21b6:	20 91 fa 20 	lds	r18, 0x20FA
    21ba:	30 91 fb 20 	lds	r19, 0x20FB
    21be:	82 17       	cp	r24, r18
    21c0:	93 07       	cpc	r25, r19
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <update_led_charge+0x124>
    21c4:	48 c0       	rjmp	.+144    	; 0x2256 <update_led_charge+0x1b4>
    21c6:	0d df       	rcall	.-486    	; 0x1fe2 <clear_led>
    21c8:	80 91 f3 20 	lds	r24, 0x20F3
    21cc:	e5 e9       	ldi	r30, 0x95	; 149
    21ce:	fa e2       	ldi	r31, 0x2A	; 42
    21d0:	80 83       	st	Z, r24
    21d2:	11 82       	std	Z+1, r1	; 0x01
    21d4:	12 82       	std	Z+2, r1	; 0x02
    21d6:	13 82       	std	Z+3, r1	; 0x03
    21d8:	14 82       	std	Z+4, r1	; 0x04
    21da:	15 82       	std	Z+5, r1	; 0x05
    21dc:	20 91 3e 21 	lds	r18, 0x213E
    21e0:	30 91 3f 21 	lds	r19, 0x213F
    21e4:	80 91 fe 20 	lds	r24, 0x20FE
    21e8:	90 91 ff 20 	lds	r25, 0x20FF
    21ec:	a0 91 f3 20 	lds	r26, 0x20F3
    21f0:	60 91 fa 20 	lds	r22, 0x20FA
    21f4:	70 91 fb 20 	lds	r23, 0x20FB
    21f8:	a9 01       	movw	r20, r18
    21fa:	48 1b       	sub	r20, r24
    21fc:	59 0b       	sbc	r21, r25
    21fe:	a4 9f       	mul	r26, r20
    2200:	c0 01       	movw	r24, r0
    2202:	a5 9f       	mul	r26, r21
    2204:	90 0d       	add	r25, r0
    2206:	11 24       	eor	r1, r1
    2208:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    220c:	66 83       	std	Z+6, r22	; 0x06
    220e:	17 82       	std	Z+7, r1	; 0x07
    2210:	10 86       	std	Z+8, r1	; 0x08
    2212:	80 91 f3 20 	lds	r24, 0x20F3
    2216:	81 87       	std	Z+9, r24	; 0x09
    2218:	12 86       	std	Z+10, r1	; 0x0a
    221a:	13 86       	std	Z+11, r1	; 0x0b
    221c:	14 86       	std	Z+12, r1	; 0x0c
    221e:	15 86       	std	Z+13, r1	; 0x0d
    2220:	16 86       	std	Z+14, r1	; 0x0e
    2222:	80 91 fe 20 	lds	r24, 0x20FE
    2226:	90 91 ff 20 	lds	r25, 0x20FF
    222a:	40 91 f3 20 	lds	r20, 0x20F3
    222e:	60 91 fa 20 	lds	r22, 0x20FA
    2232:	70 91 fb 20 	lds	r23, 0x20FB
    2236:	28 1b       	sub	r18, r24
    2238:	39 0b       	sbc	r19, r25
    223a:	42 9f       	mul	r20, r18
    223c:	c0 01       	movw	r24, r0
    223e:	43 9f       	mul	r20, r19
    2240:	90 0d       	add	r25, r0
    2242:	11 24       	eor	r1, r1
    2244:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    2248:	67 87       	std	Z+15, r22	; 0x0f
    224a:	10 8a       	std	Z+16, r1	; 0x10
    224c:	11 8a       	std	Z+17, r1	; 0x11
    224e:	66 e0       	ldi	r22, 0x06	; 6
    2250:	cf 01       	movw	r24, r30
    2252:	58 d3       	rcall	.+1712   	; 0x2904 <set_flash_ws2812>
    2254:	14 c1       	rjmp	.+552    	; 0x247e <update_led_charge+0x3dc>
    2256:	20 91 f6 20 	lds	r18, 0x20F6
    225a:	30 91 f7 20 	lds	r19, 0x20F7
    225e:	82 17       	cp	r24, r18
    2260:	93 07       	cpc	r25, r19
    2262:	08 f0       	brcs	.+2      	; 0x2266 <update_led_charge+0x1c4>
    2264:	4c c0       	rjmp	.+152    	; 0x22fe <update_led_charge+0x25c>
    2266:	bd de       	rcall	.-646    	; 0x1fe2 <clear_led>
    2268:	80 91 f3 20 	lds	r24, 0x20F3
    226c:	e5 e9       	ldi	r30, 0x95	; 149
    226e:	fa e2       	ldi	r31, 0x2A	; 42
    2270:	80 83       	st	Z, r24
    2272:	11 82       	std	Z+1, r1	; 0x01
    2274:	12 82       	std	Z+2, r1	; 0x02
    2276:	20 91 3e 21 	lds	r18, 0x213E
    227a:	30 91 3f 21 	lds	r19, 0x213F
    227e:	80 91 fa 20 	lds	r24, 0x20FA
    2282:	90 91 fb 20 	lds	r25, 0x20FB
    2286:	a0 91 f3 20 	lds	r26, 0x20F3
    228a:	60 91 f6 20 	lds	r22, 0x20F6
    228e:	70 91 f7 20 	lds	r23, 0x20F7
    2292:	a9 01       	movw	r20, r18
    2294:	48 1b       	sub	r20, r24
    2296:	59 0b       	sbc	r21, r25
    2298:	a4 9f       	mul	r26, r20
    229a:	c0 01       	movw	r24, r0
    229c:	a5 9f       	mul	r26, r21
    229e:	90 0d       	add	r25, r0
    22a0:	11 24       	eor	r1, r1
    22a2:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    22a6:	63 83       	std	Z+3, r22	; 0x03
    22a8:	14 82       	std	Z+4, r1	; 0x04
    22aa:	15 82       	std	Z+5, r1	; 0x05
    22ac:	80 91 f3 20 	lds	r24, 0x20F3
    22b0:	86 83       	std	Z+6, r24	; 0x06
    22b2:	17 82       	std	Z+7, r1	; 0x07
    22b4:	10 86       	std	Z+8, r1	; 0x08
    22b6:	80 91 f3 20 	lds	r24, 0x20F3
    22ba:	81 87       	std	Z+9, r24	; 0x09
    22bc:	12 86       	std	Z+10, r1	; 0x0a
    22be:	13 86       	std	Z+11, r1	; 0x0b
    22c0:	80 91 fa 20 	lds	r24, 0x20FA
    22c4:	90 91 fb 20 	lds	r25, 0x20FB
    22c8:	40 91 f3 20 	lds	r20, 0x20F3
    22cc:	60 91 f6 20 	lds	r22, 0x20F6
    22d0:	70 91 f7 20 	lds	r23, 0x20F7
    22d4:	28 1b       	sub	r18, r24
    22d6:	39 0b       	sbc	r19, r25
    22d8:	42 9f       	mul	r20, r18
    22da:	c0 01       	movw	r24, r0
    22dc:	43 9f       	mul	r20, r19
    22de:	90 0d       	add	r25, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    22e6:	64 87       	std	Z+12, r22	; 0x0c
    22e8:	15 86       	std	Z+13, r1	; 0x0d
    22ea:	16 86       	std	Z+14, r1	; 0x0e
    22ec:	80 91 f3 20 	lds	r24, 0x20F3
    22f0:	87 87       	std	Z+15, r24	; 0x0f
    22f2:	10 8a       	std	Z+16, r1	; 0x10
    22f4:	11 8a       	std	Z+17, r1	; 0x11
    22f6:	66 e0       	ldi	r22, 0x06	; 6
    22f8:	cf 01       	movw	r24, r30
    22fa:	04 d3       	rcall	.+1544   	; 0x2904 <set_flash_ws2812>
    22fc:	c0 c0       	rjmp	.+384    	; 0x247e <update_led_charge+0x3dc>
    22fe:	20 91 f4 20 	lds	r18, 0x20F4
    2302:	30 91 f5 20 	lds	r19, 0x20F5
    2306:	82 17       	cp	r24, r18
    2308:	93 07       	cpc	r25, r19
    230a:	08 f0       	brcs	.+2      	; 0x230e <update_led_charge+0x26c>
    230c:	94 c0       	rjmp	.+296    	; 0x2436 <update_led_charge+0x394>
    230e:	69 de       	rcall	.-814    	; 0x1fe2 <clear_led>
    2310:	e5 e9       	ldi	r30, 0x95	; 149
    2312:	fa e2       	ldi	r31, 0x2A	; 42
    2314:	10 82       	st	Z, r1
    2316:	20 91 3e 21 	lds	r18, 0x213E
    231a:	30 91 3f 21 	lds	r19, 0x213F
    231e:	80 91 f8 20 	lds	r24, 0x20F8
    2322:	90 91 f9 20 	lds	r25, 0x20F9
    2326:	a0 91 f3 20 	lds	r26, 0x20F3
    232a:	60 91 f4 20 	lds	r22, 0x20F4
    232e:	70 91 f5 20 	lds	r23, 0x20F5
    2332:	a9 01       	movw	r20, r18
    2334:	48 1b       	sub	r20, r24
    2336:	59 0b       	sbc	r21, r25
    2338:	a4 9f       	mul	r26, r20
    233a:	c0 01       	movw	r24, r0
    233c:	a5 9f       	mul	r26, r21
    233e:	90 0d       	add	r25, r0
    2340:	11 24       	eor	r1, r1
    2342:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    2346:	61 83       	std	Z+1, r22	; 0x01
    2348:	12 82       	std	Z+2, r1	; 0x02
    234a:	13 82       	std	Z+3, r1	; 0x03
    234c:	80 91 f8 20 	lds	r24, 0x20F8
    2350:	90 91 f9 20 	lds	r25, 0x20F9
    2354:	a0 91 f3 20 	lds	r26, 0x20F3
    2358:	60 91 f4 20 	lds	r22, 0x20F4
    235c:	70 91 f5 20 	lds	r23, 0x20F5
    2360:	a9 01       	movw	r20, r18
    2362:	48 1b       	sub	r20, r24
    2364:	59 0b       	sbc	r21, r25
    2366:	a4 9f       	mul	r26, r20
    2368:	c0 01       	movw	r24, r0
    236a:	a5 9f       	mul	r26, r21
    236c:	90 0d       	add	r25, r0
    236e:	11 24       	eor	r1, r1
    2370:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    2374:	64 83       	std	Z+4, r22	; 0x04
    2376:	15 82       	std	Z+5, r1	; 0x05
    2378:	16 82       	std	Z+6, r1	; 0x06
    237a:	80 91 f8 20 	lds	r24, 0x20F8
    237e:	90 91 f9 20 	lds	r25, 0x20F9
    2382:	a0 91 f3 20 	lds	r26, 0x20F3
    2386:	60 91 f4 20 	lds	r22, 0x20F4
    238a:	70 91 f5 20 	lds	r23, 0x20F5
    238e:	a9 01       	movw	r20, r18
    2390:	48 1b       	sub	r20, r24
    2392:	59 0b       	sbc	r21, r25
    2394:	a4 9f       	mul	r26, r20
    2396:	c0 01       	movw	r24, r0
    2398:	a5 9f       	mul	r26, r21
    239a:	90 0d       	add	r25, r0
    239c:	11 24       	eor	r1, r1
    239e:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    23a2:	67 83       	std	Z+7, r22	; 0x07
    23a4:	10 86       	std	Z+8, r1	; 0x08
    23a6:	11 86       	std	Z+9, r1	; 0x09
    23a8:	80 91 f8 20 	lds	r24, 0x20F8
    23ac:	90 91 f9 20 	lds	r25, 0x20F9
    23b0:	a0 91 f3 20 	lds	r26, 0x20F3
    23b4:	60 91 f4 20 	lds	r22, 0x20F4
    23b8:	70 91 f5 20 	lds	r23, 0x20F5
    23bc:	a9 01       	movw	r20, r18
    23be:	48 1b       	sub	r20, r24
    23c0:	59 0b       	sbc	r21, r25
    23c2:	a4 9f       	mul	r26, r20
    23c4:	c0 01       	movw	r24, r0
    23c6:	a5 9f       	mul	r26, r21
    23c8:	90 0d       	add	r25, r0
    23ca:	11 24       	eor	r1, r1
    23cc:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    23d0:	62 87       	std	Z+10, r22	; 0x0a
    23d2:	13 86       	std	Z+11, r1	; 0x0b
    23d4:	14 86       	std	Z+12, r1	; 0x0c
    23d6:	80 91 f8 20 	lds	r24, 0x20F8
    23da:	90 91 f9 20 	lds	r25, 0x20F9
    23de:	a0 91 f3 20 	lds	r26, 0x20F3
    23e2:	60 91 f4 20 	lds	r22, 0x20F4
    23e6:	70 91 f5 20 	lds	r23, 0x20F5
    23ea:	a9 01       	movw	r20, r18
    23ec:	48 1b       	sub	r20, r24
    23ee:	59 0b       	sbc	r21, r25
    23f0:	a4 9f       	mul	r26, r20
    23f2:	c0 01       	movw	r24, r0
    23f4:	a5 9f       	mul	r26, r21
    23f6:	90 0d       	add	r25, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    23fe:	65 87       	std	Z+13, r22	; 0x0d
    2400:	16 86       	std	Z+14, r1	; 0x0e
    2402:	17 86       	std	Z+15, r1	; 0x0f
    2404:	80 91 f8 20 	lds	r24, 0x20F8
    2408:	90 91 f9 20 	lds	r25, 0x20F9
    240c:	40 91 f3 20 	lds	r20, 0x20F3
    2410:	60 91 f4 20 	lds	r22, 0x20F4
    2414:	70 91 f5 20 	lds	r23, 0x20F5
    2418:	28 1b       	sub	r18, r24
    241a:	39 0b       	sbc	r19, r25
    241c:	42 9f       	mul	r20, r18
    241e:	c0 01       	movw	r24, r0
    2420:	43 9f       	mul	r20, r19
    2422:	90 0d       	add	r25, r0
    2424:	11 24       	eor	r1, r1
    2426:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodhi4>
    242a:	60 8b       	std	Z+16, r22	; 0x10
    242c:	11 8a       	std	Z+17, r1	; 0x11
    242e:	66 e0       	ldi	r22, 0x06	; 6
    2430:	cf 01       	movw	r24, r30
    2432:	68 d2       	rcall	.+1232   	; 0x2904 <set_flash_ws2812>
    2434:	24 c0       	rjmp	.+72     	; 0x247e <update_led_charge+0x3dc>
    2436:	d5 dd       	rcall	.-1110   	; 0x1fe2 <clear_led>
    2438:	e5 e9       	ldi	r30, 0x95	; 149
    243a:	fa e2       	ldi	r31, 0x2A	; 42
    243c:	10 82       	st	Z, r1
    243e:	80 91 f3 20 	lds	r24, 0x20F3
    2442:	81 83       	std	Z+1, r24	; 0x01
    2444:	12 82       	std	Z+2, r1	; 0x02
    2446:	13 82       	std	Z+3, r1	; 0x03
    2448:	80 91 f3 20 	lds	r24, 0x20F3
    244c:	84 83       	std	Z+4, r24	; 0x04
    244e:	15 82       	std	Z+5, r1	; 0x05
    2450:	16 82       	std	Z+6, r1	; 0x06
    2452:	80 91 f3 20 	lds	r24, 0x20F3
    2456:	87 83       	std	Z+7, r24	; 0x07
    2458:	10 86       	std	Z+8, r1	; 0x08
    245a:	11 86       	std	Z+9, r1	; 0x09
    245c:	80 91 f3 20 	lds	r24, 0x20F3
    2460:	82 87       	std	Z+10, r24	; 0x0a
    2462:	13 86       	std	Z+11, r1	; 0x0b
    2464:	14 86       	std	Z+12, r1	; 0x0c
    2466:	80 91 f3 20 	lds	r24, 0x20F3
    246a:	85 87       	std	Z+13, r24	; 0x0d
    246c:	16 86       	std	Z+14, r1	; 0x0e
    246e:	17 86       	std	Z+15, r1	; 0x0f
    2470:	80 91 f3 20 	lds	r24, 0x20F3
    2474:	80 8b       	std	Z+16, r24	; 0x10
    2476:	11 8a       	std	Z+17, r1	; 0x11
    2478:	66 e0       	ldi	r22, 0x06	; 6
    247a:	cf 01       	movw	r24, r30
    247c:	43 d2       	rcall	.+1158   	; 0x2904 <set_flash_ws2812>
    247e:	80 91 3e 21 	lds	r24, 0x213E
    2482:	90 91 3f 21 	lds	r25, 0x213F
    2486:	01 96       	adiw	r24, 0x01	; 1
    2488:	80 93 3e 21 	sts	0x213E, r24
    248c:	90 93 3f 21 	sts	0x213F, r25
    2490:	08 95       	ret

00002492 <__vector_35>:
    2492:	1f 92       	push	r1
    2494:	0f 92       	push	r0
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	0f 92       	push	r0
    249a:	11 24       	eor	r1, r1
    249c:	2f 93       	push	r18
    249e:	3f 93       	push	r19
    24a0:	4f 93       	push	r20
    24a2:	5f 93       	push	r21
    24a4:	6f 93       	push	r22
    24a6:	7f 93       	push	r23
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
    24b4:	80 e2       	ldi	r24, 0x20	; 32
    24b6:	80 93 6c 06 	sts	0x066C, r24
    24ba:	93 dd       	rcall	.-1242   	; 0x1fe2 <clear_led>
    24bc:	82 e1       	ldi	r24, 0x12	; 18
    24be:	97 e2       	ldi	r25, 0x27	; 39
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <__vector_35+0x2e>
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	bf 91       	pop	r27
    24ca:	af 91       	pop	r26
    24cc:	9f 91       	pop	r25
    24ce:	8f 91       	pop	r24
    24d0:	7f 91       	pop	r23
    24d2:	6f 91       	pop	r22
    24d4:	5f 91       	pop	r21
    24d6:	4f 91       	pop	r20
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <send_response>:
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <send_response+0x6>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	ce 01       	movw	r24, r28
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	2a dd       	rcall	.-1452   	; 0x1f52 <uart_send_bytes>
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	df 91       	pop	r29
    2504:	cf 91       	pop	r28
    2506:	08 95       	ret

00002508 <send_light_data>:
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	00 d0       	rcall	.+0      	; 0x250e <send_light_data+0x6>
    250e:	1f 92       	push	r1
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	90 91 3c 21 	lds	r25, 0x213C
    2518:	80 91 3d 21 	lds	r24, 0x213D
    251c:	9b 83       	std	Y+3, r25	; 0x03
    251e:	8a 83       	std	Y+2, r24	; 0x02
    2520:	8d e4       	ldi	r24, 0x4D	; 77
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	63 e0       	ldi	r22, 0x03	; 3
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	ce 01       	movw	r24, r28
    252a:	01 96       	adiw	r24, 0x01	; 1
    252c:	12 dd       	rcall	.-1500   	; 0x1f52 <uart_send_bytes>
    252e:	23 96       	adiw	r28, 0x03	; 3
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <send_battery_data>:
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	00 d0       	rcall	.+0      	; 0x2540 <send_battery_data+0x6>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	80 91 3a 21 	lds	r24, 0x213A
    2548:	90 91 3b 21 	lds	r25, 0x213B
    254c:	6a e0       	ldi	r22, 0x0A	; 10
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	0e 94 63 20 	call	0x40c6	; 0x40c6 <__divmodhi4>
    2554:	6a 83       	std	Y+2, r22	; 0x02
    2556:	82 e4       	ldi	r24, 0x42	; 66
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	62 e0       	ldi	r22, 0x02	; 2
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	ce 01       	movw	r24, r28
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	f7 dc       	rcall	.-1554   	; 0x1f52 <uart_send_bytes>
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	08 95       	ret

0000256e <send_charging_data>:
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	00 d0       	rcall	.+0      	; 0x2574 <send_charging_data+0x6>
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	19 82       	std	Y+1, r1	; 0x01
    257a:	1a 82       	std	Y+2, r1	; 0x02
    257c:	17 dd       	rcall	.-1490   	; 0x1fac <ischarging>
    257e:	8a 83       	std	Y+2, r24	; 0x02
    2580:	87 e4       	ldi	r24, 0x47	; 71
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	ce 01       	movw	r24, r28
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	e2 dc       	rcall	.-1596   	; 0x1f52 <uart_send_bytes>
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	08 95       	ret

00002598 <send_mtch_data>:
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <send_mtch_data+0xa>
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <send_mtch_data+0xc>
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	18 2f       	mov	r17, r24
    25aa:	06 2f       	mov	r16, r22
    25ac:	19 82       	std	Y+1, r1	; 0x01
    25ae:	1a 82       	std	Y+2, r1	; 0x02
    25b0:	1b 82       	std	Y+3, r1	; 0x03
    25b2:	1c 82       	std	Y+4, r1	; 0x04
    25b4:	e5 ee       	ldi	r30, 0xE5	; 229
    25b6:	f0 e2       	ldi	r31, 0x20	; 32
    25b8:	63 81       	ldd	r22, Z+3	; 0x03
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	c3 d8       	rcall	.-3706   	; 0x1744 <read_register>
    25be:	8c 83       	std	Y+4, r24	; 0x04
    25c0:	0b 83       	std	Y+3, r16	; 0x03
    25c2:	1a 83       	std	Y+2, r17	; 0x02
    25c4:	88 e4       	ldi	r24, 0x48	; 72
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	64 e0       	ldi	r22, 0x04	; 4
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	ce 01       	movw	r24, r28
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	c0 dc       	rcall	.-1664   	; 0x1f52 <uart_send_bytes>
    25d2:	24 96       	adiw	r28, 0x04	; 4
    25d4:	cd bf       	out	0x3d, r28	; 61
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	08 95       	ret

000025e2 <send_color_data>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	2a 97       	sbiw	r28, 0x0a	; 10
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	fe 01       	movw	r30, r28
    25f2:	31 96       	adiw	r30, 0x01	; 1
    25f4:	8a e0       	ldi	r24, 0x0A	; 10
    25f6:	df 01       	movw	r26, r30
    25f8:	1d 92       	st	X+, r1
    25fa:	8a 95       	dec	r24
    25fc:	e9 f7       	brne	.-6      	; 0x25f8 <send_color_data+0x16>
    25fe:	83 e6       	ldi	r24, 0x63	; 99
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	31 96       	adiw	r30, 0x01	; 1
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	dc 01       	movw	r26, r24
    260a:	a4 52       	subi	r26, 0x24	; 36
    260c:	bf 4d       	sbci	r27, 0xDF	; 223
    260e:	2c 91       	ld	r18, X
    2610:	21 93       	st	Z+, r18
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	89 30       	cpi	r24, 0x09	; 9
    2616:	91 05       	cpc	r25, r1
    2618:	b9 f7       	brne	.-18     	; 0x2608 <send_color_data+0x26>
    261a:	6a e0       	ldi	r22, 0x0A	; 10
    261c:	70 e0       	ldi	r23, 0x00	; 0
    261e:	ce 01       	movw	r24, r28
    2620:	01 96       	adiw	r24, 0x01	; 1
    2622:	97 dc       	rcall	.-1746   	; 0x1f52 <uart_send_bytes>
    2624:	2a 96       	adiw	r28, 0x0a	; 10
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	08 95       	ret

00002630 <send_pulse_data>:
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	00 d0       	rcall	.+0      	; 0x2636 <send_pulse_data+0x6>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	1a 82       	std	Y+2, r1	; 0x02
    263e:	89 da       	rcall	.-2798   	; 0x1b52 <get_pulse_state>
    2640:	8a 83       	std	Y+2, r24	; 0x02
    2642:	80 e7       	ldi	r24, 0x70	; 112
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	70 e0       	ldi	r23, 0x00	; 0
    264a:	ce 01       	movw	r24, r28
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	81 dc       	rcall	.-1790   	; 0x1f52 <uart_send_bytes>
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	df 91       	pop	r29
    2656:	cf 91       	pop	r28
    2658:	08 95       	ret

0000265a <restore_led_from_eeprom>:
//	set_flash_ws2812(m_led_struct, 6);
}

void restore_led_from_eeprom(void)
{	
    265a:	cf 93       	push	r28
    265c:	df 93       	push	r29
	/* Read LED data bytes from EEPROM to internal buffer */
	/* EEPROM_LED1_R_BYTE is the start address of the bytes , load into buffer_data*/
//	nvm_eeprom_read_buffer((uint16_t)EEPROM_LED1_R_BYTE, &buffer_data[2], 9);
	
	colors[0] = EEPROM_LED1_R_BYTE;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	f4 d4       	rcall	.+2536   	; 0x304c <nvm_eeprom_read_byte>
    2664:	cc ed       	ldi	r28, 0xDC	; 220
    2666:	d0 e2       	ldi	r29, 0x20	; 32
    2668:	88 83       	st	Y, r24
	colors[1] = EEPROM_LED1_G_BYTE;
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	ee d4       	rcall	.+2524   	; 0x304c <nvm_eeprom_read_byte>
    2670:	89 83       	std	Y+1, r24	; 0x01
	colors[2] = EEPROM_LED1_B_BYTE;
    2672:	83 e0       	ldi	r24, 0x03	; 3
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	ea d4       	rcall	.+2516   	; 0x304c <nvm_eeprom_read_byte>
    2678:	8a 83       	std	Y+2, r24	; 0x02

	colors[3] = EEPROM_LED2_R_BYTE;
    267a:	84 e0       	ldi	r24, 0x04	; 4
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	e6 d4       	rcall	.+2508   	; 0x304c <nvm_eeprom_read_byte>
    2680:	8b 83       	std	Y+3, r24	; 0x03
	colors[4] = EEPROM_LED2_G_BYTE;
    2682:	85 e0       	ldi	r24, 0x05	; 5
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	e2 d4       	rcall	.+2500   	; 0x304c <nvm_eeprom_read_byte>
    2688:	8c 83       	std	Y+4, r24	; 0x04
	colors[5] = EEPROM_LED2_B_BYTE;
    268a:	86 e0       	ldi	r24, 0x06	; 6
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	de d4       	rcall	.+2492   	; 0x304c <nvm_eeprom_read_byte>
    2690:	8d 83       	std	Y+5, r24	; 0x05
	
	colors[6] = EEPROM_LED3_R_BYTE;
    2692:	87 e0       	ldi	r24, 0x07	; 7
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	da d4       	rcall	.+2484   	; 0x304c <nvm_eeprom_read_byte>
    2698:	8e 83       	std	Y+6, r24	; 0x06
	colors[7] = EEPROM_LED3_G_BYTE;
    269a:	88 e0       	ldi	r24, 0x08	; 8
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	d6 d4       	rcall	.+2476   	; 0x304c <nvm_eeprom_read_byte>
    26a0:	8f 83       	std	Y+7, r24	; 0x07
	colors[8] = EEPROM_LED3_B_BYTE;
    26a2:	89 e0       	ldi	r24, 0x09	; 9
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	d2 d4       	rcall	.+2468   	; 0x304c <nvm_eeprom_read_byte>
    26a8:	88 87       	std	Y+8, r24	; 0x08
	
	led_set_from_colors();
    26aa:	f3 d9       	rcall	.-3098   	; 0x1a92 <led_set_from_colors>
//usart_putchar(&USARTD0, 0x25);
}
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <save_led_to_eeprom>:

void save_led_to_eeprom(void) {
    26b2:	08 95       	ret

000026b4 <init_ws2812>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26b4:	98 2f       	mov	r25, r24
    26b6:	97 70       	andi	r25, 0x07	; 7
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <init_ws2812+0xe>
    26be:	66 0f       	add	r22, r22
    26c0:	77 1f       	adc	r23, r23
    26c2:	9a 95       	dec	r25
    26c4:	e2 f7       	brpl	.-8      	; 0x26be <init_ws2812+0xa>
    26c6:	86 95       	lsr	r24
    26c8:	86 95       	lsr	r24
    26ca:	86 95       	lsr	r24
    26cc:	20 e2       	ldi	r18, 0x20	; 32
    26ce:	82 9f       	mul	r24, r18
    26d0:	c0 01       	movw	r24, r0
    26d2:	11 24       	eor	r1, r1
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	9a 5f       	subi	r25, 0xFA	; 250
    26da:	58 c3       	rjmp	.+1712   	; 0x2d8c <ioport_configure_port_pin>
    26dc:	08 95       	ret

000026de <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    26de:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    26e0:	11 96       	adiw	r26, 0x01	; 1
    26e2:	2c 91       	ld	r18, X
    26e4:	11 97       	sbiw	r26, 0x01	; 1
    26e6:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26e8:	e0 e4       	ldi	r30, 0x40	; 64
    26ea:	f6 e0       	ldi	r31, 0x06	; 6
    26ec:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    26ee:	22 23       	and	r18, r18
    26f0:	0c f0       	brlt	.+2      	; 0x26f4 <set_led_ws2812+0x16>
    26f2:	28 c0       	rjmp	.+80     	; 0x2744 <set_led_ws2812+0x66>
    26f4:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2726:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2740:	00 00       	nop
    2742:	26 c0       	rjmp	.+76     	; 0x2790 <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2744:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    275a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    275c:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    278e:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    2790:	22 0f       	add	r18, r18
    2792:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    2794:	09 f0       	breq	.+2      	; 0x2798 <set_led_ws2812+0xba>
    2796:	ab cf       	rjmp	.-170    	; 0x26ee <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    2798:	2c 91       	ld	r18, X
    279a:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    279c:	e0 e4       	ldi	r30, 0x40	; 64
    279e:	f6 e0       	ldi	r31, 0x06	; 6
    27a0:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    27a2:	22 23       	and	r18, r18
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <set_led_ws2812+0xca>
    27a6:	28 c0       	rjmp	.+80     	; 0x27f8 <set_led_ws2812+0x11a>
    27a8:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    27da:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    27f4:	00 00       	nop
    27f6:	26 c0       	rjmp	.+76     	; 0x2844 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    27f8:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    280e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2810:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2842:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    2844:	22 0f       	add	r18, r18
    2846:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    2848:	09 f0       	breq	.+2      	; 0x284c <set_led_ws2812+0x16e>
    284a:	ab cf       	rjmp	.-170    	; 0x27a2 <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    284c:	12 96       	adiw	r26, 0x02	; 2
    284e:	9c 91       	ld	r25, X
    2850:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2852:	e0 e4       	ldi	r30, 0x40	; 64
    2854:	f6 e0       	ldi	r31, 0x06	; 6
    2856:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    2858:	99 23       	and	r25, r25
    285a:	0c f0       	brlt	.+2      	; 0x285e <set_led_ws2812+0x180>
    285c:	28 c0       	rjmp	.+80     	; 0x28ae <set_led_ws2812+0x1d0>
    285e:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2890:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    28aa:	00 00       	nop
    28ac:	26 c0       	rjmp	.+76     	; 0x28fa <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    28ae:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    28c4:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    28c6:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    28f8:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    28fa:	99 0f       	add	r25, r25
    28fc:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    28fe:	09 f0       	breq	.+2      	; 0x2902 <set_led_ws2812+0x224>
    2900:	ab cf       	rjmp	.-170    	; 0x2858 <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    2902:	08 95       	ret

00002904 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    290c:	66 23       	and	r22, r22
    290e:	51 f0       	breq	.+20     	; 0x2924 <set_flash_ws2812+0x20>
    2910:	06 2f       	mov	r16, r22
    2912:	c8 2f       	mov	r28, r24
    2914:	d9 2f       	mov	r29, r25
    2916:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    2918:	ce 01       	movw	r24, r28
    291a:	e1 de       	rcall	.-574    	; 0x26de <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    291c:	1f 5f       	subi	r17, 0xFF	; 255
    291e:	23 96       	adiw	r28, 0x03	; 3
    2920:	10 13       	cpse	r17, r16
    2922:	fa cf       	rjmp	.-12     	; 0x2918 <set_flash_ws2812+0x14>
    2924:	80 e4       	ldi	r24, 0x40	; 64
    2926:	80 93 46 06 	sts	0x0646, r24
    292a:	89 ef       	ldi	r24, 0xF9	; 249
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <set_flash_ws2812+0x2a>
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <set_flash_ws2812+0x30>
    2934:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <main>:
	set_flash_ws2812(m_led_struct, 6);
}


int main(void)
{
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	2a 97       	sbiw	r28, 0x0a	; 10
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	de bf       	out	0x3e, r29	; 62
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    294e:	e0 d1       	rcall	.+960    	; 0x2d10 <sysclk_init>
	//board_init();
//	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);

	init_uart();
    2950:	7a d8       	rcall	.-3852   	; 0x1a46 <init_uart>
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    2952:	86 e1       	ldi	r24, 0x16	; 22
    2954:	af de       	rcall	.-674    	; 0x26b4 <init_ws2812>
	clear_led();
    2956:	45 db       	rcall	.-2422   	; 0x1fe2 <clear_led>
	init_chargingpin(IOPORT_CREATE_PIN(PORTR, 1));
    2958:	89 e7       	ldi	r24, 0x79	; 121
    295a:	13 db       	rcall	.-2522   	; 0x1f82 <init_chargingpin>
	
	volatile uint8_t eep0 = nvm_eeprom_read_byte(0);
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	75 d3       	rcall	.+1770   	; 0x304c <nvm_eeprom_read_byte>
    2962:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t eep1 = nvm_eeprom_read_byte(1);
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	71 d3       	rcall	.+1762   	; 0x304c <nvm_eeprom_read_byte>
    296a:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t eep2 = nvm_eeprom_read_byte(2);
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	6d d3       	rcall	.+1754   	; 0x304c <nvm_eeprom_read_byte>
    2972:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t eep3 = nvm_eeprom_read_byte(3);
    2974:	83 e0       	ldi	r24, 0x03	; 3
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	69 d3       	rcall	.+1746   	; 0x304c <nvm_eeprom_read_byte>
    297a:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t eep4 = nvm_eeprom_read_byte(4);
    297c:	84 e0       	ldi	r24, 0x04	; 4
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	65 d3       	rcall	.+1738   	; 0x304c <nvm_eeprom_read_byte>
    2982:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t eep5 = nvm_eeprom_read_byte(5);
    2984:	85 e0       	ldi	r24, 0x05	; 5
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	61 d3       	rcall	.+1730   	; 0x304c <nvm_eeprom_read_byte>
    298a:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t eep6 = nvm_eeprom_read_byte(6);
    298c:	86 e0       	ldi	r24, 0x06	; 6
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	5d d3       	rcall	.+1722   	; 0x304c <nvm_eeprom_read_byte>
    2992:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t eep7 = nvm_eeprom_read_byte(7);
    2994:	87 e0       	ldi	r24, 0x07	; 7
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	59 d3       	rcall	.+1714   	; 0x304c <nvm_eeprom_read_byte>
    299a:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t eep8 = nvm_eeprom_read_byte(8);
    299c:	88 e0       	ldi	r24, 0x08	; 8
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	55 d3       	rcall	.+1706   	; 0x304c <nvm_eeprom_read_byte>
    29a2:	89 87       	std	Y+9, r24	; 0x09
	volatile uint8_t eep9 = nvm_eeprom_read_byte(9);
    29a4:	89 e0       	ldi	r24, 0x09	; 9
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	51 d3       	rcall	.+1698   	; 0x304c <nvm_eeprom_read_byte>
    29aa:	8a 87       	std	Y+10, r24	; 0x0a

	// init the mtch 6301
	init_mtchio();
    29ac:	0e 94 11 0b 	call	0x1622	; 0x1622 <init_mtchio>
	init_i2c();
    29b0:	0e 94 cb 0a 	call	0x1596	; 0x1596 <init_i2c>
	init_mtch6301();
    29b4:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <init_mtch6301>
		
	// restore the state stored in the eeprom
	// restore_state_eep();
	
	//rainbow();
	restore_led_from_eeprom();
    29b8:	50 de       	rcall	.-864    	; 0x265a <restore_led_from_eeprom>
	
	core_status = STATUS_CHARGE;
    29ba:	11 e0       	ldi	r17, 0x01	; 1
    29bc:	10 93 41 21 	sts	0x2141, r17
	change_adc_channel(core_status);
    29c0:	80 91 41 21 	lds	r24, 0x2141
    29c4:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
	flag_initcharge = true;
    29c8:	10 93 37 21 	sts	0x2137, r17
	tc45_disable(&TCC4);
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	98 e0       	ldi	r25, 0x08	; 8
    29d0:	01 d6       	rcall	.+3074   	; 0x35d4 <tc45_disable>
	tc45_enable(&TCC5);
    29d2:	80 e4       	ldi	r24, 0x40	; 64
    29d4:	98 e0       	ldi	r25, 0x08	; 8
    29d6:	cc d5       	rcall	.+2968   	; 0x3570 <tc45_enable>
		
	init_adc(core_status);
    29d8:	80 91 41 21 	lds	r24, 0x2141
    29dc:	0e 94 0f 04 	call	0x81e	; 0x81e <init_adc>
	adc_enable_interrupt();
    29e0:	0e 94 7f 05 	call	0xafe	; 0xafe <adc_enable_interrupt>
	init_timer5();
    29e4:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <init_timer5>
	init_timer4();		
    29e8:	0e 94 af 0c 	call	0x195e	; 0x195e <init_timer4>
		flag_initcharge = true;
		tc45_disable(&TCC4);
		tc45_enable(&TCC5);
	}
	else*/
	(!ischarging())
    29ec:	df da       	rcall	.-2626   	; 0x1fac <ischarging>
    29ee:	81 11       	cpse	r24, r1
    29f0:	11 c0       	rjmp	.+34     	; 0x2a14 <main+0xd4>
	{
		old_core_status = core_status;
    29f2:	80 91 41 21 	lds	r24, 0x2141
    29f6:	80 93 40 21 	sts	0x2140, r24
		core_status = STATUS_BATT_READ;
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	80 93 41 21 	sts	0x2141, r24
		change_adc_channel(core_status);
    2a00:	80 91 41 21 	lds	r24, 0x2141
    2a04:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
		tc45_disable(&TCC5);
    2a08:	80 e4       	ldi	r24, 0x40	; 64
    2a0a:	98 e0       	ldi	r25, 0x08	; 8
    2a0c:	e3 d5       	rcall	.+3014   	; 0x35d4 <tc45_disable>
		tc45_enable(&TCC4);
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	98 e0       	ldi	r25, 0x08	; 8
    2a12:	ae d5       	rcall	.+2908   	; 0x3570 <tc45_enable>
	//	usart_putchar(M_USART, 0x23);
	}
	
	/* Charging and watchdog timer - Using two compare channels with single timer */
#ifdef ENABLE_WDT
	wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    2a14:	88 e0       	ldi	r24, 0x08	; 8
    2a16:	0e 94 ed 03 	call	0x7da	; 0x7da <wdt_set_timeout_period>
      wdt_reset(); 
    2a1a:	a8 95       	wdr
	wdt_enable();
    2a1c:	0e 94 01 04 	call	0x802	; 0x802 <wdt_enable>
	init_timerd5();
    2a20:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <init_timerd5>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a24:	0f 2e       	mov	r0, r31
    2a26:	f0 e6       	ldi	r31, 0x60	; 96
    2a28:	cf 2e       	mov	r12, r31
    2a2a:	f6 e0       	ldi	r31, 0x06	; 6
    2a2c:	df 2e       	mov	r13, r31
    2a2e:	f0 2d       	mov	r31, r0
    2a30:	68 94       	set
    2a32:	66 24       	eor	r6, r6
    2a34:	61 f8       	bld	r6, 1
    2a36:	01 e0       	ldi	r16, 0x01	; 1
    2a38:	0f 2e       	mov	r0, r31
    2a3a:	f0 ee       	ldi	r31, 0xE0	; 224
    2a3c:	8f 2e       	mov	r8, r31
    2a3e:	f7 e0       	ldi	r31, 0x07	; 7
    2a40:	9f 2e       	mov	r9, r31
    2a42:	f0 2d       	mov	r31, r0
    2a44:	68 94       	set
    2a46:	bb 24       	eor	r11, r11
    2a48:	b6 f8       	bld	r11, 6
    2a4a:	0f 2e       	mov	r0, r31
    2a4c:	e1 2c       	mov	r14, r1
    2a4e:	f6 e0       	ldi	r31, 0x06	; 6
    2a50:	ff 2e       	mov	r15, r31
    2a52:	f0 2d       	mov	r31, r0
    2a54:	68 94       	set
    2a56:	55 24       	eor	r5, r5
    2a58:	57 f8       	bld	r5, 7
    2a5a:	36 2c       	mov	r3, r6
    2a5c:	10 2f       	mov	r17, r16
    2a5e:	68 94       	set
    2a60:	aa 24       	eor	r10, r10
    2a62:	a5 f8       	bld	r10, 5
						{
							//	usart_putchar(M_USART, 0x55);

							run();
							old_core_status = core_status;
							core_status = STATUS_FFT_R;
    2a64:	68 94       	set
    2a66:	44 24       	eor	r4, r4
    2a68:	42 f8       	bld	r4, 2
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
					old_core_status = core_status;
					core_status = STATUS_BATT_READ;
    2a6a:	0f 2e       	mov	r0, r31
    2a6c:	f6 e0       	ldi	r31, 0x06	; 6
    2a6e:	7f 2e       	mov	r7, r31
    2a70:	f0 2d       	mov	r31, r0
	
	// Insert application code here, after the board has been initialized.
	while(1)
	{

		if (latest_gesture) {
    2a72:	80 91 25 21 	lds	r24, 0x2125
    2a76:	88 23       	and	r24, r24
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <main+0x13c>
    2a7a:	72 c0       	rjmp	.+228    	; 0x2b60 <main+0x220>
			//twinkle(255, 0, 255);
			switch (latest_gesture) {
    2a7c:	e0 91 25 21 	lds	r30, 0x2125
    2a80:	8e 2f       	mov	r24, r30
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	fc 01       	movw	r30, r24
    2a86:	e0 5a       	subi	r30, 0xA0	; 160
    2a88:	f1 09       	sbc	r31, r1
    2a8a:	e7 30       	cpi	r30, 0x07	; 7
    2a8c:	f1 05       	cpc	r31, r1
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <main+0x152>
    2a90:	65 c0       	rjmp	.+202    	; 0x2b5c <main+0x21c>
    2a92:	e0 5e       	subi	r30, 0xE0	; 224
    2a94:	fe 4f       	sbci	r31, 0xFE	; 254
    2a96:	0c 94 98 20 	jmp	0x4130	; 0x4130 <__tablejump2__>
    2a9a:	f7 01       	movw	r30, r14
    2a9c:	a5 82       	std	Z+5, r10	; 0x05
    2a9e:	ff e7       	ldi	r31, 0x7F	; 127
    2aa0:	2a e1       	ldi	r18, 0x1A	; 26
    2aa2:	86 e0       	ldi	r24, 0x06	; 6
    2aa4:	f1 50       	subi	r31, 0x01	; 1
    2aa6:	20 40       	sbci	r18, 0x00	; 0
    2aa8:	80 40       	sbci	r24, 0x00	; 0
    2aaa:	e1 f7       	brne	.-8      	; 0x2aa4 <main+0x164>
    2aac:	00 c0       	rjmp	.+0      	; 0x2aae <main+0x16e>
    2aae:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ab0:	f7 01       	movw	r30, r14
    2ab2:	a6 82       	std	Z+6, r10	; 0x06
    2ab4:	53 c0       	rjmp	.+166    	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ab6:	f7 01       	movw	r30, r14
    2ab8:	b5 82       	std	Z+5, r11	; 0x05
    2aba:	ff e7       	ldi	r31, 0x7F	; 127
    2abc:	2a e1       	ldi	r18, 0x1A	; 26
    2abe:	86 e0       	ldi	r24, 0x06	; 6
    2ac0:	f1 50       	subi	r31, 0x01	; 1
    2ac2:	20 40       	sbci	r18, 0x00	; 0
    2ac4:	80 40       	sbci	r24, 0x00	; 0
    2ac6:	e1 f7       	brne	.-8      	; 0x2ac0 <main+0x180>
    2ac8:	00 c0       	rjmp	.+0      	; 0x2aca <main+0x18a>
    2aca:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2acc:	f7 01       	movw	r30, r14
    2ace:	b6 82       	std	Z+6, r11	; 0x06
    2ad0:	45 c0       	rjmp	.+138    	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	55 82       	std	Z+5, r5	; 0x05
    2ad6:	ff e7       	ldi	r31, 0x7F	; 127
    2ad8:	2a e1       	ldi	r18, 0x1A	; 26
    2ada:	86 e0       	ldi	r24, 0x06	; 6
    2adc:	f1 50       	subi	r31, 0x01	; 1
    2ade:	20 40       	sbci	r18, 0x00	; 0
    2ae0:	80 40       	sbci	r24, 0x00	; 0
    2ae2:	e1 f7       	brne	.-8      	; 0x2adc <main+0x19c>
    2ae4:	00 c0       	rjmp	.+0      	; 0x2ae6 <main+0x1a6>
    2ae6:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ae8:	f7 01       	movw	r30, r14
    2aea:	56 82       	std	Z+6, r5	; 0x06
    2aec:	37 c0       	rjmp	.+110    	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2aee:	f6 01       	movw	r30, r12
    2af0:	b5 82       	std	Z+5, r11	; 0x05
    2af2:	ff e7       	ldi	r31, 0x7F	; 127
    2af4:	2a e1       	ldi	r18, 0x1A	; 26
    2af6:	86 e0       	ldi	r24, 0x06	; 6
    2af8:	f1 50       	subi	r31, 0x01	; 1
    2afa:	20 40       	sbci	r18, 0x00	; 0
    2afc:	80 40       	sbci	r24, 0x00	; 0
    2afe:	e1 f7       	brne	.-8      	; 0x2af8 <main+0x1b8>
    2b00:	00 c0       	rjmp	.+0      	; 0x2b02 <main+0x1c2>
    2b02:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b04:	f6 01       	movw	r30, r12
    2b06:	b6 82       	std	Z+6, r11	; 0x06
    2b08:	29 c0       	rjmp	.+82     	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b0a:	f4 01       	movw	r30, r8
    2b0c:	05 83       	std	Z+5, r16	; 0x05
    2b0e:	ff e7       	ldi	r31, 0x7F	; 127
    2b10:	2a e1       	ldi	r18, 0x1A	; 26
    2b12:	86 e0       	ldi	r24, 0x06	; 6
    2b14:	f1 50       	subi	r31, 0x01	; 1
    2b16:	20 40       	sbci	r18, 0x00	; 0
    2b18:	80 40       	sbci	r24, 0x00	; 0
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <main+0x1d4>
    2b1c:	00 c0       	rjmp	.+0      	; 0x2b1e <main+0x1de>
    2b1e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b20:	f4 01       	movw	r30, r8
    2b22:	06 83       	std	Z+6, r16	; 0x06
    2b24:	1b c0       	rjmp	.+54     	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b26:	f6 01       	movw	r30, r12
    2b28:	05 83       	std	Z+5, r16	; 0x05
    2b2a:	ff e7       	ldi	r31, 0x7F	; 127
    2b2c:	2a e1       	ldi	r18, 0x1A	; 26
    2b2e:	86 e0       	ldi	r24, 0x06	; 6
    2b30:	f1 50       	subi	r31, 0x01	; 1
    2b32:	20 40       	sbci	r18, 0x00	; 0
    2b34:	80 40       	sbci	r24, 0x00	; 0
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <main+0x1f0>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <main+0x1fa>
    2b3a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b3c:	f6 01       	movw	r30, r12
    2b3e:	06 83       	std	Z+6, r16	; 0x06
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <main+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2b42:	f6 01       	movw	r30, r12
    2b44:	65 82       	std	Z+5, r6	; 0x05
    2b46:	ff e7       	ldi	r31, 0x7F	; 127
    2b48:	2a e1       	ldi	r18, 0x1A	; 26
    2b4a:	86 e0       	ldi	r24, 0x06	; 6
    2b4c:	f1 50       	subi	r31, 0x01	; 1
    2b4e:	20 40       	sbci	r18, 0x00	; 0
    2b50:	80 40       	sbci	r24, 0x00	; 0
    2b52:	e1 f7       	brne	.-8      	; 0x2b4c <main+0x20c>
    2b54:	00 c0       	rjmp	.+0      	; 0x2b56 <main+0x216>
    2b56:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2b58:	f6 01       	movw	r30, r12
    2b5a:	66 82       	std	Z+6, r6	; 0x06
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 1));
					break;
				default:
				break;
			}
			latest_gesture = NONE;
    2b5c:	10 92 25 21 	sts	0x2125, r1
			//twinkle(0, 0, 0);
		}
		
	
		if (ischarging()) 
    2b60:	25 da       	rcall	.-2998   	; 0x1fac <ischarging>
    2b62:	88 23       	and	r24, r24
    2b64:	f1 f0       	breq	.+60     	; 0x2ba2 <main+0x262>
		{
			if (core_status != STATUS_CHARGE)
    2b66:	80 91 41 21 	lds	r24, 0x2141
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <main+0x230>
    2b6e:	c7 c0       	rjmp	.+398    	; 0x2cfe <main+0x3be>
			{
				twinkle(0, 0, 255);
    2b70:	4f ef       	ldi	r20, 0xFF	; 255
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	1f da       	rcall	.-3010   	; 0x1fb6 <twinkle>
				shutdown_received = false;
    2b78:	10 92 31 21 	sts	0x2131, r1
				old_core_status = core_status;
    2b7c:	80 91 41 21 	lds	r24, 0x2141
    2b80:	80 93 40 21 	sts	0x2140, r24
				core_status = STATUS_CHARGE;
    2b84:	10 93 41 21 	sts	0x2141, r17
				change_adc_channel(core_status);
    2b88:	80 91 41 21 	lds	r24, 0x2141
    2b8c:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
				flag_initcharge = true;
    2b90:	10 93 37 21 	sts	0x2137, r17
				tc45_disable(&TCC4);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	98 e0       	ldi	r25, 0x08	; 8
    2b98:	1d d5       	rcall	.+2618   	; 0x35d4 <tc45_disable>
				tc45_enable(&TCC5);
    2b9a:	80 e4       	ldi	r24, 0x40	; 64
    2b9c:	98 e0       	ldi	r25, 0x08	; 8
    2b9e:	e8 d4       	rcall	.+2512   	; 0x3570 <tc45_enable>
    2ba0:	ae c0       	rjmp	.+348    	; 0x2cfe <main+0x3be>
			}
		}
		else 	
		{
			if (core_status == STATUS_CHARGE) {
    2ba2:	80 91 41 21 	lds	r24, 0x2141
    2ba6:	81 30       	cpi	r24, 0x01	; 1
    2ba8:	89 f4       	brne	.+34     	; 0x2bcc <main+0x28c>
				old_core_status = core_status;
    2baa:	80 91 41 21 	lds	r24, 0x2141
    2bae:	80 93 40 21 	sts	0x2140, r24
				core_status = STATUS_BATT_READ;
    2bb2:	70 92 41 21 	sts	0x2141, r7
				change_adc_channel(core_status);
    2bb6:	80 91 41 21 	lds	r24, 0x2141
    2bba:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
				tc45_disable(&TCC5);
    2bbe:	80 e4       	ldi	r24, 0x40	; 64
    2bc0:	98 e0       	ldi	r25, 0x08	; 8
    2bc2:	08 d5       	rcall	.+2576   	; 0x35d4 <tc45_disable>
				tc45_enable(&TCC4);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	98 e0       	ldi	r25, 0x08	; 8
    2bc8:	d3 d4       	rcall	.+2470   	; 0x3570 <tc45_enable>
				load_data_color_led();
    2bca:	20 da       	rcall	.-3008   	; 0x200c <load_data_color_led>
			}
			
			if (get_pulse_state() && core_status != STATUS_FFT_L && core_status != STATUS_FFT_R) {
    2bcc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <get_pulse_state>
    2bd0:	88 23       	and	r24, r24
    2bd2:	51 f0       	breq	.+20     	; 0x2be8 <main+0x2a8>
    2bd4:	80 91 41 21 	lds	r24, 0x2141
    2bd8:	82 30       	cpi	r24, 0x02	; 2
    2bda:	31 f0       	breq	.+12     	; 0x2be8 <main+0x2a8>
    2bdc:	80 91 41 21 	lds	r24, 0x2141
    2be0:	84 30       	cpi	r24, 0x04	; 4
    2be2:	11 f0       	breq	.+4      	; 0x2be8 <main+0x2a8>
				trigger_pulse_state_changed();
    2be4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <trigger_pulse_state_changed>
			}
			
			if (shutdown_received) {
    2be8:	80 91 31 21 	lds	r24, 0x2131
    2bec:	88 23       	and	r24, r24
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <main+0x2ce>
				old_core_status = core_status;
    2bf0:	80 91 41 21 	lds	r24, 0x2141
    2bf4:	80 93 40 21 	sts	0x2140, r24
				core_status = STATUS_NULL;
    2bf8:	10 92 41 21 	sts	0x2141, r1
				tc45_disable(&TCC4);
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	98 e0       	ldi	r25, 0x08	; 8
    2c00:	e9 d4       	rcall	.+2514   	; 0x35d4 <tc45_disable>
				save_led_to_eeprom();
    2c02:	57 dd       	rcall	.-1362   	; 0x26b2 <save_led_to_eeprom>
				twinkle(0, 0, 0);
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	d5 d9       	rcall	.-3158   	; 0x1fb6 <twinkle>
    2c0c:	78 c0       	rjmp	.+240    	; 0x2cfe <main+0x3be>
			}
			else if (get_and_clear_pulse_state_changed()) {
    2c0e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_and_clear_pulse_state_changed>
    2c12:	88 23       	and	r24, r24
    2c14:	59 f1       	breq	.+86     	; 0x2c6c <main+0x32c>
				if (get_pulse_state()) {
    2c16:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <get_pulse_state>
    2c1a:	88 23       	and	r24, r24
    2c1c:	a1 f0       	breq	.+40     	; 0x2c46 <main+0x306>
					// If new message is to turn on visualization and if it is already on then ignore it
					
					// Initialize the ADC by changing to correct channel
					fht_flag = true;
    2c1e:	10 93 44 21 	sts	0x2144, r17
					
					old_core_status = core_status;
    2c22:	80 91 41 21 	lds	r24, 0x2141
    2c26:	80 93 40 21 	sts	0x2140, r24
					core_status = STATUS_FFT_L;
    2c2a:	30 92 41 21 	sts	0x2141, r3
					change_adc_channel(core_status);
    2c2e:	80 91 41 21 	lds	r24, 0x2141
    2c32:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
					// Switch on visualization interrupt
					tc45_enable(&TCC4);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	98 e0       	ldi	r25, 0x08	; 8
    2c3a:	9a d4       	rcall	.+2356   	; 0x3570 <tc45_enable>
					// save state to CSR- the fact that visualization is on
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x01);
    2c3c:	61 2f       	mov	r22, r17
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	0e 94 b7 0a 	call	0x156e	; 0x156e <write_byte_eeprom>
    2c44:	5c c0       	rjmp	.+184    	; 0x2cfe <main+0x3be>
					// respond to CSR
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
    2c46:	10 92 44 21 	sts	0x2144, r1
					old_core_status = core_status;
    2c4a:	80 91 41 21 	lds	r24, 0x2141
    2c4e:	80 93 40 21 	sts	0x2140, r24
					core_status = STATUS_BATT_READ;
    2c52:	70 92 41 21 	sts	0x2141, r7
					change_adc_channel(core_status);
    2c56:	80 91 41 21 	lds	r24, 0x2141
    2c5a:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
					clear_led();
    2c5e:	c1 d9       	rcall	.-3198   	; 0x1fe2 <clear_led>
					// save the state to eeprom (Clear visualization was on)
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x00);
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	0e 94 b7 0a 	call	0x156e	; 0x156e <write_byte_eeprom>
					// Update LED from led_color_buf_data to last saved state
					load_data_color_led();
    2c68:	d1 d9       	rcall	.-3166   	; 0x200c <load_data_color_led>
    2c6a:	49 c0       	rjmp	.+146    	; 0x2cfe <main+0x3be>
					//send_response(new_message_ID, 0x01);
				}
			}
			else {
				// if the fht led function was turned on
				if (fht_flag == true)
    2c6c:	80 91 44 21 	lds	r24, 0x2144
    2c70:	81 30       	cpi	r24, 0x01	; 1
    2c72:	09 f0       	breq	.+2      	; 0x2c76 <main+0x336>
    2c74:	44 c0       	rjmp	.+136    	; 0x2cfe <main+0x3be>
				{
					if (flag_fft == true)
    2c76:	80 91 00 21 	lds	r24, 0x2100
    2c7a:	88 23       	and	r24, r24
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <main+0x340>
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <main+0x3be>
					{
						
						if (core_status == STATUS_FFT_L)
    2c80:	80 91 41 21 	lds	r24, 0x2141
    2c84:	82 30       	cpi	r24, 0x02	; 2
    2c86:	81 f4       	brne	.+32     	; 0x2ca8 <main+0x368>
						{
							//	usart_putchar(M_USART, 0x55);

							run();
    2c88:	0e 94 33 08 	call	0x1066	; 0x1066 <run>
							old_core_status = core_status;
    2c8c:	80 91 41 21 	lds	r24, 0x2141
    2c90:	80 93 40 21 	sts	0x2140, r24
							core_status = STATUS_FFT_R;
    2c94:	40 92 41 21 	sts	0x2141, r4
							change_adc_channel(core_status);
    2c98:	80 91 41 21 	lds	r24, 0x2141
    2c9c:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
							tc45_enable(&TCC4);
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	98 e0       	ldi	r25, 0x08	; 8
    2ca4:	65 d4       	rcall	.+2250   	; 0x3570 <tc45_enable>
    2ca6:	29 c0       	rjmp	.+82     	; 0x2cfa <main+0x3ba>
						}
						else if (core_status == STATUS_FFT_R)
    2ca8:	80 91 41 21 	lds	r24, 0x2141
    2cac:	84 30       	cpi	r24, 0x04	; 4
    2cae:	29 f5       	brne	.+74     	; 0x2cfa <main+0x3ba>
						{
							//	usart_putchar(M_USART, 0x66);

							run();
    2cb0:	0e 94 33 08 	call	0x1066	; 0x1066 <run>
							
							if (ischarging())
    2cb4:	7b d9       	rcall	.-3338   	; 0x1fac <ischarging>
    2cb6:	88 23       	and	r24, r24
    2cb8:	99 f0       	breq	.+38     	; 0x2ce0 <main+0x3a0>
							{
								old_core_status = core_status;
    2cba:	80 91 41 21 	lds	r24, 0x2141
    2cbe:	80 93 40 21 	sts	0x2140, r24
								core_status = STATUS_CHARGE;
    2cc2:	10 93 41 21 	sts	0x2141, r17
								change_adc_channel(core_status);
    2cc6:	80 91 41 21 	lds	r24, 0x2141
    2cca:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
								flag_initcharge = true;
    2cce:	10 93 37 21 	sts	0x2137, r17
								tc45_disable(&TCC4);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	98 e0       	ldi	r25, 0x08	; 8
    2cd6:	7e d4       	rcall	.+2300   	; 0x35d4 <tc45_disable>
								tc45_enable(&TCC5);
    2cd8:	80 e4       	ldi	r24, 0x40	; 64
    2cda:	98 e0       	ldi	r25, 0x08	; 8
    2cdc:	49 d4       	rcall	.+2194   	; 0x3570 <tc45_enable>
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <main+0x3ba>
							}
							else
							{
								old_core_status = core_status;
    2ce0:	80 91 41 21 	lds	r24, 0x2141
    2ce4:	80 93 40 21 	sts	0x2140, r24
								core_status = STATUS_FFT_L;
    2ce8:	30 92 41 21 	sts	0x2141, r3
								change_adc_channel(core_status);
    2cec:	80 91 41 21 	lds	r24, 0x2141
    2cf0:	0e 94 8d 04 	call	0x91a	; 0x91a <change_adc_channel>
								tc45_enable(&TCC4);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	98 e0       	ldi	r25, 0x08	; 8
    2cf8:	3b d4       	rcall	.+2166   	; 0x3570 <tc45_enable>
							}
							
						}
						
						flag_fft = false;
    2cfa:	10 92 00 21 	sts	0x2100, r1
				}
			}
		}

	#ifdef ENABLE_WDT
		if (flag_timerd5) {
    2cfe:	80 91 7c 2a 	lds	r24, 0x2A7C
    2d02:	88 23       	and	r24, r24
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <main+0x3c8>
    2d06:	b5 ce       	rjmp	.-662    	; 0x2a72 <main+0x132>
			flag_timerd5 = false;
    2d08:	10 92 7c 2a 	sts	0x2A7C, r1
			wdt_reset(); 
    2d0c:	a8 95       	wdr
    2d0e:	a7 ce       	rjmp	.-690    	; 0x2a5e <main+0x11e>

00002d10 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	80 93 70 00 	sts	0x0070, r24
    2d16:	80 93 71 00 	sts	0x0071, r24
    2d1a:	80 93 72 00 	sts	0x0072, r24
    2d1e:	80 93 73 00 	sts	0x0073, r24
    2d22:	80 93 74 00 	sts	0x0074, r24
    2d26:	80 93 75 00 	sts	0x0075, r24
    2d2a:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d2e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2d30:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2d32:	e0 e5       	ldi	r30, 0x50	; 80
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	82 60       	ori	r24, 0x02	; 2
    2d3a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d3c:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2d3e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2d40:	81 ff       	sbrs	r24, 1
    2d42:	fd cf       	rjmp	.-6      	; 0x2d3e <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2d44:	61 e0       	ldi	r22, 0x01	; 1
    2d46:	80 e4       	ldi	r24, 0x40	; 64
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	7a d1       	rcall	.+756    	; 0x3040 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d4c:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2d4e:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2d50:	e0 e5       	ldi	r30, 0x50	; 80
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d5a:	9f bf       	out	0x3f, r25	; 63
    2d5c:	08 95       	ret

00002d5e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d5e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2d60:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2d62:	e8 2f       	mov	r30, r24
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	e0 59       	subi	r30, 0x90	; 144
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	60 95       	com	r22
    2d6c:	80 81       	ld	r24, Z
    2d6e:	68 23       	and	r22, r24
    2d70:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d72:	9f bf       	out	0x3f, r25	; 63
    2d74:	08 95       	ret

00002d76 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d76:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2d78:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2d7a:	e8 2f       	mov	r30, r24
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	e0 59       	subi	r30, 0x90	; 144
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	80 81       	ld	r24, Z
    2d84:	68 2b       	or	r22, r24
    2d86:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d88:	9f bf       	out	0x3f, r25	; 63
    2d8a:	08 95       	ret

00002d8c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	fc 01       	movw	r30, r24
    2d92:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2d98:	c6 2f       	mov	r28, r22
    2d9a:	d0 e0       	ldi	r29, 0x00	; 0
    2d9c:	de 01       	movw	r26, r28
    2d9e:	02 2e       	mov	r0, r18
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <ioport_configure_port_pin+0x1a>
    2da2:	b5 95       	asr	r27
    2da4:	a7 95       	ror	r26
    2da6:	0a 94       	dec	r0
    2da8:	e2 f7       	brpl	.-8      	; 0x2da2 <ioport_configure_port_pin+0x16>
    2daa:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2dac:	50 83       	st	Z, r21
    2dae:	2f 5f       	subi	r18, 0xFF	; 255
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2db4:	28 30       	cpi	r18, 0x08	; 8
    2db6:	31 05       	cpc	r19, r1
    2db8:	89 f7       	brne	.-30     	; 0x2d9c <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2dba:	40 ff       	sbrs	r20, 0
    2dbc:	0a c0       	rjmp	.+20     	; 0x2dd2 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2dbe:	41 ff       	sbrs	r20, 1
    2dc0:	03 c0       	rjmp	.+6      	; 0x2dc8 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	65 83       	std	Z+5, r22	; 0x05
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2dc8:	fc 01       	movw	r30, r24
    2dca:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2dcc:	fc 01       	movw	r30, r24
    2dce:	61 83       	std	Z+1, r22	; 0x01
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	08 95       	ret

00002ddc <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    2ddc:	9c 01       	movw	r18, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2dde:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2de0:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2de2:	21 15       	cp	r18, r1
    2de4:	32 40       	sbci	r19, 0x02	; 2
    2de6:	21 f4       	brne	.+8      	; 0x2df0 <adc_set_callback+0x14>
		adca_callback = callback;
    2de8:	60 93 ad 2a 	sts	0x2AAD, r22
    2dec:	70 93 ae 2a 	sts	0x2AAE, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2df0:	9f bf       	out	0x3f, r25	; 63
    2df2:	08 95       	ret

00002df4 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2df4:	81 15       	cp	r24, r1
    2df6:	92 40       	sbci	r25, 0x02	; 2
    2df8:	59 f4       	brne	.+22     	; 0x2e10 <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2dfa:	80 91 45 21 	lds	r24, 0x2145
    2dfe:	91 e0       	ldi	r25, 0x01	; 1
    2e00:	98 0f       	add	r25, r24
    2e02:	90 93 45 21 	sts	0x2145, r25
    2e06:	81 11       	cpse	r24, r1
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2e0a:	62 e0       	ldi	r22, 0x02	; 2
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	a7 cf       	rjmp	.-178    	; 0x2d5e <sysclk_enable_module>
    2e10:	08 95       	ret

00002e12 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2e12:	81 15       	cp	r24, r1
    2e14:	92 40       	sbci	r25, 0x02	; 2
    2e16:	51 f4       	brne	.+20     	; 0x2e2c <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2e18:	80 91 45 21 	lds	r24, 0x2145
    2e1c:	81 50       	subi	r24, 0x01	; 1
    2e1e:	80 93 45 21 	sts	0x2145, r24
    2e22:	81 11       	cpse	r24, r1
    2e24:	03 c0       	rjmp	.+6      	; 0x2e2c <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2e26:	62 e0       	ldi	r22, 0x02	; 2
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	a5 cf       	rjmp	.-182    	; 0x2d76 <sysclk_disable_module>
    2e2c:	08 95       	ret

00002e2e <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2e2e:	1f 93       	push	r17
    2e30:	cf 93       	push	r28
    2e32:	df 93       	push	r29
    2e34:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e36:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2e38:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2e3a:	dc df       	rcall	.-72     	; 0x2df4 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2e3c:	88 81       	ld	r24, Y
    2e3e:	81 60       	ori	r24, 0x01	; 1
    2e40:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e42:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e44:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2e46:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2e48:	e7 ea       	ldi	r30, 0xA7	; 167
    2e4a:	fa e2       	ldi	r31, 0x2A	; 42
    2e4c:	81 81       	ldd	r24, Z+1	; 0x01
    2e4e:	8f 5f       	subi	r24, 0xFF	; 255
    2e50:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e52:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2e54:	df 91       	pop	r29
    2e56:	cf 91       	pop	r28
    2e58:	1f 91       	pop	r17
    2e5a:	08 95       	ret

00002e5c <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    2e5c:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e5e:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2e60:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 81       	ld	r18, Z
    2e66:	2e 7f       	andi	r18, 0xFE	; 254
    2e68:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    2e6a:	d3 df       	rcall	.-90     	; 0x2e12 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e6c:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e6e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2e70:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2e72:	e7 ea       	ldi	r30, 0xA7	; 167
    2e74:	fa e2       	ldi	r31, 0x2A	; 42
    2e76:	81 81       	ldd	r24, Z+1	; 0x01
    2e78:	81 50       	subi	r24, 0x01	; 1
    2e7a:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e7c:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2e82:	1f 92       	push	r1
    2e84:	0f 92       	push	r0
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	0f 92       	push	r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	2f 93       	push	r18
    2e8e:	3f 93       	push	r19
    2e90:	4f 93       	push	r20
    2e92:	5f 93       	push	r21
    2e94:	6f 93       	push	r22
    2e96:	7f 93       	push	r23
    2e98:	8f 93       	push	r24
    2e9a:	9f 93       	push	r25
    2e9c:	af 93       	push	r26
    2e9e:	bf 93       	push	r27
    2ea0:	ef 93       	push	r30
    2ea2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2ea4:	40 91 24 02 	lds	r20, 0x0224
    2ea8:	50 91 25 02 	lds	r21, 0x0225
    2eac:	e0 91 ad 2a 	lds	r30, 0x2AAD
    2eb0:	f0 91 ae 2a 	lds	r31, 0x2AAE
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	92 e0       	ldi	r25, 0x02	; 2
    2eba:	09 95       	icall
}
    2ebc:	ff 91       	pop	r31
    2ebe:	ef 91       	pop	r30
    2ec0:	bf 91       	pop	r27
    2ec2:	af 91       	pop	r26
    2ec4:	9f 91       	pop	r25
    2ec6:	8f 91       	pop	r24
    2ec8:	7f 91       	pop	r23
    2eca:	6f 91       	pop	r22
    2ecc:	5f 91       	pop	r21
    2ece:	4f 91       	pop	r20
    2ed0:	3f 91       	pop	r19
    2ed2:	2f 91       	pop	r18
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

00002ede <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
    2ee4:	0f 93       	push	r16
    2ee6:	1f 93       	push	r17
    2ee8:	cf 93       	push	r28
    2eea:	df 93       	push	r29
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2eec:	81 15       	cp	r24, r1
    2eee:	22 e0       	ldi	r18, 0x02	; 2
    2ef0:	92 07       	cpc	r25, r18
    2ef2:	61 f5       	brne	.+88     	; 0x2f4c <adc_write_configuration+0x6e>
    2ef4:	8b 01       	movw	r16, r22
    2ef6:	ec 01       	movw	r28, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2ef8:	61 e2       	ldi	r22, 0x21	; 33
    2efa:	70 e0       	ldi	r23, 0x00	; 0
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	f0 d0       	rcall	.+480    	; 0x30e0 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2f00:	e8 2e       	mov	r14, r24
    2f02:	f1 2c       	mov	r15, r1
    2f04:	60 e2       	ldi	r22, 0x20	; 32
    2f06:	70 e0       	ldi	r23, 0x00	; 0
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	ea d0       	rcall	.+468    	; 0x30e0 <nvm_read_byte>
		data <<= 8;
    2f0c:	fe 2c       	mov	r15, r14
    2f0e:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    2f10:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f12:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    2f14:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2f16:	ce 01       	movw	r24, r28
    2f18:	6d df       	rcall	.-294    	; 0x2df4 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2f1a:	88 81       	ld	r24, Y
    2f1c:	81 70       	andi	r24, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    2f1e:	92 e0       	ldi	r25, 0x02	; 2
    2f20:	98 83       	st	Y, r25
	adc->CAL = cal;
    2f22:	ec 86       	std	Y+12, r14	; 0x0c
    2f24:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    2f26:	f8 01       	movw	r30, r16
    2f28:	24 81       	ldd	r18, Z+4	; 0x04
    2f2a:	35 81       	ldd	r19, Z+5	; 0x05
    2f2c:	28 8f       	std	Y+24, r18	; 0x18
    2f2e:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
    2f32:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    2f38:	92 81       	ldd	r25, Z+2	; 0x02
    2f3a:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    2f3c:	90 81       	ld	r25, Z
    2f3e:	99 83       	std	Y+1, r25	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    2f40:	96 81       	ldd	r25, Z+6	; 0x06
    2f42:	98 87       	std	Y+8, r25	; 0x08

	adc->CTRLA = enable;
    2f44:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    2f46:	ce 01       	movw	r24, r28
    2f48:	64 df       	rcall	.-312    	; 0x2e12 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f4a:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    2f4c:	df 91       	pop	r29
    2f4e:	cf 91       	pop	r28
    2f50:	1f 91       	pop	r17
    2f52:	0f 91       	pop	r16
    2f54:	ff 90       	pop	r15
    2f56:	ef 90       	pop	r14
    2f58:	df 90       	pop	r13
    2f5a:	08 95       	ret

00002f5c <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
    2f66:	ec 01       	movw	r28, r24
    2f68:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f6a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2f6c:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2f6e:	42 df       	rcall	.-380    	; 0x2df4 <adc_enable_clock>

	conf->cmp = adc->CMP;
    2f70:	88 8d       	ldd	r24, Y+24	; 0x18
    2f72:	99 8d       	ldd	r25, Y+25	; 0x19
    2f74:	f8 01       	movw	r30, r16
    2f76:	84 83       	std	Z+4, r24	; 0x04
    2f78:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    2f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f80:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    2f8a:	88 85       	ldd	r24, Y+8	; 0x08
    2f8c:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    2f8e:	ce 01       	movw	r24, r28
    2f90:	40 df       	rcall	.-384    	; 0x2e12 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f92:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	08 95       	ret

00002fa0 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	ec 01       	movw	r28, r24
    2fac:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2fae:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2fb0:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    2fb2:	20 df       	rcall	.-448    	; 0x2df4 <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	80 81       	ld	r24, Z
    2fb8:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    2fba:	82 81       	ldd	r24, Z+2	; 0x02
    2fbc:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    2fbe:	81 81       	ldd	r24, Z+1	; 0x01
    2fc0:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    2fc2:	83 81       	ldd	r24, Z+3	; 0x03
    2fc4:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    2fc6:	84 81       	ldd	r24, Z+4	; 0x04
    2fc8:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    2fca:	85 81       	ldd	r24, Z+5	; 0x05
    2fcc:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    2fce:	86 81       	ldd	r24, Z+6	; 0x06
    2fd0:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    2fd2:	87 81       	ldd	r24, Z+7	; 0x07
    2fd4:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    2fd6:	80 85       	ldd	r24, Z+8	; 0x08
    2fd8:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    2fda:	81 85       	ldd	r24, Z+9	; 0x09
    2fdc:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    2fde:	ce 01       	movw	r24, r28
    2fe0:	18 df       	rcall	.-464    	; 0x2e12 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fe2:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2fe4:	df 91       	pop	r29
    2fe6:	cf 91       	pop	r28
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	ff 90       	pop	r15
    2fee:	08 95       	ret

00002ff0 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    2ff0:	ff 92       	push	r15
    2ff2:	0f 93       	push	r16
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    2ffa:	ec 01       	movw	r28, r24
    2ffc:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ffe:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3000:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3002:	f8 de       	rcall	.-528    	; 0x2df4 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3004:	88 a1       	ldd	r24, Y+32	; 0x20
    3006:	f8 01       	movw	r30, r16
    3008:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    300a:	8a a1       	ldd	r24, Y+34	; 0x22
    300c:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    300e:	89 a1       	ldd	r24, Y+33	; 0x21
    3010:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    3012:	8e a1       	ldd	r24, Y+38	; 0x26
    3014:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    3016:	8f a1       	ldd	r24, Y+39	; 0x27
    3018:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    301a:	88 a5       	ldd	r24, Y+40	; 0x28
    301c:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    301e:	89 a5       	ldd	r24, Y+41	; 0x29
    3020:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    3022:	8a a5       	ldd	r24, Y+42	; 0x2a
    3024:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    3026:	8b a5       	ldd	r24, Y+43	; 0x2b
    3028:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    302a:	8c a5       	ldd	r24, Y+44	; 0x2c
    302c:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    302e:	ce 01       	movw	r24, r28
    3030:	f0 de       	rcall	.-544    	; 0x2e12 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3032:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3034:	df 91       	pop	r29
    3036:	cf 91       	pop	r28
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	08 95       	ret

00003040 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3040:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3042:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3044:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3046:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3048:	60 83       	st	Z, r22
	ret                             // Return to caller
    304a:	08 95       	ret

0000304c <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    304c:	9c 01       	movw	r18, r24
    304e:	e0 ec       	ldi	r30, 0xC0	; 192
    3050:	f1 e0       	ldi	r31, 0x01	; 1
    3052:	97 85       	ldd	r25, Z+15	; 0x0f
    3054:	99 23       	and	r25, r25
    3056:	ec f3       	brlt	.-6      	; 0x3052 <nvm_eeprom_read_byte+0x6>
    3058:	f9 01       	movw	r30, r18
    305a:	f0 5f       	subi	r31, 0xF0	; 240
    305c:	80 81       	ld	r24, Z
    305e:	08 95       	ret

00003060 <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3060:	e0 ec       	ldi	r30, 0xC0	; 192
    3062:	f1 e0       	ldi	r31, 0x01	; 1
    3064:	87 85       	ldd	r24, Z+15	; 0x0f
    3066:	88 23       	and	r24, r24
    3068:	ec f3       	brlt	.-6      	; 0x3064 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    306a:	80 91 cf 01 	lds	r24, 0x01CF
    306e:	81 ff       	sbrs	r24, 1
    3070:	07 c0       	rjmp	.+14     	; 0x3080 <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3072:	86 e3       	ldi	r24, 0x36	; 54
    3074:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3078:	61 e0       	ldi	r22, 0x01	; 1
    307a:	8b ec       	ldi	r24, 0xCB	; 203
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	e0 cf       	rjmp	.-64     	; 0x3040 <ccp_write_io>
    3080:	08 95       	ret

00003082 <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3082:	e0 ec       	ldi	r30, 0xC0	; 192
    3084:	f1 e0       	ldi	r31, 0x01	; 1
    3086:	97 85       	ldd	r25, Z+15	; 0x0f
    3088:	99 23       	and	r25, r25
    308a:	ec f3       	brlt	.-6      	; 0x3086 <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    308c:	e8 2f       	mov	r30, r24
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	f0 5f       	subi	r31, 0xF0	; 240
    3092:	60 83       	st	Z, r22
    3094:	08 95       	ret

00003096 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	18 2f       	mov	r17, r24
    30a2:	f9 2e       	mov	r15, r25
    30a4:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    30a6:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    30aa:	da df       	rcall	.-76     	; 0x3060 <nvm_eeprom_flush_buffer>
    30ac:	e0 ec       	ldi	r30, 0xC0	; 192
    30ae:	f1 e0       	ldi	r31, 0x01	; 1
    30b0:	27 85       	ldd	r18, Z+15	; 0x0f
    30b2:	22 23       	and	r18, r18
    30b4:	ec f3       	brlt	.-6      	; 0x30b0 <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    30b6:	6c 2f       	mov	r22, r28
    30b8:	81 2f       	mov	r24, r17
    30ba:	e3 df       	rcall	.-58     	; 0x3082 <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    30bc:	c0 ec       	ldi	r28, 0xC0	; 192
    30be:	d1 e0       	ldi	r29, 0x01	; 1
    30c0:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    30c2:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    30c4:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    30c6:	85 e3       	ldi	r24, 0x35	; 53
    30c8:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	8b ec       	ldi	r24, 0xCB	; 203
    30ce:	91 e0       	ldi	r25, 0x01	; 1
    30d0:	b7 df       	rcall	.-146    	; 0x3040 <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    30d2:	0a 87       	std	Y+10, r16	; 0x0a
}
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	08 95       	ret

000030e0 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    30e0:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    30e4:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    30e6:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    30e8:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    30ec:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    30ee:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    30f2:	08 95       	ret

000030f4 <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    30f4:	1f 92       	push	r1
    30f6:	0f 92       	push	r0
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	0f 92       	push	r0
    30fc:	11 24       	eor	r1, r1
    30fe:	2f 93       	push	r18
    3100:	3f 93       	push	r19
    3102:	4f 93       	push	r20
    3104:	5f 93       	push	r21
    3106:	6f 93       	push	r22
    3108:	7f 93       	push	r23
    310a:	8f 93       	push	r24
    310c:	9f 93       	push	r25
    310e:	af 93       	push	r26
    3110:	bf 93       	push	r27
    3112:	ef 93       	push	r30
    3114:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    3116:	e0 91 60 21 	lds	r30, 0x2160
    311a:	f0 91 61 21 	lds	r31, 0x2161
    311e:	30 97       	sbiw	r30, 0x00	; 0
    3120:	09 f0       	breq	.+2      	; 0x3124 <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    3122:	09 95       	icall
	}
}
    3124:	ff 91       	pop	r31
    3126:	ef 91       	pop	r30
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	0f 90       	pop	r0
    3142:	1f 90       	pop	r1
    3144:	18 95       	reti

00003146 <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    3146:	1f 92       	push	r1
    3148:	0f 92       	push	r0
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	0f 92       	push	r0
    314e:	11 24       	eor	r1, r1
    3150:	2f 93       	push	r18
    3152:	3f 93       	push	r19
    3154:	4f 93       	push	r20
    3156:	5f 93       	push	r21
    3158:	6f 93       	push	r22
    315a:	7f 93       	push	r23
    315c:	8f 93       	push	r24
    315e:	9f 93       	push	r25
    3160:	af 93       	push	r26
    3162:	bf 93       	push	r27
    3164:	ef 93       	push	r30
    3166:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    3168:	e0 91 5e 21 	lds	r30, 0x215E
    316c:	f0 91 5f 21 	lds	r31, 0x215F
    3170:	30 97       	sbiw	r30, 0x00	; 0
    3172:	09 f0       	breq	.+2      	; 0x3176 <__vector_13+0x30>
		tc45_tcc4_err_callback();
    3174:	09 95       	icall
	}
}
    3176:	ff 91       	pop	r31
    3178:	ef 91       	pop	r30
    317a:	bf 91       	pop	r27
    317c:	af 91       	pop	r26
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	7f 91       	pop	r23
    3184:	6f 91       	pop	r22
    3186:	5f 91       	pop	r21
    3188:	4f 91       	pop	r20
    318a:	3f 91       	pop	r19
    318c:	2f 91       	pop	r18
    318e:	0f 90       	pop	r0
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	0f 90       	pop	r0
    3194:	1f 90       	pop	r1
    3196:	18 95       	reti

00003198 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    3198:	1f 92       	push	r1
    319a:	0f 92       	push	r0
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	0f 92       	push	r0
    31a0:	11 24       	eor	r1, r1
    31a2:	2f 93       	push	r18
    31a4:	3f 93       	push	r19
    31a6:	4f 93       	push	r20
    31a8:	5f 93       	push	r21
    31aa:	6f 93       	push	r22
    31ac:	7f 93       	push	r23
    31ae:	8f 93       	push	r24
    31b0:	9f 93       	push	r25
    31b2:	af 93       	push	r26
    31b4:	bf 93       	push	r27
    31b6:	ef 93       	push	r30
    31b8:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    31ba:	e0 91 5c 21 	lds	r30, 0x215C
    31be:	f0 91 5d 21 	lds	r31, 0x215D
    31c2:	30 97       	sbiw	r30, 0x00	; 0
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    31c6:	09 95       	icall
	}
}
    31c8:	ff 91       	pop	r31
    31ca:	ef 91       	pop	r30
    31cc:	bf 91       	pop	r27
    31ce:	af 91       	pop	r26
    31d0:	9f 91       	pop	r25
    31d2:	8f 91       	pop	r24
    31d4:	7f 91       	pop	r23
    31d6:	6f 91       	pop	r22
    31d8:	5f 91       	pop	r21
    31da:	4f 91       	pop	r20
    31dc:	3f 91       	pop	r19
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	0f 90       	pop	r0
    31e6:	1f 90       	pop	r1
    31e8:	18 95       	reti

000031ea <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    31ea:	1f 92       	push	r1
    31ec:	0f 92       	push	r0
    31ee:	0f b6       	in	r0, 0x3f	; 63
    31f0:	0f 92       	push	r0
    31f2:	11 24       	eor	r1, r1
    31f4:	2f 93       	push	r18
    31f6:	3f 93       	push	r19
    31f8:	4f 93       	push	r20
    31fa:	5f 93       	push	r21
    31fc:	6f 93       	push	r22
    31fe:	7f 93       	push	r23
    3200:	8f 93       	push	r24
    3202:	9f 93       	push	r25
    3204:	af 93       	push	r26
    3206:	bf 93       	push	r27
    3208:	ef 93       	push	r30
    320a:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    320c:	e0 91 5a 21 	lds	r30, 0x215A
    3210:	f0 91 5b 21 	lds	r31, 0x215B
    3214:	30 97       	sbiw	r30, 0x00	; 0
    3216:	09 f0       	breq	.+2      	; 0x321a <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    3218:	09 95       	icall
	}
}
    321a:	ff 91       	pop	r31
    321c:	ef 91       	pop	r30
    321e:	bf 91       	pop	r27
    3220:	af 91       	pop	r26
    3222:	9f 91       	pop	r25
    3224:	8f 91       	pop	r24
    3226:	7f 91       	pop	r23
    3228:	6f 91       	pop	r22
    322a:	5f 91       	pop	r21
    322c:	4f 91       	pop	r20
    322e:	3f 91       	pop	r19
    3230:	2f 91       	pop	r18
    3232:	0f 90       	pop	r0
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	0f 90       	pop	r0
    3238:	1f 90       	pop	r1
    323a:	18 95       	reti

0000323c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    323c:	1f 92       	push	r1
    323e:	0f 92       	push	r0
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	0f 92       	push	r0
    3244:	11 24       	eor	r1, r1
    3246:	2f 93       	push	r18
    3248:	3f 93       	push	r19
    324a:	4f 93       	push	r20
    324c:	5f 93       	push	r21
    324e:	6f 93       	push	r22
    3250:	7f 93       	push	r23
    3252:	8f 93       	push	r24
    3254:	9f 93       	push	r25
    3256:	af 93       	push	r26
    3258:	bf 93       	push	r27
    325a:	ef 93       	push	r30
    325c:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    325e:	e0 91 58 21 	lds	r30, 0x2158
    3262:	f0 91 59 21 	lds	r31, 0x2159
    3266:	30 97       	sbiw	r30, 0x00	; 0
    3268:	09 f0       	breq	.+2      	; 0x326c <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    326a:	09 95       	icall
	}
}
    326c:	ff 91       	pop	r31
    326e:	ef 91       	pop	r30
    3270:	bf 91       	pop	r27
    3272:	af 91       	pop	r26
    3274:	9f 91       	pop	r25
    3276:	8f 91       	pop	r24
    3278:	7f 91       	pop	r23
    327a:	6f 91       	pop	r22
    327c:	5f 91       	pop	r21
    327e:	4f 91       	pop	r20
    3280:	3f 91       	pop	r19
    3282:	2f 91       	pop	r18
    3284:	0f 90       	pop	r0
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	0f 90       	pop	r0
    328a:	1f 90       	pop	r1
    328c:	18 95       	reti

0000328e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    328e:	1f 92       	push	r1
    3290:	0f 92       	push	r0
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	0f 92       	push	r0
    3296:	11 24       	eor	r1, r1
    3298:	2f 93       	push	r18
    329a:	3f 93       	push	r19
    329c:	4f 93       	push	r20
    329e:	5f 93       	push	r21
    32a0:	6f 93       	push	r22
    32a2:	7f 93       	push	r23
    32a4:	8f 93       	push	r24
    32a6:	9f 93       	push	r25
    32a8:	af 93       	push	r26
    32aa:	bf 93       	push	r27
    32ac:	ef 93       	push	r30
    32ae:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    32b0:	e0 91 56 21 	lds	r30, 0x2156
    32b4:	f0 91 57 21 	lds	r31, 0x2157
    32b8:	30 97       	sbiw	r30, 0x00	; 0
    32ba:	09 f0       	breq	.+2      	; 0x32be <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    32bc:	09 95       	icall
	}
}
    32be:	ff 91       	pop	r31
    32c0:	ef 91       	pop	r30
    32c2:	bf 91       	pop	r27
    32c4:	af 91       	pop	r26
    32c6:	9f 91       	pop	r25
    32c8:	8f 91       	pop	r24
    32ca:	7f 91       	pop	r23
    32cc:	6f 91       	pop	r22
    32ce:	5f 91       	pop	r21
    32d0:	4f 91       	pop	r20
    32d2:	3f 91       	pop	r19
    32d4:	2f 91       	pop	r18
    32d6:	0f 90       	pop	r0
    32d8:	0f be       	out	0x3f, r0	; 63
    32da:	0f 90       	pop	r0
    32dc:	1f 90       	pop	r1
    32de:	18 95       	reti

000032e0 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    32e0:	1f 92       	push	r1
    32e2:	0f 92       	push	r0
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	0f 92       	push	r0
    32e8:	11 24       	eor	r1, r1
    32ea:	2f 93       	push	r18
    32ec:	3f 93       	push	r19
    32ee:	4f 93       	push	r20
    32f0:	5f 93       	push	r21
    32f2:	6f 93       	push	r22
    32f4:	7f 93       	push	r23
    32f6:	8f 93       	push	r24
    32f8:	9f 93       	push	r25
    32fa:	af 93       	push	r26
    32fc:	bf 93       	push	r27
    32fe:	ef 93       	push	r30
    3300:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    3302:	e0 91 54 21 	lds	r30, 0x2154
    3306:	f0 91 55 21 	lds	r31, 0x2155
    330a:	30 97       	sbiw	r30, 0x00	; 0
    330c:	09 f0       	breq	.+2      	; 0x3310 <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    330e:	09 95       	icall
	}
}
    3310:	ff 91       	pop	r31
    3312:	ef 91       	pop	r30
    3314:	bf 91       	pop	r27
    3316:	af 91       	pop	r26
    3318:	9f 91       	pop	r25
    331a:	8f 91       	pop	r24
    331c:	7f 91       	pop	r23
    331e:	6f 91       	pop	r22
    3320:	5f 91       	pop	r21
    3322:	4f 91       	pop	r20
    3324:	3f 91       	pop	r19
    3326:	2f 91       	pop	r18
    3328:	0f 90       	pop	r0
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	0f 90       	pop	r0
    332e:	1f 90       	pop	r1
    3330:	18 95       	reti

00003332 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    3332:	1f 92       	push	r1
    3334:	0f 92       	push	r0
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	0f 92       	push	r0
    333a:	11 24       	eor	r1, r1
    333c:	2f 93       	push	r18
    333e:	3f 93       	push	r19
    3340:	4f 93       	push	r20
    3342:	5f 93       	push	r21
    3344:	6f 93       	push	r22
    3346:	7f 93       	push	r23
    3348:	8f 93       	push	r24
    334a:	9f 93       	push	r25
    334c:	af 93       	push	r26
    334e:	bf 93       	push	r27
    3350:	ef 93       	push	r30
    3352:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    3354:	e0 91 52 21 	lds	r30, 0x2152
    3358:	f0 91 53 21 	lds	r31, 0x2153
    335c:	30 97       	sbiw	r30, 0x00	; 0
    335e:	09 f0       	breq	.+2      	; 0x3362 <__vector_19+0x30>
		tc45_tcc5_err_callback();
    3360:	09 95       	icall
	}
}
    3362:	ff 91       	pop	r31
    3364:	ef 91       	pop	r30
    3366:	bf 91       	pop	r27
    3368:	af 91       	pop	r26
    336a:	9f 91       	pop	r25
    336c:	8f 91       	pop	r24
    336e:	7f 91       	pop	r23
    3370:	6f 91       	pop	r22
    3372:	5f 91       	pop	r21
    3374:	4f 91       	pop	r20
    3376:	3f 91       	pop	r19
    3378:	2f 91       	pop	r18
    337a:	0f 90       	pop	r0
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	0f 90       	pop	r0
    3380:	1f 90       	pop	r1
    3382:	18 95       	reti

00003384 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    3384:	1f 92       	push	r1
    3386:	0f 92       	push	r0
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	0f 92       	push	r0
    338c:	11 24       	eor	r1, r1
    338e:	2f 93       	push	r18
    3390:	3f 93       	push	r19
    3392:	4f 93       	push	r20
    3394:	5f 93       	push	r21
    3396:	6f 93       	push	r22
    3398:	7f 93       	push	r23
    339a:	8f 93       	push	r24
    339c:	9f 93       	push	r25
    339e:	af 93       	push	r26
    33a0:	bf 93       	push	r27
    33a2:	ef 93       	push	r30
    33a4:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    33a6:	e0 91 50 21 	lds	r30, 0x2150
    33aa:	f0 91 51 21 	lds	r31, 0x2151
    33ae:	30 97       	sbiw	r30, 0x00	; 0
    33b0:	09 f0       	breq	.+2      	; 0x33b4 <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    33b2:	09 95       	icall
	}
}
    33b4:	ff 91       	pop	r31
    33b6:	ef 91       	pop	r30
    33b8:	bf 91       	pop	r27
    33ba:	af 91       	pop	r26
    33bc:	9f 91       	pop	r25
    33be:	8f 91       	pop	r24
    33c0:	7f 91       	pop	r23
    33c2:	6f 91       	pop	r22
    33c4:	5f 91       	pop	r21
    33c6:	4f 91       	pop	r20
    33c8:	3f 91       	pop	r19
    33ca:	2f 91       	pop	r18
    33cc:	0f 90       	pop	r0
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	0f 90       	pop	r0
    33d2:	1f 90       	pop	r1
    33d4:	18 95       	reti

000033d6 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    33d6:	1f 92       	push	r1
    33d8:	0f 92       	push	r0
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	0f 92       	push	r0
    33de:	11 24       	eor	r1, r1
    33e0:	2f 93       	push	r18
    33e2:	3f 93       	push	r19
    33e4:	4f 93       	push	r20
    33e6:	5f 93       	push	r21
    33e8:	6f 93       	push	r22
    33ea:	7f 93       	push	r23
    33ec:	8f 93       	push	r24
    33ee:	9f 93       	push	r25
    33f0:	af 93       	push	r26
    33f2:	bf 93       	push	r27
    33f4:	ef 93       	push	r30
    33f6:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    33f8:	e0 91 4e 21 	lds	r30, 0x214E
    33fc:	f0 91 4f 21 	lds	r31, 0x214F
    3400:	30 97       	sbiw	r30, 0x00	; 0
    3402:	09 f0       	breq	.+2      	; 0x3406 <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    3404:	09 95       	icall
	}
}
    3406:	ff 91       	pop	r31
    3408:	ef 91       	pop	r30
    340a:	bf 91       	pop	r27
    340c:	af 91       	pop	r26
    340e:	9f 91       	pop	r25
    3410:	8f 91       	pop	r24
    3412:	7f 91       	pop	r23
    3414:	6f 91       	pop	r22
    3416:	5f 91       	pop	r21
    3418:	4f 91       	pop	r20
    341a:	3f 91       	pop	r19
    341c:	2f 91       	pop	r18
    341e:	0f 90       	pop	r0
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	0f 90       	pop	r0
    3424:	1f 90       	pop	r1
    3426:	18 95       	reti

00003428 <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    3428:	1f 92       	push	r1
    342a:	0f 92       	push	r0
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	0f 92       	push	r0
    3430:	11 24       	eor	r1, r1
    3432:	2f 93       	push	r18
    3434:	3f 93       	push	r19
    3436:	4f 93       	push	r20
    3438:	5f 93       	push	r21
    343a:	6f 93       	push	r22
    343c:	7f 93       	push	r23
    343e:	8f 93       	push	r24
    3440:	9f 93       	push	r25
    3442:	af 93       	push	r26
    3444:	bf 93       	push	r27
    3446:	ef 93       	push	r30
    3448:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    344a:	e0 91 4c 21 	lds	r30, 0x214C
    344e:	f0 91 4d 21 	lds	r31, 0x214D
    3452:	30 97       	sbiw	r30, 0x00	; 0
    3454:	09 f0       	breq	.+2      	; 0x3458 <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    3456:	09 95       	icall
	}
}
    3458:	ff 91       	pop	r31
    345a:	ef 91       	pop	r30
    345c:	bf 91       	pop	r27
    345e:	af 91       	pop	r26
    3460:	9f 91       	pop	r25
    3462:	8f 91       	pop	r24
    3464:	7f 91       	pop	r23
    3466:	6f 91       	pop	r22
    3468:	5f 91       	pop	r21
    346a:	4f 91       	pop	r20
    346c:	3f 91       	pop	r19
    346e:	2f 91       	pop	r18
    3470:	0f 90       	pop	r0
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	0f 90       	pop	r0
    3476:	1f 90       	pop	r1
    3478:	18 95       	reti

0000347a <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    347a:	1f 92       	push	r1
    347c:	0f 92       	push	r0
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	0f 92       	push	r0
    3482:	11 24       	eor	r1, r1
    3484:	2f 93       	push	r18
    3486:	3f 93       	push	r19
    3488:	4f 93       	push	r20
    348a:	5f 93       	push	r21
    348c:	6f 93       	push	r22
    348e:	7f 93       	push	r23
    3490:	8f 93       	push	r24
    3492:	9f 93       	push	r25
    3494:	af 93       	push	r26
    3496:	bf 93       	push	r27
    3498:	ef 93       	push	r30
    349a:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    349c:	e0 91 4a 21 	lds	r30, 0x214A
    34a0:	f0 91 4b 21 	lds	r31, 0x214B
    34a4:	30 97       	sbiw	r30, 0x00	; 0
    34a6:	09 f0       	breq	.+2      	; 0x34aa <__vector_37+0x30>
		tc45_tcd5_err_callback();
    34a8:	09 95       	icall
	}
}
    34aa:	ff 91       	pop	r31
    34ac:	ef 91       	pop	r30
    34ae:	bf 91       	pop	r27
    34b0:	af 91       	pop	r26
    34b2:	9f 91       	pop	r25
    34b4:	8f 91       	pop	r24
    34b6:	7f 91       	pop	r23
    34b8:	6f 91       	pop	r22
    34ba:	5f 91       	pop	r21
    34bc:	4f 91       	pop	r20
    34be:	3f 91       	pop	r19
    34c0:	2f 91       	pop	r18
    34c2:	0f 90       	pop	r0
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	0f 90       	pop	r0
    34c8:	1f 90       	pop	r1
    34ca:	18 95       	reti

000034cc <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    34cc:	1f 92       	push	r1
    34ce:	0f 92       	push	r0
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	0f 92       	push	r0
    34d4:	11 24       	eor	r1, r1
    34d6:	2f 93       	push	r18
    34d8:	3f 93       	push	r19
    34da:	4f 93       	push	r20
    34dc:	5f 93       	push	r21
    34de:	6f 93       	push	r22
    34e0:	7f 93       	push	r23
    34e2:	8f 93       	push	r24
    34e4:	9f 93       	push	r25
    34e6:	af 93       	push	r26
    34e8:	bf 93       	push	r27
    34ea:	ef 93       	push	r30
    34ec:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    34ee:	e0 91 48 21 	lds	r30, 0x2148
    34f2:	f0 91 49 21 	lds	r31, 0x2149
    34f6:	30 97       	sbiw	r30, 0x00	; 0
    34f8:	09 f0       	breq	.+2      	; 0x34fc <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    34fa:	09 95       	icall
	}
}
    34fc:	ff 91       	pop	r31
    34fe:	ef 91       	pop	r30
    3500:	bf 91       	pop	r27
    3502:	af 91       	pop	r26
    3504:	9f 91       	pop	r25
    3506:	8f 91       	pop	r24
    3508:	7f 91       	pop	r23
    350a:	6f 91       	pop	r22
    350c:	5f 91       	pop	r21
    350e:	4f 91       	pop	r20
    3510:	3f 91       	pop	r19
    3512:	2f 91       	pop	r18
    3514:	0f 90       	pop	r0
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	0f 90       	pop	r0
    351a:	1f 90       	pop	r1
    351c:	18 95       	reti

0000351e <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    351e:	1f 92       	push	r1
    3520:	0f 92       	push	r0
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	0f 92       	push	r0
    3526:	11 24       	eor	r1, r1
    3528:	2f 93       	push	r18
    352a:	3f 93       	push	r19
    352c:	4f 93       	push	r20
    352e:	5f 93       	push	r21
    3530:	6f 93       	push	r22
    3532:	7f 93       	push	r23
    3534:	8f 93       	push	r24
    3536:	9f 93       	push	r25
    3538:	af 93       	push	r26
    353a:	bf 93       	push	r27
    353c:	ef 93       	push	r30
    353e:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    3540:	e0 91 46 21 	lds	r30, 0x2146
    3544:	f0 91 47 21 	lds	r31, 0x2147
    3548:	30 97       	sbiw	r30, 0x00	; 0
    354a:	09 f0       	breq	.+2      	; 0x354e <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    354c:	09 95       	icall
	}
}
    354e:	ff 91       	pop	r31
    3550:	ef 91       	pop	r30
    3552:	bf 91       	pop	r27
    3554:	af 91       	pop	r26
    3556:	9f 91       	pop	r25
    3558:	8f 91       	pop	r24
    355a:	7f 91       	pop	r23
    355c:	6f 91       	pop	r22
    355e:	5f 91       	pop	r21
    3560:	4f 91       	pop	r20
    3562:	3f 91       	pop	r19
    3564:	2f 91       	pop	r18
    3566:	0f 90       	pop	r0
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	0f 90       	pop	r0
    356c:	1f 90       	pop	r1
    356e:	18 95       	reti

00003570 <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    3570:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3572:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3574:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3576:	28 2f       	mov	r18, r24
    3578:	39 2f       	mov	r19, r25
    357a:	21 15       	cp	r18, r1
    357c:	88 e0       	ldi	r24, 0x08	; 8
    357e:	38 07       	cpc	r19, r24
    3580:	39 f4       	brne	.+14     	; 0x3590 <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	83 e0       	ldi	r24, 0x03	; 3
    3586:	eb db       	rcall	.-2090   	; 0x2d5e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3588:	64 e0       	ldi	r22, 0x04	; 4
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	e8 db       	rcall	.-2096   	; 0x2d5e <sysclk_enable_module>
    358e:	17 c0       	rjmp	.+46     	; 0x35be <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    3590:	20 34       	cpi	r18, 0x40	; 64
    3592:	88 e0       	ldi	r24, 0x08	; 8
    3594:	38 07       	cpc	r19, r24
    3596:	39 f4       	brne	.+14     	; 0x35a6 <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3598:	62 e0       	ldi	r22, 0x02	; 2
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	e0 db       	rcall	.-2112   	; 0x2d5e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    359e:	64 e0       	ldi	r22, 0x04	; 4
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	dd db       	rcall	.-2118   	; 0x2d5e <sysclk_enable_module>
    35a4:	0c c0       	rjmp	.+24     	; 0x35be <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    35a6:	20 34       	cpi	r18, 0x40	; 64
    35a8:	39 40       	sbci	r19, 0x09	; 9
    35aa:	39 f4       	brne	.+14     	; 0x35ba <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    35ac:	62 e0       	ldi	r22, 0x02	; 2
    35ae:	84 e0       	ldi	r24, 0x04	; 4
    35b0:	d6 db       	rcall	.-2132   	; 0x2d5e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    35b2:	64 e0       	ldi	r22, 0x04	; 4
    35b4:	84 e0       	ldi	r24, 0x04	; 4
    35b6:	d3 db       	rcall	.-2138   	; 0x2d5e <sysclk_enable_module>
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35ba:	cf bf       	out	0x3f, r28	; 63
    35bc:	09 c0       	rjmp	.+18     	; 0x35d0 <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    35be:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    35c0:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    35c2:	e7 ea       	ldi	r30, 0xA7	; 167
    35c4:	fa e2       	ldi	r31, 0x2A	; 42
    35c6:	81 81       	ldd	r24, Z+1	; 0x01
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35cc:	9f bf       	out	0x3f, r25	; 63
    35ce:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    35d4:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    35d6:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    35d8:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    35da:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    35dc:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    35de:	e7 ea       	ldi	r30, 0xA7	; 167
    35e0:	fa e2       	ldi	r31, 0x2A	; 42
    35e2:	21 81       	ldd	r18, Z+1	; 0x01
    35e4:	21 50       	subi	r18, 0x01	; 1
    35e6:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    35e8:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    35ea:	28 2f       	mov	r18, r24
    35ec:	39 2f       	mov	r19, r25
    35ee:	21 15       	cp	r18, r1
    35f0:	88 e0       	ldi	r24, 0x08	; 8
    35f2:	38 07       	cpc	r19, r24
    35f4:	39 f4       	brne	.+14     	; 0x3604 <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	83 e0       	ldi	r24, 0x03	; 3
    35fa:	bd db       	rcall	.-2182   	; 0x2d76 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    35fc:	64 e0       	ldi	r22, 0x04	; 4
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	ba db       	rcall	.-2188   	; 0x2d76 <sysclk_disable_module>
    3602:	17 c0       	rjmp	.+46     	; 0x3632 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    3604:	20 34       	cpi	r18, 0x40	; 64
    3606:	88 e0       	ldi	r24, 0x08	; 8
    3608:	38 07       	cpc	r19, r24
    360a:	39 f4       	brne	.+14     	; 0x361a <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    360c:	62 e0       	ldi	r22, 0x02	; 2
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	b2 db       	rcall	.-2204   	; 0x2d76 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3612:	64 e0       	ldi	r22, 0x04	; 4
    3614:	83 e0       	ldi	r24, 0x03	; 3
    3616:	af db       	rcall	.-2210   	; 0x2d76 <sysclk_disable_module>
    3618:	0c c0       	rjmp	.+24     	; 0x3632 <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    361a:	20 34       	cpi	r18, 0x40	; 64
    361c:	39 40       	sbci	r19, 0x09	; 9
    361e:	39 f4       	brne	.+14     	; 0x362e <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    3620:	61 e0       	ldi	r22, 0x01	; 1
    3622:	84 e0       	ldi	r24, 0x04	; 4
    3624:	a8 db       	rcall	.-2224   	; 0x2d76 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3626:	64 e0       	ldi	r22, 0x04	; 4
    3628:	84 e0       	ldi	r24, 0x04	; 4
    362a:	a5 db       	rcall	.-2230   	; 0x2d76 <sysclk_disable_module>
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <tc45_disable+0x5e>
    362e:	cf bf       	out	0x3f, r28	; 63
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <tc45_disable+0x60>
    3632:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    3634:	cf 91       	pop	r28
    3636:	08 95       	ret

00003638 <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3638:	81 15       	cp	r24, r1
    363a:	28 e0       	ldi	r18, 0x08	; 8
    363c:	92 07       	cpc	r25, r18
    363e:	29 f4       	brne	.+10     	; 0x364a <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    3640:	60 93 60 21 	sts	0x2160, r22
    3644:	70 93 61 21 	sts	0x2161, r23
    3648:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    364a:	80 34       	cpi	r24, 0x40	; 64
    364c:	28 e0       	ldi	r18, 0x08	; 8
    364e:	92 07       	cpc	r25, r18
    3650:	29 f4       	brne	.+10     	; 0x365c <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    3652:	60 93 54 21 	sts	0x2154, r22
    3656:	70 93 55 21 	sts	0x2155, r23
    365a:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    365c:	80 34       	cpi	r24, 0x40	; 64
    365e:	99 40       	sbci	r25, 0x09	; 9
    3660:	21 f4       	brne	.+8      	; 0x366a <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    3662:	60 93 4c 21 	sts	0x214C, r22
    3666:	70 93 4d 21 	sts	0x214D, r23
    366a:	08 95       	ret

0000366c <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    366c:	1f 92       	push	r1
    366e:	0f 92       	push	r0
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	0f 92       	push	r0
    3674:	11 24       	eor	r1, r1
    3676:	2f 93       	push	r18
    3678:	3f 93       	push	r19
    367a:	4f 93       	push	r20
    367c:	5f 93       	push	r21
    367e:	6f 93       	push	r22
    3680:	7f 93       	push	r23
    3682:	8f 93       	push	r24
    3684:	9f 93       	push	r25
    3686:	af 93       	push	r26
    3688:	bf 93       	push	r27
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	ef 93       	push	r30
    3690:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    3692:	e0 91 62 21 	lds	r30, 0x2162
    3696:	f0 91 63 21 	lds	r31, 0x2163
    369a:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    369c:	83 ff       	sbrs	r24, 3
    369e:	08 c0       	rjmp	.+16     	; 0x36b0 <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    36a0:	88 60       	ori	r24, 0x08	; 8
    36a2:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    36a4:	83 e0       	ldi	r24, 0x03	; 3
    36a6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    36a8:	86 ef       	ldi	r24, 0xF6	; 246
    36aa:	80 93 6c 21 	sts	0x216C, r24
    36ae:	95 c0       	rjmp	.+298    	; 0x37da <__vector_11+0x16e>
    36b0:	98 2f       	mov	r25, r24
    36b2:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    36b4:	31 f0       	breq	.+12     	; 0x36c2 <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    36b6:	83 e0       	ldi	r24, 0x03	; 3
    36b8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    36ba:	8f ef       	ldi	r24, 0xFF	; 255
    36bc:	80 93 6c 21 	sts	0x216C, r24
    36c0:	8c c0       	rjmp	.+280    	; 0x37da <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    36c2:	86 ff       	sbrs	r24, 6
    36c4:	43 c0       	rjmp	.+134    	; 0x374c <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    36c6:	c2 e6       	ldi	r28, 0x62	; 98
    36c8:	d1 e2       	ldi	r29, 0x21	; 33
    36ca:	aa 81       	ldd	r26, Y+2	; 0x02
    36cc:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    36ce:	8c 81       	ldd	r24, Y+4	; 0x04
    36d0:	9d 81       	ldd	r25, Y+5	; 0x05
    36d2:	14 96       	adiw	r26, 0x04	; 4
    36d4:	2d 91       	ld	r18, X+
    36d6:	3c 91       	ld	r19, X
    36d8:	15 97       	sbiw	r26, 0x05	; 5
    36da:	82 17       	cp	r24, r18
    36dc:	93 07       	cpc	r25, r19
    36de:	6c f4       	brge	.+26     	; 0x36fa <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    36e0:	9c 01       	movw	r18, r24
    36e2:	2f 5f       	subi	r18, 0xFF	; 255
    36e4:	3f 4f       	sbci	r19, 0xFF	; 255
    36e6:	20 93 66 21 	sts	0x2166, r18
    36ea:	30 93 67 21 	sts	0x2167, r19
    36ee:	a8 0f       	add	r26, r24
    36f0:	b9 1f       	adc	r27, r25
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	8c 91       	ld	r24, X
    36f6:	87 83       	std	Z+7, r24	; 0x07
    36f8:	70 c0       	rjmp	.+224    	; 0x37da <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    36fa:	80 91 68 21 	lds	r24, 0x2168
    36fe:	90 91 69 21 	lds	r25, 0x2169
    3702:	18 96       	adiw	r26, 0x08	; 8
    3704:	2d 91       	ld	r18, X+
    3706:	3c 91       	ld	r19, X
    3708:	19 97       	sbiw	r26, 0x09	; 9
    370a:	82 17       	cp	r24, r18
    370c:	93 07       	cpc	r25, r19
    370e:	c8 f4       	brcc	.+50     	; 0x3742 <__vector_11+0xd6>

		if (transfer.read) {
    3710:	20 91 6a 21 	lds	r18, 0x216A
    3714:	22 23       	and	r18, r18
    3716:	21 f0       	breq	.+8      	; 0x3720 <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    3718:	86 81       	ldd	r24, Z+6	; 0x06
    371a:	81 60       	ori	r24, 0x01	; 1
    371c:	86 83       	std	Z+6, r24	; 0x06
    371e:	5d c0       	rjmp	.+186    	; 0x37da <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    3720:	16 96       	adiw	r26, 0x06	; 6
    3722:	2d 91       	ld	r18, X+
    3724:	3c 91       	ld	r19, X
    3726:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    3728:	ac 01       	movw	r20, r24
    372a:	4f 5f       	subi	r20, 0xFF	; 255
    372c:	5f 4f       	sbci	r21, 0xFF	; 255
    372e:	40 93 68 21 	sts	0x2168, r20
    3732:	50 93 69 21 	sts	0x2169, r21
    3736:	d9 01       	movw	r26, r18
    3738:	a8 0f       	add	r26, r24
    373a:	b9 1f       	adc	r27, r25
    373c:	8c 91       	ld	r24, X
    373e:	87 83       	std	Z+7, r24	; 0x07
    3740:	4c c0       	rjmp	.+152    	; 0x37da <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    3746:	10 92 6c 21 	sts	0x216C, r1
    374a:	47 c0       	rjmp	.+142    	; 0x37da <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    374c:	88 23       	and	r24, r24
    374e:	0c f0       	brlt	.+2      	; 0x3752 <__vector_11+0xe6>
    3750:	41 c0       	rjmp	.+130    	; 0x37d4 <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    3752:	c2 e6       	ldi	r28, 0x62	; 98
    3754:	d1 e2       	ldi	r29, 0x21	; 33
    3756:	aa 81       	ldd	r26, Y+2	; 0x02
    3758:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    375a:	8e 81       	ldd	r24, Y+6	; 0x06
    375c:	9f 81       	ldd	r25, Y+7	; 0x07
    375e:	18 96       	adiw	r26, 0x08	; 8
    3760:	2d 91       	ld	r18, X+
    3762:	3c 91       	ld	r19, X
    3764:	19 97       	sbiw	r26, 0x09	; 9
    3766:	82 17       	cp	r24, r18
    3768:	93 07       	cpc	r25, r19
    376a:	70 f5       	brcc	.+92     	; 0x37c8 <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    376c:	16 96       	adiw	r26, 0x06	; 6
    376e:	6d 91       	ld	r22, X+
    3770:	7c 91       	ld	r23, X
    3772:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    3774:	9c 01       	movw	r18, r24
    3776:	2f 5f       	subi	r18, 0xFF	; 255
    3778:	3f 4f       	sbci	r19, 0xFF	; 255
    377a:	20 93 68 21 	sts	0x2168, r18
    377e:	30 93 69 21 	sts	0x2169, r19
    3782:	47 81       	ldd	r20, Z+7	; 0x07
    3784:	86 0f       	add	r24, r22
    3786:	97 1f       	adc	r25, r23
    3788:	ec 01       	movw	r28, r24
    378a:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    378c:	eb 01       	movw	r28, r22
    378e:	88 81       	ld	r24, Y
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	01 96       	adiw	r24, 0x01	; 1
    3794:	18 96       	adiw	r26, 0x08	; 8
    3796:	4d 91       	ld	r20, X+
    3798:	5c 91       	ld	r21, X
    379a:	19 97       	sbiw	r26, 0x09	; 9
    379c:	48 17       	cp	r20, r24
    379e:	59 07       	cpc	r21, r25
    37a0:	21 f0       	breq	.+8      	; 0x37aa <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    37a2:	18 96       	adiw	r26, 0x08	; 8
    37a4:	8d 93       	st	X+, r24
    37a6:	9c 93       	st	X, r25
    37a8:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    37aa:	18 96       	adiw	r26, 0x08	; 8
    37ac:	8d 91       	ld	r24, X+
    37ae:	9c 91       	ld	r25, X
    37b0:	19 97       	sbiw	r26, 0x09	; 9
    37b2:	28 17       	cp	r18, r24
    37b4:	39 07       	cpc	r19, r25
    37b6:	18 f4       	brcc	.+6      	; 0x37be <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    37b8:	82 e0       	ldi	r24, 0x02	; 2
    37ba:	83 83       	std	Z+3, r24	; 0x03
    37bc:	0e c0       	rjmp	.+28     	; 0x37da <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    37be:	87 e0       	ldi	r24, 0x07	; 7
    37c0:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    37c2:	10 92 6c 21 	sts	0x216C, r1
    37c6:	09 c0       	rjmp	.+18     	; 0x37da <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    37c8:	83 e0       	ldi	r24, 0x03	; 3
    37ca:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    37cc:	89 ef       	ldi	r24, 0xF9	; 249
    37ce:	80 93 6c 21 	sts	0x216C, r24
    37d2:	03 c0       	rjmp	.+6      	; 0x37da <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    37d4:	8b ef       	ldi	r24, 0xFB	; 251
    37d6:	80 93 6c 21 	sts	0x216C, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    37da:	ff 91       	pop	r31
    37dc:	ef 91       	pop	r30
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	bf 91       	pop	r27
    37e4:	af 91       	pop	r26
    37e6:	9f 91       	pop	r25
    37e8:	8f 91       	pop	r24
    37ea:	7f 91       	pop	r23
    37ec:	6f 91       	pop	r22
    37ee:	5f 91       	pop	r21
    37f0:	4f 91       	pop	r20
    37f2:	3f 91       	pop	r19
    37f4:	2f 91       	pop	r18
    37f6:	0f 90       	pop	r0
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	0f 90       	pop	r0
    37fc:	1f 90       	pop	r1
    37fe:	18 95       	reti

00003800 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3800:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3802:	db 01       	movw	r26, r22
    3804:	14 96       	adiw	r26, 0x04	; 4
    3806:	8c 91       	ld	r24, X
    3808:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    380a:	88 eb       	ldi	r24, 0xB8	; 184
    380c:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    3812:	e2 e6       	ldi	r30, 0x62	; 98
    3814:	f1 e2       	ldi	r31, 0x21	; 33
    3816:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    3818:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    381a:	e0 ea       	ldi	r30, 0xA0	; 160
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	82 81       	ldd	r24, Z+2	; 0x02
    3820:	82 60       	ori	r24, 0x02	; 2
    3822:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    3824:	78 94       	sei

	return STATUS_OK;
}
    3826:	80 e0       	ldi	r24, 0x00	; 0
    3828:	08 95       	ret

0000382a <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    382a:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    382c:	89 2b       	or	r24, r25
    382e:	09 f4       	brne	.+2      	; 0x3832 <twi_master_transfer+0x8>
    3830:	49 c0       	rjmp	.+146    	; 0x38c4 <twi_master_transfer+0x9a>
    3832:	61 15       	cp	r22, r1
    3834:	71 05       	cpc	r23, r1
    3836:	09 f4       	brne	.+2      	; 0x383a <twi_master_transfer+0x10>
    3838:	47 c0       	rjmp	.+142    	; 0x38c8 <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    383a:	fb 01       	movw	r30, r22
    383c:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    383e:	80 91 6b 21 	lds	r24, 0x216B
    3842:	88 23       	and	r24, r24
    3844:	19 f0       	breq	.+6      	; 0x384c <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    3846:	99 23       	and	r25, r25
    3848:	f1 f3       	breq	.-4      	; 0x3846 <twi_master_transfer+0x1c>
    384a:	40 c0       	rjmp	.+128    	; 0x38cc <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    384c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    384e:	f8 94       	cli
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    3850:	e2 e6       	ldi	r30, 0x62	; 98
    3852:	f1 e2       	ldi	r31, 0x21	; 33
    3854:	91 e0       	ldi	r25, 0x01	; 1
    3856:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    3858:	90 e8       	ldi	r25, 0x80	; 128
    385a:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    385c:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    385e:	a0 83       	st	Z, r26
    3860:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    3862:	62 83       	std	Z+2, r22	; 0x02
    3864:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    3866:	14 82       	std	Z+4, r1	; 0x04
    3868:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    386a:	16 82       	std	Z+6, r1	; 0x06
    386c:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    386e:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    3870:	fb 01       	movw	r30, r22
    3872:	80 81       	ld	r24, Z
    3874:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    3876:	24 81       	ldd	r18, Z+4	; 0x04
    3878:	35 81       	ldd	r19, Z+5	; 0x05
    387a:	23 2b       	or	r18, r19
    387c:	11 f4       	brne	.+4      	; 0x3882 <twi_master_transfer+0x58>
    387e:	41 11       	cpse	r20, r1
    3880:	03 c0       	rjmp	.+6      	; 0x3888 <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    3882:	16 96       	adiw	r26, 0x06	; 6
    3884:	8c 93       	st	X, r24
    3886:	03 c0       	rjmp	.+6      	; 0x388e <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    3888:	81 60       	ori	r24, 0x01	; 1
    388a:	16 96       	adiw	r26, 0x06	; 6
    388c:	8c 93       	st	X, r24
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    388e:	e2 e6       	ldi	r30, 0x62	; 98
    3890:	f1 e2       	ldi	r31, 0x21	; 33
    3892:	82 85       	ldd	r24, Z+10	; 0x0a
    3894:	80 38       	cpi	r24, 0x80	; 128
    3896:	e9 f3       	breq	.-6      	; 0x3892 <twi_master_transfer+0x68>

	while (! twim_idle(transfer.bus)) { barrier(); }
    3898:	e0 91 62 21 	lds	r30, 0x2162
    389c:	f0 91 63 21 	lds	r31, 0x2163
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    38a0:	84 81       	ldd	r24, Z+4	; 0x04
    38a2:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    38a4:	81 30       	cpi	r24, 0x01	; 1
    38a6:	49 f0       	breq	.+18     	; 0x38ba <twi_master_transfer+0x90>
    38a8:	a2 e6       	ldi	r26, 0x62	; 98
    38aa:	b1 e2       	ldi	r27, 0x21	; 33
    38ac:	ed 91       	ld	r30, X+
    38ae:	fc 91       	ld	r31, X
    38b0:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    38b2:	84 81       	ldd	r24, Z+4	; 0x04
    38b4:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    38b6:	81 30       	cpi	r24, 0x01	; 1
    38b8:	c9 f7       	brne	.-14     	; 0x38ac <twi_master_transfer+0x82>

	status_code_t const status = transfer.status;
    38ba:	e2 e6       	ldi	r30, 0x62	; 98
    38bc:	f1 e2       	ldi	r31, 0x21	; 33
    38be:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    38c0:	11 86       	std	Z+9, r1	; 0x09
    38c2:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    38c4:	88 ef       	ldi	r24, 0xF8	; 248
    38c6:	08 95       	ret
    38c8:	88 ef       	ldi	r24, 0xF8	; 248
    38ca:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    38cc:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    38ce:	08 95       	ret

000038d0 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    38d0:	fc 01       	movw	r30, r24
    38d2:	22 e1       	ldi	r18, 0x12	; 18
    38d4:	37 e2       	ldi	r19, 0x27	; 39
    38d6:	03 c0       	rjmp	.+6      	; 0x38de <usart_putchar+0xe>
    38d8:	21 50       	subi	r18, 0x01	; 1
    38da:	31 09       	sbc	r19, r1
    38dc:	19 f0       	breq	.+6      	; 0x38e4 <usart_putchar+0x14>
    38de:	91 81       	ldd	r25, Z+1	; 0x01
    38e0:	95 ff       	sbrs	r25, 5
    38e2:	fa cf       	rjmp	.-12     	; 0x38d8 <usart_putchar+0x8>
    38e4:	60 83       	st	Z, r22
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	08 95       	ret

000038ec <usart_getchar>:
    38ec:	fc 01       	movw	r30, r24
    38ee:	22 e1       	ldi	r18, 0x12	; 18
    38f0:	37 e2       	ldi	r19, 0x27	; 39
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <usart_getchar+0xe>
    38f4:	21 50       	subi	r18, 0x01	; 1
    38f6:	31 09       	sbc	r19, r1
    38f8:	19 f0       	breq	.+6      	; 0x3900 <usart_getchar+0x14>
    38fa:	91 81       	ldd	r25, Z+1	; 0x01
    38fc:	99 23       	and	r25, r25
    38fe:	d4 f7       	brge	.-12     	; 0x38f4 <usart_getchar+0x8>
    3900:	80 81       	ld	r24, Z
    3902:	08 95       	ret

00003904 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3904:	2f 92       	push	r2
    3906:	3f 92       	push	r3
    3908:	4f 92       	push	r4
    390a:	5f 92       	push	r5
    390c:	6f 92       	push	r6
    390e:	7f 92       	push	r7
    3910:	8f 92       	push	r8
    3912:	9f 92       	push	r9
    3914:	af 92       	push	r10
    3916:	bf 92       	push	r11
    3918:	cf 92       	push	r12
    391a:	df 92       	push	r13
    391c:	ef 92       	push	r14
    391e:	ff 92       	push	r15
    3920:	0f 93       	push	r16
    3922:	1f 93       	push	r17
    3924:	cf 93       	push	r28
    3926:	1c 01       	movw	r2, r24
    3928:	2a 01       	movw	r4, r20
    392a:	3b 01       	movw	r6, r22
    392c:	48 01       	movw	r8, r16
    392e:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3930:	d9 01       	movw	r26, r18
    3932:	c8 01       	movw	r24, r16
    3934:	68 94       	set
    3936:	12 f8       	bld	r1, 2
    3938:	b6 95       	lsr	r27
    393a:	a7 95       	ror	r26
    393c:	97 95       	ror	r25
    393e:	87 95       	ror	r24
    3940:	16 94       	lsr	r1
    3942:	d1 f7       	brne	.-12     	; 0x3938 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3944:	b9 01       	movw	r22, r18
    3946:	a8 01       	movw	r20, r16
    3948:	03 2e       	mov	r0, r19
    394a:	36 e1       	ldi	r19, 0x16	; 22
    394c:	76 95       	lsr	r23
    394e:	67 95       	ror	r22
    3950:	57 95       	ror	r21
    3952:	47 95       	ror	r20
    3954:	3a 95       	dec	r19
    3956:	d1 f7       	brne	.-12     	; 0x394c <usart_set_baudrate+0x48>
    3958:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    395a:	f1 01       	movw	r30, r2
    395c:	23 81       	ldd	r18, Z+3	; 0x03
    395e:	22 fd       	sbrc	r18, 2
    3960:	08 c0       	rjmp	.+16     	; 0x3972 <usart_set_baudrate+0x6e>
		max_rate /= 2;
    3962:	b6 95       	lsr	r27
    3964:	a7 95       	ror	r26
    3966:	97 95       	ror	r25
    3968:	87 95       	ror	r24
		min_rate /= 2;
    396a:	76 95       	lsr	r23
    396c:	67 95       	ror	r22
    396e:	57 95       	ror	r21
    3970:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    3972:	84 15       	cp	r24, r4
    3974:	95 05       	cpc	r25, r5
    3976:	a6 05       	cpc	r26, r6
    3978:	b7 05       	cpc	r27, r7
    397a:	08 f4       	brcc	.+2      	; 0x397e <usart_set_baudrate+0x7a>
    397c:	aa c0       	rjmp	.+340    	; 0x3ad2 <usart_set_baudrate+0x1ce>
    397e:	44 16       	cp	r4, r20
    3980:	55 06       	cpc	r5, r21
    3982:	66 06       	cpc	r6, r22
    3984:	77 06       	cpc	r7, r23
    3986:	08 f4       	brcc	.+2      	; 0x398a <usart_set_baudrate+0x86>
    3988:	a6 c0       	rjmp	.+332    	; 0x3ad6 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    398a:	f1 01       	movw	r30, r2
    398c:	83 81       	ldd	r24, Z+3	; 0x03
    398e:	82 fd       	sbrc	r24, 2
    3990:	04 c0       	rjmp	.+8      	; 0x399a <usart_set_baudrate+0x96>
		baud *= 2;
    3992:	44 0c       	add	r4, r4
    3994:	55 1c       	adc	r5, r5
    3996:	66 1c       	adc	r6, r6
    3998:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    399a:	c5 01       	movw	r24, r10
    399c:	b4 01       	movw	r22, r8
    399e:	a3 01       	movw	r20, r6
    39a0:	92 01       	movw	r18, r4
    39a2:	a4 d3       	rcall	.+1864   	; 0x40ec <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    39a4:	2f 3f       	cpi	r18, 0xFF	; 255
    39a6:	31 05       	cpc	r19, r1
    39a8:	41 05       	cpc	r20, r1
    39aa:	51 05       	cpc	r21, r1
    39ac:	08 f4       	brcc	.+2      	; 0x39b0 <usart_set_baudrate+0xac>
    39ae:	95 c0       	rjmp	.+298    	; 0x3ada <usart_set_baudrate+0x1d6>
    39b0:	c1 2c       	mov	r12, r1
    39b2:	d1 2c       	mov	r13, r1
    39b4:	76 01       	movw	r14, r12
    39b6:	ca 94       	dec	r12
    39b8:	c9 ef       	ldi	r28, 0xF9	; 249
    39ba:	05 c0       	rjmp	.+10     	; 0x39c6 <usart_set_baudrate+0xc2>
    39bc:	2c 15       	cp	r18, r12
    39be:	3d 05       	cpc	r19, r13
    39c0:	4e 05       	cpc	r20, r14
    39c2:	5f 05       	cpc	r21, r15
    39c4:	68 f0       	brcs	.+26     	; 0x39e0 <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    39c6:	cc 0c       	add	r12, r12
    39c8:	dd 1c       	adc	r13, r13
    39ca:	ee 1c       	adc	r14, r14
    39cc:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    39ce:	cd 3f       	cpi	r28, 0xFD	; 253
    39d0:	14 f4       	brge	.+4      	; 0x39d6 <usart_set_baudrate+0xd2>
			limit |= 1;
    39d2:	68 94       	set
    39d4:	c0 f8       	bld	r12, 0
    39d6:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    39d8:	c7 30       	cpi	r28, 0x07	; 7
    39da:	81 f7       	brne	.-32     	; 0x39bc <usart_set_baudrate+0xb8>
    39dc:	8c 2f       	mov	r24, r28
    39de:	54 c0       	rjmp	.+168    	; 0x3a88 <usart_set_baudrate+0x184>
    39e0:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    39e2:	cc 23       	and	r28, r28
    39e4:	0c f0       	brlt	.+2      	; 0x39e8 <usart_set_baudrate+0xe4>
    39e6:	50 c0       	rjmp	.+160    	; 0x3a88 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    39e8:	d3 01       	movw	r26, r6
    39ea:	c2 01       	movw	r24, r4
    39ec:	88 0f       	add	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	88 0f       	add	r24, r24
    39f6:	99 1f       	adc	r25, r25
    39f8:	aa 1f       	adc	r26, r26
    39fa:	bb 1f       	adc	r27, r27
    39fc:	88 0f       	add	r24, r24
    39fe:	99 1f       	adc	r25, r25
    3a00:	aa 1f       	adc	r26, r26
    3a02:	bb 1f       	adc	r27, r27
    3a04:	85 01       	movw	r16, r10
    3a06:	74 01       	movw	r14, r8
    3a08:	e8 1a       	sub	r14, r24
    3a0a:	f9 0a       	sbc	r15, r25
    3a0c:	0a 0b       	sbc	r16, r26
    3a0e:	1b 0b       	sbc	r17, r27
    3a10:	d8 01       	movw	r26, r16
    3a12:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3a14:	ce 3f       	cpi	r28, 0xFE	; 254
    3a16:	ec f4       	brge	.+58     	; 0x3a52 <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3a18:	2d ef       	ldi	r18, 0xFD	; 253
    3a1a:	3f ef       	ldi	r19, 0xFF	; 255
    3a1c:	2c 1b       	sub	r18, r28
    3a1e:	31 09       	sbc	r19, r1
    3a20:	c7 fd       	sbrc	r28, 7
    3a22:	33 95       	inc	r19
    3a24:	04 c0       	rjmp	.+8      	; 0x3a2e <usart_set_baudrate+0x12a>
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	aa 1f       	adc	r26, r26
    3a2c:	bb 1f       	adc	r27, r27
    3a2e:	2a 95       	dec	r18
    3a30:	d2 f7       	brpl	.-12     	; 0x3a26 <usart_set_baudrate+0x122>
    3a32:	73 01       	movw	r14, r6
    3a34:	62 01       	movw	r12, r4
    3a36:	f6 94       	lsr	r15
    3a38:	e7 94       	ror	r14
    3a3a:	d7 94       	ror	r13
    3a3c:	c7 94       	ror	r12
    3a3e:	bc 01       	movw	r22, r24
    3a40:	cd 01       	movw	r24, r26
    3a42:	6c 0d       	add	r22, r12
    3a44:	7d 1d       	adc	r23, r13
    3a46:	8e 1d       	adc	r24, r14
    3a48:	9f 1d       	adc	r25, r15
    3a4a:	a3 01       	movw	r20, r6
    3a4c:	92 01       	movw	r18, r4
    3a4e:	4e d3       	rcall	.+1692   	; 0x40ec <__udivmodsi4>
    3a50:	36 c0       	rjmp	.+108    	; 0x3abe <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    3a52:	23 e0       	ldi	r18, 0x03	; 3
    3a54:	2c 0f       	add	r18, r28
    3a56:	83 01       	movw	r16, r6
    3a58:	72 01       	movw	r14, r4
    3a5a:	04 c0       	rjmp	.+8      	; 0x3a64 <usart_set_baudrate+0x160>
    3a5c:	ee 0c       	add	r14, r14
    3a5e:	ff 1c       	adc	r15, r15
    3a60:	00 1f       	adc	r16, r16
    3a62:	11 1f       	adc	r17, r17
    3a64:	2a 95       	dec	r18
    3a66:	d2 f7       	brpl	.-12     	; 0x3a5c <usart_set_baudrate+0x158>
    3a68:	a8 01       	movw	r20, r16
    3a6a:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    3a6c:	67 01       	movw	r12, r14
    3a6e:	78 01       	movw	r14, r16
    3a70:	f6 94       	lsr	r15
    3a72:	e7 94       	ror	r14
    3a74:	d7 94       	ror	r13
    3a76:	c7 94       	ror	r12
    3a78:	bc 01       	movw	r22, r24
    3a7a:	cd 01       	movw	r24, r26
    3a7c:	6c 0d       	add	r22, r12
    3a7e:	7d 1d       	adc	r23, r13
    3a80:	8e 1d       	adc	r24, r14
    3a82:	9f 1d       	adc	r25, r15
    3a84:	33 d3       	rcall	.+1638   	; 0x40ec <__udivmodsi4>
    3a86:	1b c0       	rjmp	.+54     	; 0x3abe <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3a88:	8d 5f       	subi	r24, 0xFD	; 253
    3a8a:	a3 01       	movw	r20, r6
    3a8c:	92 01       	movw	r18, r4
    3a8e:	04 c0       	rjmp	.+8      	; 0x3a98 <usart_set_baudrate+0x194>
    3a90:	22 0f       	add	r18, r18
    3a92:	33 1f       	adc	r19, r19
    3a94:	44 1f       	adc	r20, r20
    3a96:	55 1f       	adc	r21, r21
    3a98:	8a 95       	dec	r24
    3a9a:	d2 f7       	brpl	.-12     	; 0x3a90 <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    3a9c:	da 01       	movw	r26, r20
    3a9e:	c9 01       	movw	r24, r18
    3aa0:	b6 95       	lsr	r27
    3aa2:	a7 95       	ror	r26
    3aa4:	97 95       	ror	r25
    3aa6:	87 95       	ror	r24
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	68 0d       	add	r22, r8
    3aae:	79 1d       	adc	r23, r9
    3ab0:	8a 1d       	adc	r24, r10
    3ab2:	9b 1d       	adc	r25, r11
    3ab4:	1b d3       	rcall	.+1590   	; 0x40ec <__udivmodsi4>
    3ab6:	21 50       	subi	r18, 0x01	; 1
    3ab8:	31 09       	sbc	r19, r1
    3aba:	41 09       	sbc	r20, r1
    3abc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3abe:	83 2f       	mov	r24, r19
    3ac0:	8f 70       	andi	r24, 0x0F	; 15
    3ac2:	c2 95       	swap	r28
    3ac4:	c0 7f       	andi	r28, 0xF0	; 240
    3ac6:	c8 2b       	or	r28, r24
    3ac8:	f1 01       	movw	r30, r2
    3aca:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3acc:	26 83       	std	Z+6, r18	; 0x06

	return true;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	1c c0       	rjmp	.+56     	; 0x3b0a <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	1a c0       	rjmp	.+52     	; 0x3b0a <usart_set_baudrate+0x206>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	18 c0       	rjmp	.+48     	; 0x3b0a <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3ada:	d3 01       	movw	r26, r6
    3adc:	c2 01       	movw	r24, r4
    3ade:	88 0f       	add	r24, r24
    3ae0:	99 1f       	adc	r25, r25
    3ae2:	aa 1f       	adc	r26, r26
    3ae4:	bb 1f       	adc	r27, r27
    3ae6:	88 0f       	add	r24, r24
    3ae8:	99 1f       	adc	r25, r25
    3aea:	aa 1f       	adc	r26, r26
    3aec:	bb 1f       	adc	r27, r27
    3aee:	88 0f       	add	r24, r24
    3af0:	99 1f       	adc	r25, r25
    3af2:	aa 1f       	adc	r26, r26
    3af4:	bb 1f       	adc	r27, r27
    3af6:	85 01       	movw	r16, r10
    3af8:	74 01       	movw	r14, r8
    3afa:	e8 1a       	sub	r14, r24
    3afc:	f9 0a       	sbc	r15, r25
    3afe:	0a 0b       	sbc	r16, r26
    3b00:	1b 0b       	sbc	r17, r27
    3b02:	d8 01       	movw	r26, r16
    3b04:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3b06:	c9 ef       	ldi	r28, 0xF9	; 249
    3b08:	87 cf       	rjmp	.-242    	; 0x3a18 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	af 90       	pop	r10
    3b1c:	9f 90       	pop	r9
    3b1e:	8f 90       	pop	r8
    3b20:	7f 90       	pop	r7
    3b22:	6f 90       	pop	r6
    3b24:	5f 90       	pop	r5
    3b26:	4f 90       	pop	r4
    3b28:	3f 90       	pop	r3
    3b2a:	2f 90       	pop	r2
    3b2c:	08 95       	ret

00003b2e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	ec 01       	movw	r28, r24
    3b38:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3b3a:	89 2b       	or	r24, r25
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <usart_init_rs232+0x12>
    3b3e:	77 c0       	rjmp	.+238    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3b40:	c1 15       	cp	r28, r1
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	d8 07       	cpc	r29, r24
    3b46:	21 f4       	brne	.+8      	; 0x3b50 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3b48:	64 e0       	ldi	r22, 0x04	; 4
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	08 d9       	rcall	.-3568   	; 0x2d5e <sysclk_enable_module>
    3b4e:	6f c0       	rjmp	.+222    	; 0x3c2e <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3b50:	c0 38       	cpi	r28, 0x80	; 128
    3b52:	e1 e0       	ldi	r30, 0x01	; 1
    3b54:	de 07       	cpc	r29, r30
    3b56:	21 f4       	brne	.+8      	; 0x3b60 <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3b58:	62 e0       	ldi	r22, 0x02	; 2
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	00 d9       	rcall	.-3584   	; 0x2d5e <sysclk_enable_module>
    3b5e:	67 c0       	rjmp	.+206    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    3b60:	c1 15       	cp	r28, r1
    3b62:	f1 e0       	ldi	r31, 0x01	; 1
    3b64:	df 07       	cpc	r29, r31
    3b66:	21 f4       	brne	.+8      	; 0x3b70 <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    3b68:	61 e0       	ldi	r22, 0x01	; 1
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	f8 d8       	rcall	.-3600   	; 0x2d5e <sysclk_enable_module>
    3b6e:	5f c0       	rjmp	.+190    	; 0x3c2e <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3b70:	c0 38       	cpi	r28, 0x80	; 128
    3b72:	83 e0       	ldi	r24, 0x03	; 3
    3b74:	d8 07       	cpc	r29, r24
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	f0 d8       	rcall	.-3616   	; 0x2d5e <sysclk_enable_module>
    3b7e:	57 c0       	rjmp	.+174    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3b80:	c1 15       	cp	r28, r1
    3b82:	e2 e0       	ldi	r30, 0x02	; 2
    3b84:	de 07       	cpc	r29, r30
    3b86:	21 f4       	brne	.+8      	; 0x3b90 <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3b88:	62 e0       	ldi	r22, 0x02	; 2
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	e8 d8       	rcall	.-3632   	; 0x2d5e <sysclk_enable_module>
    3b8e:	4f c0       	rjmp	.+158    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    3b90:	c1 15       	cp	r28, r1
    3b92:	f3 e0       	ldi	r31, 0x03	; 3
    3b94:	df 07       	cpc	r29, r31
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    3b98:	64 e0       	ldi	r22, 0x04	; 4
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	e0 d8       	rcall	.-3648   	; 0x2d5e <sysclk_enable_module>
    3b9e:	47 c0       	rjmp	.+142    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    3ba0:	c1 15       	cp	r28, r1
    3ba2:	88 e0       	ldi	r24, 0x08	; 8
    3ba4:	d8 07       	cpc	r29, r24
    3ba6:	21 f4       	brne	.+8      	; 0x3bb0 <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3ba8:	61 e0       	ldi	r22, 0x01	; 1
    3baa:	83 e0       	ldi	r24, 0x03	; 3
    3bac:	d8 d8       	rcall	.-3664   	; 0x2d5e <sysclk_enable_module>
    3bae:	3f c0       	rjmp	.+126    	; 0x3c2e <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    3bb0:	c0 34       	cpi	r28, 0x40	; 64
    3bb2:	e8 e0       	ldi	r30, 0x08	; 8
    3bb4:	de 07       	cpc	r29, r30
    3bb6:	21 f4       	brne	.+8      	; 0x3bc0 <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3bb8:	62 e0       	ldi	r22, 0x02	; 2
    3bba:	83 e0       	ldi	r24, 0x03	; 3
    3bbc:	d0 d8       	rcall	.-3680   	; 0x2d5e <sysclk_enable_module>
    3bbe:	37 c0       	rjmp	.+110    	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    3bc0:	c0 34       	cpi	r28, 0x40	; 64
    3bc2:	f9 e0       	ldi	r31, 0x09	; 9
    3bc4:	df 07       	cpc	r29, r31
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    3bc8:	62 e0       	ldi	r22, 0x02	; 2
    3bca:	84 e0       	ldi	r24, 0x04	; 4
    3bcc:	c8 d8       	rcall	.-3696   	; 0x2d5e <sysclk_enable_module>
    3bce:	2f c0       	rjmp	.+94     	; 0x3c2e <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3bd0:	c0 3b       	cpi	r28, 0xB0	; 176
    3bd2:	88 e0       	ldi	r24, 0x08	; 8
    3bd4:	d8 07       	cpc	r29, r24
    3bd6:	21 f4       	brne	.+8      	; 0x3be0 <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3bd8:	64 e0       	ldi	r22, 0x04	; 4
    3bda:	83 e0       	ldi	r24, 0x03	; 3
    3bdc:	c0 d8       	rcall	.-3712   	; 0x2d5e <sysclk_enable_module>
    3bde:	27 c0       	rjmp	.+78     	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3be0:	c0 3e       	cpi	r28, 0xE0	; 224
    3be2:	e8 e0       	ldi	r30, 0x08	; 8
    3be4:	de 07       	cpc	r29, r30
    3be6:	21 f4       	brne	.+8      	; 0x3bf0 <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3be8:	68 e0       	ldi	r22, 0x08	; 8
    3bea:	83 e0       	ldi	r24, 0x03	; 3
    3bec:	b8 d8       	rcall	.-3728   	; 0x2d5e <sysclk_enable_module>
    3bee:	1f c0       	rjmp	.+62     	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3bf0:	c0 3c       	cpi	r28, 0xC0	; 192
    3bf2:	f8 e0       	ldi	r31, 0x08	; 8
    3bf4:	df 07       	cpc	r29, r31
    3bf6:	21 f4       	brne	.+8      	; 0x3c00 <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3bf8:	60 e1       	ldi	r22, 0x10	; 16
    3bfa:	83 e0       	ldi	r24, 0x03	; 3
    3bfc:	b0 d8       	rcall	.-3744   	; 0x2d5e <sysclk_enable_module>
    3bfe:	17 c0       	rjmp	.+46     	; 0x3c2e <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3c00:	c0 3c       	cpi	r28, 0xC0	; 192
    3c02:	89 e0       	ldi	r24, 0x09	; 9
    3c04:	d8 07       	cpc	r29, r24
    3c06:	21 f4       	brne	.+8      	; 0x3c10 <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3c08:	60 e1       	ldi	r22, 0x10	; 16
    3c0a:	84 e0       	ldi	r24, 0x04	; 4
    3c0c:	a8 d8       	rcall	.-3760   	; 0x2d5e <sysclk_enable_module>
    3c0e:	0f c0       	rjmp	.+30     	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3c10:	c0 38       	cpi	r28, 0x80	; 128
    3c12:	e4 e0       	ldi	r30, 0x04	; 4
    3c14:	de 07       	cpc	r29, r30
    3c16:	21 f4       	brne	.+8      	; 0x3c20 <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3c18:	60 e4       	ldi	r22, 0x40	; 64
    3c1a:	83 e0       	ldi	r24, 0x03	; 3
    3c1c:	a0 d8       	rcall	.-3776   	; 0x2d5e <sysclk_enable_module>
    3c1e:	07 c0       	rjmp	.+14     	; 0x3c2e <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    3c20:	c0 36       	cpi	r28, 0x60	; 96
    3c22:	f4 e0       	ldi	r31, 0x04	; 4
    3c24:	df 07       	cpc	r29, r31
    3c26:	19 f4       	brne	.+6      	; 0x3c2e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    3c28:	60 e8       	ldi	r22, 0x80	; 128
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	98 d8       	rcall	.-3792   	; 0x2d5e <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c30:	8f 73       	andi	r24, 0x3F	; 63
    3c32:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3c34:	f8 01       	movw	r30, r16
    3c36:	94 81       	ldd	r25, Z+4	; 0x04
    3c38:	85 81       	ldd	r24, Z+5	; 0x05
    3c3a:	89 2b       	or	r24, r25
    3c3c:	96 81       	ldd	r25, Z+6	; 0x06
    3c3e:	91 11       	cpse	r25, r1
    3c40:	98 e0       	ldi	r25, 0x08	; 8
    3c42:	89 2b       	or	r24, r25
    3c44:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3c46:	f8 01       	movw	r30, r16
    3c48:	40 81       	ld	r20, Z
    3c4a:	51 81       	ldd	r21, Z+1	; 0x01
    3c4c:	62 81       	ldd	r22, Z+2	; 0x02
    3c4e:	73 81       	ldd	r23, Z+3	; 0x03
    3c50:	00 e0       	ldi	r16, 0x00	; 0
    3c52:	18 e4       	ldi	r17, 0x48	; 72
    3c54:	28 ee       	ldi	r18, 0xE8	; 232
    3c56:	31 e0       	ldi	r19, 0x01	; 1
    3c58:	ce 01       	movw	r24, r28
    3c5a:	54 de       	rcall	.-856    	; 0x3904 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3c5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c5e:	98 60       	ori	r25, 0x08	; 8
    3c60:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3c62:	9b 81       	ldd	r25, Y+3	; 0x03
    3c64:	90 61       	ori	r25, 0x10	; 16
    3c66:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	08 95       	ret

00003c72 <__subsf3>:
    3c72:	50 58       	subi	r21, 0x80	; 128

00003c74 <__addsf3>:
    3c74:	bb 27       	eor	r27, r27
    3c76:	aa 27       	eor	r26, r26
    3c78:	0e d0       	rcall	.+28     	; 0x3c96 <__addsf3x>
    3c7a:	70 c1       	rjmp	.+736    	; 0x3f5c <__fp_round>
    3c7c:	61 d1       	rcall	.+706    	; 0x3f40 <__fp_pscA>
    3c7e:	30 f0       	brcs	.+12     	; 0x3c8c <__addsf3+0x18>
    3c80:	66 d1       	rcall	.+716    	; 0x3f4e <__fp_pscB>
    3c82:	20 f0       	brcs	.+8      	; 0x3c8c <__addsf3+0x18>
    3c84:	31 f4       	brne	.+12     	; 0x3c92 <__addsf3+0x1e>
    3c86:	9f 3f       	cpi	r25, 0xFF	; 255
    3c88:	11 f4       	brne	.+4      	; 0x3c8e <__addsf3+0x1a>
    3c8a:	1e f4       	brtc	.+6      	; 0x3c92 <__addsf3+0x1e>
    3c8c:	56 c1       	rjmp	.+684    	; 0x3f3a <__fp_nan>
    3c8e:	0e f4       	brtc	.+2      	; 0x3c92 <__addsf3+0x1e>
    3c90:	e0 95       	com	r30
    3c92:	e7 fb       	bst	r30, 7
    3c94:	4c c1       	rjmp	.+664    	; 0x3f2e <__fp_inf>

00003c96 <__addsf3x>:
    3c96:	e9 2f       	mov	r30, r25
    3c98:	72 d1       	rcall	.+740    	; 0x3f7e <__fp_split3>
    3c9a:	80 f3       	brcs	.-32     	; 0x3c7c <__addsf3+0x8>
    3c9c:	ba 17       	cp	r27, r26
    3c9e:	62 07       	cpc	r22, r18
    3ca0:	73 07       	cpc	r23, r19
    3ca2:	84 07       	cpc	r24, r20
    3ca4:	95 07       	cpc	r25, r21
    3ca6:	18 f0       	brcs	.+6      	; 0x3cae <__addsf3x+0x18>
    3ca8:	71 f4       	brne	.+28     	; 0x3cc6 <__addsf3x+0x30>
    3caa:	9e f5       	brtc	.+102    	; 0x3d12 <__addsf3x+0x7c>
    3cac:	8a c1       	rjmp	.+788    	; 0x3fc2 <__fp_zero>
    3cae:	0e f4       	brtc	.+2      	; 0x3cb2 <__addsf3x+0x1c>
    3cb0:	e0 95       	com	r30
    3cb2:	0b 2e       	mov	r0, r27
    3cb4:	ba 2f       	mov	r27, r26
    3cb6:	a0 2d       	mov	r26, r0
    3cb8:	0b 01       	movw	r0, r22
    3cba:	b9 01       	movw	r22, r18
    3cbc:	90 01       	movw	r18, r0
    3cbe:	0c 01       	movw	r0, r24
    3cc0:	ca 01       	movw	r24, r20
    3cc2:	a0 01       	movw	r20, r0
    3cc4:	11 24       	eor	r1, r1
    3cc6:	ff 27       	eor	r31, r31
    3cc8:	59 1b       	sub	r21, r25
    3cca:	99 f0       	breq	.+38     	; 0x3cf2 <__addsf3x+0x5c>
    3ccc:	59 3f       	cpi	r21, 0xF9	; 249
    3cce:	50 f4       	brcc	.+20     	; 0x3ce4 <__addsf3x+0x4e>
    3cd0:	50 3e       	cpi	r21, 0xE0	; 224
    3cd2:	68 f1       	brcs	.+90     	; 0x3d2e <__addsf3x+0x98>
    3cd4:	1a 16       	cp	r1, r26
    3cd6:	f0 40       	sbci	r31, 0x00	; 0
    3cd8:	a2 2f       	mov	r26, r18
    3cda:	23 2f       	mov	r18, r19
    3cdc:	34 2f       	mov	r19, r20
    3cde:	44 27       	eor	r20, r20
    3ce0:	58 5f       	subi	r21, 0xF8	; 248
    3ce2:	f3 cf       	rjmp	.-26     	; 0x3cca <__addsf3x+0x34>
    3ce4:	46 95       	lsr	r20
    3ce6:	37 95       	ror	r19
    3ce8:	27 95       	ror	r18
    3cea:	a7 95       	ror	r26
    3cec:	f0 40       	sbci	r31, 0x00	; 0
    3cee:	53 95       	inc	r21
    3cf0:	c9 f7       	brne	.-14     	; 0x3ce4 <__addsf3x+0x4e>
    3cf2:	7e f4       	brtc	.+30     	; 0x3d12 <__addsf3x+0x7c>
    3cf4:	1f 16       	cp	r1, r31
    3cf6:	ba 0b       	sbc	r27, r26
    3cf8:	62 0b       	sbc	r22, r18
    3cfa:	73 0b       	sbc	r23, r19
    3cfc:	84 0b       	sbc	r24, r20
    3cfe:	ba f0       	brmi	.+46     	; 0x3d2e <__addsf3x+0x98>
    3d00:	91 50       	subi	r25, 0x01	; 1
    3d02:	a1 f0       	breq	.+40     	; 0x3d2c <__addsf3x+0x96>
    3d04:	ff 0f       	add	r31, r31
    3d06:	bb 1f       	adc	r27, r27
    3d08:	66 1f       	adc	r22, r22
    3d0a:	77 1f       	adc	r23, r23
    3d0c:	88 1f       	adc	r24, r24
    3d0e:	c2 f7       	brpl	.-16     	; 0x3d00 <__addsf3x+0x6a>
    3d10:	0e c0       	rjmp	.+28     	; 0x3d2e <__addsf3x+0x98>
    3d12:	ba 0f       	add	r27, r26
    3d14:	62 1f       	adc	r22, r18
    3d16:	73 1f       	adc	r23, r19
    3d18:	84 1f       	adc	r24, r20
    3d1a:	48 f4       	brcc	.+18     	; 0x3d2e <__addsf3x+0x98>
    3d1c:	87 95       	ror	r24
    3d1e:	77 95       	ror	r23
    3d20:	67 95       	ror	r22
    3d22:	b7 95       	ror	r27
    3d24:	f7 95       	ror	r31
    3d26:	9e 3f       	cpi	r25, 0xFE	; 254
    3d28:	08 f0       	brcs	.+2      	; 0x3d2c <__addsf3x+0x96>
    3d2a:	b3 cf       	rjmp	.-154    	; 0x3c92 <__addsf3+0x1e>
    3d2c:	93 95       	inc	r25
    3d2e:	88 0f       	add	r24, r24
    3d30:	08 f0       	brcs	.+2      	; 0x3d34 <__addsf3x+0x9e>
    3d32:	99 27       	eor	r25, r25
    3d34:	ee 0f       	add	r30, r30
    3d36:	97 95       	ror	r25
    3d38:	87 95       	ror	r24
    3d3a:	08 95       	ret

00003d3c <__cmpsf2>:
    3d3c:	d4 d0       	rcall	.+424    	; 0x3ee6 <__fp_cmp>
    3d3e:	08 f4       	brcc	.+2      	; 0x3d42 <__cmpsf2+0x6>
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	08 95       	ret

00003d44 <__divsf3>:
    3d44:	0c d0       	rcall	.+24     	; 0x3d5e <__divsf3x>
    3d46:	0a c1       	rjmp	.+532    	; 0x3f5c <__fp_round>
    3d48:	02 d1       	rcall	.+516    	; 0x3f4e <__fp_pscB>
    3d4a:	40 f0       	brcs	.+16     	; 0x3d5c <__divsf3+0x18>
    3d4c:	f9 d0       	rcall	.+498    	; 0x3f40 <__fp_pscA>
    3d4e:	30 f0       	brcs	.+12     	; 0x3d5c <__divsf3+0x18>
    3d50:	21 f4       	brne	.+8      	; 0x3d5a <__divsf3+0x16>
    3d52:	5f 3f       	cpi	r21, 0xFF	; 255
    3d54:	19 f0       	breq	.+6      	; 0x3d5c <__divsf3+0x18>
    3d56:	eb c0       	rjmp	.+470    	; 0x3f2e <__fp_inf>
    3d58:	51 11       	cpse	r21, r1
    3d5a:	34 c1       	rjmp	.+616    	; 0x3fc4 <__fp_szero>
    3d5c:	ee c0       	rjmp	.+476    	; 0x3f3a <__fp_nan>

00003d5e <__divsf3x>:
    3d5e:	0f d1       	rcall	.+542    	; 0x3f7e <__fp_split3>
    3d60:	98 f3       	brcs	.-26     	; 0x3d48 <__divsf3+0x4>

00003d62 <__divsf3_pse>:
    3d62:	99 23       	and	r25, r25
    3d64:	c9 f3       	breq	.-14     	; 0x3d58 <__divsf3+0x14>
    3d66:	55 23       	and	r21, r21
    3d68:	b1 f3       	breq	.-20     	; 0x3d56 <__divsf3+0x12>
    3d6a:	95 1b       	sub	r25, r21
    3d6c:	55 0b       	sbc	r21, r21
    3d6e:	bb 27       	eor	r27, r27
    3d70:	aa 27       	eor	r26, r26
    3d72:	62 17       	cp	r22, r18
    3d74:	73 07       	cpc	r23, r19
    3d76:	84 07       	cpc	r24, r20
    3d78:	38 f0       	brcs	.+14     	; 0x3d88 <__divsf3_pse+0x26>
    3d7a:	9f 5f       	subi	r25, 0xFF	; 255
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7e:	22 0f       	add	r18, r18
    3d80:	33 1f       	adc	r19, r19
    3d82:	44 1f       	adc	r20, r20
    3d84:	aa 1f       	adc	r26, r26
    3d86:	a9 f3       	breq	.-22     	; 0x3d72 <__divsf3_pse+0x10>
    3d88:	33 d0       	rcall	.+102    	; 0x3df0 <__divsf3_pse+0x8e>
    3d8a:	0e 2e       	mov	r0, r30
    3d8c:	3a f0       	brmi	.+14     	; 0x3d9c <__divsf3_pse+0x3a>
    3d8e:	e0 e8       	ldi	r30, 0x80	; 128
    3d90:	30 d0       	rcall	.+96     	; 0x3df2 <__divsf3_pse+0x90>
    3d92:	91 50       	subi	r25, 0x01	; 1
    3d94:	50 40       	sbci	r21, 0x00	; 0
    3d96:	e6 95       	lsr	r30
    3d98:	00 1c       	adc	r0, r0
    3d9a:	ca f7       	brpl	.-14     	; 0x3d8e <__divsf3_pse+0x2c>
    3d9c:	29 d0       	rcall	.+82     	; 0x3df0 <__divsf3_pse+0x8e>
    3d9e:	fe 2f       	mov	r31, r30
    3da0:	27 d0       	rcall	.+78     	; 0x3df0 <__divsf3_pse+0x8e>
    3da2:	66 0f       	add	r22, r22
    3da4:	77 1f       	adc	r23, r23
    3da6:	88 1f       	adc	r24, r24
    3da8:	bb 1f       	adc	r27, r27
    3daa:	26 17       	cp	r18, r22
    3dac:	37 07       	cpc	r19, r23
    3dae:	48 07       	cpc	r20, r24
    3db0:	ab 07       	cpc	r26, r27
    3db2:	b0 e8       	ldi	r27, 0x80	; 128
    3db4:	09 f0       	breq	.+2      	; 0x3db8 <__divsf3_pse+0x56>
    3db6:	bb 0b       	sbc	r27, r27
    3db8:	80 2d       	mov	r24, r0
    3dba:	bf 01       	movw	r22, r30
    3dbc:	ff 27       	eor	r31, r31
    3dbe:	93 58       	subi	r25, 0x83	; 131
    3dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc2:	2a f0       	brmi	.+10     	; 0x3dce <__divsf3_pse+0x6c>
    3dc4:	9e 3f       	cpi	r25, 0xFE	; 254
    3dc6:	51 05       	cpc	r21, r1
    3dc8:	68 f0       	brcs	.+26     	; 0x3de4 <__divsf3_pse+0x82>
    3dca:	b1 c0       	rjmp	.+354    	; 0x3f2e <__fp_inf>
    3dcc:	fb c0       	rjmp	.+502    	; 0x3fc4 <__fp_szero>
    3dce:	5f 3f       	cpi	r21, 0xFF	; 255
    3dd0:	ec f3       	brlt	.-6      	; 0x3dcc <__divsf3_pse+0x6a>
    3dd2:	98 3e       	cpi	r25, 0xE8	; 232
    3dd4:	dc f3       	brlt	.-10     	; 0x3dcc <__divsf3_pse+0x6a>
    3dd6:	86 95       	lsr	r24
    3dd8:	77 95       	ror	r23
    3dda:	67 95       	ror	r22
    3ddc:	b7 95       	ror	r27
    3dde:	f7 95       	ror	r31
    3de0:	9f 5f       	subi	r25, 0xFF	; 255
    3de2:	c9 f7       	brne	.-14     	; 0x3dd6 <__divsf3_pse+0x74>
    3de4:	88 0f       	add	r24, r24
    3de6:	91 1d       	adc	r25, r1
    3de8:	96 95       	lsr	r25
    3dea:	87 95       	ror	r24
    3dec:	97 f9       	bld	r25, 7
    3dee:	08 95       	ret
    3df0:	e1 e0       	ldi	r30, 0x01	; 1
    3df2:	66 0f       	add	r22, r22
    3df4:	77 1f       	adc	r23, r23
    3df6:	88 1f       	adc	r24, r24
    3df8:	bb 1f       	adc	r27, r27
    3dfa:	62 17       	cp	r22, r18
    3dfc:	73 07       	cpc	r23, r19
    3dfe:	84 07       	cpc	r24, r20
    3e00:	ba 07       	cpc	r27, r26
    3e02:	20 f0       	brcs	.+8      	; 0x3e0c <__divsf3_pse+0xaa>
    3e04:	62 1b       	sub	r22, r18
    3e06:	73 0b       	sbc	r23, r19
    3e08:	84 0b       	sbc	r24, r20
    3e0a:	ba 0b       	sbc	r27, r26
    3e0c:	ee 1f       	adc	r30, r30
    3e0e:	88 f7       	brcc	.-30     	; 0x3df2 <__divsf3_pse+0x90>
    3e10:	e0 95       	com	r30
    3e12:	08 95       	ret

00003e14 <__fixunssfsi>:
    3e14:	bc d0       	rcall	.+376    	; 0x3f8e <__fp_splitA>
    3e16:	88 f0       	brcs	.+34     	; 0x3e3a <__fixunssfsi+0x26>
    3e18:	9f 57       	subi	r25, 0x7F	; 127
    3e1a:	90 f0       	brcs	.+36     	; 0x3e40 <__fixunssfsi+0x2c>
    3e1c:	b9 2f       	mov	r27, r25
    3e1e:	99 27       	eor	r25, r25
    3e20:	b7 51       	subi	r27, 0x17	; 23
    3e22:	a0 f0       	brcs	.+40     	; 0x3e4c <__fixunssfsi+0x38>
    3e24:	d1 f0       	breq	.+52     	; 0x3e5a <__fixunssfsi+0x46>
    3e26:	66 0f       	add	r22, r22
    3e28:	77 1f       	adc	r23, r23
    3e2a:	88 1f       	adc	r24, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	1a f0       	brmi	.+6      	; 0x3e36 <__fixunssfsi+0x22>
    3e30:	ba 95       	dec	r27
    3e32:	c9 f7       	brne	.-14     	; 0x3e26 <__fixunssfsi+0x12>
    3e34:	12 c0       	rjmp	.+36     	; 0x3e5a <__fixunssfsi+0x46>
    3e36:	b1 30       	cpi	r27, 0x01	; 1
    3e38:	81 f0       	breq	.+32     	; 0x3e5a <__fixunssfsi+0x46>
    3e3a:	c3 d0       	rcall	.+390    	; 0x3fc2 <__fp_zero>
    3e3c:	b1 e0       	ldi	r27, 0x01	; 1
    3e3e:	08 95       	ret
    3e40:	c0 c0       	rjmp	.+384    	; 0x3fc2 <__fp_zero>
    3e42:	67 2f       	mov	r22, r23
    3e44:	78 2f       	mov	r23, r24
    3e46:	88 27       	eor	r24, r24
    3e48:	b8 5f       	subi	r27, 0xF8	; 248
    3e4a:	39 f0       	breq	.+14     	; 0x3e5a <__fixunssfsi+0x46>
    3e4c:	b9 3f       	cpi	r27, 0xF9	; 249
    3e4e:	cc f3       	brlt	.-14     	; 0x3e42 <__fixunssfsi+0x2e>
    3e50:	86 95       	lsr	r24
    3e52:	77 95       	ror	r23
    3e54:	67 95       	ror	r22
    3e56:	b3 95       	inc	r27
    3e58:	d9 f7       	brne	.-10     	; 0x3e50 <__fixunssfsi+0x3c>
    3e5a:	3e f4       	brtc	.+14     	; 0x3e6a <__fixunssfsi+0x56>
    3e5c:	90 95       	com	r25
    3e5e:	80 95       	com	r24
    3e60:	70 95       	com	r23
    3e62:	61 95       	neg	r22
    3e64:	7f 4f       	sbci	r23, 0xFF	; 255
    3e66:	8f 4f       	sbci	r24, 0xFF	; 255
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	08 95       	ret

00003e6c <__floatunsisf>:
    3e6c:	e8 94       	clt
    3e6e:	09 c0       	rjmp	.+18     	; 0x3e82 <__floatsisf+0x12>

00003e70 <__floatsisf>:
    3e70:	97 fb       	bst	r25, 7
    3e72:	3e f4       	brtc	.+14     	; 0x3e82 <__floatsisf+0x12>
    3e74:	90 95       	com	r25
    3e76:	80 95       	com	r24
    3e78:	70 95       	com	r23
    3e7a:	61 95       	neg	r22
    3e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e80:	9f 4f       	sbci	r25, 0xFF	; 255
    3e82:	99 23       	and	r25, r25
    3e84:	a9 f0       	breq	.+42     	; 0x3eb0 <__floatsisf+0x40>
    3e86:	f9 2f       	mov	r31, r25
    3e88:	96 e9       	ldi	r25, 0x96	; 150
    3e8a:	bb 27       	eor	r27, r27
    3e8c:	93 95       	inc	r25
    3e8e:	f6 95       	lsr	r31
    3e90:	87 95       	ror	r24
    3e92:	77 95       	ror	r23
    3e94:	67 95       	ror	r22
    3e96:	b7 95       	ror	r27
    3e98:	f1 11       	cpse	r31, r1
    3e9a:	f8 cf       	rjmp	.-16     	; 0x3e8c <__floatsisf+0x1c>
    3e9c:	fa f4       	brpl	.+62     	; 0x3edc <__floatsisf+0x6c>
    3e9e:	bb 0f       	add	r27, r27
    3ea0:	11 f4       	brne	.+4      	; 0x3ea6 <__floatsisf+0x36>
    3ea2:	60 ff       	sbrs	r22, 0
    3ea4:	1b c0       	rjmp	.+54     	; 0x3edc <__floatsisf+0x6c>
    3ea6:	6f 5f       	subi	r22, 0xFF	; 255
    3ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    3eac:	9f 4f       	sbci	r25, 0xFF	; 255
    3eae:	16 c0       	rjmp	.+44     	; 0x3edc <__floatsisf+0x6c>
    3eb0:	88 23       	and	r24, r24
    3eb2:	11 f0       	breq	.+4      	; 0x3eb8 <__floatsisf+0x48>
    3eb4:	96 e9       	ldi	r25, 0x96	; 150
    3eb6:	11 c0       	rjmp	.+34     	; 0x3eda <__floatsisf+0x6a>
    3eb8:	77 23       	and	r23, r23
    3eba:	21 f0       	breq	.+8      	; 0x3ec4 <__floatsisf+0x54>
    3ebc:	9e e8       	ldi	r25, 0x8E	; 142
    3ebe:	87 2f       	mov	r24, r23
    3ec0:	76 2f       	mov	r23, r22
    3ec2:	05 c0       	rjmp	.+10     	; 0x3ece <__floatsisf+0x5e>
    3ec4:	66 23       	and	r22, r22
    3ec6:	71 f0       	breq	.+28     	; 0x3ee4 <__floatsisf+0x74>
    3ec8:	96 e8       	ldi	r25, 0x86	; 134
    3eca:	86 2f       	mov	r24, r22
    3ecc:	70 e0       	ldi	r23, 0x00	; 0
    3ece:	60 e0       	ldi	r22, 0x00	; 0
    3ed0:	2a f0       	brmi	.+10     	; 0x3edc <__floatsisf+0x6c>
    3ed2:	9a 95       	dec	r25
    3ed4:	66 0f       	add	r22, r22
    3ed6:	77 1f       	adc	r23, r23
    3ed8:	88 1f       	adc	r24, r24
    3eda:	da f7       	brpl	.-10     	; 0x3ed2 <__floatsisf+0x62>
    3edc:	88 0f       	add	r24, r24
    3ede:	96 95       	lsr	r25
    3ee0:	87 95       	ror	r24
    3ee2:	97 f9       	bld	r25, 7
    3ee4:	08 95       	ret

00003ee6 <__fp_cmp>:
    3ee6:	99 0f       	add	r25, r25
    3ee8:	00 08       	sbc	r0, r0
    3eea:	55 0f       	add	r21, r21
    3eec:	aa 0b       	sbc	r26, r26
    3eee:	e0 e8       	ldi	r30, 0x80	; 128
    3ef0:	fe ef       	ldi	r31, 0xFE	; 254
    3ef2:	16 16       	cp	r1, r22
    3ef4:	17 06       	cpc	r1, r23
    3ef6:	e8 07       	cpc	r30, r24
    3ef8:	f9 07       	cpc	r31, r25
    3efa:	c0 f0       	brcs	.+48     	; 0x3f2c <__fp_cmp+0x46>
    3efc:	12 16       	cp	r1, r18
    3efe:	13 06       	cpc	r1, r19
    3f00:	e4 07       	cpc	r30, r20
    3f02:	f5 07       	cpc	r31, r21
    3f04:	98 f0       	brcs	.+38     	; 0x3f2c <__fp_cmp+0x46>
    3f06:	62 1b       	sub	r22, r18
    3f08:	73 0b       	sbc	r23, r19
    3f0a:	84 0b       	sbc	r24, r20
    3f0c:	95 0b       	sbc	r25, r21
    3f0e:	39 f4       	brne	.+14     	; 0x3f1e <__fp_cmp+0x38>
    3f10:	0a 26       	eor	r0, r26
    3f12:	61 f0       	breq	.+24     	; 0x3f2c <__fp_cmp+0x46>
    3f14:	23 2b       	or	r18, r19
    3f16:	24 2b       	or	r18, r20
    3f18:	25 2b       	or	r18, r21
    3f1a:	21 f4       	brne	.+8      	; 0x3f24 <__fp_cmp+0x3e>
    3f1c:	08 95       	ret
    3f1e:	0a 26       	eor	r0, r26
    3f20:	09 f4       	brne	.+2      	; 0x3f24 <__fp_cmp+0x3e>
    3f22:	a1 40       	sbci	r26, 0x01	; 1
    3f24:	a6 95       	lsr	r26
    3f26:	8f ef       	ldi	r24, 0xFF	; 255
    3f28:	81 1d       	adc	r24, r1
    3f2a:	81 1d       	adc	r24, r1
    3f2c:	08 95       	ret

00003f2e <__fp_inf>:
    3f2e:	97 f9       	bld	r25, 7
    3f30:	9f 67       	ori	r25, 0x7F	; 127
    3f32:	80 e8       	ldi	r24, 0x80	; 128
    3f34:	70 e0       	ldi	r23, 0x00	; 0
    3f36:	60 e0       	ldi	r22, 0x00	; 0
    3f38:	08 95       	ret

00003f3a <__fp_nan>:
    3f3a:	9f ef       	ldi	r25, 0xFF	; 255
    3f3c:	80 ec       	ldi	r24, 0xC0	; 192
    3f3e:	08 95       	ret

00003f40 <__fp_pscA>:
    3f40:	00 24       	eor	r0, r0
    3f42:	0a 94       	dec	r0
    3f44:	16 16       	cp	r1, r22
    3f46:	17 06       	cpc	r1, r23
    3f48:	18 06       	cpc	r1, r24
    3f4a:	09 06       	cpc	r0, r25
    3f4c:	08 95       	ret

00003f4e <__fp_pscB>:
    3f4e:	00 24       	eor	r0, r0
    3f50:	0a 94       	dec	r0
    3f52:	12 16       	cp	r1, r18
    3f54:	13 06       	cpc	r1, r19
    3f56:	14 06       	cpc	r1, r20
    3f58:	05 06       	cpc	r0, r21
    3f5a:	08 95       	ret

00003f5c <__fp_round>:
    3f5c:	09 2e       	mov	r0, r25
    3f5e:	03 94       	inc	r0
    3f60:	00 0c       	add	r0, r0
    3f62:	11 f4       	brne	.+4      	; 0x3f68 <__fp_round+0xc>
    3f64:	88 23       	and	r24, r24
    3f66:	52 f0       	brmi	.+20     	; 0x3f7c <__fp_round+0x20>
    3f68:	bb 0f       	add	r27, r27
    3f6a:	40 f4       	brcc	.+16     	; 0x3f7c <__fp_round+0x20>
    3f6c:	bf 2b       	or	r27, r31
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <__fp_round+0x18>
    3f70:	60 ff       	sbrs	r22, 0
    3f72:	04 c0       	rjmp	.+8      	; 0x3f7c <__fp_round+0x20>
    3f74:	6f 5f       	subi	r22, 0xFF	; 255
    3f76:	7f 4f       	sbci	r23, 0xFF	; 255
    3f78:	8f 4f       	sbci	r24, 0xFF	; 255
    3f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7c:	08 95       	ret

00003f7e <__fp_split3>:
    3f7e:	57 fd       	sbrc	r21, 7
    3f80:	90 58       	subi	r25, 0x80	; 128
    3f82:	44 0f       	add	r20, r20
    3f84:	55 1f       	adc	r21, r21
    3f86:	59 f0       	breq	.+22     	; 0x3f9e <__fp_splitA+0x10>
    3f88:	5f 3f       	cpi	r21, 0xFF	; 255
    3f8a:	71 f0       	breq	.+28     	; 0x3fa8 <__fp_splitA+0x1a>
    3f8c:	47 95       	ror	r20

00003f8e <__fp_splitA>:
    3f8e:	88 0f       	add	r24, r24
    3f90:	97 fb       	bst	r25, 7
    3f92:	99 1f       	adc	r25, r25
    3f94:	61 f0       	breq	.+24     	; 0x3fae <__fp_splitA+0x20>
    3f96:	9f 3f       	cpi	r25, 0xFF	; 255
    3f98:	79 f0       	breq	.+30     	; 0x3fb8 <__fp_splitA+0x2a>
    3f9a:	87 95       	ror	r24
    3f9c:	08 95       	ret
    3f9e:	12 16       	cp	r1, r18
    3fa0:	13 06       	cpc	r1, r19
    3fa2:	14 06       	cpc	r1, r20
    3fa4:	55 1f       	adc	r21, r21
    3fa6:	f2 cf       	rjmp	.-28     	; 0x3f8c <__fp_split3+0xe>
    3fa8:	46 95       	lsr	r20
    3faa:	f1 df       	rcall	.-30     	; 0x3f8e <__fp_splitA>
    3fac:	08 c0       	rjmp	.+16     	; 0x3fbe <__fp_splitA+0x30>
    3fae:	16 16       	cp	r1, r22
    3fb0:	17 06       	cpc	r1, r23
    3fb2:	18 06       	cpc	r1, r24
    3fb4:	99 1f       	adc	r25, r25
    3fb6:	f1 cf       	rjmp	.-30     	; 0x3f9a <__fp_splitA+0xc>
    3fb8:	86 95       	lsr	r24
    3fba:	71 05       	cpc	r23, r1
    3fbc:	61 05       	cpc	r22, r1
    3fbe:	08 94       	sec
    3fc0:	08 95       	ret

00003fc2 <__fp_zero>:
    3fc2:	e8 94       	clt

00003fc4 <__fp_szero>:
    3fc4:	bb 27       	eor	r27, r27
    3fc6:	66 27       	eor	r22, r22
    3fc8:	77 27       	eor	r23, r23
    3fca:	cb 01       	movw	r24, r22
    3fcc:	97 f9       	bld	r25, 7
    3fce:	08 95       	ret

00003fd0 <__gesf2>:
    3fd0:	8a df       	rcall	.-236    	; 0x3ee6 <__fp_cmp>
    3fd2:	08 f4       	brcc	.+2      	; 0x3fd6 <__gesf2+0x6>
    3fd4:	8f ef       	ldi	r24, 0xFF	; 255
    3fd6:	08 95       	ret

00003fd8 <__mulsf3>:
    3fd8:	0b d0       	rcall	.+22     	; 0x3ff0 <__mulsf3x>
    3fda:	c0 cf       	rjmp	.-128    	; 0x3f5c <__fp_round>
    3fdc:	b1 df       	rcall	.-158    	; 0x3f40 <__fp_pscA>
    3fde:	28 f0       	brcs	.+10     	; 0x3fea <__mulsf3+0x12>
    3fe0:	b6 df       	rcall	.-148    	; 0x3f4e <__fp_pscB>
    3fe2:	18 f0       	brcs	.+6      	; 0x3fea <__mulsf3+0x12>
    3fe4:	95 23       	and	r25, r21
    3fe6:	09 f0       	breq	.+2      	; 0x3fea <__mulsf3+0x12>
    3fe8:	a2 cf       	rjmp	.-188    	; 0x3f2e <__fp_inf>
    3fea:	a7 cf       	rjmp	.-178    	; 0x3f3a <__fp_nan>
    3fec:	11 24       	eor	r1, r1
    3fee:	ea cf       	rjmp	.-44     	; 0x3fc4 <__fp_szero>

00003ff0 <__mulsf3x>:
    3ff0:	c6 df       	rcall	.-116    	; 0x3f7e <__fp_split3>
    3ff2:	a0 f3       	brcs	.-24     	; 0x3fdc <__mulsf3+0x4>

00003ff4 <__mulsf3_pse>:
    3ff4:	95 9f       	mul	r25, r21
    3ff6:	d1 f3       	breq	.-12     	; 0x3fec <__mulsf3+0x14>
    3ff8:	95 0f       	add	r25, r21
    3ffa:	50 e0       	ldi	r21, 0x00	; 0
    3ffc:	55 1f       	adc	r21, r21
    3ffe:	62 9f       	mul	r22, r18
    4000:	f0 01       	movw	r30, r0
    4002:	72 9f       	mul	r23, r18
    4004:	bb 27       	eor	r27, r27
    4006:	f0 0d       	add	r31, r0
    4008:	b1 1d       	adc	r27, r1
    400a:	63 9f       	mul	r22, r19
    400c:	aa 27       	eor	r26, r26
    400e:	f0 0d       	add	r31, r0
    4010:	b1 1d       	adc	r27, r1
    4012:	aa 1f       	adc	r26, r26
    4014:	64 9f       	mul	r22, r20
    4016:	66 27       	eor	r22, r22
    4018:	b0 0d       	add	r27, r0
    401a:	a1 1d       	adc	r26, r1
    401c:	66 1f       	adc	r22, r22
    401e:	82 9f       	mul	r24, r18
    4020:	22 27       	eor	r18, r18
    4022:	b0 0d       	add	r27, r0
    4024:	a1 1d       	adc	r26, r1
    4026:	62 1f       	adc	r22, r18
    4028:	73 9f       	mul	r23, r19
    402a:	b0 0d       	add	r27, r0
    402c:	a1 1d       	adc	r26, r1
    402e:	62 1f       	adc	r22, r18
    4030:	83 9f       	mul	r24, r19
    4032:	a0 0d       	add	r26, r0
    4034:	61 1d       	adc	r22, r1
    4036:	22 1f       	adc	r18, r18
    4038:	74 9f       	mul	r23, r20
    403a:	33 27       	eor	r19, r19
    403c:	a0 0d       	add	r26, r0
    403e:	61 1d       	adc	r22, r1
    4040:	23 1f       	adc	r18, r19
    4042:	84 9f       	mul	r24, r20
    4044:	60 0d       	add	r22, r0
    4046:	21 1d       	adc	r18, r1
    4048:	82 2f       	mov	r24, r18
    404a:	76 2f       	mov	r23, r22
    404c:	6a 2f       	mov	r22, r26
    404e:	11 24       	eor	r1, r1
    4050:	9f 57       	subi	r25, 0x7F	; 127
    4052:	50 40       	sbci	r21, 0x00	; 0
    4054:	8a f0       	brmi	.+34     	; 0x4078 <__mulsf3_pse+0x84>
    4056:	e1 f0       	breq	.+56     	; 0x4090 <__mulsf3_pse+0x9c>
    4058:	88 23       	and	r24, r24
    405a:	4a f0       	brmi	.+18     	; 0x406e <__mulsf3_pse+0x7a>
    405c:	ee 0f       	add	r30, r30
    405e:	ff 1f       	adc	r31, r31
    4060:	bb 1f       	adc	r27, r27
    4062:	66 1f       	adc	r22, r22
    4064:	77 1f       	adc	r23, r23
    4066:	88 1f       	adc	r24, r24
    4068:	91 50       	subi	r25, 0x01	; 1
    406a:	50 40       	sbci	r21, 0x00	; 0
    406c:	a9 f7       	brne	.-22     	; 0x4058 <__mulsf3_pse+0x64>
    406e:	9e 3f       	cpi	r25, 0xFE	; 254
    4070:	51 05       	cpc	r21, r1
    4072:	70 f0       	brcs	.+28     	; 0x4090 <__mulsf3_pse+0x9c>
    4074:	5c cf       	rjmp	.-328    	; 0x3f2e <__fp_inf>
    4076:	a6 cf       	rjmp	.-180    	; 0x3fc4 <__fp_szero>
    4078:	5f 3f       	cpi	r21, 0xFF	; 255
    407a:	ec f3       	brlt	.-6      	; 0x4076 <__mulsf3_pse+0x82>
    407c:	98 3e       	cpi	r25, 0xE8	; 232
    407e:	dc f3       	brlt	.-10     	; 0x4076 <__mulsf3_pse+0x82>
    4080:	86 95       	lsr	r24
    4082:	77 95       	ror	r23
    4084:	67 95       	ror	r22
    4086:	b7 95       	ror	r27
    4088:	f7 95       	ror	r31
    408a:	e7 95       	ror	r30
    408c:	9f 5f       	subi	r25, 0xFF	; 255
    408e:	c1 f7       	brne	.-16     	; 0x4080 <__mulsf3_pse+0x8c>
    4090:	fe 2b       	or	r31, r30
    4092:	88 0f       	add	r24, r24
    4094:	91 1d       	adc	r25, r1
    4096:	96 95       	lsr	r25
    4098:	87 95       	ror	r24
    409a:	97 f9       	bld	r25, 7
    409c:	08 95       	ret

0000409e <__udivmodhi4>:
    409e:	aa 1b       	sub	r26, r26
    40a0:	bb 1b       	sub	r27, r27
    40a2:	51 e1       	ldi	r21, 0x11	; 17
    40a4:	07 c0       	rjmp	.+14     	; 0x40b4 <__udivmodhi4_ep>

000040a6 <__udivmodhi4_loop>:
    40a6:	aa 1f       	adc	r26, r26
    40a8:	bb 1f       	adc	r27, r27
    40aa:	a6 17       	cp	r26, r22
    40ac:	b7 07       	cpc	r27, r23
    40ae:	10 f0       	brcs	.+4      	; 0x40b4 <__udivmodhi4_ep>
    40b0:	a6 1b       	sub	r26, r22
    40b2:	b7 0b       	sbc	r27, r23

000040b4 <__udivmodhi4_ep>:
    40b4:	88 1f       	adc	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	5a 95       	dec	r21
    40ba:	a9 f7       	brne	.-22     	; 0x40a6 <__udivmodhi4_loop>
    40bc:	80 95       	com	r24
    40be:	90 95       	com	r25
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	08 95       	ret

000040c6 <__divmodhi4>:
    40c6:	97 fb       	bst	r25, 7
    40c8:	07 2e       	mov	r0, r23
    40ca:	16 f4       	brtc	.+4      	; 0x40d0 <__divmodhi4+0xa>
    40cc:	00 94       	com	r0
    40ce:	06 d0       	rcall	.+12     	; 0x40dc <__divmodhi4_neg1>
    40d0:	77 fd       	sbrc	r23, 7
    40d2:	08 d0       	rcall	.+16     	; 0x40e4 <__divmodhi4_neg2>
    40d4:	e4 df       	rcall	.-56     	; 0x409e <__udivmodhi4>
    40d6:	07 fc       	sbrc	r0, 7
    40d8:	05 d0       	rcall	.+10     	; 0x40e4 <__divmodhi4_neg2>
    40da:	3e f4       	brtc	.+14     	; 0x40ea <__divmodhi4_exit>

000040dc <__divmodhi4_neg1>:
    40dc:	90 95       	com	r25
    40de:	81 95       	neg	r24
    40e0:	9f 4f       	sbci	r25, 0xFF	; 255
    40e2:	08 95       	ret

000040e4 <__divmodhi4_neg2>:
    40e4:	70 95       	com	r23
    40e6:	61 95       	neg	r22
    40e8:	7f 4f       	sbci	r23, 0xFF	; 255

000040ea <__divmodhi4_exit>:
    40ea:	08 95       	ret

000040ec <__udivmodsi4>:
    40ec:	a1 e2       	ldi	r26, 0x21	; 33
    40ee:	1a 2e       	mov	r1, r26
    40f0:	aa 1b       	sub	r26, r26
    40f2:	bb 1b       	sub	r27, r27
    40f4:	fd 01       	movw	r30, r26
    40f6:	0d c0       	rjmp	.+26     	; 0x4112 <__udivmodsi4_ep>

000040f8 <__udivmodsi4_loop>:
    40f8:	aa 1f       	adc	r26, r26
    40fa:	bb 1f       	adc	r27, r27
    40fc:	ee 1f       	adc	r30, r30
    40fe:	ff 1f       	adc	r31, r31
    4100:	a2 17       	cp	r26, r18
    4102:	b3 07       	cpc	r27, r19
    4104:	e4 07       	cpc	r30, r20
    4106:	f5 07       	cpc	r31, r21
    4108:	20 f0       	brcs	.+8      	; 0x4112 <__udivmodsi4_ep>
    410a:	a2 1b       	sub	r26, r18
    410c:	b3 0b       	sbc	r27, r19
    410e:	e4 0b       	sbc	r30, r20
    4110:	f5 0b       	sbc	r31, r21

00004112 <__udivmodsi4_ep>:
    4112:	66 1f       	adc	r22, r22
    4114:	77 1f       	adc	r23, r23
    4116:	88 1f       	adc	r24, r24
    4118:	99 1f       	adc	r25, r25
    411a:	1a 94       	dec	r1
    411c:	69 f7       	brne	.-38     	; 0x40f8 <__udivmodsi4_loop>
    411e:	60 95       	com	r22
    4120:	70 95       	com	r23
    4122:	80 95       	com	r24
    4124:	90 95       	com	r25
    4126:	9b 01       	movw	r18, r22
    4128:	ac 01       	movw	r20, r24
    412a:	bd 01       	movw	r22, r26
    412c:	cf 01       	movw	r24, r30
    412e:	08 95       	ret

00004130 <__tablejump2__>:
    4130:	ee 0f       	add	r30, r30
    4132:	ff 1f       	adc	r31, r31
    4134:	05 90       	lpm	r0, Z+
    4136:	f4 91       	lpm	r31, Z
    4138:	e0 2d       	mov	r30, r0
    413a:	09 94       	ijmp

0000413c <_exit>:
    413c:	f8 94       	cli

0000413e <__stop_program>:
    413e:	ff cf       	rjmp	.-2      	; 0x413e <__stop_program>
