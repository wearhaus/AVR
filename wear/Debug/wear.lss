
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bbc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000102  00802000  00004bbc  00004c70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009af  00802102  00802102  00004d72  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  00004d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000720  00000000  00000000  00004df0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00017a92  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000033b9  00000000  00000000  0001cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c3c7  00000000  00000000  0002035b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000016f4  00000000  00000000  0002c724  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0002dbb7  00000000  00000000  0002de18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007a95  00000000  00000000  0005b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000840  00000000  00000000  00063468  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000cb13  00000000  00000000  00063ca8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c4       	rjmp	.+2172   	; 0x87e <__ctors_end>
       2:	00 00       	nop
       4:	59 c4       	rjmp	.+2226   	; 0x8b8 <__bad_interrupt>
       6:	00 00       	nop
       8:	57 c4       	rjmp	.+2222   	; 0x8b8 <__bad_interrupt>
       a:	00 00       	nop
       c:	55 c4       	rjmp	.+2218   	; 0x8b8 <__bad_interrupt>
       e:	00 00       	nop
      10:	53 c4       	rjmp	.+2214   	; 0x8b8 <__bad_interrupt>
      12:	00 00       	nop
      14:	51 c4       	rjmp	.+2210   	; 0x8b8 <__bad_interrupt>
      16:	00 00       	nop
      18:	4f c4       	rjmp	.+2206   	; 0x8b8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4d c4       	rjmp	.+2202   	; 0x8b8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4b c4       	rjmp	.+2198   	; 0x8b8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_9>
      28:	47 c4       	rjmp	.+2190   	; 0x8b8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__vector_11>
      30:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__vector_12>
      34:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <__vector_13>
      38:	0c 94 0a 1e 	jmp	0x3c14	; 0x3c14 <__vector_14>
      3c:	0c 94 33 1e 	jmp	0x3c66	; 0x3c66 <__vector_15>
      40:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__vector_16>
      44:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__vector_17>
      48:	0c 94 ae 1e 	jmp	0x3d5c	; 0x3d5c <__vector_18>
      4c:	0c 94 d7 1e 	jmp	0x3dae	; 0x3dae <__vector_19>
      50:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <__vector_20>
      54:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__vector_21>
      58:	2f c4       	rjmp	.+2142   	; 0x8b8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__vector_23>
      60:	2b c4       	rjmp	.+2134   	; 0x8b8 <__bad_interrupt>
      62:	00 00       	nop
      64:	29 c4       	rjmp	.+2130   	; 0x8b8 <__bad_interrupt>
      66:	00 00       	nop
      68:	27 c4       	rjmp	.+2126   	; 0x8b8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	25 c4       	rjmp	.+2122   	; 0x8b8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	23 c4       	rjmp	.+2118   	; 0x8b8 <__bad_interrupt>
      72:	00 00       	nop
      74:	21 c4       	rjmp	.+2114   	; 0x8b8 <__bad_interrupt>
      76:	00 00       	nop
      78:	1f c4       	rjmp	.+2110   	; 0x8b8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1d c4       	rjmp	.+2106   	; 0x8b8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	1b c4       	rjmp	.+2102   	; 0x8b8 <__bad_interrupt>
      82:	00 00       	nop
      84:	19 c4       	rjmp	.+2098   	; 0x8b8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__vector_34>
      8c:	0c 94 bd 17 	jmp	0x2f7a	; 0x2f7a <__vector_35>
      90:	0c 94 52 1f 	jmp	0x3ea4	; 0x3ea4 <__vector_36>
      94:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__vector_37>
      98:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__vector_38>
      9c:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__vector_39>
      a0:	0c 94 45 13 	jmp	0x268a	; 0x268a <__vector_40>
      a4:	09 c4       	rjmp	.+2066   	; 0x8b8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	07 c4       	rjmp	.+2062   	; 0x8b8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	2d 11       	cpse	r18, r13
      ae:	32 11       	cpse	r19, r2
      b0:	64 11       	cpse	r22, r4
      b2:	64 11       	cpse	r22, r4
      b4:	64 11       	cpse	r22, r4
      b6:	64 11       	cpse	r22, r4
      b8:	64 11       	cpse	r22, r4
      ba:	64 11       	cpse	r22, r4
      bc:	64 11       	cpse	r22, r4
      be:	64 11       	cpse	r22, r4
      c0:	64 11       	cpse	r22, r4
      c2:	64 11       	cpse	r22, r4
      c4:	64 11       	cpse	r22, r4
      c6:	64 11       	cpse	r22, r4
      c8:	64 11       	cpse	r22, r4
      ca:	64 11       	cpse	r22, r4
      cc:	37 11       	cpse	r19, r7
      ce:	64 11       	cpse	r22, r4
      d0:	64 11       	cpse	r22, r4
      d2:	64 11       	cpse	r22, r4
      d4:	64 11       	cpse	r22, r4
      d6:	64 11       	cpse	r22, r4
      d8:	64 11       	cpse	r22, r4
      da:	64 11       	cpse	r22, r4
      dc:	64 11       	cpse	r22, r4
      de:	64 11       	cpse	r22, r4
      e0:	64 11       	cpse	r22, r4
      e2:	64 11       	cpse	r22, r4
      e4:	64 11       	cpse	r22, r4
      e6:	64 11       	cpse	r22, r4
      e8:	64 11       	cpse	r22, r4
      ea:	64 11       	cpse	r22, r4
      ec:	64 11       	cpse	r22, r4
      ee:	3c 11       	cpse	r19, r12
      f0:	41 11       	cpse	r20, r1
      f2:	64 11       	cpse	r22, r4
      f4:	64 11       	cpse	r22, r4
      f6:	64 11       	cpse	r22, r4
      f8:	64 11       	cpse	r22, r4
      fa:	64 11       	cpse	r22, r4
      fc:	64 11       	cpse	r22, r4
      fe:	64 11       	cpse	r22, r4
     100:	64 11       	cpse	r22, r4
     102:	64 11       	cpse	r22, r4
     104:	64 11       	cpse	r22, r4
     106:	64 11       	cpse	r22, r4
     108:	64 11       	cpse	r22, r4
     10a:	64 11       	cpse	r22, r4
     10c:	64 11       	cpse	r22, r4
     10e:	46 11       	cpse	r20, r6
     110:	4b 11       	cpse	r20, r11
     112:	64 11       	cpse	r22, r4
     114:	64 11       	cpse	r22, r4
     116:	64 11       	cpse	r22, r4
     118:	64 11       	cpse	r22, r4
     11a:	64 11       	cpse	r22, r4
     11c:	64 11       	cpse	r22, r4
     11e:	64 11       	cpse	r22, r4
     120:	64 11       	cpse	r22, r4
     122:	64 11       	cpse	r22, r4
     124:	64 11       	cpse	r22, r4
     126:	64 11       	cpse	r22, r4
     128:	64 11       	cpse	r22, r4
     12a:	64 11       	cpse	r22, r4
     12c:	64 11       	cpse	r22, r4
     12e:	50 11       	cpse	r21, r0
     130:	55 11       	cpse	r21, r5
     132:	64 11       	cpse	r22, r4
     134:	64 11       	cpse	r22, r4
     136:	64 11       	cpse	r22, r4
     138:	64 11       	cpse	r22, r4
     13a:	64 11       	cpse	r22, r4
     13c:	64 11       	cpse	r22, r4
     13e:	64 11       	cpse	r22, r4
     140:	64 11       	cpse	r22, r4
     142:	64 11       	cpse	r22, r4
     144:	64 11       	cpse	r22, r4
     146:	64 11       	cpse	r22, r4
     148:	64 11       	cpse	r22, r4
     14a:	64 11       	cpse	r22, r4
     14c:	64 11       	cpse	r22, r4
     14e:	5a 11       	cpse	r21, r10
     150:	5f 11       	cpse	r21, r15
     152:	41 13       	cpse	r20, r17
     154:	41 13       	cpse	r20, r17
     156:	41 13       	cpse	r20, r17
     158:	41 13       	cpse	r20, r17
     15a:	41 13       	cpse	r20, r17
     15c:	41 13       	cpse	r20, r17
     15e:	43 13       	cpse	r20, r19
     160:	43 13       	cpse	r20, r19
     162:	43 13       	cpse	r20, r19
     164:	43 13       	cpse	r20, r19
     166:	43 13       	cpse	r20, r19
     168:	43 13       	cpse	r20, r19
     16a:	43 13       	cpse	r20, r19
     16c:	43 13       	cpse	r20, r19
     16e:	43 13       	cpse	r20, r19
     170:	43 13       	cpse	r20, r19
     172:	43 13       	cpse	r20, r19
     174:	43 13       	cpse	r20, r19
     176:	43 13       	cpse	r20, r19
     178:	43 13       	cpse	r20, r19
     17a:	43 13       	cpse	r20, r19
     17c:	43 13       	cpse	r20, r19
     17e:	43 13       	cpse	r20, r19
     180:	43 13       	cpse	r20, r19
     182:	43 13       	cpse	r20, r19
     184:	43 13       	cpse	r20, r19
     186:	43 13       	cpse	r20, r19
     188:	43 13       	cpse	r20, r19
     18a:	43 13       	cpse	r20, r19
     18c:	43 13       	cpse	r20, r19
     18e:	43 13       	cpse	r20, r19
     190:	43 13       	cpse	r20, r19
     192:	43 13       	cpse	r20, r19
     194:	43 13       	cpse	r20, r19
     196:	43 13       	cpse	r20, r19
     198:	43 13       	cpse	r20, r19
     19a:	43 13       	cpse	r20, r19
     19c:	43 13       	cpse	r20, r19
     19e:	43 13       	cpse	r20, r19
     1a0:	43 13       	cpse	r20, r19
     1a2:	43 13       	cpse	r20, r19
     1a4:	43 13       	cpse	r20, r19
     1a6:	43 13       	cpse	r20, r19
     1a8:	43 13       	cpse	r20, r19
     1aa:	43 13       	cpse	r20, r19
     1ac:	43 13       	cpse	r20, r19
     1ae:	43 13       	cpse	r20, r19
     1b0:	43 13       	cpse	r20, r19
     1b2:	43 13       	cpse	r20, r19
     1b4:	43 13       	cpse	r20, r19
     1b6:	43 13       	cpse	r20, r19
     1b8:	43 13       	cpse	r20, r19
     1ba:	43 13       	cpse	r20, r19
     1bc:	43 13       	cpse	r20, r19
     1be:	43 13       	cpse	r20, r19
     1c0:	43 13       	cpse	r20, r19
     1c2:	43 13       	cpse	r20, r19
     1c4:	43 13       	cpse	r20, r19
     1c6:	43 13       	cpse	r20, r19
     1c8:	43 13       	cpse	r20, r19
     1ca:	43 13       	cpse	r20, r19
     1cc:	43 13       	cpse	r20, r19
     1ce:	43 13       	cpse	r20, r19
     1d0:	43 13       	cpse	r20, r19
     1d2:	43 13       	cpse	r20, r19
     1d4:	41 13       	cpse	r20, r17
     1d6:	41 13       	cpse	r20, r17
     1d8:	43 13       	cpse	r20, r19
     1da:	43 13       	cpse	r20, r19
     1dc:	43 13       	cpse	r20, r19
     1de:	41 13       	cpse	r20, r17
     1e0:	41 13       	cpse	r20, r17
     1e2:	43 13       	cpse	r20, r19
     1e4:	43 13       	cpse	r20, r19
     1e6:	43 13       	cpse	r20, r19
     1e8:	43 13       	cpse	r20, r19
     1ea:	41 13       	cpse	r20, r17
     1ec:	43 13       	cpse	r20, r19
     1ee:	43 13       	cpse	r20, r19
     1f0:	41 13       	cpse	r20, r17
     1f2:	43 13       	cpse	r20, r19
     1f4:	41 13       	cpse	r20, r17
     1f6:	43 13       	cpse	r20, r19
     1f8:	41 13       	cpse	r20, r17
     1fa:	43 13       	cpse	r20, r19
     1fc:	43 13       	cpse	r20, r19
     1fe:	41 13       	cpse	r20, r17
     200:	43 13       	cpse	r20, r19
     202:	43 13       	cpse	r20, r19
     204:	43 13       	cpse	r20, r19
     206:	43 13       	cpse	r20, r19
     208:	43 13       	cpse	r20, r19
     20a:	43 13       	cpse	r20, r19
     20c:	43 13       	cpse	r20, r19
     20e:	43 13       	cpse	r20, r19
     210:	43 13       	cpse	r20, r19
     212:	43 13       	cpse	r20, r19
     214:	43 13       	cpse	r20, r19
     216:	41 13       	cpse	r20, r17
     218:	43 13       	cpse	r20, r19
     21a:	43 13       	cpse	r20, r19
     21c:	43 13       	cpse	r20, r19
     21e:	43 13       	cpse	r20, r19
     220:	43 13       	cpse	r20, r19
     222:	43 13       	cpse	r20, r19
     224:	43 13       	cpse	r20, r19
     226:	43 13       	cpse	r20, r19
     228:	43 13       	cpse	r20, r19
     22a:	43 13       	cpse	r20, r19
     22c:	43 13       	cpse	r20, r19
     22e:	43 13       	cpse	r20, r19
     230:	41 13       	cpse	r20, r17
     232:	15 14       	cp	r1, r5
     234:	24 14       	cp	r2, r4
     236:	68 14       	cp	r6, r8
     238:	6d 14       	cp	r6, r13
     23a:	72 14       	cp	r7, r2
     23c:	77 14       	cp	r7, r7
     23e:	e7 14       	cp	r14, r7
     240:	e7 14       	cp	r14, r7
     242:	e7 14       	cp	r14, r7
     244:	e7 14       	cp	r14, r7
     246:	e7 14       	cp	r14, r7
     248:	e7 14       	cp	r14, r7
     24a:	e7 14       	cp	r14, r7
     24c:	e7 14       	cp	r14, r7
     24e:	e7 14       	cp	r14, r7
     250:	e7 14       	cp	r14, r7
     252:	e7 14       	cp	r14, r7
     254:	e7 14       	cp	r14, r7
     256:	e7 14       	cp	r14, r7
     258:	e7 14       	cp	r14, r7
     25a:	e7 14       	cp	r14, r7
     25c:	e7 14       	cp	r14, r7
     25e:	e7 14       	cp	r14, r7
     260:	e7 14       	cp	r14, r7
     262:	e7 14       	cp	r14, r7
     264:	e7 14       	cp	r14, r7
     266:	e7 14       	cp	r14, r7
     268:	e7 14       	cp	r14, r7
     26a:	e7 14       	cp	r14, r7
     26c:	e7 14       	cp	r14, r7
     26e:	e7 14       	cp	r14, r7
     270:	e7 14       	cp	r14, r7
     272:	e7 14       	cp	r14, r7
     274:	e7 14       	cp	r14, r7
     276:	e7 14       	cp	r14, r7
     278:	e7 14       	cp	r14, r7
     27a:	e7 14       	cp	r14, r7
     27c:	e7 14       	cp	r14, r7
     27e:	e7 14       	cp	r14, r7
     280:	e7 14       	cp	r14, r7
     282:	e7 14       	cp	r14, r7
     284:	e7 14       	cp	r14, r7
     286:	e7 14       	cp	r14, r7
     288:	e7 14       	cp	r14, r7
     28a:	e7 14       	cp	r14, r7
     28c:	e7 14       	cp	r14, r7
     28e:	e7 14       	cp	r14, r7
     290:	e7 14       	cp	r14, r7
     292:	e7 14       	cp	r14, r7
     294:	e7 14       	cp	r14, r7
     296:	e7 14       	cp	r14, r7
     298:	e7 14       	cp	r14, r7
     29a:	e7 14       	cp	r14, r7
     29c:	e7 14       	cp	r14, r7
     29e:	e7 14       	cp	r14, r7
     2a0:	e7 14       	cp	r14, r7
     2a2:	e7 14       	cp	r14, r7
     2a4:	e7 14       	cp	r14, r7
     2a6:	e7 14       	cp	r14, r7
     2a8:	e7 14       	cp	r14, r7
     2aa:	e7 14       	cp	r14, r7
     2ac:	e7 14       	cp	r14, r7
     2ae:	e7 14       	cp	r14, r7
     2b0:	e7 14       	cp	r14, r7
     2b2:	e7 14       	cp	r14, r7
     2b4:	7e 14       	cp	r7, r14
     2b6:	8c 13       	cpse	r24, r28
     2b8:	e7 14       	cp	r14, r7
     2ba:	e7 14       	cp	r14, r7
     2bc:	e7 14       	cp	r14, r7
     2be:	84 14       	cp	r8, r4
     2c0:	e1 14       	cp	r14, r1
     2c2:	e7 14       	cp	r14, r7
     2c4:	e7 14       	cp	r14, r7
     2c6:	e7 14       	cp	r14, r7
     2c8:	e7 14       	cp	r14, r7
     2ca:	7c 14       	cp	r7, r12
     2cc:	e7 14       	cp	r14, r7
     2ce:	e7 14       	cp	r14, r7
     2d0:	f9 13       	cpse	r31, r25
     2d2:	e7 14       	cp	r14, r7
     2d4:	e3 14       	cp	r14, r3
     2d6:	e7 14       	cp	r14, r7
     2d8:	86 14       	cp	r8, r6
     2da:	e7 14       	cp	r14, r7
     2dc:	e7 14       	cp	r14, r7
     2de:	e4 14       	cp	r14, r4
     2e0:	e7 14       	cp	r14, r7
     2e2:	e7 14       	cp	r14, r7
     2e4:	e7 14       	cp	r14, r7
     2e6:	e7 14       	cp	r14, r7
     2e8:	e7 14       	cp	r14, r7
     2ea:	e7 14       	cp	r14, r7
     2ec:	e7 14       	cp	r14, r7
     2ee:	e7 14       	cp	r14, r7
     2f0:	e7 14       	cp	r14, r7
     2f2:	e7 14       	cp	r14, r7
     2f4:	e7 14       	cp	r14, r7
     2f6:	82 14       	cp	r8, r2
     2f8:	e7 14       	cp	r14, r7
     2fa:	e7 14       	cp	r14, r7
     2fc:	e7 14       	cp	r14, r7
     2fe:	e7 14       	cp	r14, r7
     300:	e7 14       	cp	r14, r7
     302:	e7 14       	cp	r14, r7
     304:	e7 14       	cp	r14, r7
     306:	e7 14       	cp	r14, r7
     308:	e7 14       	cp	r14, r7
     30a:	e7 14       	cp	r14, r7
     30c:	e7 14       	cp	r14, r7
     30e:	e7 14       	cp	r14, r7
     310:	80 14       	cp	r8, r0
     312:	30 14       	cp	r3, r0
     314:	38 14       	cp	r3, r8
     316:	40 14       	cp	r4, r0
     318:	48 14       	cp	r4, r8
     31a:	50 14       	cp	r5, r0
     31c:	58 14       	cp	r5, r8
     31e:	60 14       	cp	r6, r0
     320:	8b 1a       	sub	r8, r27
     322:	d1 1a       	sub	r13, r17
     324:	df 1a       	sub	r13, r31
     326:	b5 1a       	sub	r11, r21
     328:	99 1a       	sub	r9, r25
     32a:	c3 1a       	sub	r12, r19
     32c:	a7 1a       	sub	r10, r23

0000032e <__trampolines_end>:
     32e:	00 00       	nop
     330:	14 00       	.word	0x0014	; ????
     332:	50 00       	.word	0x0050	; ????
     334:	b4 00       	.word	0x00b4	; ????
     336:	40 01       	movw	r8, r0
     338:	f3 01       	movw	r30, r6
     33a:	cd 02       	muls	r28, r29
     33c:	cd 03       	fmulsu	r20, r21
     33e:	f3 04       	cpc	r15, r3
     340:	3d 06       	cpc	r3, r29
     342:	ad 07       	cpc	r26, r29
     344:	3f 09       	sbc	r19, r15
     346:	f4 0a       	sbc	r15, r20
     348:	c9 0c       	add	r12, r9
     34a:	bf 0e       	add	r11, r31
     34c:	d4 10       	cpse	r13, r4
     34e:	07 13       	cpse	r16, r23
     350:	55 15       	cp	r21, r5
     352:	be 17       	cp	r27, r30
     354:	41 1a       	sub	r4, r17
     356:	db 1c       	adc	r13, r11
     358:	8b 1f       	adc	r24, r27
     35a:	50 22       	and	r5, r16
     35c:	27 25       	eor	r18, r7
     35e:	0f 28       	or	r0, r15
     360:	06 2b       	or	r16, r22
     362:	0a 2e       	mov	r0, r26
     364:	19 31       	cpi	r17, 0x19	; 25
     366:	32 34       	cpi	r19, 0x42	; 66
     368:	52 37       	cpi	r21, 0x72	; 114
     36a:	77 3a       	cpi	r23, 0xA7	; 167
     36c:	a0 3d       	cpi	r26, 0xD0	; 208
     36e:	cb 40       	sbci	r28, 0x0B	; 11
     370:	f5 43       	sbci	r31, 0x35	; 53
     372:	1c 47       	sbci	r17, 0x7C	; 124
     374:	3f 4a       	sbci	r19, 0xAF	; 175
     376:	5c 4d       	sbci	r21, 0xDC	; 220
     378:	70 50       	subi	r23, 0x00	; 0
     37a:	7a 53       	subi	r23, 0x3A	; 58
     37c:	78 56       	subi	r23, 0x68	; 104
     37e:	67 59       	subi	r22, 0x97	; 151
     380:	47 5c       	subi	r20, 0xC7	; 199
     382:	15 5f       	subi	r17, 0xF5	; 245
     384:	cf 61       	ori	r28, 0x1F	; 31
     386:	75 64       	ori	r23, 0x45	; 69
     388:	03 67       	ori	r16, 0x73	; 115
     38a:	79 69       	ori	r23, 0x99	; 153
     38c:	d6 6b       	ori	r29, 0xB6	; 182
     38e:	16 6e       	ori	r17, 0xE6	; 230
     390:	3a 70       	andi	r19, 0x0A	; 10
     392:	3f 72       	andi	r19, 0x2F	; 47
     394:	26 74       	andi	r18, 0x46	; 70
     396:	eb 75       	andi	r30, 0x5B	; 91
     398:	8f 77       	andi	r24, 0x7F	; 127
     39a:	0f 79       	andi	r16, 0x9F	; 159
     39c:	6d 7a       	andi	r22, 0xAD	; 173
     39e:	a5 7b       	andi	r26, 0xB5	; 181
     3a0:	b8 7c       	andi	r27, 0xC8	; 200
     3a2:	a5 7d       	andi	r26, 0xD5	; 213
     3a4:	6c 7e       	andi	r22, 0xEC	; 236
     3a6:	0b 7f       	andi	r16, 0xFB	; 251
     3a8:	83 7f       	andi	r24, 0xF3	; 243
     3aa:	d3 7f       	andi	r29, 0xF3	; 243
     3ac:	fb 7f       	andi	r31, 0xFB	; 251
     3ae:	fb 7f       	andi	r31, 0xFB	; 251
     3b0:	d3 7f       	andi	r29, 0xF3	; 243
     3b2:	83 7f       	andi	r24, 0xF3	; 243
     3b4:	0b 7f       	andi	r16, 0xFB	; 251
     3b6:	6c 7e       	andi	r22, 0xEC	; 236
     3b8:	a5 7d       	andi	r26, 0xD5	; 213
     3ba:	b8 7c       	andi	r27, 0xC8	; 200
     3bc:	a5 7b       	andi	r26, 0xB5	; 181
     3be:	6d 7a       	andi	r22, 0xAD	; 173
     3c0:	0f 79       	andi	r16, 0x9F	; 159
     3c2:	8f 77       	andi	r24, 0x7F	; 127
     3c4:	eb 75       	andi	r30, 0x5B	; 91
     3c6:	26 74       	andi	r18, 0x46	; 70
     3c8:	3f 72       	andi	r19, 0x2F	; 47
     3ca:	3a 70       	andi	r19, 0x0A	; 10
     3cc:	16 6e       	ori	r17, 0xE6	; 230
     3ce:	d6 6b       	ori	r29, 0xB6	; 182
     3d0:	79 69       	ori	r23, 0x99	; 153
     3d2:	03 67       	ori	r16, 0x73	; 115
     3d4:	75 64       	ori	r23, 0x45	; 69
     3d6:	cf 61       	ori	r28, 0x1F	; 31
     3d8:	15 5f       	subi	r17, 0xF5	; 245
     3da:	47 5c       	subi	r20, 0xC7	; 199
     3dc:	67 59       	subi	r22, 0x97	; 151
     3de:	78 56       	subi	r23, 0x68	; 104
     3e0:	7a 53       	subi	r23, 0x3A	; 58
     3e2:	70 50       	subi	r23, 0x00	; 0
     3e4:	5c 4d       	sbci	r21, 0xDC	; 220
     3e6:	3f 4a       	sbci	r19, 0xAF	; 175
     3e8:	1c 47       	sbci	r17, 0x7C	; 124
     3ea:	f5 43       	sbci	r31, 0x35	; 53
     3ec:	cb 40       	sbci	r28, 0x0B	; 11
     3ee:	a0 3d       	cpi	r26, 0xD0	; 208
     3f0:	77 3a       	cpi	r23, 0xA7	; 167
     3f2:	52 37       	cpi	r21, 0x72	; 114
     3f4:	32 34       	cpi	r19, 0x42	; 66
     3f6:	19 31       	cpi	r17, 0x19	; 25
     3f8:	0a 2e       	mov	r0, r26
     3fa:	06 2b       	or	r16, r22
     3fc:	0f 28       	or	r0, r15
     3fe:	27 25       	eor	r18, r7
     400:	50 22       	and	r5, r16
     402:	8b 1f       	adc	r24, r27
     404:	db 1c       	adc	r13, r11
     406:	41 1a       	sub	r4, r17
     408:	be 17       	cp	r27, r30
     40a:	55 15       	cp	r21, r5
     40c:	07 13       	cpse	r16, r23
     40e:	d4 10       	cpse	r13, r4
     410:	bf 0e       	add	r11, r31
     412:	c9 0c       	add	r12, r9
     414:	f4 0a       	sbc	r15, r20
     416:	3f 09       	sbc	r19, r15
     418:	ad 07       	cpc	r26, r29
     41a:	3d 06       	cpc	r3, r29
     41c:	f3 04       	cpc	r15, r3
     41e:	cd 03       	fmulsu	r20, r21
     420:	cd 02       	muls	r28, r29
     422:	f3 01       	movw	r30, r6
     424:	40 01       	movw	r8, r0
     426:	b4 00       	.word	0x00b4	; ????
     428:	50 00       	.word	0x0050	; ????
     42a:	14 00       	.word	0x0014	; ????
	...

0000042e <_lin_table>:
     42e:	00 01 01 02 02 02 02 03 03 03 03 03 03 04 04 04     ................
     43e:	04 04 04 04 04 05 05 05 05 05 05 05 05 05 05 06     ................
     44e:	06 06 06 06 06 06 06 06 06 06 06 07 07 07 07 07     ................
     45e:	07 07 07 07 07 07 07 07 07 08 08 08 08 08 08 08     ................
     46e:	08 08 08 08 08 08 08 08 08 09 09 09 09 09 09 09     ................
     47e:	09 09 09 09 09 09 09 09 09 09 09 0a 0a 0a 0a 0a     ................
     48e:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0b     ................
     49e:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
     4ae:	0b 0b 0b 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     4be:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
     4ce:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     4de:	0d 0d 0d 0d 0d 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     4ee:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     4fe:	0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     50e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     51e:	0f 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     52e:	00 06 08 0a 0b 0d 0e 0f 10 11 12 13 14 14 15 16     ................
     53e:	17 17 18 19 19 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f 1f     ................
     54e:	20 20 21 21 22 22 23 23 24 24 25 25 26 26 26 27       !!""##$$%%&&&'
     55e:	27 28 28 28 29 29 2a 2a 2a 2b 2b 2b 2c 2c 2d 2d     '((())***+++,,--
     56e:	2d 2e 2e 2e 2f 2f 2f 30 30 30 31 31 31 32 32 32     -...///000111222
     57e:	33 33 33 34 34 34 34 35 35 35 36 36 36 37 37 37     3334444555666777
     58e:	37 38 38 38 39 39 39 39 3a 3a 3a 3b 3b 3b 3b 3c     78889999:::;;;;<
     59e:	3c 3c 3c 3d 3d 3d 3d 3e 3e 3e 3e 3f 3f 3f 3f 40     <<<====>>>>????@
     5ae:	00 0b 10 14 17 19 1c 1e 20 22 24 26 27 29 2a 2c     ........ "$&')*,
     5be:	2d 2f 30 31 33 34 35 36 37 39 3a 3b 3c 3d 3e 3f     -/01345679:;<=>?
     5ce:	40 41 42 43 44 45 46 47 48 48 49 4a 4b 4c 4d 4e     @ABCDEFGHHIJKLMN
     5de:	4e 4f 50 51 52 52 53 54 55 55 56 57 58 58 59 5a     NOPQRRSTUUVWXXYZ
     5ee:	5b 5b 5c 5d 5d 5e 5f 5f 60 61 61 62 63 63 64 65     [[\]]^__`aabccde
     5fe:	65 66 66 67 68 68 69 6a 6a 6b 6b 6c 6d 6d 6e 6e     effghhijjkklmmnn
     60e:	6f 6f 70 71 71 72 72 73 73 74 74 75 76 76 77 77     oopqqrrssttuvvww
     61e:	78 78 79 79 7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7f 7f     xxyyzz{{||}}~~..
     62e:	00 10 17 1c 20 24 27 2a 2d 30 33 35 37 3a 3c 3e     .... $'*-0357:<>
     63e:	40 42 44 46 48 49 4b 4d 4e 50 52 53 55 56 58 59     @BDFHIKMNPRSUVXY
     64e:	5b 5c 5d 5f 60 61 63 64 65 66 68 69 6a 6b 6d 6e     [\]_`acdefhijkmn
     65e:	6f 70 71 72 73 74 76 77 78 79 7a 7b 7c 7d 7e 7f     opqrstvwxyz{|}~.
     66e:	80 81 82 83 84 85 86 87 88 89 8a 8b 8b 8c 8d 8e     ................
     67e:	8f 90 91 92 93 94 94 95 96 97 98 99 99 9a 9b 9c     ................
     68e:	9d 9e 9e 9f a0 a1 a2 a2 a3 a4 a5 a6 a6 a7 a8 a9     ................
     69e:	a9 aa ab ac ac ad ae af af b0 b1 b1 b2 b3 b4 b4     ................
     6ae:	b5 b6 b6 b7 b8 b9 b9 ba bb bb bc bd bd be bf bf     ................
     6be:	c0 c1 c1 c2 c3 c3 c4 c5 c5 c6 c7 c7 c8 c8 c9 ca     ................
     6ce:	ca cb cc cc cd ce ce cf cf d0 d1 d1 d2 d2 d3 d4     ................
     6de:	d4 d5 d5 d6 d7 d7 d8 d8 d9 da da db db dc dd dd     ................
     6ee:	de de df df e0 e1 e1 e2 e2 e3 e3 e4 e5 e5 e6 e6     ................
     6fe:	e7 e7 e8 e8 e9 ea ea eb eb ec ec ed ed ee ee ef     ................
     70e:	ef f0 f1 f1 f2 f2 f3 f3 f4 f4 f5 f5 f6 f6 f7 f7     ................
     71e:	f8 f8 f9 f9 fa fa fb fb fc fc fd fd fe fe ff ff     ................

0000072e <_reorder_table>:
     72e:	70 07 78 0f 74 17 7c 1f 72 27 7a 2f 76 37 7e 3f     p.x.t.|.r'z/v7~?
     73e:	71 47 79 4f 75 57 7d 5f 73 67 7b 6f 60 03 68 0b     qGyOuW}_sg{o`.h.
     74e:	64 13 6c 1b 62 23 6a 2b 66 33 6e 3b 61 43 69 4b     d.l.b#j+f3n;aCiK
     75e:	65 53 6d 5b 50 05 58 0d 54 15 5c 1d 52 25 5a 2d     eSm[P.X.T.\.R%Z-
     76e:	56 35 5e 3d 51 45 59 4d 40 01 48 09 44 11 4c 19     V5^=QEYM@.H.D.L.
     77e:	42 21 4a 29 46 31 4e 39 30 06 38 0e 34 16 3c 1e     B!J)F1N90.8.4.<.
     78e:	32 26 3a 2e 20 02 28 0a 24 12 2c 1a 10 04 18 0c     2&:. .(.$.,.....

0000079e <_cas_constants>:
     79e:	42 76 fc 30 82 5a 82 5a fc 30 42 76 8a 7d f9 18     Bv.0.Z.Z.0Bv.}..
     7ae:	42 76 fc 30 6e 6a 1d 47 82 5a 82 5a 1d 47 6e 6a     Bv.0nj.G.Z.Z.Gnj
     7be:	fc 30 42 76 f9 18 8a 7d 62 7f 8c 0c 8a 7d f9 18     .0Bv...}b....}..
     7ce:	7d 7a 28 25 42 76 fc 30 e3 70 57 3c 6e 6a 1d 47     }z(%Bv.0.pW<nj.G
     7de:	f2 62 34 51 82 5a 82 5a 34 51 f2 62 1d 47 6e 6a     .b4Q.Z.Z4Q.b.Gnj
     7ee:	57 3c e3 70 fc 30 42 76 28 25 7d 7a f9 18 8a 7d     W<.p.0Bv(%}z...}
     7fe:	8c 0c 62 7f d9 7f 48 06 62 7f 8c 0c 9d 7e c8 12     ..b...H.b....~..
     80e:	8a 7d f9 18 2a 7c 1a 1f 7d 7a 28 25 85 78 1f 2b     .}..*|..}z(%.x.+
     81e:	42 76 fc 30 b6 73 ba 36 e3 70 57 3c ca 6d ce 41     Bv.0.s.6.pW<.m.A
     82e:	6e 6a 1d 47 d0 66 40 4c f2 62 34 51 d7 5e f6 55     nj.G.f@L.b4Q.^.U
     83e:	82 5a 82 5a f6 55 d7 5e 34 51 f2 62 40 4c d0 66     .Z.Z.U.^4Q.b@L.f
     84e:	1d 47 6e 6a ce 41 ca 6d 57 3c e3 70 ba 36 b6 73     .Gnj.A.mW<.p.6.s
     85e:	fc 30 42 76 1f 2b 85 78 28 25 7d 7a 1a 1f 2a 7c     .0Bv.+.x(%}z..*|
     86e:	f9 18 8a 7d c8 12 9d 7e 8c 0c 62 7f 48 06 d9 7f     ...}...~..b.H...

0000087e <__ctors_end>:
     87e:	11 24       	eor	r1, r1
     880:	1f be       	out	0x3f, r1	; 63
     882:	cf ef       	ldi	r28, 0xFF	; 255
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df e2       	ldi	r29, 0x2F	; 47
     888:	de bf       	out	0x3e, r29	; 62

0000088a <__do_copy_data>:
     88a:	11 e2       	ldi	r17, 0x21	; 33
     88c:	a0 e0       	ldi	r26, 0x00	; 0
     88e:	b0 e2       	ldi	r27, 0x20	; 32
     890:	ec eb       	ldi	r30, 0xBC	; 188
     892:	fb e4       	ldi	r31, 0x4B	; 75
     894:	02 c0       	rjmp	.+4      	; 0x89a <__do_copy_data+0x10>
     896:	05 90       	lpm	r0, Z+
     898:	0d 92       	st	X+, r0
     89a:	a2 30       	cpi	r26, 0x02	; 2
     89c:	b1 07       	cpc	r27, r17
     89e:	d9 f7       	brne	.-10     	; 0x896 <__do_copy_data+0xc>

000008a0 <__do_clear_bss>:
     8a0:	2a e2       	ldi	r18, 0x2A	; 42
     8a2:	a2 e0       	ldi	r26, 0x02	; 2
     8a4:	b1 e2       	ldi	r27, 0x21	; 33
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <.do_clear_bss_start>

000008a8 <.do_clear_bss_loop>:
     8a8:	1d 92       	st	X+, r1

000008aa <.do_clear_bss_start>:
     8aa:	a1 3b       	cpi	r26, 0xB1	; 177
     8ac:	b2 07       	cpc	r27, r18
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <.do_clear_bss_loop>
     8b0:	0e 94 0e 1a 	call	0x341c	; 0x341c <main>
     8b4:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <_exit>

000008b8 <__bad_interrupt>:
     8b8:	a3 cb       	rjmp	.-2234   	; 0x0 <__vectors>

000008ba <wdt_set_timeout_period>:
 *  operate asynchronously with immediate effect.
 */
void wdt_disable(void)
{
	uint8_t temp = (WDT.CTRL & ~WDT_ENABLE_bm) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     8ba:	60 91 80 00 	lds	r22, 0x0080
     8be:	62 70       	andi	r22, 0x02	; 2
     8c0:	61 60       	ori	r22, 0x01	; 1
     8c2:	24 e0       	ldi	r18, 0x04	; 4
     8c4:	82 9f       	mul	r24, r18
     8c6:	c0 01       	movw	r24, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	8c 73       	andi	r24, 0x3C	; 60
     8cc:	68 2b       	or	r22, r24
     8ce:	80 e8       	ldi	r24, 0x80	; 128
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <ccp_write_io>
     8d6:	e0 e8       	ldi	r30, 0x80	; 128
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	80 fd       	sbrc	r24, 0
     8de:	fd cf       	rjmp	.-6      	; 0x8da <wdt_set_timeout_period+0x20>
     8e0:	08 95       	ret

000008e2 <wdt_enable>:
 *  wait for the WDT to be synchronized to the WDT clock domain before
 *  proceeding
 */
void wdt_enable(void)
{
	uint8_t temp = (WDT.CTRL & WDT_PER_gm) |
     8e2:	60 91 80 00 	lds	r22, 0x0080
     8e6:	6c 73       	andi	r22, 0x3C	; 60
     8e8:	63 60       	ori	r22, 0x03	; 3
			(1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     8ea:	80 e8       	ldi	r24, 0x80	; 128
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     8f2:	e0 e8       	ldi	r30, 0x80	; 128
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	82 81       	ldd	r24, Z+2	; 0x02
     8f8:	80 fd       	sbrc	r24, 0
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <wdt_enable+0x14>
	wdt_wait_while_busy();
}
     8fc:	08 95       	ret

000008fe <init_adc>:
	mean_med_l = start_bubble(bubble_med_l);
	mean_high_l = start_bubble(bubble_high_l);
	
	mean_low_r = start_bubble(bubble_low_r);
	mean_med_r = start_bubble(bubble_med_r);
	mean_high_r = start_bubble(bubble_high_r);
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	61 97       	sbiw	r28, 0x11	; 17
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	18 2f       	mov	r17, r24
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <adc_read_configuration>
     91e:	99 81       	ldd	r25, Y+1	; 0x01
     920:	2a 81       	ldd	r18, Y+2	; 0x02
     922:	2f 78       	andi	r18, 0x8F	; 143
     924:	22 61       	ori	r18, 0x12	; 18
     926:	2a 83       	std	Y+2, r18	; 0x02
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	8c 83       	std	Y+4, r24	; 0x04
     92c:	91 7e       	andi	r25, 0xE1	; 225
     92e:	90 61       	ori	r25, 0x10	; 16
     930:	99 83       	std	Y+1, r25	; 0x01
     932:	1b 82       	std	Y+3, r1	; 0x03
     934:	8f b7       	in	r24, 0x3f	; 63
     936:	f8 94       	cli
     938:	98 e0       	ldi	r25, 0x08	; 8
     93a:	90 93 08 02 	sts	0x0208, r25
     93e:	8f bf       	out	0x3f, r24	; 63
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	92 e0       	ldi	r25, 0x02	; 2
     94a:	0e 94 ad 1c 	call	0x395a	; 0x395a <adc_write_configuration>
     94e:	ae 01       	movw	r20, r28
     950:	48 5f       	subi	r20, 0xF8	; 248
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <adcch_read_configuration>
     95e:	14 30       	cpi	r17, 0x04	; 4
     960:	b9 f0       	breq	.+46     	; 0x990 <init_adc+0x92>
     962:	28 f4       	brcc	.+10     	; 0x96e <init_adc+0x70>
     964:	11 30       	cpi	r17, 0x01	; 1
     966:	41 f0       	breq	.+16     	; 0x978 <init_adc+0x7a>
     968:	12 30       	cpi	r17, 0x02	; 2
     96a:	61 f0       	breq	.+24     	; 0x984 <init_adc+0x86>
     96c:	21 c0       	rjmp	.+66     	; 0x9b0 <init_adc+0xb2>
     96e:	15 30       	cpi	r17, 0x05	; 5
     970:	a9 f0       	breq	.+42     	; 0x99c <init_adc+0x9e>
     972:	16 30       	cpi	r17, 0x06	; 6
     974:	c1 f0       	breq	.+48     	; 0x9a6 <init_adc+0xa8>
     976:	1c c0       	rjmp	.+56     	; 0x9b0 <init_adc+0xb2>
     978:	19 8a       	std	Y+17, r1	; 0x11
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	88 87       	std	Y+8, r24	; 0x08
     97e:	80 e2       	ldi	r24, 0x20	; 32
     980:	89 87       	std	Y+9, r24	; 0x09
     982:	16 c0       	rjmp	.+44     	; 0x9b0 <init_adc+0xb2>
     984:	19 8a       	std	Y+17, r1	; 0x11
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	88 87       	std	Y+8, r24	; 0x08
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	89 87       	std	Y+9, r24	; 0x09
     98e:	10 c0       	rjmp	.+32     	; 0x9b0 <init_adc+0xb2>
     990:	19 8a       	std	Y+17, r1	; 0x11
     992:	8a e0       	ldi	r24, 0x0A	; 10
     994:	88 87       	std	Y+8, r24	; 0x08
     996:	83 e1       	ldi	r24, 0x13	; 19
     998:	89 87       	std	Y+9, r24	; 0x09
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <init_adc+0xb2>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	88 87       	std	Y+8, r24	; 0x08
     9a0:	80 e6       	ldi	r24, 0x60	; 96
     9a2:	89 87       	std	Y+9, r24	; 0x09
     9a4:	05 c0       	rjmp	.+10     	; 0x9b0 <init_adc+0xb2>
     9a6:	18 86       	std	Y+8, r1	; 0x08
     9a8:	88 e0       	ldi	r24, 0x08	; 8
     9aa:	89 87       	std	Y+9, r24	; 0x09
     9ac:	86 e4       	ldi	r24, 0x46	; 70
     9ae:	89 8b       	std	Y+17, r24	; 0x11
     9b0:	8a 85       	ldd	r24, Y+10	; 0x0a
     9b2:	1c 86       	std	Y+12, r1	; 0x0c
     9b4:	80 7f       	andi	r24, 0xF0	; 240
     9b6:	8a 87       	std	Y+10, r24	; 0x0a
     9b8:	ae 01       	movw	r20, r28
     9ba:	48 5f       	subi	r20, 0xF8	; 248
     9bc:	5f 4f       	sbci	r21, 0xFF	; 255
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcch_write_configuration>
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 55 1c 	call	0x38aa	; 0x38aa <adc_enable>
     9d0:	9f b7       	in	r25, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f2 e0       	ldi	r31, 0x02	; 2
     9d8:	80 81       	ld	r24, Z
     9da:	84 60       	ori	r24, 0x04	; 4
     9dc:	80 83       	st	Z, r24
     9de:	9f bf       	out	0x3f, r25	; 63
     9e0:	86 81       	ldd	r24, Z+6	; 0x06
     9e2:	80 ff       	sbrs	r24, 0
     9e4:	fd cf       	rjmp	.-6      	; 0x9e0 <init_adc+0xe2>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	80 93 06 02 	sts	0x0206, r24
     9ec:	61 96       	adiw	r28, 0x11	; 17
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	1f 91       	pop	r17
     9f8:	08 95       	ret

000009fa <change_adc_channel>:
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	2a 97       	sbiw	r28, 0x0a	; 10
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	18 2f       	mov	r17, r24
     a0c:	ae 01       	movw	r20, r28
     a0e:	4f 5f       	subi	r20, 0xFF	; 255
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <adcch_read_configuration>
     a1c:	14 30       	cpi	r17, 0x04	; 4
     a1e:	b9 f0       	breq	.+46     	; 0xa4e <change_adc_channel+0x54>
     a20:	28 f4       	brcc	.+10     	; 0xa2c <change_adc_channel+0x32>
     a22:	11 30       	cpi	r17, 0x01	; 1
     a24:	41 f0       	breq	.+16     	; 0xa36 <change_adc_channel+0x3c>
     a26:	12 30       	cpi	r17, 0x02	; 2
     a28:	61 f0       	breq	.+24     	; 0xa42 <change_adc_channel+0x48>
     a2a:	21 c0       	rjmp	.+66     	; 0xa6e <change_adc_channel+0x74>
     a2c:	15 30       	cpi	r17, 0x05	; 5
     a2e:	a9 f0       	breq	.+42     	; 0xa5a <change_adc_channel+0x60>
     a30:	16 30       	cpi	r17, 0x06	; 6
     a32:	c1 f0       	breq	.+48     	; 0xa64 <change_adc_channel+0x6a>
     a34:	1c c0       	rjmp	.+56     	; 0xa6e <change_adc_channel+0x74>
     a36:	1a 86       	std	Y+10, r1	; 0x0a
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	16 c0       	rjmp	.+44     	; 0xa6e <change_adc_channel+0x74>
     a42:	1a 86       	std	Y+10, r1	; 0x0a
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	89 83       	std	Y+1, r24	; 0x01
     a48:	88 e0       	ldi	r24, 0x08	; 8
     a4a:	8a 83       	std	Y+2, r24	; 0x02
     a4c:	10 c0       	rjmp	.+32     	; 0xa6e <change_adc_channel+0x74>
     a4e:	1a 86       	std	Y+10, r1	; 0x0a
     a50:	8a e0       	ldi	r24, 0x0A	; 10
     a52:	89 83       	std	Y+1, r24	; 0x01
     a54:	83 e1       	ldi	r24, 0x13	; 19
     a56:	8a 83       	std	Y+2, r24	; 0x02
     a58:	0a c0       	rjmp	.+20     	; 0xa6e <change_adc_channel+0x74>
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	80 e6       	ldi	r24, 0x60	; 96
     a60:	8a 83       	std	Y+2, r24	; 0x02
     a62:	05 c0       	rjmp	.+10     	; 0xa6e <change_adc_channel+0x74>
     a64:	19 82       	std	Y+1, r1	; 0x01
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	8a 83       	std	Y+2, r24	; 0x02
     a6a:	86 e4       	ldi	r24, 0x46	; 70
     a6c:	8a 87       	std	Y+10, r24	; 0x0a
     a6e:	ae 01       	movw	r20, r28
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcch_write_configuration>
     a7e:	2a 96       	adiw	r28, 0x0a	; 10
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	08 95       	ret

00000a8c <adc_callback>:
     a8c:	80 91 43 21 	lds	r24, 0x2143
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	09 f4       	brne	.+2      	; 0xa96 <adc_callback+0xa>
     a94:	4c c0       	rjmp	.+152    	; 0xb2e <adc_callback+0xa2>
     a96:	28 f4       	brcc	.+10     	; 0xaa2 <adc_callback+0x16>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	51 f0       	breq	.+20     	; 0xab0 <adc_callback+0x24>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	09 f1       	breq	.+66     	; 0xae2 <adc_callback+0x56>
     aa0:	08 95       	ret
     aa2:	85 30       	cpi	r24, 0x05	; 5
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <adc_callback+0x1c>
     aa6:	69 c0       	rjmp	.+210    	; 0xb7a <adc_callback+0xee>
     aa8:	86 30       	cpi	r24, 0x06	; 6
     aaa:	09 f4       	brne	.+2      	; 0xaae <adc_callback+0x22>
     aac:	75 c0       	rjmp	.+234    	; 0xb98 <adc_callback+0x10c>
     aae:	08 95       	ret
     ab0:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ischarging>
     ab4:	81 11       	cpse	r24, r1
     ab6:	92 c0       	rjmp	.+292    	; 0xbdc <adc_callback+0x150>
     ab8:	80 91 43 21 	lds	r24, 0x2143
     abc:	80 93 42 21 	sts	0x2142, r24
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	80 93 43 21 	sts	0x2143, r24
     ac6:	80 91 43 21 	lds	r24, 0x2143
     aca:	97 df       	rcall	.-210    	; 0x9fa <change_adc_channel>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	98 e0       	ldi	r25, 0x08	; 8
     ad0:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tc45_enable>
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	98 e0       	ldi	r25, 0x08	; 8
     ad8:	0e 94 28 20 	call	0x4050	; 0x4050 <tc45_disable>
     adc:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <load_data_color_led>
     ae0:	08 95       	ret
     ae2:	80 91 03 21 	lds	r24, 0x2103
     ae6:	90 91 04 21 	lds	r25, 0x2104
     aea:	9c 01       	movw	r18, r24
     aec:	2f 5f       	subi	r18, 0xFF	; 255
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	20 93 03 21 	sts	0x2103, r18
     af4:	30 93 04 21 	sts	0x2104, r19
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	fc 01       	movw	r30, r24
     afe:	ec 58       	subi	r30, 0x8C	; 140
     b00:	f6 4d       	sbci	r31, 0xD6	; 214
     b02:	40 83       	st	Z, r20
     b04:	51 83       	std	Z+1, r21	; 0x01
     b06:	80 91 03 21 	lds	r24, 0x2103
     b0a:	90 91 04 21 	lds	r25, 0x2104
     b0e:	80 38       	cpi	r24, 0x80	; 128
     b10:	91 05       	cpc	r25, r1
     b12:	08 f4       	brcc	.+2      	; 0xb16 <adc_callback+0x8a>
     b14:	63 c0       	rjmp	.+198    	; 0xbdc <adc_callback+0x150>
     b16:	10 92 03 21 	sts	0x2103, r1
     b1a:	10 92 04 21 	sts	0x2104, r1
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 02 21 	sts	0x2102, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	98 e0       	ldi	r25, 0x08	; 8
     b28:	0c 94 28 20 	jmp	0x4050	; 0x4050 <tc45_disable>
     b2c:	08 95       	ret
     b2e:	80 91 03 21 	lds	r24, 0x2103
     b32:	90 91 04 21 	lds	r25, 0x2104
     b36:	9c 01       	movw	r18, r24
     b38:	2f 5f       	subi	r18, 0xFF	; 255
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	20 93 03 21 	sts	0x2103, r18
     b40:	30 93 04 21 	sts	0x2104, r19
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	fc 01       	movw	r30, r24
     b4a:	ec 58       	subi	r30, 0x8C	; 140
     b4c:	f6 4d       	sbci	r31, 0xD6	; 214
     b4e:	40 83       	st	Z, r20
     b50:	51 83       	std	Z+1, r21	; 0x01
     b52:	80 91 03 21 	lds	r24, 0x2103
     b56:	90 91 04 21 	lds	r25, 0x2104
     b5a:	80 38       	cpi	r24, 0x80	; 128
     b5c:	91 05       	cpc	r25, r1
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <adc_callback+0xd6>
     b60:	3d c0       	rjmp	.+122    	; 0xbdc <adc_callback+0x150>
     b62:	10 92 03 21 	sts	0x2103, r1
     b66:	10 92 04 21 	sts	0x2104, r1
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 02 21 	sts	0x2102, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	98 e0       	ldi	r25, 0x08	; 8
     b74:	0c 94 28 20 	jmp	0x4050	; 0x4050 <tc45_disable>
     b78:	08 95       	ret
     b7a:	40 93 3e 21 	sts	0x213E, r20
     b7e:	50 93 3f 21 	sts	0x213F, r21
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 3b 21 	sts	0x213B, r24
     b88:	80 91 42 21 	lds	r24, 0x2142
     b8c:	80 93 43 21 	sts	0x2143, r24
     b90:	80 91 43 21 	lds	r24, 0x2143
     b94:	32 cf       	rjmp	.-412    	; 0x9fa <change_adc_channel>
     b96:	08 95       	ret
     b98:	40 93 3c 21 	sts	0x213C, r20
     b9c:	50 93 3d 21 	sts	0x213D, r21
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	80 93 3a 21 	sts	0x213A, r24
     ba6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <ischarging>
     baa:	88 23       	and	r24, r24
     bac:	b9 f0       	breq	.+46     	; 0xbdc <adc_callback+0x150>
     bae:	4f ef       	ldi	r20, 0xFF	; 255
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
     bb8:	80 91 43 21 	lds	r24, 0x2143
     bbc:	80 93 42 21 	sts	0x2142, r24
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 93 43 21 	sts	0x2143, r24
     bc6:	80 91 43 21 	lds	r24, 0x2143
     bca:	17 df       	rcall	.-466    	; 0x9fa <change_adc_channel>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	98 e0       	ldi	r25, 0x08	; 8
     bd0:	0e 94 28 20 	call	0x4050	; 0x4050 <tc45_disable>
     bd4:	80 e4       	ldi	r24, 0x40	; 64
     bd6:	98 e0       	ldi	r25, 0x08	; 8
     bd8:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <tc45_enable>
     bdc:	08 95       	ret

00000bde <adc_enable_interrupt>:
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	2a 97       	sbiw	r28, 0x0a	; 10
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <adc_disable>
     bf4:	ae 01       	movw	r20, r28
     bf6:	4f 5f       	subi	r20, 0xFF	; 255
     bf8:	5f 4f       	sbci	r21, 0xFF	; 255
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <adcch_read_configuration>
     c04:	e0 ea       	ldi	r30, 0xA0	; 160
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	82 83       	std	Z+2, r24	; 0x02
     c0e:	66 e4       	ldi	r22, 0x46	; 70
     c10:	75 e0       	ldi	r23, 0x05	; 5
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	92 e0       	ldi	r25, 0x02	; 2
     c16:	0e 94 2c 1c 	call	0x3858	; 0x3858 <adc_set_callback>
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	8c 7f       	andi	r24, 0xFC	; 252
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	ae 01       	movw	r20, r28
     c24:	4f 5f       	subi	r20, 0xFF	; 255
     c26:	5f 4f       	sbci	r21, 0xFF	; 255
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <adcch_write_configuration>
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 55 1c 	call	0x38aa	; 0x38aa <adc_enable>
     c3a:	78 94       	sei
     c3c:	2a 96       	adiw	r28, 0x0a	; 10
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	de bf       	out	0x3e, r29	; 62
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <mean>:


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     c48:	66 23       	and	r22, r22
     c4a:	69 f0       	breq	.+26     	; 0xc66 <mean+0x1e>
     c4c:	fc 01       	movw	r30, r24
     c4e:	ac 01       	movw	r20, r24
     c50:	46 0f       	add	r20, r22
     c52:	51 1d       	adc	r21, r1
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
	{
		m += a[i];
     c58:	21 91       	ld	r18, Z+
     c5a:	82 0f       	add	r24, r18
     c5c:	91 1d       	adc	r25, r1


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     c5e:	e4 17       	cp	r30, r20
     c60:	f5 07       	cpc	r31, r21
     c62:	d1 f7       	brne	.-12     	; 0xc58 <mean+0x10>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <mean+0x22>



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
	}
	return m/order;
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
     c70:	86 2f       	mov	r24, r22
}
     c72:	08 95       	ret

00000c74 <updateLEDs>:
		return 3;
	}
}

void updateLEDs()
{
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29

//	bool playing = isplaying();
//	bool charging = ischarging();

		// get and bin the power of frequencies to colors
		low_power_old = low_power;
     c88:	80 91 19 21 	lds	r24, 0x2119
     c8c:	90 91 1a 21 	lds	r25, 0x211A
     c90:	a0 91 1b 21 	lds	r26, 0x211B
     c94:	b0 91 1c 21 	lds	r27, 0x211C
     c98:	80 93 0d 21 	sts	0x210D, r24
     c9c:	90 93 0e 21 	sts	0x210E, r25
     ca0:	a0 93 0f 21 	sts	0x210F, r26
     ca4:	b0 93 10 21 	sts	0x2110, r27
		mid_power_old = mid_power;
     ca8:	80 91 15 21 	lds	r24, 0x2115
     cac:	90 91 16 21 	lds	r25, 0x2116
     cb0:	a0 91 17 21 	lds	r26, 0x2117
     cb4:	b0 91 18 21 	lds	r27, 0x2118
     cb8:	80 93 09 21 	sts	0x2109, r24
     cbc:	90 93 0a 21 	sts	0x210A, r25
     cc0:	a0 93 0b 21 	sts	0x210B, r26
     cc4:	b0 93 0c 21 	sts	0x210C, r27
		high_power_old = high_power;
     cc8:	80 91 11 21 	lds	r24, 0x2111
     ccc:	90 91 12 21 	lds	r25, 0x2112
     cd0:	a0 91 13 21 	lds	r26, 0x2113
     cd4:	b0 91 14 21 	lds	r27, 0x2114
     cd8:	80 93 05 21 	sts	0x2105, r24
     cdc:	90 93 06 21 	sts	0x2106, r25
     ce0:	a0 93 07 21 	sts	0x2107, r26
     ce4:	b0 93 08 21 	sts	0x2108, r27

		low_power = 0;
     ce8:	10 92 19 21 	sts	0x2119, r1
     cec:	10 92 1a 21 	sts	0x211A, r1
     cf0:	10 92 1b 21 	sts	0x211B, r1
     cf4:	10 92 1c 21 	sts	0x211C, r1
		mid_power = 0;
     cf8:	10 92 15 21 	sts	0x2115, r1
     cfc:	10 92 16 21 	sts	0x2116, r1
     d00:	10 92 17 21 	sts	0x2117, r1
     d04:	10 92 18 21 	sts	0x2118, r1
		high_power = 0;
     d08:	10 92 11 21 	sts	0x2111, r1
     d0c:	10 92 12 21 	sts	0x2112, r1
     d10:	10 92 13 21 	sts	0x2113, r1
     d14:	10 92 14 21 	sts	0x2114, r1

		for (int i = 0; i < lows; i++){
     d18:	00 91 0f 20 	lds	r16, 0x200F
     d1c:	10 91 10 20 	lds	r17, 0x2010
     d20:	10 16       	cp	r1, r16
     d22:	11 06       	cpc	r1, r17
     d24:	44 f5       	brge	.+80     	; 0xd76 <updateLEDs+0x102>
     d26:	81 2c       	mov	r8, r1
     d28:	91 2c       	mov	r9, r1
     d2a:	54 01       	movw	r10, r8
     d2c:	0f 2e       	mov	r0, r31
     d2e:	f1 eb       	ldi	r31, 0xB1	; 177
     d30:	ef 2e       	mov	r14, r31
     d32:	f5 e2       	ldi	r31, 0x25	; 37
     d34:	ff 2e       	mov	r15, r31
     d36:	f0 2d       	mov	r31, r0
     d38:	c0 e0       	ldi	r28, 0x00	; 0
     d3a:	d0 e0       	ldi	r29, 0x00	; 0
			low_power += fht_lin_out[i];
     d3c:	f7 01       	movw	r30, r14
     d3e:	81 91       	ld	r24, Z+
     d40:	91 91       	ld	r25, Z+
     d42:	7f 01       	movw	r14, r30
     d44:	bc 01       	movw	r22, r24
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatunsisf>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	c5 01       	movw	r24, r10
     d54:	b4 01       	movw	r22, r8
     d56:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__addsf3>
     d5a:	4b 01       	movw	r8, r22
     d5c:	5c 01       	movw	r10, r24

		low_power = 0;
		mid_power = 0;
		high_power = 0;

		for (int i = 0; i < lows; i++){
     d5e:	21 96       	adiw	r28, 0x01	; 1
     d60:	c0 17       	cp	r28, r16
     d62:	d1 07       	cpc	r29, r17
     d64:	5c f3       	brlt	.-42     	; 0xd3c <updateLEDs+0xc8>
     d66:	60 93 19 21 	sts	0x2119, r22
     d6a:	70 93 1a 21 	sts	0x211A, r23
     d6e:	80 93 1b 21 	sts	0x211B, r24
     d72:	90 93 1c 21 	sts	0x211C, r25
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     d76:	c0 91 0d 20 	lds	r28, 0x200D
     d7a:	d0 91 0e 20 	lds	r29, 0x200E
     d7e:	c0 0f       	add	r28, r16
     d80:	d1 1f       	adc	r29, r17
     d82:	0c 17       	cp	r16, r28
     d84:	1d 07       	cpc	r17, r29
     d86:	6c f5       	brge	.+90     	; 0xde2 <updateLEDs+0x16e>
     d88:	80 90 15 21 	lds	r8, 0x2115
     d8c:	90 90 16 21 	lds	r9, 0x2116
     d90:	a0 90 17 21 	lds	r10, 0x2117
     d94:	b0 90 18 21 	lds	r11, 0x2118
     d98:	c8 01       	movw	r24, r16
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	9c 01       	movw	r18, r24
     da0:	2f 54       	subi	r18, 0x4F	; 79
     da2:	3a 4d       	sbci	r19, 0xDA	; 218
     da4:	79 01       	movw	r14, r18
			mid_power += fht_lin_out[i];
     da6:	f7 01       	movw	r30, r14
     da8:	81 91       	ld	r24, Z+
     daa:	91 91       	ld	r25, Z+
     dac:	7f 01       	movw	r14, r30
     dae:	bc 01       	movw	r22, r24
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatunsisf>
     db8:	9b 01       	movw	r18, r22
     dba:	ac 01       	movw	r20, r24
     dbc:	c5 01       	movw	r24, r10
     dbe:	b4 01       	movw	r22, r8
     dc0:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__addsf3>
     dc4:	4b 01       	movw	r8, r22
     dc6:	5c 01       	movw	r10, r24
		high_power = 0;

		for (int i = 0; i < lows; i++){
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     dc8:	0f 5f       	subi	r16, 0xFF	; 255
     dca:	1f 4f       	sbci	r17, 0xFF	; 255
     dcc:	0c 17       	cp	r16, r28
     dce:	1d 07       	cpc	r17, r29
     dd0:	54 f3       	brlt	.-44     	; 0xda6 <updateLEDs+0x132>
     dd2:	60 93 15 21 	sts	0x2115, r22
     dd6:	70 93 16 21 	sts	0x2116, r23
     dda:	80 93 17 21 	sts	0x2117, r24
     dde:	90 93 18 21 	sts	0x2118, r25
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     de2:	e0 90 0b 20 	lds	r14, 0x200B
     de6:	f0 90 0c 20 	lds	r15, 0x200C
     dea:	ec 0e       	add	r14, r28
     dec:	fd 1e       	adc	r15, r29
     dee:	ce 15       	cp	r28, r14
     df0:	df 05       	cpc	r29, r15
     df2:	54 f5       	brge	.+84     	; 0xe48 <updateLEDs+0x1d4>
     df4:	80 90 11 21 	lds	r8, 0x2111
     df8:	90 90 12 21 	lds	r9, 0x2112
     dfc:	a0 90 13 21 	lds	r10, 0x2113
     e00:	b0 90 14 21 	lds	r11, 0x2114
     e04:	8e 01       	movw	r16, r28
     e06:	00 0f       	add	r16, r16
     e08:	11 1f       	adc	r17, r17
     e0a:	0f 54       	subi	r16, 0x4F	; 79
     e0c:	1a 4d       	sbci	r17, 0xDA	; 218
			high_power += fht_lin_out[i];
     e0e:	f8 01       	movw	r30, r16
     e10:	81 91       	ld	r24, Z+
     e12:	91 91       	ld	r25, Z+
     e14:	8f 01       	movw	r16, r30
     e16:	bc 01       	movw	r22, r24
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__floatunsisf>
     e20:	9b 01       	movw	r18, r22
     e22:	ac 01       	movw	r20, r24
     e24:	c5 01       	movw	r24, r10
     e26:	b4 01       	movw	r22, r8
     e28:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__addsf3>
     e2c:	4b 01       	movw	r8, r22
     e2e:	5c 01       	movw	r10, r24
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	ce 15       	cp	r28, r14
     e34:	df 05       	cpc	r29, r15
     e36:	5c f3       	brlt	.-42     	; 0xe0e <updateLEDs+0x19a>
     e38:	60 93 11 21 	sts	0x2111, r22
     e3c:	70 93 12 21 	sts	0x2112, r23
     e40:	80 93 13 21 	sts	0x2113, r24
     e44:	90 93 14 21 	sts	0x2114, r25
		if (high_power < high_power_old*damp){
			high_power = high_power_old*damp;
		}*/

		// AGC - automatic gain control
		if ( low_power > maxim || mid_power > maxim || high_power > maxim)  {
     e48:	10 91 19 21 	lds	r17, 0x2119
     e4c:	d0 91 1a 21 	lds	r29, 0x211A
     e50:	c0 91 1b 21 	lds	r28, 0x211B
     e54:	00 91 1c 21 	lds	r16, 0x211C
     e58:	80 90 07 20 	lds	r8, 0x2007
     e5c:	90 90 08 20 	lds	r9, 0x2008
     e60:	a0 90 09 20 	lds	r10, 0x2009
     e64:	b0 90 0a 20 	lds	r11, 0x200A
     e68:	a5 01       	movw	r20, r10
     e6a:	94 01       	movw	r18, r8
     e6c:	61 2f       	mov	r22, r17
     e6e:	7d 2f       	mov	r23, r29
     e70:	8c 2f       	mov	r24, r28
     e72:	90 2f       	mov	r25, r16
     e74:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__gesf2>
     e78:	18 16       	cp	r1, r24
     e7a:	ec f0       	brlt	.+58     	; 0xeb6 <updateLEDs+0x242>
     e7c:	20 91 15 21 	lds	r18, 0x2115
     e80:	30 91 16 21 	lds	r19, 0x2116
     e84:	40 91 17 21 	lds	r20, 0x2117
     e88:	50 91 18 21 	lds	r21, 0x2118
     e8c:	c5 01       	movw	r24, r10
     e8e:	b4 01       	movw	r22, r8
     e90:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__cmpsf2>
     e94:	88 23       	and	r24, r24
     e96:	7c f0       	brlt	.+30     	; 0xeb6 <updateLEDs+0x242>
     e98:	20 91 11 21 	lds	r18, 0x2111
     e9c:	30 91 12 21 	lds	r19, 0x2112
     ea0:	40 91 13 21 	lds	r20, 0x2113
     ea4:	50 91 14 21 	lds	r21, 0x2114
     ea8:	c5 01       	movw	r24, r10
     eaa:	b4 01       	movw	r22, r8
     eac:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <__cmpsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	0c f0       	brlt	.+2      	; 0xeb6 <updateLEDs+0x242>
     eb4:	45 c0       	rjmp	.+138    	; 0xf40 <updateLEDs+0x2cc>
	    	vrem = max(low_power, mid_power);
     eb6:	a0 90 15 21 	lds	r10, 0x2115
     eba:	b0 90 16 21 	lds	r11, 0x2116
     ebe:	e0 90 17 21 	lds	r14, 0x2117
     ec2:	f0 90 18 21 	lds	r15, 0x2118
     ec6:	2a 2d       	mov	r18, r10
     ec8:	3b 2d       	mov	r19, r11
     eca:	4e 2d       	mov	r20, r14
     ecc:	5f 2d       	mov	r21, r15
     ece:	61 2f       	mov	r22, r17
     ed0:	7d 2f       	mov	r23, r29
     ed2:	8c 2f       	mov	r24, r28
     ed4:	90 2f       	mov	r25, r16
     ed6:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__gesf2>
     eda:	18 16       	cp	r1, r24
     edc:	24 f0       	brlt	.+8      	; 0xee6 <updateLEDs+0x272>
     ede:	1a 2d       	mov	r17, r10
     ee0:	db 2d       	mov	r29, r11
     ee2:	ce 2d       	mov	r28, r14
     ee4:	0f 2d       	mov	r16, r15
	    	vrem = max(vrem, high_power);
     ee6:	a0 90 11 21 	lds	r10, 0x2111
     eea:	b0 90 12 21 	lds	r11, 0x2112
     eee:	e0 90 13 21 	lds	r14, 0x2113
     ef2:	f0 90 14 21 	lds	r15, 0x2114
     ef6:	2a 2d       	mov	r18, r10
     ef8:	3b 2d       	mov	r19, r11
     efa:	4e 2d       	mov	r20, r14
     efc:	5f 2d       	mov	r21, r15
     efe:	61 2f       	mov	r22, r17
     f00:	7d 2f       	mov	r23, r29
     f02:	8c 2f       	mov	r24, r28
     f04:	90 2f       	mov	r25, r16
     f06:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <__gesf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	24 f0       	brlt	.+8      	; 0xf16 <updateLEDs+0x2a2>
     f0e:	1a 2d       	mov	r17, r10
     f10:	db 2d       	mov	r29, r11
     f12:	ce 2d       	mov	r28, r14
     f14:	0f 2d       	mov	r16, r15
     f16:	81 2f       	mov	r24, r17
     f18:	9d 2f       	mov	r25, r29
     f1a:	ac 2f       	mov	r26, r28
     f1c:	b0 2f       	mov	r27, r16
     f1e:	80 93 70 29 	sts	0x2970, r24
     f22:	90 93 71 29 	sts	0x2971, r25
     f26:	a0 93 72 29 	sts	0x2972, r26
     f2a:	b0 93 73 29 	sts	0x2973, r27
	    	maxim = vrem;
     f2e:	80 93 07 20 	sts	0x2007, r24
     f32:	90 93 08 20 	sts	0x2008, r25
     f36:	a0 93 09 20 	sts	0x2009, r26
     f3a:	b0 93 0a 20 	sts	0x200A, r27
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <updateLEDs+0x2f4>
	  	} 
	  	else {
	    	maxim *= agc;
     f40:	20 91 03 20 	lds	r18, 0x2003
     f44:	30 91 04 20 	lds	r19, 0x2004
     f48:	40 91 05 20 	lds	r20, 0x2005
     f4c:	50 91 06 20 	lds	r21, 0x2006
     f50:	c5 01       	movw	r24, r10
     f52:	b4 01       	movw	r22, r8
     f54:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__mulsf3>
     f58:	60 93 07 20 	sts	0x2007, r22
     f5c:	70 93 08 20 	sts	0x2008, r23
     f60:	80 93 09 20 	sts	0x2009, r24
     f64:	90 93 0a 20 	sts	0x200A, r25
	  	}
		// map values to agc adjusted
		float slope = 255/(maxim-min);
     f68:	20 91 1d 21 	lds	r18, 0x211D
     f6c:	30 91 1e 21 	lds	r19, 0x211E
     f70:	40 91 1f 21 	lds	r20, 0x211F
     f74:	50 91 20 21 	lds	r21, 0x2120
     f78:	60 91 07 20 	lds	r22, 0x2007
     f7c:	70 91 08 20 	lds	r23, 0x2008
     f80:	80 91 09 20 	lds	r24, 0x2009
     f84:	90 91 0a 20 	lds	r25, 0x200A
     f88:	0e 94 77 23 	call	0x46ee	; 0x46ee <__subsf3>
     f8c:	9b 01       	movw	r18, r22
     f8e:	ac 01       	movw	r20, r24
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	8f e7       	ldi	r24, 0x7F	; 127
     f96:	93 e4       	ldi	r25, 0x43	; 67
     f98:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__divsf3>
     f9c:	4b 01       	movw	r8, r22
     f9e:	5c 01       	movw	r10, r24
		
	  	ledLevelLow = (uint8_t)(low_power*slope);
     fa0:	20 91 19 21 	lds	r18, 0x2119
     fa4:	30 91 1a 21 	lds	r19, 0x211A
     fa8:	40 91 1b 21 	lds	r20, 0x211B
     fac:	50 91 1c 21 	lds	r21, 0x211C
     fb0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__mulsf3>
     fb4:	0e 94 48 24 	call	0x4890	; 0x4890 <__fixunssfsi>
     fb8:	d6 2f       	mov	r29, r22
     fba:	60 93 9b 25 	sts	0x259B, r22
	  	ledLevelMid = (uint8_t)(mid_power*slope);
     fbe:	20 91 15 21 	lds	r18, 0x2115
     fc2:	30 91 16 21 	lds	r19, 0x2116
     fc6:	40 91 17 21 	lds	r20, 0x2117
     fca:	50 91 18 21 	lds	r21, 0x2118
     fce:	c5 01       	movw	r24, r10
     fd0:	b4 01       	movw	r22, r8
     fd2:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__mulsf3>
     fd6:	0e 94 48 24 	call	0x4890	; 0x4890 <__fixunssfsi>
     fda:	c6 2f       	mov	r28, r22
     fdc:	60 93 6e 28 	sts	0x286E, r22
	  	ledLevelHigh = (uint8_t)(high_power*slope);
     fe0:	20 91 11 21 	lds	r18, 0x2111
     fe4:	30 91 12 21 	lds	r19, 0x2112
     fe8:	40 91 13 21 	lds	r20, 0x2113
     fec:	50 91 14 21 	lds	r21, 0x2114
     ff0:	c5 01       	movw	r24, r10
     ff2:	b4 01       	movw	r22, r8
     ff4:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__mulsf3>
     ff8:	0e 94 48 24 	call	0x4890	; 0x4890 <__fixunssfsi>
     ffc:	60 93 6f 29 	sts	0x296F, r22
		
     lowf[point_low] = ledLevelLow;
    1000:	80 91 25 21 	lds	r24, 0x2125
    1004:	90 91 26 21 	lds	r25, 0x2126
    1008:	fc 01       	movw	r30, r24
    100a:	ea 54       	subi	r30, 0x4A	; 74
    100c:	ff 4d       	sbci	r31, 0xDF	; 223
    100e:	d0 83       	st	Z, r29
	 midf[point_mid] = ledLevelMid;
    1010:	e0 91 23 21 	lds	r30, 0x2123
    1014:	f0 91 24 21 	lds	r31, 0x2124
    1018:	df 01       	movw	r26, r30
    101a:	a0 5e       	subi	r26, 0xE0	; 224
    101c:	bf 4d       	sbci	r27, 0xDF	; 223
    101e:	cc 93       	st	X, r28
	 highf[point_high] = ledLevelHigh;
    1020:	20 91 21 21 	lds	r18, 0x2121
    1024:	30 91 22 21 	lds	r19, 0x2122
    1028:	d9 01       	movw	r26, r18
    102a:	af 5e       	subi	r26, 0xEF	; 239
    102c:	bf 4d       	sbci	r27, 0xDF	; 223
    102e:	6c 93       	st	X, r22
	 point_low++;
    1030:	01 96       	adiw	r24, 0x01	; 1
	 point_mid++;
	 point_high++;
	 point_low %= order_low;
    1032:	6e e1       	ldi	r22, 0x1E	; 30
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    103a:	80 93 25 21 	sts	0x2125, r24
    103e:	90 93 26 21 	sts	0x2126, r25
		
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
    1042:	cf 01       	movw	r24, r30
    1044:	01 96       	adiw	r24, 0x01	; 1
	 point_high++;
	 point_low %= order_low;
	 point_mid %= order_mid;
    1046:	66 e9       	ldi	r22, 0x96	; 150
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    104e:	80 93 23 21 	sts	0x2123, r24
    1052:	90 93 24 21 	sts	0x2124, r25
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
	 point_high++;
    1056:	c9 01       	movw	r24, r18
    1058:	01 96       	adiw	r24, 0x01	; 1
	 point_low %= order_low;
	 point_mid %= order_mid;
	 point_high %= order_high;
    105a:	6f e0       	ldi	r22, 0x0F	; 15
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    1062:	80 93 21 21 	sts	0x2121, r24
    1066:	90 93 22 21 	sts	0x2122, r25
	 
	ledLevelHigh = mean(highf, order_high);
    106a:	6f e0       	ldi	r22, 0x0F	; 15
    106c:	81 e1       	ldi	r24, 0x11	; 17
    106e:	90 e2       	ldi	r25, 0x20	; 32
    1070:	eb dd       	rcall	.-1066   	; 0xc48 <mean>
    1072:	d8 2f       	mov	r29, r24
    1074:	80 93 6f 29 	sts	0x296F, r24
	ledLevelMid = mean(midf, order_mid);
    1078:	66 e9       	ldi	r22, 0x96	; 150
    107a:	80 e2       	ldi	r24, 0x20	; 32
    107c:	90 e2       	ldi	r25, 0x20	; 32
    107e:	e4 dd       	rcall	.-1080   	; 0xc48 <mean>
    1080:	c8 2f       	mov	r28, r24
    1082:	80 93 6e 28 	sts	0x286E, r24
	ledLevelLow = mean(lowf, order_low);
    1086:	6e e1       	ldi	r22, 0x1E	; 30
    1088:	86 eb       	ldi	r24, 0xB6	; 182
    108a:	90 e2       	ldi	r25, 0x20	; 32
    108c:	dd dd       	rcall	.-1094   	; 0xc48 <mean>
		 
	ledLevelLow = 100*ledLevelLow/LOW_DIVIDER;
    108e:	60 91 02 20 	lds	r22, 0x2002
    1092:	24 e6       	ldi	r18, 0x64	; 100
    1094:	28 9f       	mul	r18, r24
    1096:	c0 01       	movw	r24, r0
    1098:	11 24       	eor	r1, r1
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    10a0:	16 2f       	mov	r17, r22
    10a2:	60 93 9b 25 	sts	0x259B, r22
	ledLevelMid = 100*ledLevelMid/MID_DIVIDER;
    10a6:	a0 91 01 20 	lds	r26, 0x2001
    10aa:	2c 9f       	mul	r18, r28
    10ac:	c0 01       	movw	r24, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	6a 2f       	mov	r22, r26
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    10b8:	60 93 6e 28 	sts	0x286E, r22
	ledLevelHigh = 100*ledLevelHigh/HIGH_DIVIDER;
    10bc:	30 91 00 20 	lds	r19, 0x2000
    10c0:	2d 9f       	mul	r18, r29
    10c2:	c0 01       	movw	r24, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	63 2f       	mov	r22, r19
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    10ce:	86 2f       	mov	r24, r22
    10d0:	60 93 6f 29 	sts	0x296F, r22
	}
	if (ledLevelLow > 255){
		ledLevelLow = 255;
	}
	
	if (colors[0] <= colors[1] && colors[0] <= colors[2]) {
    10d4:	ed ed       	ldi	r30, 0xDD	; 221
    10d6:	f0 e2       	ldi	r31, 0x20	; 32
    10d8:	20 81       	ld	r18, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	92 17       	cp	r25, r18
    10de:	48 f0       	brcs	.+18     	; 0x10f2 <updateLEDs+0x47e>
    10e0:	20 81       	ld	r18, Z
    10e2:	92 81       	ldd	r25, Z+2	; 0x02
    10e4:	92 17       	cp	r25, r18
    10e6:	28 f0       	brcs	.+10     	; 0x10f2 <updateLEDs+0x47e>
		twinkle(0, ledLevelHigh, ledLevelLow);
    10e8:	41 2f       	mov	r20, r17
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
    10f0:	23 c0       	rjmp	.+70     	; 0x1138 <updateLEDs+0x4c4>
	}
	else if (colors[1] <= colors[0] && colors[1] <= colors[2]) {
    10f2:	ed ed       	ldi	r30, 0xDD	; 221
    10f4:	f0 e2       	ldi	r31, 0x20	; 32
    10f6:	21 81       	ldd	r18, Z+1	; 0x01
    10f8:	90 81       	ld	r25, Z
    10fa:	92 17       	cp	r25, r18
    10fc:	48 f0       	brcs	.+18     	; 0x1110 <updateLEDs+0x49c>
    10fe:	21 81       	ldd	r18, Z+1	; 0x01
    1100:	92 81       	ldd	r25, Z+2	; 0x02
    1102:	92 17       	cp	r25, r18
    1104:	28 f0       	brcs	.+10     	; 0x1110 <updateLEDs+0x49c>
		twinkle(ledLevelHigh, 0, ledLevelLow);
    1106:	41 2f       	mov	r20, r17
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
    110e:	14 c0       	rjmp	.+40     	; 0x1138 <updateLEDs+0x4c4>
	}
	else if (colors[2] <= colors[0] && colors[2] <= colors[1]) {
    1110:	ed ed       	ldi	r30, 0xDD	; 221
    1112:	f0 e2       	ldi	r31, 0x20	; 32
    1114:	22 81       	ldd	r18, Z+2	; 0x02
    1116:	90 81       	ld	r25, Z
    1118:	92 17       	cp	r25, r18
    111a:	48 f0       	brcs	.+18     	; 0x112e <updateLEDs+0x4ba>
    111c:	22 81       	ldd	r18, Z+2	; 0x02
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	92 17       	cp	r25, r18
    1122:	28 f0       	brcs	.+10     	; 0x112e <updateLEDs+0x4ba>
		twinkle(ledLevelHigh, ledLevelLow, 0);
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	61 2f       	mov	r22, r17
    1128:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
    112c:	05 c0       	rjmp	.+10     	; 0x1138 <updateLEDs+0x4c4>
	}
	else {
		twinkle(0, ledLevelHigh, ledLevelLow);
    112e:	41 2f       	mov	r20, r17
    1130:	68 2f       	mov	r22, r24
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
	}
	
	// update LEDs

}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	bf 90       	pop	r11
    1146:	af 90       	pop	r10
    1148:	9f 90       	pop	r9
    114a:	8f 90       	pop	r8
    114c:	08 95       	ret

0000114e <run>:

void run(){
    114e:	2f 92       	push	r2
    1150:	3f 92       	push	r3
    1152:	4f 92       	push	r4
    1154:	5f 92       	push	r5
    1156:	6f 92       	push	r6
    1158:	7f 92       	push	r7
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
}

static inline void fht_window(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1172:	2f 92       	push	r2
    1174:	3f 92       	push	r3
    1176:	4f 92       	push	r4
    1178:	5f 92       	push	r5
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this applies a window to the data for better frequency resolution
  asm volatile (
    1184:	c4 e7       	ldi	r28, 0x74	; 116
    1186:	d9 e2       	ldi	r29, 0x29	; 41
    1188:	ee e2       	ldi	r30, 0x2E	; 46
    118a:	f3 e0       	ldi	r31, 0x03	; 3
    118c:	ff 24       	eor	r15, r15
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	65 91       	lpm	r22, Z+
    1192:	75 91       	lpm	r23, Z+
    1194:	08 81       	ld	r16, Y
    1196:	19 81       	ldd	r17, Y+1	; 0x01
    1198:	97 03       	fmuls	r17, r23
    119a:	20 01       	movw	r4, r0
    119c:	0e 03       	fmul	r16, r22
    119e:	4f 1c       	adc	r4, r15
    11a0:	10 01       	movw	r2, r0
    11a2:	9e 03       	fmulsu	r17, r22
    11a4:	5f 08       	sbc	r5, r15
    11a6:	30 0c       	add	r3, r0
    11a8:	41 1c       	adc	r4, r1
    11aa:	5f 1c       	adc	r5, r15
    11ac:	f8 03       	fmulsu	r23, r16
    11ae:	5f 08       	sbc	r5, r15
    11b0:	30 0c       	add	r3, r0
    11b2:	41 1c       	adc	r4, r1
    11b4:	5f 1c       	adc	r5, r15
    11b6:	49 92       	st	Y+, r4
    11b8:	59 92       	st	Y+, r5
    11ba:	4a 95       	dec	r20
    11bc:	49 f7       	brne	.-46     	; 0x1190 <run+0x42>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r15", "r16", "r17", "r20", "r30", "r31",
   "r22", "r23", "r28", "r29"
  );

  // get the clobbers off the stack
  asm volatile (
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	5f 90       	pop	r5
    11ca:	4f 90       	pop	r4
    11cc:	3f 90       	pop	r3
    11ce:	2f 90       	pop	r2
    11d0:	11 24       	eor	r1, r1
}

static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    11d2:	2f 92       	push	r2
    11d4:	3f 92       	push	r3
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
  "push r29 \n"
  );


  // move values to bit reversed locations
  asm volatile (
    11de:	ee e2       	ldi	r30, 0x2E	; 46
    11e0:	f7 e0       	ldi	r31, 0x07	; 7
    11e2:	48 e3       	ldi	r20, 0x38	; 56
    11e4:	a5 91       	lpm	r26, Z+
    11e6:	bb 27       	eor	r27, r27
    11e8:	aa 0f       	add	r26, r26
    11ea:	bb 1f       	adc	r27, r27
    11ec:	ac 58       	subi	r26, 0x8C	; 140
    11ee:	b6 4d       	sbci	r27, 0xD6	; 214
    11f0:	2d 90       	ld	r2, X+
    11f2:	3c 90       	ld	r3, X
    11f4:	c5 91       	lpm	r28, Z+
    11f6:	dd 27       	eor	r29, r29
    11f8:	cc 0f       	add	r28, r28
    11fa:	dd 1f       	adc	r29, r29
    11fc:	cc 58       	subi	r28, 0x8C	; 140
    11fe:	d6 4d       	sbci	r29, 0xD6	; 214
    1200:	68 80       	ld	r6, Y
    1202:	79 80       	ldd	r7, Y+1	; 0x01
    1204:	7c 92       	st	X, r7
    1206:	6e 92       	st	-X, r6
    1208:	28 82       	st	Y, r2
    120a:	39 82       	std	Y+1, r3	; 0x01
    120c:	4a 95       	dec	r20
    120e:	51 f7       	brne	.-44     	; 0x11e4 <run+0x96>
  : "r2", "r3", "r6", "r7", "r20",
    "r26", "r27", "r28", "r29", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	3f 90       	pop	r3
    121a:	2f 90       	pop	r2


static inline void fht_run(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    121c:	2f 92       	push	r2
    121e:	3f 92       	push	r3
    1220:	4f 92       	push	r4
    1222:	5f 92       	push	r5
    1224:	6f 92       	push	r6
    1226:	7f 92       	push	r7
    1228:	8f 92       	push	r8
    122a:	9f 92       	push	r9
    122c:	af 92       	push	r10
    122e:	bf 92       	push	r11
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
  "push r29 \n"
  );
 
  // do first 3 butterflies - only 1 multiply, minimizes data fetches
  // initialize
  asm volatile (
    1240:	ff 24       	eor	r15, r15
    1242:	00 e1       	ldi	r16, 0x10	; 16
    1244:	e0 2e       	mov	r14, r16
    1246:	c4 e7       	ldi	r28, 0x74	; 116
    1248:	d9 e2       	ldi	r29, 0x29	; 41
    124a:	68 80       	ld	r6, Y
    124c:	79 80       	ldd	r7, Y+1	; 0x01
    124e:	4a 80       	ldd	r4, Y+2	; 0x02
    1250:	5b 80       	ldd	r5, Y+3	; 0x03
    1252:	75 94       	asr	r7
    1254:	67 94       	ror	r6
    1256:	43 01       	movw	r8, r6
    1258:	55 94       	asr	r5
    125a:	47 94       	ror	r4
    125c:	64 0c       	add	r6, r4
    125e:	75 1c       	adc	r7, r5
    1260:	84 18       	sub	r8, r4
    1262:	95 08       	sbc	r9, r5
    1264:	ac 80       	ldd	r10, Y+4	; 0x04
    1266:	bd 80       	ldd	r11, Y+5	; 0x05
    1268:	4e 80       	ldd	r4, Y+6	; 0x06
    126a:	5f 80       	ldd	r5, Y+7	; 0x07
    126c:	b5 94       	asr	r11
    126e:	a7 94       	ror	r10
    1270:	65 01       	movw	r12, r10
    1272:	55 94       	asr	r5
    1274:	47 94       	ror	r4
    1276:	a4 0c       	add	r10, r4
    1278:	b5 1c       	adc	r11, r5
    127a:	c4 18       	sub	r12, r4
    127c:	d5 08       	sbc	r13, r5
    127e:	68 85       	ldd	r22, Y+8	; 0x08
    1280:	79 85       	ldd	r23, Y+9	; 0x09
    1282:	4a 84       	ldd	r4, Y+10	; 0x0a
    1284:	5b 84       	ldd	r5, Y+11	; 0x0b
    1286:	75 95       	asr	r23
    1288:	67 95       	ror	r22
    128a:	8b 01       	movw	r16, r22
    128c:	55 94       	asr	r5
    128e:	47 94       	ror	r4
    1290:	64 0d       	add	r22, r4
    1292:	75 1d       	adc	r23, r5
    1294:	04 19       	sub	r16, r4
    1296:	15 09       	sbc	r17, r5
    1298:	8c 85       	ldd	r24, Y+12	; 0x0c
    129a:	9d 85       	ldd	r25, Y+13	; 0x0d
    129c:	4e 84       	ldd	r4, Y+14	; 0x0e
    129e:	5f 84       	ldd	r5, Y+15	; 0x0f
    12a0:	95 95       	asr	r25
    12a2:	87 95       	ror	r24
    12a4:	9c 01       	movw	r18, r24
    12a6:	55 94       	asr	r5
    12a8:	47 94       	ror	r4
    12aa:	84 0d       	add	r24, r4
    12ac:	95 1d       	adc	r25, r5
    12ae:	24 19       	sub	r18, r4
    12b0:	35 09       	sbc	r19, r5
    12b2:	75 94       	asr	r7
    12b4:	67 94       	ror	r6
    12b6:	23 01       	movw	r4, r6
    12b8:	b5 94       	asr	r11
    12ba:	a7 94       	ror	r10
    12bc:	6a 0c       	add	r6, r10
    12be:	7b 1c       	adc	r7, r11
    12c0:	4a 18       	sub	r4, r10
    12c2:	5b 08       	sbc	r5, r11
    12c4:	95 94       	asr	r9
    12c6:	87 94       	ror	r8
    12c8:	54 01       	movw	r10, r8
    12ca:	d5 94       	asr	r13
    12cc:	c7 94       	ror	r12
    12ce:	8c 0c       	add	r8, r12
    12d0:	9d 1c       	adc	r9, r13
    12d2:	ac 18       	sub	r10, r12
    12d4:	bd 08       	sbc	r11, r13
    12d6:	75 95       	asr	r23
    12d8:	67 95       	ror	r22
    12da:	6b 01       	movw	r12, r22
    12dc:	95 95       	asr	r25
    12de:	87 95       	ror	r24
    12e0:	68 0f       	add	r22, r24
    12e2:	79 1f       	adc	r23, r25
    12e4:	c8 1a       	sub	r12, r24
    12e6:	d9 0a       	sbc	r13, r25
    12e8:	75 94       	asr	r7
    12ea:	67 94       	ror	r6
    12ec:	13 01       	movw	r2, r6
    12ee:	75 95       	asr	r23
    12f0:	67 95       	ror	r22
    12f2:	66 0e       	add	r6, r22
    12f4:	77 1e       	adc	r7, r23
    12f6:	26 1a       	sub	r2, r22
    12f8:	37 0a       	sbc	r3, r23
    12fa:	42 e8       	ldi	r20, 0x82	; 130
    12fc:	5a e5       	ldi	r21, 0x5A	; 90
    12fe:	15 03       	mulsu	r17, r21
    1300:	c0 01       	movw	r24, r0
    1302:	04 9f       	mul	r16, r20
    1304:	b0 01       	movw	r22, r0
    1306:	14 03       	mulsu	r17, r20
    1308:	9f 09       	sbc	r25, r15
    130a:	70 0d       	add	r23, r0
    130c:	81 1d       	adc	r24, r1
    130e:	9f 1d       	adc	r25, r15
    1310:	50 9f       	mul	r21, r16
    1312:	70 0d       	add	r23, r0
    1314:	81 1d       	adc	r24, r1
    1316:	9f 1d       	adc	r25, r15
    1318:	95 94       	asr	r9
    131a:	87 94       	ror	r8
    131c:	84 01       	movw	r16, r8
    131e:	88 0e       	add	r8, r24
    1320:	99 1e       	adc	r9, r25
    1322:	08 1b       	sub	r16, r24
    1324:	19 0b       	sbc	r17, r25
    1326:	55 94       	asr	r5
    1328:	47 94       	ror	r4
    132a:	d2 01       	movw	r26, r4
    132c:	d5 94       	asr	r13
    132e:	c7 94       	ror	r12
    1330:	4c 0c       	add	r4, r12
    1332:	5d 1c       	adc	r5, r13
    1334:	ac 19       	sub	r26, r12
    1336:	bd 09       	sbc	r27, r13
    1338:	35 03       	mulsu	r19, r21
    133a:	c0 01       	movw	r24, r0
    133c:	24 9f       	mul	r18, r20
    133e:	b0 01       	movw	r22, r0
    1340:	34 03       	mulsu	r19, r20
    1342:	9f 09       	sbc	r25, r15
    1344:	70 0d       	add	r23, r0
    1346:	81 1d       	adc	r24, r1
    1348:	9f 1d       	adc	r25, r15
    134a:	52 9f       	mul	r21, r18
    134c:	70 0d       	add	r23, r0
    134e:	81 1d       	adc	r24, r1
    1350:	9f 1d       	adc	r25, r15
    1352:	b5 94       	asr	r11
    1354:	a7 94       	ror	r10
    1356:	65 01       	movw	r12, r10
    1358:	a8 0e       	add	r10, r24
    135a:	b9 1e       	adc	r11, r25
    135c:	c8 1a       	sub	r12, r24
    135e:	d9 0a       	sbc	r13, r25
    1360:	69 92       	st	Y+, r6
    1362:	79 92       	st	Y+, r7
    1364:	89 92       	st	Y+, r8
    1366:	99 92       	st	Y+, r9
    1368:	49 92       	st	Y+, r4
    136a:	59 92       	st	Y+, r5
    136c:	a9 92       	st	Y+, r10
    136e:	b9 92       	st	Y+, r11
    1370:	29 92       	st	Y+, r2
    1372:	39 92       	st	Y+, r3
    1374:	09 93       	st	Y+, r16
    1376:	19 93       	st	Y+, r17
    1378:	a9 93       	st	Y+, r26
    137a:	b9 93       	st	Y+, r27
    137c:	c9 92       	st	Y+, r12
    137e:	d9 92       	st	Y+, r13
    1380:	ea 94       	dec	r14
    1382:	09 f0       	breq	.+2      	; 0x1386 <run+0x238>
    1384:	62 cf       	rjmp	.-316    	; 0x124a <run+0xfc>
  "rjmp 1b \n"
  );

  // remainder of the butterflies (fourth and higher)
  // initialize
  asm volatile (
    1386:	00 e2       	ldi	r16, 0x20	; 32
    1388:	c0 2e       	mov	r12, r16
    138a:	dd 24       	eor	r13, r13
    138c:	0a e2       	ldi	r16, 0x2A	; 42
    138e:	90 2e       	mov	r9, r16
    1390:	ee e9       	ldi	r30, 0x9E	; 158
    1392:	f7 e0       	ldi	r31, 0x07	; 7
    1394:	00 e1       	ldi	r16, 0x10	; 16
    1396:	a0 2e       	mov	r10, r16
    1398:	bb 24       	eor	r11, r11
    139a:	04 e0       	ldi	r16, 0x04	; 4
    139c:	e0 2e       	mov	r14, r16
    139e:	a4 e7       	ldi	r26, 0x74	; 116
    13a0:	b9 e2       	ldi	r27, 0x29	; 41
    13a2:	ed 01       	movw	r28, r26
    13a4:	ca 0d       	add	r28, r10
    13a6:	db 1d       	adc	r29, r11
    13a8:	8e 2c       	mov	r8, r14
    13aa:	2d 90       	ld	r2, X+
    13ac:	3c 90       	ld	r3, X
    13ae:	48 80       	ld	r4, Y
    13b0:	59 80       	ldd	r5, Y+1	; 0x01
    13b2:	35 94       	asr	r3
    13b4:	27 94       	ror	r2
    13b6:	31 01       	movw	r6, r2
    13b8:	55 94       	asr	r5
    13ba:	47 94       	ror	r4
    13bc:	64 0c       	add	r6, r4
    13be:	75 1c       	adc	r7, r5
    13c0:	24 18       	sub	r2, r4
    13c2:	35 08       	sbc	r3, r5
    13c4:	29 92       	st	Y+, r2
    13c6:	39 92       	st	Y+, r3
    13c8:	7c 92       	st	X, r7
    13ca:	6e 92       	st	-X, r6
    13cc:	ac 0d       	add	r26, r12
    13ce:	bd 1d       	adc	r27, r13
    13d0:	11 97       	sbiw	r26, 0x01	; 1
    13d2:	ea 94       	dec	r14
    13d4:	08 81       	ld	r16, Y
    13d6:	19 81       	ldd	r17, Y+1	; 0x01
    13d8:	3c 91       	ld	r19, X
    13da:	2e 91       	ld	r18, -X
    13dc:	45 91       	lpm	r20, Z+
    13de:	55 91       	lpm	r21, Z+
    13e0:	65 91       	lpm	r22, Z+
    13e2:	75 91       	lpm	r23, Z+
    13e4:	15 02       	muls	r17, r21
    13e6:	20 01       	movw	r4, r0
    13e8:	04 9f       	mul	r16, r20
    13ea:	10 01       	movw	r2, r0
    13ec:	14 03       	mulsu	r17, r20
    13ee:	5f 08       	sbc	r5, r15
    13f0:	30 0c       	add	r3, r0
    13f2:	41 1c       	adc	r4, r1
    13f4:	5f 1c       	adc	r5, r15
    13f6:	50 9f       	mul	r21, r16
    13f8:	30 0c       	add	r3, r0
    13fa:	41 1c       	adc	r4, r1
    13fc:	5f 1c       	adc	r5, r15
    13fe:	37 02       	muls	r19, r23
    1400:	30 01       	movw	r6, r0
    1402:	26 9f       	mul	r18, r22
    1404:	20 0c       	add	r2, r0
    1406:	31 1c       	adc	r3, r1
    1408:	46 1c       	adc	r4, r6
    140a:	57 1c       	adc	r5, r7
    140c:	36 03       	mulsu	r19, r22
    140e:	5f 08       	sbc	r5, r15
    1410:	30 0c       	add	r3, r0
    1412:	41 1c       	adc	r4, r1
    1414:	5f 1c       	adc	r5, r15
    1416:	72 9f       	mul	r23, r18
    1418:	30 0c       	add	r3, r0
    141a:	41 1c       	adc	r4, r1
    141c:	5f 1c       	adc	r5, r15
    141e:	0e 01       	movw	r0, r28
    1420:	ca 19       	sub	r28, r10
    1422:	db 09       	sbc	r29, r11
    1424:	28 80       	ld	r2, Y
    1426:	39 80       	ldd	r3, Y+1	; 0x01
    1428:	35 94       	asr	r3
    142a:	27 94       	ror	r2
    142c:	31 01       	movw	r6, r2
    142e:	64 0c       	add	r6, r4
    1430:	75 1c       	adc	r7, r5
    1432:	24 18       	sub	r2, r4
    1434:	35 08       	sbc	r3, r5
    1436:	68 82       	st	Y, r6
    1438:	79 82       	std	Y+1, r7	; 0x01
    143a:	e0 01       	movw	r28, r0
    143c:	29 92       	st	Y+, r2
    143e:	39 92       	st	Y+, r3
    1440:	17 02       	muls	r17, r23
    1442:	20 01       	movw	r4, r0
    1444:	06 9f       	mul	r16, r22
    1446:	10 01       	movw	r2, r0
    1448:	16 03       	mulsu	r17, r22
    144a:	5f 08       	sbc	r5, r15
    144c:	30 0c       	add	r3, r0
    144e:	41 1c       	adc	r4, r1
    1450:	5f 1c       	adc	r5, r15
    1452:	70 9f       	mul	r23, r16
    1454:	30 0c       	add	r3, r0
    1456:	41 1c       	adc	r4, r1
    1458:	5f 1c       	adc	r5, r15
    145a:	35 02       	muls	r19, r21
    145c:	30 01       	movw	r6, r0
    145e:	24 9f       	mul	r18, r20
    1460:	20 18       	sub	r2, r0
    1462:	31 08       	sbc	r3, r1
    1464:	46 08       	sbc	r4, r6
    1466:	57 08       	sbc	r5, r7
    1468:	34 03       	mulsu	r19, r20
    146a:	5f 1c       	adc	r5, r15
    146c:	30 18       	sub	r3, r0
    146e:	41 08       	sbc	r4, r1
    1470:	5f 08       	sbc	r5, r15
    1472:	52 9f       	mul	r21, r18
    1474:	30 18       	sub	r3, r0
    1476:	41 08       	sbc	r4, r1
    1478:	5f 08       	sbc	r5, r15
    147a:	0d 01       	movw	r0, r26
    147c:	aa 19       	sub	r26, r10
    147e:	bb 09       	sbc	r27, r11
    1480:	2d 90       	ld	r2, X+
    1482:	3c 90       	ld	r3, X
    1484:	35 94       	asr	r3
    1486:	27 94       	ror	r2
    1488:	31 01       	movw	r6, r2
    148a:	64 0c       	add	r6, r4
    148c:	75 1c       	adc	r7, r5
    148e:	24 18       	sub	r2, r4
    1490:	35 08       	sbc	r3, r5
    1492:	7c 92       	st	X, r7
    1494:	6e 92       	st	-X, r6
    1496:	d0 01       	movw	r26, r0
    1498:	2d 92       	st	X+, r2
    149a:	3c 92       	st	X, r3
    149c:	12 97       	sbiw	r26, 0x02	; 2
    149e:	ea 94       	dec	r14
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <run+0x356>
    14a2:	98 cf       	rjmp	.-208    	; 0x13d4 <run+0x286>
    14a4:	de 01       	movw	r26, r28
    14a6:	aa 19       	sub	r26, r10
    14a8:	bb 09       	sbc	r27, r11
    14aa:	2d 90       	ld	r2, X+
    14ac:	3c 90       	ld	r3, X
    14ae:	48 80       	ld	r4, Y
    14b0:	59 80       	ldd	r5, Y+1	; 0x01
    14b2:	35 94       	asr	r3
    14b4:	27 94       	ror	r2
    14b6:	31 01       	movw	r6, r2
    14b8:	55 94       	asr	r5
    14ba:	47 94       	ror	r4
    14bc:	64 0c       	add	r6, r4
    14be:	75 1c       	adc	r7, r5
    14c0:	24 18       	sub	r2, r4
    14c2:	35 08       	sbc	r3, r5
    14c4:	28 82       	st	Y, r2
    14c6:	39 82       	std	Y+1, r3	; 0x01
    14c8:	7c 92       	st	X, r7
    14ca:	6e 92       	st	-X, r6
    14cc:	c5 01       	movw	r24, r10
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	c8 0f       	add	r28, r24
    14d4:	d9 1f       	adc	r29, r25
    14d6:	c4 37       	cpi	r28, 0x74	; 116
    14d8:	d9 05       	cpc	r29, r9
    14da:	40 f4       	brcc	.+16     	; 0x14ec <run+0x39e>
    14dc:	de 01       	movw	r26, r28
    14de:	ca 0d       	add	r28, r10
    14e0:	db 1d       	adc	r29, r11
    14e2:	e8 2c       	mov	r14, r8
    14e4:	ea 19       	sub	r30, r10
    14e6:	fb 09       	sbc	r31, r11
    14e8:	34 96       	adiw	r30, 0x04	; 4
    14ea:	5f cf       	rjmp	.-322    	; 0x13aa <run+0x25c>
    14ec:	85 fc       	sbrc	r8, 5
    14ee:	06 c0       	rjmp	.+12     	; 0x14fc <run+0x3ae>
    14f0:	ea 2c       	mov	r14, r10
    14f2:	e6 94       	lsr	r14
    14f4:	56 01       	movw	r10, r12
    14f6:	cc 0c       	add	r12, r12
    14f8:	dd 1c       	adc	r13, r13
    14fa:	51 cf       	rjmp	.-350    	; 0x139e <run+0x250>
   "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "r24", "r25",
   "r26", "r27", "r28", "r29", "r30", "r31" // clobber list for whole thing
  );

  // get the clobbers off the stack
  asm volatile (
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	7f 90       	pop	r7
    1516:	6f 90       	pop	r6
    1518:	5f 90       	pop	r5
    151a:	4f 90       	pop	r4
    151c:	3f 90       	pop	r3
    151e:	2f 90       	pop	r2
    1520:	11 24       	eor	r1, r1
}

static inline void fht_mag_lin(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1522:	2f 92       	push	r2
    1524:	3f 92       	push	r3
    1526:	4f 92       	push	r4
    1528:	5f 92       	push	r5
    152a:	6f 92       	push	r6
    152c:	7f 92       	push	r7
    152e:	8f 92       	push	r8
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this returns an 16b unsigned value which is 16*((img^2 + real^2)^0.5)
  asm volatile (
    153a:	a4 e7       	ldi	r26, 0x74	; 116
    153c:	b9 e2       	ldi	r27, 0x29	; 41
    153e:	c1 eb       	ldi	r28, 0xB1	; 177
    1540:	d5 e2       	ldi	r29, 0x25	; 37
    1542:	e4 e7       	ldi	r30, 0x74	; 116
    1544:	fa e2       	ldi	r31, 0x2A	; 42
    1546:	4f 01       	movw	r8, r30
    1548:	ff 24       	eor	r15, r15
    154a:	40 e4       	ldi	r20, 0x40	; 64
    154c:	0d 91       	ld	r16, X+
    154e:	1d 91       	ld	r17, X+
    1550:	98 01       	movw	r18, r16
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <run+0x412>
    1554:	f4 01       	movw	r30, r8
    1556:	0d 91       	ld	r16, X+
    1558:	1d 91       	ld	r17, X+
    155a:	32 91       	ld	r19, -Z
    155c:	22 91       	ld	r18, -Z
    155e:	4f 01       	movw	r8, r30
    1560:	11 02       	muls	r17, r17
    1562:	20 01       	movw	r4, r0
    1564:	00 9f       	mul	r16, r16
    1566:	10 01       	movw	r2, r0
    1568:	98 03       	fmulsu	r17, r16
    156a:	5f 08       	sbc	r5, r15
    156c:	30 0c       	add	r3, r0
    156e:	41 1c       	adc	r4, r1
    1570:	5f 1c       	adc	r5, r15
    1572:	33 02       	muls	r19, r19
    1574:	30 01       	movw	r6, r0
    1576:	22 9f       	mul	r18, r18
    1578:	20 0c       	add	r2, r0
    157a:	31 1c       	adc	r3, r1
    157c:	46 1c       	adc	r4, r6
    157e:	57 1c       	adc	r5, r7
    1580:	ba 03       	fmulsu	r19, r18
    1582:	5f 08       	sbc	r5, r15
    1584:	30 0c       	add	r3, r0
    1586:	41 1c       	adc	r4, r1
    1588:	5f 1c       	adc	r5, r15
    158a:	11 27       	eor	r17, r17
    158c:	55 20       	and	r5, r5
    158e:	61 f0       	breq	.+24     	; 0x15a8 <run+0x45a>
    1590:	18 e0       	ldi	r17, 0x08	; 8
    1592:	f2 01       	movw	r30, r4
    1594:	f0 34       	cpi	r31, 0x40	; 64
    1596:	28 f5       	brcc	.+74     	; 0x15e2 <run+0x494>
    1598:	33 0c       	add	r3, r3
    159a:	ee 1f       	adc	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	33 0c       	add	r3, r3
    15a0:	ee 1f       	adc	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	1a 95       	dec	r17
    15a6:	1d c0       	rjmp	.+58     	; 0x15e2 <run+0x494>
    15a8:	44 20       	and	r4, r4
    15aa:	69 f0       	breq	.+26     	; 0x15c6 <run+0x478>
    15ac:	14 e0       	ldi	r17, 0x04	; 4
    15ae:	f4 2d       	mov	r31, r4
    15b0:	e3 2d       	mov	r30, r3
    15b2:	f0 34       	cpi	r31, 0x40	; 64
    15b4:	b0 f4       	brcc	.+44     	; 0x15e2 <run+0x494>
    15b6:	22 0c       	add	r2, r2
    15b8:	ee 1f       	adc	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	22 0c       	add	r2, r2
    15be:	ee 1f       	adc	r30, r30
    15c0:	ff 1f       	adc	r31, r31
    15c2:	1a 95       	dec	r17
    15c4:	f6 cf       	rjmp	.-20     	; 0x15b2 <run+0x464>
    15c6:	f1 01       	movw	r30, r2
    15c8:	f0 34       	cpi	r31, 0x40	; 64
    15ca:	58 f4       	brcc	.+22     	; 0x15e2 <run+0x494>
    15cc:	f0 31       	cpi	r31, 0x10	; 16
    15ce:	60 f4       	brcc	.+24     	; 0x15e8 <run+0x49a>
    15d0:	f1 30       	cpi	r31, 0x01	; 1
    15d2:	78 f0       	brcs	.+30     	; 0x15f2 <run+0x4a4>
    15d4:	f2 95       	swap	r31
    15d6:	e2 95       	swap	r30
    15d8:	ef 70       	andi	r30, 0x0F	; 15
    15da:	ef 2b       	or	r30, r31
    15dc:	e6 95       	lsr	r30
    15de:	f1 e0       	ldi	r31, 0x01	; 1
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <run+0x4a4>
    15e2:	ef 2f       	mov	r30, r31
    15e4:	f2 e0       	ldi	r31, 0x02	; 2
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <run+0x4a4>
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	ef 2f       	mov	r30, r31
    15ee:	e0 68       	ori	r30, 0x80	; 128
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	e2 5d       	subi	r30, 0xD2	; 210
    15f4:	fb 4f       	sbci	r31, 0xFB	; 251
    15f6:	04 91       	lpm	r16, Z
    15f8:	22 27       	eor	r18, r18
    15fa:	11 23       	and	r17, r17
    15fc:	21 f0       	breq	.+8      	; 0x1606 <run+0x4b8>
    15fe:	00 0f       	add	r16, r16
    1600:	22 1f       	adc	r18, r18
    1602:	1a 95       	dec	r17
    1604:	e1 f7       	brne	.-8      	; 0x15fe <run+0x4b0>
    1606:	09 93       	st	Y+, r16
    1608:	29 93       	st	Y+, r18
    160a:	4a 95       	dec	r20
    160c:	09 f0       	breq	.+2      	; 0x1610 <run+0x4c2>
    160e:	a2 cf       	rjmp	.-188    	; 0x1554 <run+0x406>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r16", "r17", "r26", "r27",
   "r28", "r29", "r30", "r31", "r15", "r18", "r19", "r20", "r8" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	8f 90       	pop	r8
    161c:	7f 90       	pop	r7
    161e:	6f 90       	pop	r6
    1620:	5f 90       	pop	r5
    1622:	4f 90       	pop	r4
    1624:	3f 90       	pop	r3
    1626:	2f 90       	pop	r2
    1628:	11 24       	eor	r1, r1
	fht_window(); // window the data for better frequency response
	fht_reorder(); // reorder the data before doing the fht
	fht_run(); // process the data in the fht
	fht_mag_lin(); // take the output of the fht
	
	updateLEDs();
    162a:	24 db       	rcall	.-2488   	; 0xc74 <updateLEDs>
	flag_fft = false;
    162c:	10 92 02 21 	sts	0x2102, r1
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	6f 90       	pop	r6
    164c:	5f 90       	pop	r5
    164e:	4f 90       	pop	r4
    1650:	3f 90       	pop	r3
    1652:	2f 90       	pop	r2
    1654:	08 95       	ret

00001656 <write_byte_eeprom>:

/*
	return false when the procedure was failed, true when success
*/
bool write_byte_eeprom(uint8_t addr, uint8_t data)
{
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	16 2f       	mov	r17, r22
	uint8_t rev_data;
	
	nvm_eeprom_write_byte(addr, data);
    165e:	c8 2f       	mov	r28, r24
    1660:	d0 e0       	ldi	r29, 0x00	; 0
    1662:	ce 01       	movw	r24, r28
    1664:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	rev_data = nvm_eeprom_read_byte(addr);
    1668:	ce 01       	movw	r24, r28
    166a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	if (rev_data == data)
    166e:	91 e0       	ldi	r25, 0x01	; 1
    1670:	18 13       	cpse	r17, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else
	{
		return false;
	}	
    1674:	89 2f       	mov	r24, r25
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	08 95       	ret

0000167e <init_i2c>:
{
	cmd_read_register(index, offset);
	wait_result();
	
	return REG_READ;
}
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	29 97       	sbiw	r28, 0x09	; 9
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	9a e1       	ldi	r25, 0x1A	; 26
    1690:	a6 e0       	ldi	r26, 0x06	; 6
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	ab 83       	std	Y+3, r26	; 0x03
    169a:	bc 83       	std	Y+4, r27	; 0x04
    169c:	83 e2       	ldi	r24, 0x23	; 35
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	af 83       	std	Y+7, r26	; 0x07
    16aa:	b8 87       	std	Y+8, r27	; 0x08
    16ac:	80 e5       	ldi	r24, 0x50	; 80
    16ae:	89 87       	std	Y+9, r24	; 0x09
    16b0:	60 e4       	ldi	r22, 0x40	; 64
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	0e 94 ed 1b 	call	0x37da	; 0x37da <sysclk_enable_module>
    16b8:	be 01       	movw	r22, r28
    16ba:	6f 5f       	subi	r22, 0xFF	; 255
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	94 e0       	ldi	r25, 0x04	; 4
    16c2:	0e 94 3e 21 	call	0x427c	; 0x427c <twi_master_init>
    16c6:	e0 e8       	ldi	r30, 0x80	; 128
    16c8:	f4 e0       	ldi	r31, 0x04	; 4
    16ca:	81 81       	ldd	r24, Z+1	; 0x01
    16cc:	88 60       	ori	r24, 0x08	; 8
    16ce:	81 83       	std	Z+1, r24	; 0x01
    16d0:	78 94       	sei
    16d2:	29 96       	adiw	r28, 0x09	; 9
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <init_mtch6301>:
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	59 e1       	ldi	r21, 0x19	; 25
    16e2:	60 e2       	ldi	r22, 0x20	; 32
    16e4:	80 e4       	ldi	r24, 0x40	; 64
    16e6:	96 e0       	ldi	r25, 0x06	; 6
    16e8:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	80 93 b0 00 	sts	0x00B0, r24
    16f2:	e0 e4       	ldi	r30, 0x40	; 64
    16f4:	f6 e0       	ldi	r31, 0x06	; 6
    16f6:	82 87       	std	Z+10, r24	; 0x0a
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	81 87       	std	Z+9, r24	; 0x09
    16fc:	e0 ea       	ldi	r30, 0xA0	; 160
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	81 60       	ori	r24, 0x01	; 1
    1704:	82 83       	std	Z+2, r24	; 0x02
    1706:	78 94       	sei
    1708:	08 95       	ret

0000170a <init_mtchio>:
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	50 e0       	ldi	r21, 0x00	; 0
    170e:	60 e2       	ldi	r22, 0x20	; 32
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	96 e0       	ldi	r25, 0x06	; 6
    1714:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    1718:	41 e0       	ldi	r20, 0x01	; 1
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	60 e4       	ldi	r22, 0x40	; 64
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	96 e0       	ldi	r25, 0x06	; 6
    1722:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	60 e8       	ldi	r22, 0x80	; 128
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	96 e0       	ldi	r25, 0x06	; 6
    1730:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	60 e4       	ldi	r22, 0x40	; 64
    173a:	80 e6       	ldi	r24, 0x60	; 96
    173c:	96 e0       	ldi	r25, 0x06	; 6
    173e:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    1742:	41 e0       	ldi	r20, 0x01	; 1
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	61 e0       	ldi	r22, 0x01	; 1
    1748:	80 ee       	ldi	r24, 0xE0	; 224
    174a:	97 e0       	ldi	r25, 0x07	; 7
    174c:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	80 e6       	ldi	r24, 0x60	; 96
    1758:	96 e0       	ldi	r25, 0x06	; 6
    175a:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	62 e0       	ldi	r22, 0x02	; 2
    1764:	80 e6       	ldi	r24, 0x60	; 96
    1766:	96 e0       	ldi	r25, 0x06	; 6
    1768:	0c 94 04 1c 	jmp	0x3808	; 0x3808 <ioport_configure_port_pin>
    176c:	08 95       	ret

0000176e <cmd_write_register>:
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	61 97       	sbiw	r28, 0x11	; 17
    1778:	cd bf       	out	0x3d, r28	; 61
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	9a ef       	ldi	r25, 0xFA	; 250
    177e:	90 93 d4 20 	sts	0x20D4, r25
    1782:	95 e5       	ldi	r25, 0x55	; 85
    1784:	99 83       	std	Y+1, r25	; 0x01
    1786:	94 e0       	ldi	r25, 0x04	; 4
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	95 e1       	ldi	r25, 0x15	; 21
    178c:	9b 83       	std	Y+3, r25	; 0x03
    178e:	8c 83       	std	Y+4, r24	; 0x04
    1790:	6d 83       	std	Y+5, r22	; 0x05
    1792:	4e 83       	std	Y+6, r20	; 0x06
    1794:	0e 94 c0 18 	call	0x3180	; 0x3180 <wdt_kick>
    1798:	be 01       	movw	r22, r28
    179a:	69 5f       	subi	r22, 0xF9	; 249
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8b e0       	ldi	r24, 0x0B	; 11
    17a0:	fb 01       	movw	r30, r22
    17a2:	11 92       	st	Z+, r1
    17a4:	8a 95       	dec	r24
    17a6:	e9 f7       	brne	.-6      	; 0x17a2 <cmd_write_register+0x34>
    17a8:	85 e2       	ldi	r24, 0x25	; 37
    17aa:	8f 83       	std	Y+7, r24	; 0x07
    17ac:	ce 01       	movw	r24, r28
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	8d 87       	std	Y+13, r24	; 0x0d
    17b2:	9e 87       	std	Y+14, r25	; 0x0e
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	8f 87       	std	Y+15, r24	; 0x0f
    17ba:	98 8b       	std	Y+16, r25	; 0x10
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	80 e8       	ldi	r24, 0x80	; 128
    17c0:	94 e0       	ldi	r25, 0x04	; 4
    17c2:	0e 94 53 21 	call	0x42a6	; 0x42a6 <twi_master_transfer>
    17c6:	80 93 d4 20 	sts	0x20D4, r24
    17ca:	91 e0       	ldi	r25, 0x01	; 1
    17cc:	90 93 32 21 	sts	0x2132, r25
    17d0:	81 11       	cpse	r24, r1
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <cmd_write_register+0x68>
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	89 2f       	mov	r24, r25
    17d8:	61 96       	adiw	r28, 0x11	; 17
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <cmd_mtch6301>:
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}

void cmd_mtch6301(uint8_t cmd)
{
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	2e 97       	sbiw	r28, 0x0e	; 14
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	de bf       	out	0x3e, r29	; 62
	status_res = ERR_UNSUPPORTED_DEV;
    17f4:	9a ef       	ldi	r25, 0xFA	; 250
    17f6:	90 93 d4 20 	sts	0x20D4, r25
	uint8_t cmd_slaver[3]={0x55,0x01,cmd};
    17fa:	95 e5       	ldi	r25, 0x55	; 85
    17fc:	99 83       	std	Y+1, r25	; 0x01
    17fe:	11 e0       	ldi	r17, 0x01	; 1
    1800:	1a 83       	std	Y+2, r17	; 0x02
    1802:	8b 83       	std	Y+3, r24	; 0x03
		
	#ifdef ENABLE_WDT
		wdt_kick();
    1804:	0e 94 c0 18 	call	0x3180	; 0x3180 <wdt_kick>
	#endif
	
	twi_package_t package = {
    1808:	be 01       	movw	r22, r28
    180a:	6c 5f       	subi	r22, 0xFC	; 252
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8b e0       	ldi	r24, 0x0B	; 11
    1810:	fb 01       	movw	r30, r22
    1812:	11 92       	st	Z+, r1
    1814:	8a 95       	dec	r24
    1816:	e9 f7       	brne	.-6      	; 0x1812 <cmd_mtch6301+0x2e>
    1818:	85 e2       	ldi	r24, 0x25	; 37
    181a:	8c 83       	std	Y+4, r24	; 0x04
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	8a 87       	std	Y+10, r24	; 0x0a
    1822:	9b 87       	std	Y+11, r25	; 0x0b
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	8c 87       	std	Y+12, r24	; 0x0c
    182a:	9d 87       	std	Y+13, r25	; 0x0d
 * \return STATUS_OK   If all bytes were written, error code otherwise
 */
static inline status_code_t twi_master_write(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, false);
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	80 e8       	ldi	r24, 0x80	; 128
    1830:	94 e0       	ldi	r25, 0x04	; 4
    1832:	0e 94 53 21 	call	0x42a6	; 0x42a6 <twi_master_transfer>
		.buffer			= (void *)cmd_slaver,
		.length			= 3,
		.no_wait		= false
	};
	
	status_res = twi_master_write(&TWI_MASTER, &package);
    1836:	80 93 d4 20 	sts	0x20D4, r24
	cmd_status = 1;
    183a:	10 93 32 21 	sts	0x2132, r17
}
    183e:	2e 96       	adiw	r28, 0x0e	; 14
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	08 95       	ret

0000184c <write_mtch_settings>:
	}
	
	cmd_res = 0x01;
}	

bool write_mtch_settings(void) {
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
    1850:	85 e5       	ldi	r24, 0x55	; 85
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1858:	88 23       	and	r24, r24
    185a:	09 f4       	brne	.+2      	; 0x185e <write_mtch_settings+0x12>
    185c:	94 c4       	rjmp	.+2344   	; 0x2186 <write_mtch_settings+0x93a>
		return true;
	}
	#ifdef ENABLE_WDT
		wdt_kick();
    185e:	0e 94 c0 18 	call	0x3180	; 0x3180 <wdt_kick>
	#endif
	
	twinkle(255, 0, 0);
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    186c:	2f ef       	ldi	r18, 0xFF	; 255
    186e:	83 ed       	ldi	r24, 0xD3	; 211
    1870:	90 e3       	ldi	r25, 0x30	; 48
    1872:	21 50       	subi	r18, 0x01	; 1
    1874:	80 40       	sbci	r24, 0x00	; 0
    1876:	90 40       	sbci	r25, 0x00	; 0
    1878:	e1 f7       	brne	.-8      	; 0x1872 <write_mtch_settings+0x26>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <write_mtch_settings+0x30>
    187c:	00 00       	nop
	
	_delay_ms(16000);
	
	//turn off touch and save to NVRAM first
	cmd_mtch6301(0x00);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	b1 df       	rcall	.-158    	; 0x17e4 <cmd_mtch6301>
    1882:	2f ef       	ldi	r18, 0xFF	; 255
    1884:	83 ed       	ldi	r24, 0xD3	; 211
    1886:	90 e3       	ldi	r25, 0x30	; 48
    1888:	21 50       	subi	r18, 0x01	; 1
    188a:	80 40       	sbci	r24, 0x00	; 0
    188c:	90 40       	sbci	r25, 0x00	; 0
    188e:	e1 f7       	brne	.-8      	; 0x1888 <write_mtch_settings+0x3c>
    1890:	00 c0       	rjmp	.+0      	; 0x1892 <write_mtch_settings+0x46>
    1892:	00 00       	nop
	_delay_ms(16000);
	cmd_mtch6301(0x00);
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	a6 df       	rcall	.-180    	; 0x17e4 <cmd_mtch6301>
    1898:	2f ef       	ldi	r18, 0xFF	; 255
    189a:	89 e6       	ldi	r24, 0x69	; 105
    189c:	98 e1       	ldi	r25, 0x18	; 24
    189e:	21 50       	subi	r18, 0x01	; 1
    18a0:	80 40       	sbci	r24, 0x00	; 0
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <write_mtch_settings+0x52>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <write_mtch_settings+0x5c>
    18a8:	00 00       	nop
	_delay_ms(8000);
	cmd_mtch6301(0x17);
    18aa:	87 e1       	ldi	r24, 0x17	; 23
    18ac:	9b df       	rcall	.-202    	; 0x17e4 <cmd_mtch6301>
    18ae:	2f ef       	ldi	r18, 0xFF	; 255
    18b0:	83 ed       	ldi	r24, 0xD3	; 211
    18b2:	90 e3       	ldi	r25, 0x30	; 48
    18b4:	21 50       	subi	r18, 0x01	; 1
    18b6:	80 40       	sbci	r24, 0x00	; 0
    18b8:	90 40       	sbci	r25, 0x00	; 0
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <write_mtch_settings+0x68>
    18bc:	00 c0       	rjmp	.+0      	; 0x18be <write_mtch_settings+0x72>
    18be:	00 00       	nop
	_delay_ms(16000);

	//GENERAL - INDEX 0x00
	if (EEPROM_GENERAL_UPDATE_BOOL) {
    18c0:	8d e4       	ldi	r24, 0x4D	; 77
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    18c8:	88 23       	and	r24, r24
    18ca:	09 f4       	brne	.+2      	; 0x18ce <write_mtch_settings+0x82>
    18cc:	84 c0       	rjmp	.+264    	; 0x19d6 <write_mtch_settings+0x18a>
		twinkle(255, 255, 0);
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	6f ef       	ldi	r22, 0xFF	; 255
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x00, 0x01, EEPROM_NUMRXCHANNELS); //NUM RX CHANNELS
    18d8:	8a e0       	ldi	r24, 0x0A	; 10
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    18e0:	48 2f       	mov	r20, r24
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	43 df       	rcall	.-378    	; 0x176e <cmd_write_register>
    18e8:	c8 2f       	mov	r28, r24
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	89 e6       	ldi	r24, 0x69	; 105
    18ee:	98 e1       	ldi	r25, 0x18	; 24
    18f0:	21 50       	subi	r18, 0x01	; 1
    18f2:	80 40       	sbci	r24, 0x00	; 0
    18f4:	90 40       	sbci	r25, 0x00	; 0
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <write_mtch_settings+0xa4>
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <write_mtch_settings+0xae>
    18fa:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x02, EEPROM_NUMTXCHANNELS); //NUM TX CHANNELS
    18fc:	8b e0       	ldi	r24, 0x0B	; 11
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1904:	48 2f       	mov	r20, r24
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	31 df       	rcall	.-414    	; 0x176e <cmd_write_register>
    190c:	c8 2b       	or	r28, r24
    190e:	2f ef       	ldi	r18, 0xFF	; 255
    1910:	89 e6       	ldi	r24, 0x69	; 105
    1912:	98 e1       	ldi	r25, 0x18	; 24
    1914:	21 50       	subi	r18, 0x01	; 1
    1916:	80 40       	sbci	r24, 0x00	; 0
    1918:	90 40       	sbci	r25, 0x00	; 0
    191a:	e1 f7       	brne	.-8      	; 0x1914 <write_mtch_settings+0xc8>
    191c:	00 c0       	rjmp	.+0      	; 0x191e <write_mtch_settings+0xd2>
    191e:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x04, EEPROM_RXSCALE_7_0); //RX SCALING [7:0]
    1920:	8c e0       	ldi	r24, 0x0C	; 12
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1928:	48 2f       	mov	r20, r24
    192a:	64 e0       	ldi	r22, 0x04	; 4
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	1f df       	rcall	.-450    	; 0x176e <cmd_write_register>
    1930:	c8 2b       	or	r28, r24
    1932:	2f ef       	ldi	r18, 0xFF	; 255
    1934:	89 e6       	ldi	r24, 0x69	; 105
    1936:	98 e1       	ldi	r25, 0x18	; 24
    1938:	21 50       	subi	r18, 0x01	; 1
    193a:	80 40       	sbci	r24, 0x00	; 0
    193c:	90 40       	sbci	r25, 0x00	; 0
    193e:	e1 f7       	brne	.-8      	; 0x1938 <write_mtch_settings+0xec>
    1940:	00 c0       	rjmp	.+0      	; 0x1942 <write_mtch_settings+0xf6>
    1942:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
    1944:	8d e0       	ldi	r24, 0x0D	; 13
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    194c:	48 2f       	mov	r20, r24
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0d df       	rcall	.-486    	; 0x176e <cmd_write_register>
    1954:	c8 2b       	or	r28, r24
    1956:	2f ef       	ldi	r18, 0xFF	; 255
    1958:	89 e6       	ldi	r24, 0x69	; 105
    195a:	98 e1       	ldi	r25, 0x18	; 24
    195c:	21 50       	subi	r18, 0x01	; 1
    195e:	80 40       	sbci	r24, 0x00	; 0
    1960:	90 40       	sbci	r25, 0x00	; 0
    1962:	e1 f7       	brne	.-8      	; 0x195c <write_mtch_settings+0x110>
    1964:	00 c0       	rjmp	.+0      	; 0x1966 <write_mtch_settings+0x11a>
    1966:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
    1968:	8e e0       	ldi	r24, 0x0E	; 14
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1970:	48 2f       	mov	r20, r24
    1972:	66 e0       	ldi	r22, 0x06	; 6
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	fb de       	rcall	.-522    	; 0x176e <cmd_write_register>
    1978:	c8 2b       	or	r28, r24
    197a:	2f ef       	ldi	r18, 0xFF	; 255
    197c:	89 e6       	ldi	r24, 0x69	; 105
    197e:	98 e1       	ldi	r25, 0x18	; 24
    1980:	21 50       	subi	r18, 0x01	; 1
    1982:	80 40       	sbci	r24, 0x00	; 0
    1984:	90 40       	sbci	r25, 0x00	; 0
    1986:	e1 f7       	brne	.-8      	; 0x1980 <write_mtch_settings+0x134>
    1988:	00 c0       	rjmp	.+0      	; 0x198a <write_mtch_settings+0x13e>
    198a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
    198c:	8f e0       	ldi	r24, 0x0F	; 15
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1994:	48 2f       	mov	r20, r24
    1996:	67 e0       	ldi	r22, 0x07	; 7
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	e9 de       	rcall	.-558    	; 0x176e <cmd_write_register>
    199c:	d8 2f       	mov	r29, r24
    199e:	2f ef       	ldi	r18, 0xFF	; 255
    19a0:	89 e6       	ldi	r24, 0x69	; 105
    19a2:	98 e1       	ldi	r25, 0x18	; 24
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	80 40       	sbci	r24, 0x00	; 0
    19a8:	90 40       	sbci	r25, 0x00	; 0
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <write_mtch_settings+0x158>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <write_mtch_settings+0x162>
    19ae:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    19b0:	87 e1       	ldi	r24, 0x17	; 23
    19b2:	18 df       	rcall	.-464    	; 0x17e4 <cmd_mtch6301>
    19b4:	2f ef       	ldi	r18, 0xFF	; 255
    19b6:	83 ed       	ldi	r24, 0xD3	; 211
    19b8:	90 e3       	ldi	r25, 0x30	; 48
    19ba:	21 50       	subi	r18, 0x01	; 1
    19bc:	80 40       	sbci	r24, 0x00	; 0
    19be:	90 40       	sbci	r25, 0x00	; 0
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <write_mtch_settings+0x16e>
    19c2:	00 c0       	rjmp	.+0      	; 0x19c4 <write_mtch_settings+0x178>
    19c4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x05, EEPROM_RXSCALE_15_8); //RX SCALING [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x06, EEPROM_TXSCALE_7_0); //TX SCALING [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x00, 0x07, EEPROM_TXSCALE_15_8); //TX SCALING [15:8]
    19c6:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, STATUS_OK != write_status);
    19c8:	61 e0       	ldi	r22, 0x01	; 1
    19ca:	09 f4       	brne	.+2      	; 0x19ce <write_mtch_settings+0x182>
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	8d e4       	ldi	r24, 0x4D	; 77
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//RXMAP - INDEX 0x01
	if (EEPROM_RXMAP_UPDATE_BOOL) {
    19d6:	8e e4       	ldi	r24, 0x4E	; 78
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    19de:	88 23       	and	r24, r24
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <write_mtch_settings+0x198>
    19e2:	96 c0       	rjmp	.+300    	; 0x1b10 <write_mtch_settings+0x2c4>
		twinkle(0, 255, 0);
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	6f ef       	ldi	r22, 0xFF	; 255
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x01, 0x00, EEPROM_RXPIN0);
    19ee:	80 e1       	ldi	r24, 0x10	; 16
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    19f6:	48 2f       	mov	r20, r24
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	b8 de       	rcall	.-656    	; 0x176e <cmd_write_register>
    19fe:	c8 2f       	mov	r28, r24
    1a00:	2f ef       	ldi	r18, 0xFF	; 255
    1a02:	89 e6       	ldi	r24, 0x69	; 105
    1a04:	98 e1       	ldi	r25, 0x18	; 24
    1a06:	21 50       	subi	r18, 0x01	; 1
    1a08:	80 40       	sbci	r24, 0x00	; 0
    1a0a:	90 40       	sbci	r25, 0x00	; 0
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <write_mtch_settings+0x1ba>
    1a0e:	00 c0       	rjmp	.+0      	; 0x1a10 <write_mtch_settings+0x1c4>
    1a10:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x01, EEPROM_RXPIN1);
    1a12:	81 e1       	ldi	r24, 0x11	; 17
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	a6 de       	rcall	.-692    	; 0x176e <cmd_write_register>
    1a22:	c8 2b       	or	r28, r24
    1a24:	2f ef       	ldi	r18, 0xFF	; 255
    1a26:	89 e6       	ldi	r24, 0x69	; 105
    1a28:	98 e1       	ldi	r25, 0x18	; 24
    1a2a:	21 50       	subi	r18, 0x01	; 1
    1a2c:	80 40       	sbci	r24, 0x00	; 0
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	e1 f7       	brne	.-8      	; 0x1a2a <write_mtch_settings+0x1de>
    1a32:	00 c0       	rjmp	.+0      	; 0x1a34 <write_mtch_settings+0x1e8>
    1a34:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x02, EEPROM_RXPIN2);
    1a36:	82 e1       	ldi	r24, 0x12	; 18
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1a3e:	48 2f       	mov	r20, r24
    1a40:	62 e0       	ldi	r22, 0x02	; 2
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	94 de       	rcall	.-728    	; 0x176e <cmd_write_register>
    1a46:	c8 2b       	or	r28, r24
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	89 e6       	ldi	r24, 0x69	; 105
    1a4c:	98 e1       	ldi	r25, 0x18	; 24
    1a4e:	21 50       	subi	r18, 0x01	; 1
    1a50:	80 40       	sbci	r24, 0x00	; 0
    1a52:	90 40       	sbci	r25, 0x00	; 0
    1a54:	e1 f7       	brne	.-8      	; 0x1a4e <write_mtch_settings+0x202>
    1a56:	00 c0       	rjmp	.+0      	; 0x1a58 <write_mtch_settings+0x20c>
    1a58:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x03, EEPROM_RXPIN3);
    1a5a:	83 e1       	ldi	r24, 0x13	; 19
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1a62:	48 2f       	mov	r20, r24
    1a64:	63 e0       	ldi	r22, 0x03	; 3
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	82 de       	rcall	.-764    	; 0x176e <cmd_write_register>
    1a6a:	c8 2b       	or	r28, r24
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	89 e6       	ldi	r24, 0x69	; 105
    1a70:	98 e1       	ldi	r25, 0x18	; 24
    1a72:	21 50       	subi	r18, 0x01	; 1
    1a74:	80 40       	sbci	r24, 0x00	; 0
    1a76:	90 40       	sbci	r25, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <write_mtch_settings+0x226>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <write_mtch_settings+0x230>
    1a7c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
    1a7e:	84 e1       	ldi	r24, 0x14	; 20
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1a86:	48 2f       	mov	r20, r24
    1a88:	64 e0       	ldi	r22, 0x04	; 4
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	70 de       	rcall	.-800    	; 0x176e <cmd_write_register>
    1a8e:	c8 2b       	or	r28, r24
    1a90:	2f ef       	ldi	r18, 0xFF	; 255
    1a92:	89 e6       	ldi	r24, 0x69	; 105
    1a94:	98 e1       	ldi	r25, 0x18	; 24
    1a96:	21 50       	subi	r18, 0x01	; 1
    1a98:	80 40       	sbci	r24, 0x00	; 0
    1a9a:	90 40       	sbci	r25, 0x00	; 0
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <write_mtch_settings+0x24a>
    1a9e:	00 c0       	rjmp	.+0      	; 0x1aa0 <write_mtch_settings+0x254>
    1aa0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
    1aa2:	85 e1       	ldi	r24, 0x15	; 21
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1aaa:	48 2f       	mov	r20, r24
    1aac:	65 e0       	ldi	r22, 0x05	; 5
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	5e de       	rcall	.-836    	; 0x176e <cmd_write_register>
    1ab2:	c8 2b       	or	r28, r24
    1ab4:	2f ef       	ldi	r18, 0xFF	; 255
    1ab6:	89 e6       	ldi	r24, 0x69	; 105
    1ab8:	98 e1       	ldi	r25, 0x18	; 24
    1aba:	21 50       	subi	r18, 0x01	; 1
    1abc:	80 40       	sbci	r24, 0x00	; 0
    1abe:	90 40       	sbci	r25, 0x00	; 0
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <write_mtch_settings+0x26e>
    1ac2:	00 c0       	rjmp	.+0      	; 0x1ac4 <write_mtch_settings+0x278>
    1ac4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
    1ac6:	86 e1       	ldi	r24, 0x16	; 22
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1ace:	48 2f       	mov	r20, r24
    1ad0:	66 e0       	ldi	r22, 0x06	; 6
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	4c de       	rcall	.-872    	; 0x176e <cmd_write_register>
    1ad6:	d8 2f       	mov	r29, r24
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	89 e6       	ldi	r24, 0x69	; 105
    1adc:	98 e1       	ldi	r25, 0x18	; 24
    1ade:	21 50       	subi	r18, 0x01	; 1
    1ae0:	80 40       	sbci	r24, 0x00	; 0
    1ae2:	90 40       	sbci	r25, 0x00	; 0
    1ae4:	e1 f7       	brne	.-8      	; 0x1ade <write_mtch_settings+0x292>
    1ae6:	00 c0       	rjmp	.+0      	; 0x1ae8 <write_mtch_settings+0x29c>
    1ae8:	00 00       	nop
		 write_status |= cmd_write_register(0x01, 0x0b, EEPROM_RXPIN11);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
    1aea:	87 e1       	ldi	r24, 0x17	; 23
    1aec:	7b de       	rcall	.-778    	; 0x17e4 <cmd_mtch6301>
    1aee:	2f ef       	ldi	r18, 0xFF	; 255
    1af0:	83 ed       	ldi	r24, 0xD3	; 211
    1af2:	90 e3       	ldi	r25, 0x30	; 48
    1af4:	21 50       	subi	r18, 0x01	; 1
    1af6:	80 40       	sbci	r24, 0x00	; 0
    1af8:	90 40       	sbci	r25, 0x00	; 0
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <write_mtch_settings+0x2a8>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <write_mtch_settings+0x2b2>
    1afe:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x04, EEPROM_RXPIN4);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x05, EEPROM_RXPIN5);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x01, 0x06, EEPROM_RXPIN6);
    1b00:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x01, 0x0c, EEPROM_RXPIN12);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, STATUS_OK != write_status);
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <write_mtch_settings+0x2bc>
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	8e e4       	ldi	r24, 0x4E	; 78
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//TXMAP - INDEX 0x02
	if (EEPROM_TXMAP_UPDATE_BOOL) {
    1b10:	8f e4       	ldi	r24, 0x4F	; 79
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1b18:	88 23       	and	r24, r24
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <write_mtch_settings+0x2d2>
    1b1c:	71 c0       	rjmp	.+226    	; 0x1c00 <write_mtch_settings+0x3b4>
		twinkle(0, 255, 255);
    1b1e:	4f ef       	ldi	r20, 0xFF	; 255
    1b20:	6f ef       	ldi	r22, 0xFF	; 255
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	a3 d7       	rcall	.+3910   	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x02, 0x00, EEPROM_TXPIN0);
    1b26:	8d e1       	ldi	r24, 0x1D	; 29
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1b2e:	48 2f       	mov	r20, r24
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	82 e0       	ldi	r24, 0x02	; 2
    1b34:	1c de       	rcall	.-968    	; 0x176e <cmd_write_register>
    1b36:	c8 2f       	mov	r28, r24
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	89 e6       	ldi	r24, 0x69	; 105
    1b3c:	98 e1       	ldi	r25, 0x18	; 24
    1b3e:	21 50       	subi	r18, 0x01	; 1
    1b40:	80 40       	sbci	r24, 0x00	; 0
    1b42:	90 40       	sbci	r25, 0x00	; 0
    1b44:	e1 f7       	brne	.-8      	; 0x1b3e <write_mtch_settings+0x2f2>
    1b46:	00 c0       	rjmp	.+0      	; 0x1b48 <write_mtch_settings+0x2fc>
    1b48:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x01, EEPROM_TXPIN1);
    1b4a:	8e e1       	ldi	r24, 0x1E	; 30
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1b52:	48 2f       	mov	r20, r24
    1b54:	61 e0       	ldi	r22, 0x01	; 1
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	0a de       	rcall	.-1004   	; 0x176e <cmd_write_register>
    1b5a:	c8 2b       	or	r28, r24
    1b5c:	2f ef       	ldi	r18, 0xFF	; 255
    1b5e:	89 e6       	ldi	r24, 0x69	; 105
    1b60:	98 e1       	ldi	r25, 0x18	; 24
    1b62:	21 50       	subi	r18, 0x01	; 1
    1b64:	80 40       	sbci	r24, 0x00	; 0
    1b66:	90 40       	sbci	r25, 0x00	; 0
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <write_mtch_settings+0x316>
    1b6a:	00 c0       	rjmp	.+0      	; 0x1b6c <write_mtch_settings+0x320>
    1b6c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
    1b6e:	8f e1       	ldi	r24, 0x1F	; 31
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1b76:	48 2f       	mov	r20, r24
    1b78:	62 e0       	ldi	r22, 0x02	; 2
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	f8 dd       	rcall	.-1040   	; 0x176e <cmd_write_register>
    1b7e:	c8 2b       	or	r28, r24
    1b80:	2f ef       	ldi	r18, 0xFF	; 255
    1b82:	89 e6       	ldi	r24, 0x69	; 105
    1b84:	98 e1       	ldi	r25, 0x18	; 24
    1b86:	21 50       	subi	r18, 0x01	; 1
    1b88:	80 40       	sbci	r24, 0x00	; 0
    1b8a:	90 40       	sbci	r25, 0x00	; 0
    1b8c:	e1 f7       	brne	.-8      	; 0x1b86 <write_mtch_settings+0x33a>
    1b8e:	00 c0       	rjmp	.+0      	; 0x1b90 <write_mtch_settings+0x344>
    1b90:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
    1b92:	80 e2       	ldi	r24, 0x20	; 32
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	63 e0       	ldi	r22, 0x03	; 3
    1b9e:	82 e0       	ldi	r24, 0x02	; 2
    1ba0:	e6 dd       	rcall	.-1076   	; 0x176e <cmd_write_register>
    1ba2:	c8 2b       	or	r28, r24
    1ba4:	2f ef       	ldi	r18, 0xFF	; 255
    1ba6:	89 e6       	ldi	r24, 0x69	; 105
    1ba8:	98 e1       	ldi	r25, 0x18	; 24
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	80 40       	sbci	r24, 0x00	; 0
    1bae:	90 40       	sbci	r25, 0x00	; 0
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <write_mtch_settings+0x35e>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <write_mtch_settings+0x368>
    1bb4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
    1bb6:	81 e2       	ldi	r24, 0x21	; 33
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	64 e0       	ldi	r22, 0x04	; 4
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	d4 dd       	rcall	.-1112   	; 0x176e <cmd_write_register>
    1bc6:	d8 2f       	mov	r29, r24
    1bc8:	2f ef       	ldi	r18, 0xFF	; 255
    1bca:	89 e6       	ldi	r24, 0x69	; 105
    1bcc:	98 e1       	ldi	r25, 0x18	; 24
    1bce:	21 50       	subi	r18, 0x01	; 1
    1bd0:	80 40       	sbci	r24, 0x00	; 0
    1bd2:	90 40       	sbci	r25, 0x00	; 0
    1bd4:	e1 f7       	brne	.-8      	; 0x1bce <write_mtch_settings+0x382>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <write_mtch_settings+0x38c>
    1bd8:	00 00       	nop
		 write_status |= cmd_write_register(0x02, 0x10, EEPROM_TXPIN16);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
    1bda:	87 e1       	ldi	r24, 0x17	; 23
    1bdc:	03 de       	rcall	.-1018   	; 0x17e4 <cmd_mtch6301>
    1bde:	2f ef       	ldi	r18, 0xFF	; 255
    1be0:	83 ed       	ldi	r24, 0xD3	; 211
    1be2:	90 e3       	ldi	r25, 0x30	; 48
    1be4:	21 50       	subi	r18, 0x01	; 1
    1be6:	80 40       	sbci	r24, 0x00	; 0
    1be8:	90 40       	sbci	r25, 0x00	; 0
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <write_mtch_settings+0x398>
    1bec:	00 c0       	rjmp	.+0      	; 0x1bee <write_mtch_settings+0x3a2>
    1bee:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x02, EEPROM_TXPIN2);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x03, EEPROM_TXPIN3);
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x02, 0x04, EEPROM_TXPIN4);
    1bf0:	cd 2b       	or	r28, r29
		 write_status |= cmd_write_register(0x02, 0x11, EEPROM_TXPIN17);
		_delay_ms(8000);
		*/
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, STATUS_OK != write_status);
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <write_mtch_settings+0x3ac>
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	8f e4       	ldi	r24, 0x4F	; 79
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//SELF - INDEX 0x10
	if (EEPROM_SELF_UPDATE_BOOL) {
    1c00:	80 e5       	ldi	r24, 0x50	; 80
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1c08:	88 23       	and	r24, r24
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <write_mtch_settings+0x3c2>
    1c0c:	3b c0       	rjmp	.+118    	; 0x1c84 <write_mtch_settings+0x438>
		twinkle(0, 0, 255);
    1c0e:	4f ef       	ldi	r20, 0xFF	; 255
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	2b d7       	rcall	.+3670   	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
    1c16:	8f e2       	ldi	r24, 0x2F	; 47
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1c1e:	48 2f       	mov	r20, r24
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	80 e1       	ldi	r24, 0x10	; 16
    1c24:	a4 dd       	rcall	.-1208   	; 0x176e <cmd_write_register>
    1c26:	c8 2f       	mov	r28, r24
    1c28:	2f ef       	ldi	r18, 0xFF	; 255
    1c2a:	89 e6       	ldi	r24, 0x69	; 105
    1c2c:	98 e1       	ldi	r25, 0x18	; 24
    1c2e:	21 50       	subi	r18, 0x01	; 1
    1c30:	80 40       	sbci	r24, 0x00	; 0
    1c32:	90 40       	sbci	r25, 0x00	; 0
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <write_mtch_settings+0x3e2>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <write_mtch_settings+0x3ec>
    1c38:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
    1c3a:	80 e3       	ldi	r24, 0x30	; 48
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1c42:	48 2f       	mov	r20, r24
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	80 e1       	ldi	r24, 0x10	; 16
    1c48:	92 dd       	rcall	.-1244   	; 0x176e <cmd_write_register>
    1c4a:	d8 2f       	mov	r29, r24
    1c4c:	2f ef       	ldi	r18, 0xFF	; 255
    1c4e:	89 e6       	ldi	r24, 0x69	; 105
    1c50:	98 e1       	ldi	r25, 0x18	; 24
    1c52:	21 50       	subi	r18, 0x01	; 1
    1c54:	80 40       	sbci	r24, 0x00	; 0
    1c56:	90 40       	sbci	r25, 0x00	; 0
    1c58:	e1 f7       	brne	.-8      	; 0x1c52 <write_mtch_settings+0x406>
    1c5a:	00 c0       	rjmp	.+0      	; 0x1c5c <write_mtch_settings+0x410>
    1c5c:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    1c5e:	87 e1       	ldi	r24, 0x17	; 23
    1c60:	c1 dd       	rcall	.-1150   	; 0x17e4 <cmd_mtch6301>
    1c62:	2f ef       	ldi	r18, 0xFF	; 255
    1c64:	83 ed       	ldi	r24, 0xD3	; 211
    1c66:	90 e3       	ldi	r25, 0x30	; 48
    1c68:	21 50       	subi	r18, 0x01	; 1
    1c6a:	80 40       	sbci	r24, 0x00	; 0
    1c6c:	90 40       	sbci	r25, 0x00	; 0
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <write_mtch_settings+0x41c>
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <write_mtch_settings+0x426>
    1c72:	00 00       	nop
	if (EEPROM_SELF_UPDATE_BOOL) {
		twinkle(0, 0, 255);
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x10, 0x00, EEPROM_SELFSCANTIME); //SELF SCAN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x10, 0x01, EEPROM_SELFTOUCHTHRES); //SELF THRESHOLD
    1c74:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_SELF, STATUS_OK != write_status);
    1c76:	61 e0       	ldi	r22, 0x01	; 1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <write_mtch_settings+0x430>
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	80 e5       	ldi	r24, 0x50	; 80
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//MUTUAL - INDEX 0x20
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
    1c84:	81 e5       	ldi	r24, 0x51	; 81
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1c8c:	88 23       	and	r24, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <write_mtch_settings+0x446>
    1c90:	3b c0       	rjmp	.+118    	; 0x1d08 <write_mtch_settings+0x4bc>
		twinkle(255, 0, 255);
    1c92:	4f ef       	ldi	r20, 0xFF	; 255
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	e9 d6       	rcall	.+3538   	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
    1c9a:	81 e3       	ldi	r24, 0x31	; 49
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	80 e2       	ldi	r24, 0x20	; 32
    1ca8:	62 dd       	rcall	.-1340   	; 0x176e <cmd_write_register>
    1caa:	c8 2f       	mov	r28, r24
    1cac:	2f ef       	ldi	r18, 0xFF	; 255
    1cae:	89 e6       	ldi	r24, 0x69	; 105
    1cb0:	98 e1       	ldi	r25, 0x18	; 24
    1cb2:	21 50       	subi	r18, 0x01	; 1
    1cb4:	80 40       	sbci	r24, 0x00	; 0
    1cb6:	90 40       	sbci	r25, 0x00	; 0
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <write_mtch_settings+0x466>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <write_mtch_settings+0x470>
    1cbc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
    1cbe:	82 e3       	ldi	r24, 0x32	; 50
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	50 dd       	rcall	.-1376   	; 0x176e <cmd_write_register>
    1cce:	d8 2f       	mov	r29, r24
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	89 e6       	ldi	r24, 0x69	; 105
    1cd4:	98 e1       	ldi	r25, 0x18	; 24
    1cd6:	21 50       	subi	r18, 0x01	; 1
    1cd8:	80 40       	sbci	r24, 0x00	; 0
    1cda:	90 40       	sbci	r25, 0x00	; 0
    1cdc:	e1 f7       	brne	.-8      	; 0x1cd6 <write_mtch_settings+0x48a>
    1cde:	00 c0       	rjmp	.+0      	; 0x1ce0 <write_mtch_settings+0x494>
    1ce0:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    1ce2:	87 e1       	ldi	r24, 0x17	; 23
    1ce4:	7f dd       	rcall	.-1282   	; 0x17e4 <cmd_mtch6301>
    1ce6:	2f ef       	ldi	r18, 0xFF	; 255
    1ce8:	83 ed       	ldi	r24, 0xD3	; 211
    1cea:	90 e3       	ldi	r25, 0x30	; 48
    1cec:	21 50       	subi	r18, 0x01	; 1
    1cee:	80 40       	sbci	r24, 0x00	; 0
    1cf0:	90 40       	sbci	r25, 0x00	; 0
    1cf2:	e1 f7       	brne	.-8      	; 0x1cec <write_mtch_settings+0x4a0>
    1cf4:	00 c0       	rjmp	.+0      	; 0x1cf6 <write_mtch_settings+0x4aa>
    1cf6:	00 00       	nop
	if (EEPROM_MUTUAL_UPDATE_BOOL) {
		twinkle(255, 0, 255);
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x20, 0x00, EEPROM_MUTSCANTIME); //MUTUAL SCAN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x20, 0x01, EEPROM_MUTTOUCHTHRES); //MUTUAL THRESHOLD
    1cf8:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, STATUS_OK != write_status);
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <write_mtch_settings+0x4b4>
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	81 e5       	ldi	r24, 0x51	; 81
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//DECODING - INDEX 0x30
	if (EEPROM_DECODING_UPDATE_BOOL) {
    1d08:	82 e5       	ldi	r24, 0x52	; 82
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1d10:	88 23       	and	r24, r24
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <write_mtch_settings+0x4ca>
    1d14:	83 c0       	rjmp	.+262    	; 0x1e1c <write_mtch_settings+0x5d0>
		twinkle(0, 0, 255);
    1d16:	4f ef       	ldi	r20, 0xFF	; 255
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	a7 d6       	rcall	.+3406   	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x30, 0x00, EEPROM_FLIPSTATE); //FLIP STATE
    1d1e:	83 e3       	ldi	r24, 0x33	; 51
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1d26:	48 2f       	mov	r20, r24
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	80 e3       	ldi	r24, 0x30	; 48
    1d2c:	20 dd       	rcall	.-1472   	; 0x176e <cmd_write_register>
    1d2e:	c8 2f       	mov	r28, r24
    1d30:	2f ef       	ldi	r18, 0xFF	; 255
    1d32:	89 e6       	ldi	r24, 0x69	; 105
    1d34:	98 e1       	ldi	r25, 0x18	; 24
    1d36:	21 50       	subi	r18, 0x01	; 1
    1d38:	80 40       	sbci	r24, 0x00	; 0
    1d3a:	90 40       	sbci	r25, 0x00	; 0
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <write_mtch_settings+0x4ea>
    1d3e:	00 c0       	rjmp	.+0      	; 0x1d40 <write_mtch_settings+0x4f4>
    1d40:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x01, EEPROM_NUMAVG); //NUM AVERAGES
    1d42:	84 e3       	ldi	r24, 0x34	; 52
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	61 e0       	ldi	r22, 0x01	; 1
    1d4e:	80 e3       	ldi	r24, 0x30	; 48
    1d50:	0e dd       	rcall	.-1508   	; 0x176e <cmd_write_register>
    1d52:	c8 2b       	or	r28, r24
    1d54:	2f ef       	ldi	r18, 0xFF	; 255
    1d56:	89 e6       	ldi	r24, 0x69	; 105
    1d58:	98 e1       	ldi	r25, 0x18	; 24
    1d5a:	21 50       	subi	r18, 0x01	; 1
    1d5c:	80 40       	sbci	r24, 0x00	; 0
    1d5e:	90 40       	sbci	r25, 0x00	; 0
    1d60:	e1 f7       	brne	.-8      	; 0x1d5a <write_mtch_settings+0x50e>
    1d62:	00 c0       	rjmp	.+0      	; 0x1d64 <write_mtch_settings+0x518>
    1d64:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x04, EEPROM_MINTOUCHDIST); //MIN TOUCH DISTANCE
    1d66:	85 e3       	ldi	r24, 0x35	; 53
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1d6e:	48 2f       	mov	r20, r24
    1d70:	64 e0       	ldi	r22, 0x04	; 4
    1d72:	80 e3       	ldi	r24, 0x30	; 48
    1d74:	fc dc       	rcall	.-1544   	; 0x176e <cmd_write_register>
    1d76:	c8 2b       	or	r28, r24
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	89 e6       	ldi	r24, 0x69	; 105
    1d7c:	98 e1       	ldi	r25, 0x18	; 24
    1d7e:	21 50       	subi	r18, 0x01	; 1
    1d80:	80 40       	sbci	r24, 0x00	; 0
    1d82:	90 40       	sbci	r25, 0x00	; 0
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <write_mtch_settings+0x532>
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <write_mtch_settings+0x53c>
    1d88:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
    1d8a:	86 e3       	ldi	r24, 0x36	; 54
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1d92:	48 2f       	mov	r20, r24
    1d94:	65 e0       	ldi	r22, 0x05	; 5
    1d96:	80 e3       	ldi	r24, 0x30	; 48
    1d98:	ea dc       	rcall	.-1580   	; 0x176e <cmd_write_register>
    1d9a:	c8 2b       	or	r28, r24
    1d9c:	2f ef       	ldi	r18, 0xFF	; 255
    1d9e:	89 e6       	ldi	r24, 0x69	; 105
    1da0:	98 e1       	ldi	r25, 0x18	; 24
    1da2:	21 50       	subi	r18, 0x01	; 1
    1da4:	80 40       	sbci	r24, 0x00	; 0
    1da6:	90 40       	sbci	r25, 0x00	; 0
    1da8:	e1 f7       	brne	.-8      	; 0x1da2 <write_mtch_settings+0x556>
    1daa:	00 c0       	rjmp	.+0      	; 0x1dac <write_mtch_settings+0x560>
    1dac:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
    1dae:	87 e3       	ldi	r24, 0x37	; 55
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1db6:	48 2f       	mov	r20, r24
    1db8:	66 e0       	ldi	r22, 0x06	; 6
    1dba:	80 e3       	ldi	r24, 0x30	; 48
    1dbc:	d8 dc       	rcall	.-1616   	; 0x176e <cmd_write_register>
    1dbe:	c8 2b       	or	r28, r24
    1dc0:	2f ef       	ldi	r18, 0xFF	; 255
    1dc2:	89 e6       	ldi	r24, 0x69	; 105
    1dc4:	98 e1       	ldi	r25, 0x18	; 24
    1dc6:	21 50       	subi	r18, 0x01	; 1
    1dc8:	80 40       	sbci	r24, 0x00	; 0
    1dca:	90 40       	sbci	r25, 0x00	; 0
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <write_mtch_settings+0x57a>
    1dce:	00 c0       	rjmp	.+0      	; 0x1dd0 <write_mtch_settings+0x584>
    1dd0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
    1dd2:	88 e3       	ldi	r24, 0x38	; 56
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1dda:	48 2f       	mov	r20, r24
    1ddc:	67 e0       	ldi	r22, 0x07	; 7
    1dde:	80 e3       	ldi	r24, 0x30	; 48
    1de0:	c6 dc       	rcall	.-1652   	; 0x176e <cmd_write_register>
    1de2:	d8 2f       	mov	r29, r24
    1de4:	2f ef       	ldi	r18, 0xFF	; 255
    1de6:	89 e6       	ldi	r24, 0x69	; 105
    1de8:	98 e1       	ldi	r25, 0x18	; 24
    1dea:	21 50       	subi	r18, 0x01	; 1
    1dec:	80 40       	sbci	r24, 0x00	; 0
    1dee:	90 40       	sbci	r25, 0x00	; 0
    1df0:	e1 f7       	brne	.-8      	; 0x1dea <write_mtch_settings+0x59e>
    1df2:	00 c0       	rjmp	.+0      	; 0x1df4 <write_mtch_settings+0x5a8>
    1df4:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    1df6:	87 e1       	ldi	r24, 0x17	; 23
    1df8:	f5 dc       	rcall	.-1558   	; 0x17e4 <cmd_mtch6301>
    1dfa:	2f ef       	ldi	r18, 0xFF	; 255
    1dfc:	83 ed       	ldi	r24, 0xD3	; 211
    1dfe:	90 e3       	ldi	r25, 0x30	; 48
    1e00:	21 50       	subi	r18, 0x01	; 1
    1e02:	80 40       	sbci	r24, 0x00	; 0
    1e04:	90 40       	sbci	r25, 0x00	; 0
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <write_mtch_settings+0x5b4>
    1e08:	00 c0       	rjmp	.+0      	; 0x1e0a <write_mtch_settings+0x5be>
    1e0a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x05, EEPROM_PENDOWNTIME); //PEN DOWN TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x06, EEPROM_PENUPTIME); //PEN UP TIME
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x30, 0x07, EEPROM_TOUCHSUPPRESSION); //TOUCH SUPPRESSION (MAX TOUCH POINTS)
    1e0c:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, STATUS_OK != write_status);
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <write_mtch_settings+0x5c8>
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	82 e5       	ldi	r24, 0x52	; 82
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//GESTURES - INDEX 0x50
	if (EEPROM_GESTURES_UPDATE_BOOL) {
    1e1c:	83 e5       	ldi	r24, 0x53	; 83
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1e24:	88 23       	and	r24, r24
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <write_mtch_settings+0x5de>
    1e28:	01 c1       	rjmp	.+514    	; 0x202c <write_mtch_settings+0x7e0>
		twinkle(255, 0, 255);
    1e2a:	4f ef       	ldi	r20, 0xFF	; 255
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	1d d6       	rcall	.+3130   	; 0x2a6c <twinkle>
		write_status =  STATUS_OK;
		 write_status |= cmd_write_register(0x50, 0x00, EEPROM_RXSWIPELEN); //RX SWIPE LENGTH
    1e32:	89 e3       	ldi	r24, 0x39	; 57
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	80 e5       	ldi	r24, 0x50	; 80
    1e40:	96 dc       	rcall	.-1748   	; 0x176e <cmd_write_register>
    1e42:	c8 2f       	mov	r28, r24
    1e44:	2f ef       	ldi	r18, 0xFF	; 255
    1e46:	89 e6       	ldi	r24, 0x69	; 105
    1e48:	98 e1       	ldi	r25, 0x18	; 24
    1e4a:	21 50       	subi	r18, 0x01	; 1
    1e4c:	80 40       	sbci	r24, 0x00	; 0
    1e4e:	90 40       	sbci	r25, 0x00	; 0
    1e50:	e1 f7       	brne	.-8      	; 0x1e4a <write_mtch_settings+0x5fe>
    1e52:	00 c0       	rjmp	.+0      	; 0x1e54 <write_mtch_settings+0x608>
    1e54:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x01, EEPROM_TXSWIPELEN); //TX SWIPE LENGTH
    1e56:	8a e3       	ldi	r24, 0x3A	; 58
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1e5e:	48 2f       	mov	r20, r24
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	80 e5       	ldi	r24, 0x50	; 80
    1e64:	84 dc       	rcall	.-1784   	; 0x176e <cmd_write_register>
    1e66:	c8 2b       	or	r28, r24
    1e68:	2f ef       	ldi	r18, 0xFF	; 255
    1e6a:	89 e6       	ldi	r24, 0x69	; 105
    1e6c:	98 e1       	ldi	r25, 0x18	; 24
    1e6e:	21 50       	subi	r18, 0x01	; 1
    1e70:	80 40       	sbci	r24, 0x00	; 0
    1e72:	90 40       	sbci	r25, 0x00	; 0
    1e74:	e1 f7       	brne	.-8      	; 0x1e6e <write_mtch_settings+0x622>
    1e76:	00 c0       	rjmp	.+0      	; 0x1e78 <write_mtch_settings+0x62c>
    1e78:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x02, EEPROM_SWIPEBOUNDARY); //SWIPE BOUNDARY
    1e7a:	8b e3       	ldi	r24, 0x3B	; 59
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1e82:	48 2f       	mov	r20, r24
    1e84:	62 e0       	ldi	r22, 0x02	; 2
    1e86:	80 e5       	ldi	r24, 0x50	; 80
    1e88:	72 dc       	rcall	.-1820   	; 0x176e <cmd_write_register>
    1e8a:	c8 2b       	or	r28, r24
    1e8c:	2f ef       	ldi	r18, 0xFF	; 255
    1e8e:	89 e6       	ldi	r24, 0x69	; 105
    1e90:	98 e1       	ldi	r25, 0x18	; 24
    1e92:	21 50       	subi	r18, 0x01	; 1
    1e94:	80 40       	sbci	r24, 0x00	; 0
    1e96:	90 40       	sbci	r25, 0x00	; 0
    1e98:	e1 f7       	brne	.-8      	; 0x1e92 <write_mtch_settings+0x646>
    1e9a:	00 c0       	rjmp	.+0      	; 0x1e9c <write_mtch_settings+0x650>
    1e9c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x03, EEPROM_SWIPEHOLDTHRES); //SWIPE HOLD THRESHOLD
    1e9e:	8c e3       	ldi	r24, 0x3C	; 60
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	80 e5       	ldi	r24, 0x50	; 80
    1eac:	60 dc       	rcall	.-1856   	; 0x176e <cmd_write_register>
    1eae:	c8 2b       	or	r28, r24
    1eb0:	2f ef       	ldi	r18, 0xFF	; 255
    1eb2:	89 e6       	ldi	r24, 0x69	; 105
    1eb4:	98 e1       	ldi	r25, 0x18	; 24
    1eb6:	21 50       	subi	r18, 0x01	; 1
    1eb8:	80 40       	sbci	r24, 0x00	; 0
    1eba:	90 40       	sbci	r25, 0x00	; 0
    1ebc:	e1 f7       	brne	.-8      	; 0x1eb6 <write_mtch_settings+0x66a>
    1ebe:	00 c0       	rjmp	.+0      	; 0x1ec0 <write_mtch_settings+0x674>
    1ec0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x04, EEPROM_SWIPETIME_7_0); //SWIPE TIME [7:0]
    1ec2:	8d e3       	ldi	r24, 0x3D	; 61
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1eca:	48 2f       	mov	r20, r24
    1ecc:	64 e0       	ldi	r22, 0x04	; 4
    1ece:	80 e5       	ldi	r24, 0x50	; 80
    1ed0:	4e dc       	rcall	.-1892   	; 0x176e <cmd_write_register>
    1ed2:	c8 2b       	or	r28, r24
    1ed4:	2f ef       	ldi	r18, 0xFF	; 255
    1ed6:	89 e6       	ldi	r24, 0x69	; 105
    1ed8:	98 e1       	ldi	r25, 0x18	; 24
    1eda:	21 50       	subi	r18, 0x01	; 1
    1edc:	80 40       	sbci	r24, 0x00	; 0
    1ede:	90 40       	sbci	r25, 0x00	; 0
    1ee0:	e1 f7       	brne	.-8      	; 0x1eda <write_mtch_settings+0x68e>
    1ee2:	00 c0       	rjmp	.+0      	; 0x1ee4 <write_mtch_settings+0x698>
    1ee4:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x05, EEPROM_SWIPETIME_15_8); //SWIPE TIME [15:8]
    1ee6:	8e e3       	ldi	r24, 0x3E	; 62
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1eee:	48 2f       	mov	r20, r24
    1ef0:	65 e0       	ldi	r22, 0x05	; 5
    1ef2:	80 e5       	ldi	r24, 0x50	; 80
    1ef4:	3c dc       	rcall	.-1928   	; 0x176e <cmd_write_register>
    1ef6:	c8 2b       	or	r28, r24
    1ef8:	2f ef       	ldi	r18, 0xFF	; 255
    1efa:	89 e6       	ldi	r24, 0x69	; 105
    1efc:	98 e1       	ldi	r25, 0x18	; 24
    1efe:	21 50       	subi	r18, 0x01	; 1
    1f00:	80 40       	sbci	r24, 0x00	; 0
    1f02:	90 40       	sbci	r25, 0x00	; 0
    1f04:	e1 f7       	brne	.-8      	; 0x1efe <write_mtch_settings+0x6b2>
    1f06:	00 c0       	rjmp	.+0      	; 0x1f08 <write_mtch_settings+0x6bc>
    1f08:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x06, EEPROM_TAPTIME_7_0); //TAP TIME [7:0]
    1f0a:	8f e3       	ldi	r24, 0x3F	; 63
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1f12:	48 2f       	mov	r20, r24
    1f14:	66 e0       	ldi	r22, 0x06	; 6
    1f16:	80 e5       	ldi	r24, 0x50	; 80
    1f18:	2a dc       	rcall	.-1964   	; 0x176e <cmd_write_register>
    1f1a:	c8 2b       	or	r28, r24
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	89 e6       	ldi	r24, 0x69	; 105
    1f20:	98 e1       	ldi	r25, 0x18	; 24
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	80 40       	sbci	r24, 0x00	; 0
    1f26:	90 40       	sbci	r25, 0x00	; 0
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <write_mtch_settings+0x6d6>
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <write_mtch_settings+0x6e0>
    1f2c:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x07, EEPROM_TAPTIME_15_8); //TAP TIME [15:8]
    1f2e:	80 e4       	ldi	r24, 0x40	; 64
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1f36:	48 2f       	mov	r20, r24
    1f38:	67 e0       	ldi	r22, 0x07	; 7
    1f3a:	80 e5       	ldi	r24, 0x50	; 80
    1f3c:	18 dc       	rcall	.-2000   	; 0x176e <cmd_write_register>
    1f3e:	c8 2b       	or	r28, r24
    1f40:	2f ef       	ldi	r18, 0xFF	; 255
    1f42:	89 e6       	ldi	r24, 0x69	; 105
    1f44:	98 e1       	ldi	r25, 0x18	; 24
    1f46:	21 50       	subi	r18, 0x01	; 1
    1f48:	80 40       	sbci	r24, 0x00	; 0
    1f4a:	90 40       	sbci	r25, 0x00	; 0
    1f4c:	e1 f7       	brne	.-8      	; 0x1f46 <write_mtch_settings+0x6fa>
    1f4e:	00 c0       	rjmp	.+0      	; 0x1f50 <write_mtch_settings+0x704>
    1f50:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x08, EEPROM_TAPTHRES); //TAP THRESHOLD
    1f52:	81 e4       	ldi	r24, 0x41	; 65
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	68 e0       	ldi	r22, 0x08	; 8
    1f5e:	80 e5       	ldi	r24, 0x50	; 80
    1f60:	06 dc       	rcall	.-2036   	; 0x176e <cmd_write_register>
    1f62:	c8 2b       	or	r28, r24
    1f64:	2f ef       	ldi	r18, 0xFF	; 255
    1f66:	89 e6       	ldi	r24, 0x69	; 105
    1f68:	98 e1       	ldi	r25, 0x18	; 24
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	80 40       	sbci	r24, 0x00	; 0
    1f6e:	90 40       	sbci	r25, 0x00	; 0
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <write_mtch_settings+0x71e>
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <write_mtch_settings+0x728>
    1f74:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x09, EEPROM_MINSWIPEVELOCITY); //MIN SWIPE VELOCITY
    1f76:	82 e4       	ldi	r24, 0x42	; 66
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1f7e:	48 2f       	mov	r20, r24
    1f80:	69 e0       	ldi	r22, 0x09	; 9
    1f82:	80 e5       	ldi	r24, 0x50	; 80
    1f84:	f4 db       	rcall	.-2072   	; 0x176e <cmd_write_register>
    1f86:	c8 2b       	or	r28, r24
    1f88:	2f ef       	ldi	r18, 0xFF	; 255
    1f8a:	89 e6       	ldi	r24, 0x69	; 105
    1f8c:	98 e1       	ldi	r25, 0x18	; 24
    1f8e:	21 50       	subi	r18, 0x01	; 1
    1f90:	80 40       	sbci	r24, 0x00	; 0
    1f92:	90 40       	sbci	r25, 0x00	; 0
    1f94:	e1 f7       	brne	.-8      	; 0x1f8e <write_mtch_settings+0x742>
    1f96:	00 c0       	rjmp	.+0      	; 0x1f98 <write_mtch_settings+0x74c>
    1f98:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
    1f9a:	83 e4       	ldi	r24, 0x43	; 67
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	6a e0       	ldi	r22, 0x0A	; 10
    1fa6:	80 e5       	ldi	r24, 0x50	; 80
    1fa8:	e2 db       	rcall	.-2108   	; 0x176e <cmd_write_register>
    1faa:	c8 2b       	or	r28, r24
    1fac:	2f ef       	ldi	r18, 0xFF	; 255
    1fae:	89 e6       	ldi	r24, 0x69	; 105
    1fb0:	98 e1       	ldi	r25, 0x18	; 24
    1fb2:	21 50       	subi	r18, 0x01	; 1
    1fb4:	80 40       	sbci	r24, 0x00	; 0
    1fb6:	90 40       	sbci	r25, 0x00	; 0
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <write_mtch_settings+0x766>
    1fba:	00 c0       	rjmp	.+0      	; 0x1fbc <write_mtch_settings+0x770>
    1fbc:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
    1fbe:	84 e4       	ldi	r24, 0x44	; 68
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	6b e0       	ldi	r22, 0x0B	; 11
    1fca:	80 e5       	ldi	r24, 0x50	; 80
    1fcc:	d0 db       	rcall	.-2144   	; 0x176e <cmd_write_register>
    1fce:	c8 2b       	or	r28, r24
    1fd0:	2f ef       	ldi	r18, 0xFF	; 255
    1fd2:	89 e6       	ldi	r24, 0x69	; 105
    1fd4:	98 e1       	ldi	r25, 0x18	; 24
    1fd6:	21 50       	subi	r18, 0x01	; 1
    1fd8:	80 40       	sbci	r24, 0x00	; 0
    1fda:	90 40       	sbci	r25, 0x00	; 0
    1fdc:	e1 f7       	brne	.-8      	; 0x1fd6 <write_mtch_settings+0x78a>
    1fde:	00 c0       	rjmp	.+0      	; 0x1fe0 <write_mtch_settings+0x794>
    1fe0:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
    1fe2:	85 e4       	ldi	r24, 0x45	; 69
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    1fea:	48 2f       	mov	r20, r24
    1fec:	6c e0       	ldi	r22, 0x0C	; 12
    1fee:	80 e5       	ldi	r24, 0x50	; 80
    1ff0:	be db       	rcall	.-2180   	; 0x176e <cmd_write_register>
    1ff2:	d8 2f       	mov	r29, r24
    1ff4:	2f ef       	ldi	r18, 0xFF	; 255
    1ff6:	89 e6       	ldi	r24, 0x69	; 105
    1ff8:	98 e1       	ldi	r25, 0x18	; 24
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	80 40       	sbci	r24, 0x00	; 0
    1ffe:	90 40       	sbci	r25, 0x00	; 0
    2000:	e1 f7       	brne	.-8      	; 0x1ffa <write_mtch_settings+0x7ae>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <write_mtch_settings+0x7b8>
    2004:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    2006:	87 e1       	ldi	r24, 0x17	; 23
    2008:	ed db       	rcall	.-2086   	; 0x17e4 <cmd_mtch6301>
    200a:	2f ef       	ldi	r18, 0xFF	; 255
    200c:	83 ed       	ldi	r24, 0xD3	; 211
    200e:	90 e3       	ldi	r25, 0x30	; 48
    2010:	21 50       	subi	r18, 0x01	; 1
    2012:	80 40       	sbci	r24, 0x00	; 0
    2014:	90 40       	sbci	r25, 0x00	; 0
    2016:	e1 f7       	brne	.-8      	; 0x2010 <write_mtch_settings+0x7c4>
    2018:	00 c0       	rjmp	.+0      	; 0x201a <write_mtch_settings+0x7ce>
    201a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0a, EEPROM_DOUBLETIME_7_0); //DOUBLE TAP TIME [7:0]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0b, EEPROM_DOUBLETIME_15_8); //DOUBLE TAP [15:8]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0x50, 0x0c, EEPROM_EDGEKEEPOUT); //GESTURE EDGE KEEPOUT
    201c:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, STATUS_OK != write_status);
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	09 f4       	brne	.+2      	; 0x2024 <write_mtch_settings+0x7d8>
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	83 e5       	ldi	r24, 0x53	; 83
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	
	//CONFIG - INDEX 0xf0
	if (EEPROM_CONFIG_UPDATE_BOOL) {
    202c:	84 e5       	ldi	r24, 0x54	; 84
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    2034:	88 23       	and	r24, r24
    2036:	09 f4       	brne	.+2      	; 0x203a <write_mtch_settings+0x7ee>
    2038:	4e c0       	rjmp	.+156    	; 0x20d6 <write_mtch_settings+0x88a>
		twinkle(255, 255, 255);
    203a:	4f ef       	ldi	r20, 0xFF	; 255
    203c:	6f ef       	ldi	r22, 0xFF	; 255
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	15 d5       	rcall	.+2602   	; 0x2a6c <twinkle>
		 write_status |= cmd_write_register(0xf0, 0x02, EEPROM_SLEEP_23_16); //SLEEP TIMEOUT [23:16]
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x03, EEPROM_SLEEP_31_24); //SLEEP TIMEOUT [31:24]
		_delay_ms(8000);
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
    2042:	8a e4       	ldi	r24, 0x4A	; 74
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    204a:	48 2f       	mov	r20, r24
    204c:	67 e0       	ldi	r22, 0x07	; 7
    204e:	80 ef       	ldi	r24, 0xF0	; 240
    2050:	8e db       	rcall	.-2276   	; 0x176e <cmd_write_register>
    2052:	c8 2f       	mov	r28, r24
    2054:	2f ef       	ldi	r18, 0xFF	; 255
    2056:	89 e6       	ldi	r24, 0x69	; 105
    2058:	98 e1       	ldi	r25, 0x18	; 24
    205a:	21 50       	subi	r18, 0x01	; 1
    205c:	80 40       	sbci	r24, 0x00	; 0
    205e:	90 40       	sbci	r25, 0x00	; 0
    2060:	e1 f7       	brne	.-8      	; 0x205a <write_mtch_settings+0x80e>
    2062:	00 c0       	rjmp	.+0      	; 0x2064 <write_mtch_settings+0x818>
    2064:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
    2066:	8b e4       	ldi	r24, 0x4B	; 75
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    206e:	48 2f       	mov	r20, r24
    2070:	69 e0       	ldi	r22, 0x09	; 9
    2072:	80 ef       	ldi	r24, 0xF0	; 240
    2074:	7c db       	rcall	.-2312   	; 0x176e <cmd_write_register>
    2076:	d8 2f       	mov	r29, r24
    2078:	dc 2b       	or	r29, r28
    207a:	2f ef       	ldi	r18, 0xFF	; 255
    207c:	89 e6       	ldi	r24, 0x69	; 105
    207e:	98 e1       	ldi	r25, 0x18	; 24
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	80 40       	sbci	r24, 0x00	; 0
    2084:	90 40       	sbci	r25, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <write_mtch_settings+0x834>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <write_mtch_settings+0x83e>
    208a:	00 00       	nop
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
    208c:	8c e4       	ldi	r24, 0x4C	; 76
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    2094:	48 2f       	mov	r20, r24
    2096:	6a e0       	ldi	r22, 0x0A	; 10
    2098:	80 ef       	ldi	r24, 0xF0	; 240
    209a:	69 db       	rcall	.-2350   	; 0x176e <cmd_write_register>
    209c:	c8 2f       	mov	r28, r24
    209e:	2f ef       	ldi	r18, 0xFF	; 255
    20a0:	89 e6       	ldi	r24, 0x69	; 105
    20a2:	98 e1       	ldi	r25, 0x18	; 24
    20a4:	21 50       	subi	r18, 0x01	; 1
    20a6:	80 40       	sbci	r24, 0x00	; 0
    20a8:	90 40       	sbci	r25, 0x00	; 0
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <write_mtch_settings+0x858>
    20ac:	00 c0       	rjmp	.+0      	; 0x20ae <write_mtch_settings+0x862>
    20ae:	00 00       	nop
		_delay_ms(8000);
		cmd_mtch6301(0x17);
    20b0:	87 e1       	ldi	r24, 0x17	; 23
    20b2:	98 db       	rcall	.-2256   	; 0x17e4 <cmd_mtch6301>
    20b4:	2f ef       	ldi	r18, 0xFF	; 255
    20b6:	83 ed       	ldi	r24, 0xD3	; 211
    20b8:	90 e3       	ldi	r25, 0x30	; 48
    20ba:	21 50       	subi	r18, 0x01	; 1
    20bc:	80 40       	sbci	r24, 0x00	; 0
    20be:	90 40       	sbci	r25, 0x00	; 0
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <write_mtch_settings+0x86e>
    20c2:	00 c0       	rjmp	.+0      	; 0x20c4 <write_mtch_settings+0x878>
    20c4:	00 00       	nop
		*/
		 write_status |= cmd_write_register(0xf0, 0x07, EEPROM_TOUCHPACKETCFG); //TOUCH PACKET CFG
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x09, EEPROM_GESTUREPACKETCFG); //GESTURE PACKET CFG
		_delay_ms(8000);
		 write_status |= cmd_write_register(0xf0, 0x0a, EEPROM_STATUSPACKETCFG); //STATUS PACKET CFG
    20c6:	cd 2b       	or	r28, r29
		_delay_ms(8000);
		cmd_mtch6301(0x17);
		_delay_ms(16000);
		nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, STATUS_OK != write_status);
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <write_mtch_settings+0x882>
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	84 e5       	ldi	r24, 0x54	; 84
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	}
	
	//Restore touch functionality and save to NVRAM
	cmd_mtch6301(0x01);
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	85 db       	rcall	.-2294   	; 0x17e4 <cmd_mtch6301>
    20da:	2f ef       	ldi	r18, 0xFF	; 255
    20dc:	89 e6       	ldi	r24, 0x69	; 105
    20de:	98 e1       	ldi	r25, 0x18	; 24
    20e0:	21 50       	subi	r18, 0x01	; 1
    20e2:	80 40       	sbci	r24, 0x00	; 0
    20e4:	90 40       	sbci	r25, 0x00	; 0
    20e6:	e1 f7       	brne	.-8      	; 0x20e0 <write_mtch_settings+0x894>
    20e8:	00 c0       	rjmp	.+0      	; 0x20ea <write_mtch_settings+0x89e>
    20ea:	00 00       	nop
	_delay_ms(8000);
	cmd_mtch6301(0x17);
    20ec:	87 e1       	ldi	r24, 0x17	; 23
    20ee:	7a db       	rcall	.-2316   	; 0x17e4 <cmd_mtch6301>
    20f0:	2f ef       	ldi	r18, 0xFF	; 255
    20f2:	83 ed       	ldi	r24, 0xD3	; 211
    20f4:	90 e3       	ldi	r25, 0x30	; 48
    20f6:	21 50       	subi	r18, 0x01	; 1
    20f8:	80 40       	sbci	r24, 0x00	; 0
    20fa:	90 40       	sbci	r25, 0x00	; 0
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <write_mtch_settings+0x8aa>
    20fe:	00 c0       	rjmp	.+0      	; 0x2100 <write_mtch_settings+0x8b4>
    2100:	00 00       	nop
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
		EEPROM_GENERAL_UPDATE_BOOL	|
    2102:	8d e4       	ldi	r24, 0x4D	; 77
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    210a:	c8 2f       	mov	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
    210c:	8d e4       	ldi	r24, 0x4D	; 77
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2114:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
    2116:	8e e4       	ldi	r24, 0x4E	; 78
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    211e:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
    2120:	8f e4       	ldi	r24, 0x4F	; 79
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2128:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
    212a:	80 e5       	ldi	r24, 0x50	; 80
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2132:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
    2134:	81 e5       	ldi	r24, 0x51	; 81
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    213c:	c8 2b       	or	r28, r24
		EEPROM_GENERAL_UPDATE_BOOL	|
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
    213e:	82 e5       	ldi	r24, 0x52	; 82
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2146:	c8 2b       	or	r28, r24
		EEPROM_RXMAP_UPDATE_BOOL	|
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
    2148:	83 e5       	ldi	r24, 0x53	; 83
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    2150:	c8 2b       	or	r28, r24
		EEPROM_TXMAP_UPDATE_BOOL	|
		EEPROM_SELF_UPDATE_BOOL		|
		EEPROM_MUTUAL_UPDATE_BOOL	|
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
    2152:	84 e5       	ldi	r24, 0x54	; 84
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
	cmd_mtch6301(0x01);
	_delay_ms(8000);
	cmd_mtch6301(0x17);
	_delay_ms(16000);
	
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, (
    215a:	6c 2f       	mov	r22, r28
    215c:	68 2b       	or	r22, r24
    215e:	85 e5       	ldi	r24, 0x55	; 85
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
		EEPROM_DECODING_UPDATE_BOOL	|
		EEPROM_GESTURES_UPDATE_BOOL	|
		EEPROM_CONFIG_UPDATE_BOOL	
	));
	
	send_mtch_update_status();
    2166:	8c d7       	rcall	.+3864   	; 0x3080 <send_mtch_update_status>
	
	if (EEPROM_MTCH_UPDATE_BOOL) {
    2168:	85 e5       	ldi	r24, 0x55	; 85
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <nvm_eeprom_read_byte>
    2170:	88 23       	and	r24, r24
    2172:	31 f0       	breq	.+12     	; 0x2180 <write_mtch_settings+0x934>
		twinkle(255, 0, 0);
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	8f ef       	ldi	r24, 0xFF	; 255
    217a:	78 d4       	rcall	.+2288   	; 0x2a6c <twinkle>
		return false;
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <write_mtch_settings+0x93c>
	}
	
	else {
		rainbow();
    2180:	8b d4       	rcall	.+2326   	; 0x2a98 <rainbow>
		return true;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <write_mtch_settings+0x93c>
}	

bool write_mtch_settings(void) {
	status_code_t write_status = STATUS_OK;
	if (!EEPROM_MTCH_UPDATE_BOOL) {
		return true;
    2186:	81 e0       	ldi	r24, 0x01	; 1
	
	else {
		rainbow();
		return true;
	}
}
    2188:	df 91       	pop	r29
    218a:	cf 91       	pop	r28
    218c:	08 95       	ret

0000218e <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	2f 93       	push	r18
    219e:	3f 93       	push	r19
    21a0:	4f 93       	push	r20
    21a2:	5f 93       	push	r21
    21a4:	6f 93       	push	r22
    21a6:	7f 93       	push	r23
    21a8:	8f 93       	push	r24
    21aa:	9f 93       	push	r25
    21ac:	af 93       	push	r26
    21ae:	bf 93       	push	r27
    21b0:	ef 93       	push	r30
    21b2:	ff 93       	push	r31
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	61 97       	sbiw	r28, 0x11	; 17
    21be:	cd bf       	out	0x3d, r28	; 61
    21c0:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
    21c2:	80 e2       	ldi	r24, 0x20	; 32
    21c4:	80 93 4c 06 	sts	0x064C, r24
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
    21c8:	80 91 32 21 	lds	r24, 0x2132
    21cc:	88 23       	and	r24, r24
    21ce:	21 f0       	breq	.+8      	; 0x21d8 <__vector_9+0x4a>
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <__vector_9+0x48>
    21d4:	7f c0       	rjmp	.+254    	; 0x22d4 <__vector_9+0x146>
    21d6:	9c c0       	rjmp	.+312    	; 0x2310 <__vector_9+0x182>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
    21d8:	fe 01       	movw	r30, r28
    21da:	3c 96       	adiw	r30, 0x0c	; 12
    21dc:	86 e0       	ldi	r24, 0x06	; 6
    21de:	df 01       	movw	r26, r30
    21e0:	1d 92       	st	X+, r1
    21e2:	8a 95       	dec	r24
    21e4:	e9 f7       	brne	.-6      	; 0x21e0 <__vector_9+0x52>
	
	twi_package_t package = {
    21e6:	be 01       	movw	r22, r28
    21e8:	6f 5f       	subi	r22, 0xFF	; 255
    21ea:	7f 4f       	sbci	r23, 0xFF	; 255
    21ec:	8b e0       	ldi	r24, 0x0B	; 11
    21ee:	db 01       	movw	r26, r22
    21f0:	1d 92       	st	X+, r1
    21f2:	8a 95       	dec	r24
    21f4:	e9 f7       	brne	.-6      	; 0x21f0 <__vector_9+0x62>
    21f6:	85 e2       	ldi	r24, 0x25	; 37
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	ef 83       	std	Y+7, r30	; 0x07
    21fc:	f8 87       	std	Y+8, r31	; 0x08
    21fe:	86 e0       	ldi	r24, 0x06	; 6
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	89 87       	std	Y+9, r24	; 0x09
    2204:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    2206:	41 e0       	ldi	r20, 0x01	; 1
    2208:	80 e8       	ldi	r24, 0x80	; 128
    220a:	94 e0       	ldi	r25, 0x04	; 4
    220c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
    2210:	8d 85       	ldd	r24, Y+13	; 0x0d
    2212:	82 fb       	bst	r24, 2
    2214:	00 27       	eor	r16, r16
    2216:	00 f9       	bld	r16, 0
    2218:	10 e0       	ldi	r17, 0x00	; 0
    221a:	00 93 75 2a 	sts	0x2A75, r16
	
	if (m_touch_pkg->tch == 0)
    221e:	01 2b       	or	r16, r17
    2220:	09 f4       	brne	.+2      	; 0x2224 <__vector_9+0x96>
    2222:	76 c0       	rjmp	.+236    	; 0x2310 <__vector_9+0x182>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    2224:	a4 e7       	ldi	r26, 0x74	; 116
    2226:	ba e2       	ldi	r27, 0x2A	; 42
    2228:	88 77       	andi	r24, 0x78	; 120
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	95 95       	asr	r25
    222e:	87 95       	ror	r24
    2230:	95 95       	asr	r25
    2232:	87 95       	ror	r24
    2234:	95 95       	asr	r25
    2236:	87 95       	ror	r24
    2238:	8c 93       	st	X, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    223a:	8e 85       	ldd	r24, Y+14	; 0x0e
    223c:	e8 2f       	mov	r30, r24
    223e:	ef 77       	andi	r30, 0x7F	; 127
    2240:	17 96       	adiw	r26, 0x07	; 7
    2242:	ec 93       	st	X, r30
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    2244:	8e 2f       	mov	r24, r30
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	70 97       	sbiw	r30, 0x10	; 16
    224c:	e3 35       	cpi	r30, 0x53	; 83
    224e:	f1 05       	cpc	r31, r1
    2250:	d8 f5       	brcc	.+118    	; 0x22c8 <__vector_9+0x13a>
    2252:	ea 5a       	subi	r30, 0xAA	; 170
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    225a:	80 ea       	ldi	r24, 0xA0	; 160
    225c:	80 93 27 21 	sts	0x2127, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	35 c0       	rjmp	.+106    	; 0x22ce <__vector_9+0x140>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    2264:	81 ea       	ldi	r24, 0xA1	; 161
    2266:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	30 c0       	rjmp	.+96     	; 0x22ce <__vector_9+0x140>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    226e:	82 ea       	ldi	r24, 0xA2	; 162
    2270:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    2274:	83 e0       	ldi	r24, 0x03	; 3
    2276:	2b c0       	rjmp	.+86     	; 0x22ce <__vector_9+0x140>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    2278:	83 ea       	ldi	r24, 0xA3	; 163
    227a:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    227e:	84 e0       	ldi	r24, 0x04	; 4
    2280:	26 c0       	rjmp	.+76     	; 0x22ce <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    2282:	83 ea       	ldi	r24, 0xA3	; 163
    2284:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	21 c0       	rjmp	.+66     	; 0x22ce <__vector_9+0x140>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    228c:	84 ea       	ldi	r24, 0xA4	; 164
    228e:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    2292:	85 e0       	ldi	r24, 0x05	; 5
    2294:	1c c0       	rjmp	.+56     	; 0x22ce <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    2296:	84 ea       	ldi	r24, 0xA4	; 164
    2298:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    229c:	85 e0       	ldi	r24, 0x05	; 5
    229e:	17 c0       	rjmp	.+46     	; 0x22ce <__vector_9+0x140>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    22a0:	85 ea       	ldi	r24, 0xA5	; 165
    22a2:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    22a6:	86 e0       	ldi	r24, 0x06	; 6
    22a8:	12 c0       	rjmp	.+36     	; 0x22ce <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    22aa:	85 ea       	ldi	r24, 0xA5	; 165
    22ac:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    22b0:	86 e0       	ldi	r24, 0x06	; 6
    22b2:	0d c0       	rjmp	.+26     	; 0x22ce <__vector_9+0x140>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    22b4:	86 ea       	ldi	r24, 0xA6	; 166
    22b6:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    22ba:	87 e0       	ldi	r24, 0x07	; 7
    22bc:	08 c0       	rjmp	.+16     	; 0x22ce <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    22be:	86 ea       	ldi	r24, 0xA6	; 166
    22c0:	80 93 27 21 	sts	0x2127, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    22c4:	87 e0       	ldi	r24, 0x07	; 7
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <__vector_9+0x140>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    22c8:	10 92 27 21 	sts	0x2127, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    22cc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    22ce:	80 93 31 21 	sts	0x2131, r24
    22d2:	1e c0       	rjmp	.+60     	; 0x2310 <__vector_9+0x182>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    22d4:	be 01       	movw	r22, r28
    22d6:	6f 5f       	subi	r22, 0xFF	; 255
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	8b e0       	ldi	r24, 0x0B	; 11
    22dc:	fb 01       	movw	r30, r22
    22de:	11 92       	st	Z+, r1
    22e0:	8a 95       	dec	r24
    22e2:	e9 f7       	brne	.-6      	; 0x22de <__vector_9+0x150>
    22e4:	85 e2       	ldi	r24, 0x25	; 37
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	08 e2       	ldi	r16, 0x28	; 40
    22ea:	11 e2       	ldi	r17, 0x21	; 33
    22ec:	0f 83       	std	Y+7, r16	; 0x07
    22ee:	18 87       	std	Y+8, r17	; 0x08
    22f0:	89 e0       	ldi	r24, 0x09	; 9
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	89 87       	std	Y+9, r24	; 0x09
    22f6:	9a 87       	std	Y+10, r25	; 0x0a
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	80 e8       	ldi	r24, 0x80	; 128
    22fc:	94 e0       	ldi	r25, 0x04	; 4
    22fe:	0e 94 53 21 	call	0x42a6	; 0x42a6 <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    2302:	10 92 32 21 	sts	0x2132, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    2306:	d8 01       	movw	r26, r16
    2308:	13 96       	adiw	r26, 0x03	; 3
    230a:	8c 91       	ld	r24, X
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    230c:	80 93 d5 20 	sts	0x20D5, r24
			break;
		default:
			return;
	}
    2310:	61 96       	adiw	r28, 0x11	; 17
    2312:	cd bf       	out	0x3d, r28	; 61
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	bf 91       	pop	r27
    2320:	af 91       	pop	r26
    2322:	9f 91       	pop	r25
    2324:	8f 91       	pop	r24
    2326:	7f 91       	pop	r23
    2328:	6f 91       	pop	r22
    232a:	5f 91       	pop	r21
    232c:	4f 91       	pop	r20
    232e:	3f 91       	pop	r19
    2330:	2f 91       	pop	r18
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <timer4_overflow_interrupt_callback>:
 * \note  OVFIF is cleared
 */
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
    2340:	e0 e0       	ldi	r30, 0x00	; 0
    2342:	f8 e0       	ldi	r31, 0x08	; 8
    2344:	84 85       	ldd	r24, Z+12	; 0x0c
    2346:	81 60       	ori	r24, 0x01	; 1
    2348:	84 87       	std	Z+12, r24	; 0x0c

static inline void timer4_overflow_interrupt_callback(void)
{
	tc45_clear_overflow(&TCC4);

	flag_timer4 = true;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	80 93 7d 2a 	sts	0x2A7D, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2350:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2352:	f8 94       	cli
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
#else
	adc->CTRLA |= ch_mask << ADC_START_bp;
    2354:	e0 e0       	ldi	r30, 0x00	; 0
    2356:	f2 e0       	ldi	r31, 0x02	; 2
    2358:	80 81       	ld	r24, Z
    235a:	84 60       	ori	r24, 0x04	; 4
    235c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    235e:	9f bf       	out	0x3f, r25	; 63
    2360:	08 95       	ret

00002362 <timerD5_overflow_interrupt_callback>:
	//usart_putchar(&USARTD0, 0x28);
}

static inline timerD5_overflow_interrupt_callback(void)
{
	flag_timerd5 = true;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 7e 2a 	sts	0x2A7E, r24
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTFLAGS |= TC5_OVFIF_bm;
    2368:	e0 e4       	ldi	r30, 0x40	; 64
    236a:	f9 e0       	ldi	r31, 0x09	; 9
    236c:	84 85       	ldd	r24, Z+12	; 0x0c
    236e:	81 60       	ori	r24, 0x01	; 1
    2370:	84 87       	std	Z+12, r24	; 0x0c
	//wdt_reset(); // kick the watchdog - DEPRECATED
	
	tc45_clear_overflow(&TCD5);
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}
    2372:	08 95       	ret

00002374 <timer5_overflow_interrupt_callback>:
	adc_start_conversion(&ADCA, ADC_CH0);
}

static inline void timer5_overflow_interrupt_callback(void)
{
	flag_timer5 = true;/*
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	80 93 7c 2a 	sts	0x2A7C, r24
    237a:	e0 e4       	ldi	r30, 0x40	; 64
    237c:	f8 e0       	ldi	r31, 0x08	; 8
    237e:	84 85       	ldd	r24, Z+12	; 0x0c
    2380:	81 60       	ori	r24, 0x01	; 1
    2382:	84 87       	std	Z+12, r24	; 0x0c
	if (flag_initcharge) {
		flag_initcharge = false;
		init_charge();
	}*/
	tc45_clear_overflow(&TCC5);
	update_led_charge();
    2384:	02 c4       	rjmp	.+2052   	; 0x2b8a <update_led_charge>
    2386:	08 95       	ret

00002388 <init_timer4>:
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}

void init_timer4(void)
{
    2388:	cf 93       	push	r28
    238a:	df 93       	push	r29
	/*
	 * Configure TCC4 to generate 50ms overflow interrupt
	 * using 4MHz (0.25us) resolution clock (20us = 80 * 0.25us)
	 */
	/* Unmask clock for TCC4 */
	tc45_enable(&TCC4);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	98 e0       	ldi	r25, 0x08	; 8
    2390:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tc45_enable>
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    2394:	c0 e0       	ldi	r28, 0x00	; 0
    2396:	d8 e0       	ldi	r29, 0x08	; 8
    2398:	8e 81       	ldd	r24, Y+6	; 0x06
    239a:	8c 7f       	andi	r24, 0xFC	; 252
    239c:	8e 83       	std	Y+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	81 60       	ori	r24, 0x01	; 1
    23a2:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	88 7f       	andi	r24, 0xF8	; 248
    23a8:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC4,	timer4_overflow_interrupt_callback);
    23aa:	60 ea       	ldi	r22, 0xA0	; 160
    23ac:	71 e1       	ldi	r23, 0x11	; 17
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	98 e0       	ldi	r25, 0x08	; 8
    23b2:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <tc45_set_overflow_interrupt_callback>
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    23b6:	80 e5       	ldi	r24, 0x50	; 80
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	8e a3       	std	Y+38, r24	; 0x26
    23bc:	9f a3       	std	Y+39, r25	; 0x27
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    23be:	88 81       	ld	r24, Y
    23c0:	80 7f       	andi	r24, 0xF0	; 240
    23c2:	84 60       	ori	r24, 0x04	; 4
    23c4:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    23c6:	e0 ea       	ldi	r30, 0xA0	; 160
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCC4, 80);
	tc45_set_resolution(&TCC4, 4000000);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    23d0:	78 94       	sei
}
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	08 95       	ret

000023d8 <init_timer5>:

void init_timer5(void)
{
    23d8:	cf 93       	push	r28
    23da:	df 93       	push	r29
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    23dc:	c0 e4       	ldi	r28, 0x40	; 64
    23de:	d8 e0       	ldi	r29, 0x08	; 8
    23e0:	8e 81       	ldd	r24, Y+6	; 0x06
    23e2:	8c 7f       	andi	r24, 0xFC	; 252
    23e4:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    23e6:	8e 81       	ldd	r24, Y+6	; 0x06
    23e8:	82 60       	ori	r24, 0x02	; 2
    23ea:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	88 7f       	andi	r24, 0xF8	; 248
    23f0:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC5, TC45_INT_LVL_MED);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC5,	timer5_overflow_interrupt_callback);
    23f2:	6a eb       	ldi	r22, 0xBA	; 186
    23f4:	71 e1       	ldi	r23, 0x11	; 17
    23f6:	80 e4       	ldi	r24, 0x40	; 64
    23f8:	98 e0       	ldi	r25, 0x08	; 8
    23fa:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    23fe:	84 e2       	ldi	r24, 0x24	; 36
    2400:	94 ef       	ldi	r25, 0xF4	; 244
    2402:	8e a3       	std	Y+38, r24	; 0x26
    2404:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    2406:	88 81       	ld	r24, Y
    2408:	80 7f       	andi	r24, 0xF0	; 240
    240a:	86 60       	ori	r24, 0x06	; 6
    240c:	88 83       	st	Y, r24
    240e:	e0 ea       	ldi	r30, 0xA0	; 160
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	82 60       	ori	r24, 0x02	; 2
    2416:	82 83       	std	Z+2, r24	; 0x02
//	tc45_set_resolution(&TCC5, 500000);
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
    2418:	78 94       	sei
}
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <init_timerd5>:

void init_timerd5(void)
{
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
	tc45_enable(&TCD5);
    2424:	80 e4       	ldi	r24, 0x40	; 64
    2426:	99 e0       	ldi	r25, 0x09	; 9
    2428:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tc45_enable>
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    242c:	c0 e4       	ldi	r28, 0x40	; 64
    242e:	d9 e0       	ldi	r29, 0x09	; 9
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	8c 7f       	andi	r24, 0xFC	; 252
    2434:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    2436:	8e 81       	ldd	r24, Y+6	; 0x06
    2438:	81 60       	ori	r24, 0x01	; 1
    243a:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	88 7f       	andi	r24, 0xF8	; 248
    2440:	89 83       	std	Y+1, r24	; 0x01
	tc45_set_overflow_interrupt_level(&TCD5, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCD5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCD5,	timerD5_overflow_interrupt_callback);
    2442:	61 eb       	ldi	r22, 0xB1	; 177
    2444:	71 e1       	ldi	r23, 0x11	; 17
    2446:	80 e4       	ldi	r24, 0x40	; 64
    2448:	99 e0       	ldi	r25, 0x09	; 9
    244a:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    244e:	82 ea       	ldi	r24, 0xA2	; 162
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	8e a3       	std	Y+38, r24	; 0x26
    2454:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    2456:	88 81       	ld	r24, Y
    2458:	80 7f       	andi	r24, 0xF0	; 240
    245a:	87 60       	ori	r24, 0x07	; 7
    245c:	88 83       	st	Y, r24
    245e:	e0 ea       	ldi	r30, 0xA0	; 160
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	82 81       	ldd	r24, Z+2	; 0x02
    2464:	81 60       	ori	r24, 0x01	; 1
    2466:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCD5, 162);//EVERY 5ms
	tc45_set_resolution(&TCD5, 31250);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    2468:	78 94       	sei
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <init_uart>:
	}
}

uint8_t* get_current_colors(void) {
	return colors;
}
    2470:	43 e0       	ldi	r20, 0x03	; 3
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	68 e0       	ldi	r22, 0x08	; 8
    2476:	80 e6       	ldi	r24, 0x60	; 96
    2478:	96 e0       	ldi	r25, 0x06	; 6
    247a:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    247e:	40 e0       	ldi	r20, 0x00	; 0
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	64 e0       	ldi	r22, 0x04	; 4
    2484:	80 e6       	ldi	r24, 0x60	; 96
    2486:	96 e0       	ldi	r25, 0x06	; 6
    2488:	0e 94 04 1c 	call	0x3808	; 0x3808 <ioport_configure_port_pin>
    248c:	66 ed       	ldi	r22, 0xD6	; 214
    248e:	70 e2       	ldi	r23, 0x20	; 32
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	99 e0       	ldi	r25, 0x09	; 9
    2494:	0e 94 d5 22 	call	0x45aa	; 0x45aa <usart_init_rs232>
    2498:	e0 ec       	ldi	r30, 0xC0	; 192
    249a:	f9 e0       	ldi	r31, 0x09	; 9
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	80 63       	ori	r24, 0x30	; 48
    24a0:	82 83       	std	Z+2, r24	; 0x02
    24a2:	e0 ea       	ldi	r30, 0xA0	; 160
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	84 60       	ori	r24, 0x04	; 4
    24aa:	82 83       	std	Z+2, r24	; 0x02
    24ac:	78 94       	sei
    24ae:	08 95       	ret

000024b0 <uart_send_status>:
    24b0:	68 2f       	mov	r22, r24
    24b2:	80 ec       	ldi	r24, 0xC0	; 192
    24b4:	98 e0       	ldi	r25, 0x08	; 8
    24b6:	0c 94 a6 21 	jmp	0x434c	; 0x434c <usart_putchar>
    24ba:	08 95       	ret

000024bc <led_set_from_colors>:
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	ad ed       	ldi	r26, 0xDD	; 221
    24c2:	b0 e2       	ldi	r27, 0x20	; 32
    24c4:	8c 91       	ld	r24, X
    24c6:	e7 e9       	ldi	r30, 0x97	; 151
    24c8:	fa e2       	ldi	r31, 0x2A	; 42
    24ca:	80 83       	st	Z, r24
    24cc:	11 96       	adiw	r26, 0x01	; 1
    24ce:	8c 91       	ld	r24, X
    24d0:	11 97       	sbiw	r26, 0x01	; 1
    24d2:	81 83       	std	Z+1, r24	; 0x01
    24d4:	12 96       	adiw	r26, 0x02	; 2
    24d6:	8c 91       	ld	r24, X
    24d8:	12 97       	sbiw	r26, 0x02	; 2
    24da:	82 83       	std	Z+2, r24	; 0x02
    24dc:	8c 91       	ld	r24, X
    24de:	81 87       	std	Z+9, r24	; 0x09
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	8c 91       	ld	r24, X
    24e4:	11 97       	sbiw	r26, 0x01	; 1
    24e6:	82 87       	std	Z+10, r24	; 0x0a
    24e8:	12 96       	adiw	r26, 0x02	; 2
    24ea:	8c 91       	ld	r24, X
    24ec:	12 97       	sbiw	r26, 0x02	; 2
    24ee:	83 87       	std	Z+11, r24	; 0x0b
    24f0:	13 96       	adiw	r26, 0x03	; 3
    24f2:	8c 91       	ld	r24, X
    24f4:	13 97       	sbiw	r26, 0x03	; 3
    24f6:	83 83       	std	Z+3, r24	; 0x03
    24f8:	14 96       	adiw	r26, 0x04	; 4
    24fa:	8c 91       	ld	r24, X
    24fc:	14 97       	sbiw	r26, 0x04	; 4
    24fe:	84 83       	std	Z+4, r24	; 0x04
    2500:	15 96       	adiw	r26, 0x05	; 5
    2502:	8c 91       	ld	r24, X
    2504:	15 97       	sbiw	r26, 0x05	; 5
    2506:	85 83       	std	Z+5, r24	; 0x05
    2508:	13 96       	adiw	r26, 0x03	; 3
    250a:	8c 91       	ld	r24, X
    250c:	13 97       	sbiw	r26, 0x03	; 3
    250e:	84 87       	std	Z+12, r24	; 0x0c
    2510:	14 96       	adiw	r26, 0x04	; 4
    2512:	8c 91       	ld	r24, X
    2514:	14 97       	sbiw	r26, 0x04	; 4
    2516:	85 87       	std	Z+13, r24	; 0x0d
    2518:	15 96       	adiw	r26, 0x05	; 5
    251a:	8c 91       	ld	r24, X
    251c:	15 97       	sbiw	r26, 0x05	; 5
    251e:	86 87       	std	Z+14, r24	; 0x0e
    2520:	16 96       	adiw	r26, 0x06	; 6
    2522:	8c 91       	ld	r24, X
    2524:	16 97       	sbiw	r26, 0x06	; 6
    2526:	86 83       	std	Z+6, r24	; 0x06
    2528:	17 96       	adiw	r26, 0x07	; 7
    252a:	8c 91       	ld	r24, X
    252c:	17 97       	sbiw	r26, 0x07	; 7
    252e:	87 83       	std	Z+7, r24	; 0x07
    2530:	18 96       	adiw	r26, 0x08	; 8
    2532:	8c 91       	ld	r24, X
    2534:	18 97       	sbiw	r26, 0x08	; 8
    2536:	80 87       	std	Z+8, r24	; 0x08
    2538:	16 96       	adiw	r26, 0x06	; 6
    253a:	8c 91       	ld	r24, X
    253c:	16 97       	sbiw	r26, 0x06	; 6
    253e:	87 87       	std	Z+15, r24	; 0x0f
    2540:	17 96       	adiw	r26, 0x07	; 7
    2542:	8c 91       	ld	r24, X
    2544:	17 97       	sbiw	r26, 0x07	; 7
    2546:	80 8b       	std	Z+16, r24	; 0x10
    2548:	18 96       	adiw	r26, 0x08	; 8
    254a:	8c 91       	ld	r24, X
    254c:	81 8b       	std	Z+17, r24	; 0x11
    254e:	c0 e0       	ldi	r28, 0x00	; 0
    2550:	d0 e0       	ldi	r29, 0x00	; 0
    2552:	fe 01       	movw	r30, r28
    2554:	e3 52       	subi	r30, 0x23	; 35
    2556:	ff 4d       	sbci	r31, 0xDF	; 223
    2558:	60 81       	ld	r22, Z
    255a:	21 96       	adiw	r28, 0x01	; 1
    255c:	ce 01       	movw	r24, r28
    255e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    2562:	c9 30       	cpi	r28, 0x09	; 9
    2564:	d1 05       	cpc	r29, r1
    2566:	a9 f7       	brne	.-22     	; 0x2552 <led_set_from_colors+0x96>
    2568:	7c d2       	rcall	.+1272   	; 0x2a62 <ischarging>
    256a:	81 11       	cpse	r24, r1
    256c:	04 c0       	rjmp	.+8      	; 0x2576 <led_set_from_colors+0xba>
    256e:	66 e0       	ldi	r22, 0x06	; 6
    2570:	87 e9       	ldi	r24, 0x97	; 151
    2572:	9a e2       	ldi	r25, 0x2A	; 42
    2574:	35 d7       	rcall	.+3690   	; 0x33e0 <set_flash_ws2812>
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

0000257c <get_pulse_state>:

bool get_pulse_state(void) {
	return pulse_state;
}
    257c:	80 91 35 21 	lds	r24, 0x2135
    2580:	08 95       	ret

00002582 <get_and_clear_pulse_state_changed>:

bool get_and_clear_pulse_state_changed(void) {
	bool changed = pulse_state_changed;
    2582:	80 91 34 21 	lds	r24, 0x2134
	pulse_state_changed = false;
    2586:	10 92 34 21 	sts	0x2134, r1
	return changed;
}
    258a:	08 95       	ret

0000258c <trigger_pulse_state_changed>:

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	80 93 34 21 	sts	0x2134, r24
    2592:	08 95       	ret

00002594 <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    2594:	1f 92       	push	r1
    2596:	0f 92       	push	r0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	0f 92       	push	r0
    259c:	11 24       	eor	r1, r1
    259e:	2f 93       	push	r18
    25a0:	3f 93       	push	r19
    25a2:	4f 93       	push	r20
    25a4:	5f 93       	push	r21
    25a6:	6f 93       	push	r22
    25a8:	7f 93       	push	r23
    25aa:	8f 93       	push	r24
    25ac:	9f 93       	push	r25
    25ae:	af 93       	push	r26
    25b0:	bf 93       	push	r27
    25b2:	ef 93       	push	r30
    25b4:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    25b6:	80 ec       	ldi	r24, 0xC0	; 192
    25b8:	98 e0       	ldi	r25, 0x08	; 8
    25ba:	0e 94 b4 21 	call	0x4368	; 0x4368 <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    25be:	90 91 38 21 	lds	r25, 0x2138
    25c2:	91 11       	cpse	r25, r1
    25c4:	0e c0       	rjmp	.+28     	; 0x25e2 <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    25c6:	8f 30       	cpi	r24, 0x0F	; 15
    25c8:	49 f4       	brne	.+18     	; 0x25dc <__vector_23+0x48>
		{
			num_rx ++;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	80 93 38 21 	sts	0x2138, r24
			uart_length = 6;
    25d0:	96 e0       	ldi	r25, 0x06	; 6
    25d2:	90 93 f3 20 	sts	0x20F3, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    25d6:	80 93 37 21 	sts	0x2137, r24
    25da:	38 c0       	rjmp	.+112    	; 0x264c <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    25dc:	10 92 38 21 	sts	0x2138, r1
    25e0:	35 c0       	rjmp	.+106    	; 0x264c <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    25e2:	29 2f       	mov	r18, r25
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	60 91 f3 20 	lds	r22, 0x20F3
    25ea:	46 2f       	mov	r20, r22
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	4f 5f       	subi	r20, 0xFF	; 255
    25f0:	5f 4f       	sbci	r21, 0xFF	; 255
    25f2:	24 17       	cp	r18, r20
    25f4:	35 07       	cpc	r19, r21
    25f6:	f1 f4       	brne	.+60     	; 0x2634 <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    25f8:	10 92 38 21 	sts	0x2138, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    25fc:	80 3f       	cpi	r24, 0xF0	; 240
    25fe:	a9 f4       	brne	.+42     	; 0x262a <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    2600:	20 91 7f 2a 	lds	r18, 0x2A7F
    2604:	22 23       	and	r18, r18
    2606:	61 f0       	breq	.+24     	; 0x2620 <__vector_23+0x8c>
    2608:	4f e7       	ldi	r20, 0x7F	; 127
    260a:	5a e2       	ldi	r21, 0x2A	; 42
    260c:	fa 01       	movw	r30, r20
    260e:	80 e0       	ldi	r24, 0x00	; 0
	{
		sum += rxvalue[i];
    2610:	91 91       	ld	r25, Z+
    2612:	89 0f       	add	r24, r25
    2614:	9e 2f       	mov	r25, r30
    2616:	94 1b       	sub	r25, r20

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    2618:	92 17       	cp	r25, r18
    261a:	d0 f3       	brcs	.-12     	; 0x2610 <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    261c:	81 11       	cpse	r24, r1
    261e:	05 c0       	rjmp	.+10     	; 0x262a <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    2620:	10 92 37 21 	sts	0x2137, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	44 df       	rcall	.-376    	; 0x24b0 <uart_send_status>
    2628:	11 c0       	rjmp	.+34     	; 0x264c <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    262a:	10 92 37 21 	sts	0x2137, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    262e:	8c e0       	ldi	r24, 0x0C	; 12
    2630:	3f df       	rcall	.-386    	; 0x24b0 <uart_send_status>
    2632:	0c c0       	rjmp	.+24     	; 0x264c <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    2634:	f9 01       	movw	r30, r18
    2636:	e2 58       	subi	r30, 0x82	; 130
    2638:	f5 4d       	sbci	r31, 0xD5	; 213
    263a:	80 83       	st	Z, r24
		num_rx ++;
    263c:	9f 5f       	subi	r25, 0xFF	; 255
    263e:	90 93 38 21 	sts	0x2138, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    2642:	80 91 7f 2a 	lds	r24, 0x2A7F
    2646:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    2648:	80 93 f3 20 	sts	0x20F3, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    264c:	ff 91       	pop	r31
    264e:	ef 91       	pop	r30
    2650:	bf 91       	pop	r27
    2652:	af 91       	pop	r26
    2654:	9f 91       	pop	r25
    2656:	8f 91       	pop	r24
    2658:	7f 91       	pop	r23
    265a:	6f 91       	pop	r22
    265c:	5f 91       	pop	r21
    265e:	4f 91       	pop	r20
    2660:	3f 91       	pop	r19
    2662:	2f 91       	pop	r18
    2664:	0f 90       	pop	r0
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	0f 90       	pop	r0
    266a:	1f 90       	pop	r1
    266c:	18 95       	reti

0000266e <uartCmdValid>:


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    switch(cmd){
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	fc 01       	movw	r30, r24
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	e0 37       	cpi	r30, 0x70	; 112
    2676:	f1 05       	cpc	r31, r1
    2678:	30 f4       	brcc	.+12     	; 0x2686 <uartCmdValid+0x18>
    267a:	e7 55       	subi	r30, 0x57	; 87
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__tablejump2__>
		case UART_GET_CHARGING:
		case UART_SET_MTCH:
		case UART_GET_MTCH:
		case UART_SET_RESTART:
		case UART_WRITE_MTCH:
			retval=true;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	08 95       	ret
}


unsigned char uartCmdValid(unsigned char cmd)
{
    unsigned char retval=false;
    2686:	80 e0       	ldi	r24, 0x00	; 0
		default:
			break;
	}
	return retval;

}
    2688:	08 95       	ret

0000268a <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    268a:	1f 92       	push	r1
    268c:	0f 92       	push	r0
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	0f 92       	push	r0
    2692:	11 24       	eor	r1, r1
    2694:	2f 93       	push	r18
    2696:	3f 93       	push	r19
    2698:	4f 93       	push	r20
    269a:	5f 93       	push	r21
    269c:	6f 93       	push	r22
    269e:	7f 93       	push	r23
    26a0:	8f 93       	push	r24
    26a2:	9f 93       	push	r25
    26a4:	af 93       	push	r26
    26a6:	bf 93       	push	r27
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	ef 93       	push	r30
    26ae:	ff 93       	push	r31
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	 unsigned int count=0;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
 *
 * \param usart The USART module.
 */
static inline bool usart_rx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_RXCIF_bm;
    26b8:	e0 ec       	ldi	r30, 0xC0	; 192
    26ba:	f9 e0       	ldi	r31, 0x09	; 9
    26bc:	07 c0       	rjmp	.+14     	; 0x26cc <__vector_40+0x42>

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
#ifdef LIMIT_LOOP //do not wait for ever.
               if(count++>10000)
    26be:	9c 01       	movw	r18, r24
    26c0:	2f 5f       	subi	r18, 0xFF	; 255
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	81 31       	cpi	r24, 0x11	; 17
    26c6:	97 42       	sbci	r25, 0x27	; 39
    26c8:	78 f4       	brcc	.+30     	; 0x26e8 <__vector_40+0x5e>
    26ca:	c9 01       	movw	r24, r18
    26cc:	21 81       	ldd	r18, Z+1	; 0x01
	}*/
	

     
	for (int i=0; i<11; i++) {
		while (usart_rx_is_complete(&USARTD0) == false) {
    26ce:	22 23       	and	r18, r18
    26d0:	b4 f7       	brge	.-20     	; 0x26be <__vector_40+0x34>
#endif		
	      }
		//do not read when error
		if(errflag)
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
    26d2:	20 81       	ld	r18, Z
    26d4:	da 01       	movw	r26, r20
    26d6:	aa 51       	subi	r26, 0x1A	; 26
    26d8:	bf 4d       	sbci	r27, 0xDF	; 223
    26da:	2c 93       	st	X, r18
		buffer_data[i] = usart_getchar(&USARTD0);
	}*/
	

     
	for (int i=0; i<11; i++) {
    26dc:	4f 5f       	subi	r20, 0xFF	; 255
    26de:	5f 4f       	sbci	r21, 0xFF	; 255
    26e0:	4b 30       	cpi	r20, 0x0B	; 11
    26e2:	51 05       	cpc	r21, r1
    26e4:	99 f7       	brne	.-26     	; 0x26cc <__vector_40+0x42>
    26e6:	77 c1       	rjmp	.+750    	; 0x29d6 <__vector_40+0x34c>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    26e8:	80 91 e6 20 	lds	r24, 0x20E6
    26ec:	c0 df       	rcall	.-128    	; 0x266e <uartCmdValid>
    26ee:	88 23       	and	r24, r24
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <__vector_40+0x6a>
    26f2:	6d c1       	rjmp	.+730    	; 0x29ce <__vector_40+0x344>
    26f4:	80 91 e7 20 	lds	r24, 0x20E7
    26f8:	89 30       	cpi	r24, 0x09	; 9
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <__vector_40+0x74>
    26fc:	68 c1       	rjmp	.+720    	; 0x29ce <__vector_40+0x344>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    26fe:	80 91 e6 20 	lds	r24, 0x20E6
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	fc 01       	movw	r30, r24
    2706:	31 97       	sbiw	r30, 0x01	; 1
    2708:	e0 37       	cpi	r30, 0x70	; 112
    270a:	f1 05       	cpc	r31, r1
    270c:	08 f0       	brcs	.+2      	; 0x2710 <__vector_40+0x86>
    270e:	5f c1       	rjmp	.+702    	; 0x29ce <__vector_40+0x344>
    2710:	e7 5e       	subi	r30, 0xE7	; 231
    2712:	fe 4f       	sbci	r31, 0xFE	; 254
    2714:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__tablejump2__>
		case UART_SET_COLOR:
	#ifdef LIMIT_LOOP //only handle correct format	
			if(buffer_data[1]!=UART_COLOR_LEN)
    2718:	80 91 e7 20 	lds	r24, 0x20E7
    271c:	89 30       	cpi	r24, 0x09	; 9
    271e:	09 f0       	breq	.+2      	; 0x2722 <__vector_40+0x98>
    2720:	56 c1       	rjmp	.+684    	; 0x29ce <__vector_40+0x344>
				break;
	#endif	
			send_response(UART_SET_COLOR, 0xff);
    2722:	6f ef       	ldi	r22, 0xFF	; 255
    2724:	83 e4       	ldi	r24, 0x43	; 67
    2726:	53 d4       	rcall	.+2214   	; 0x2fce <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    2728:	a6 ee       	ldi	r26, 0xE6	; 230
    272a:	b0 e2       	ldi	r27, 0x20	; 32
    272c:	12 96       	adiw	r26, 0x02	; 2
    272e:	8c 91       	ld	r24, X
    2730:	12 97       	sbiw	r26, 0x02	; 2
    2732:	e7 e9       	ldi	r30, 0x97	; 151
    2734:	fa e2       	ldi	r31, 0x2A	; 42
    2736:	80 83       	st	Z, r24
	m_led_struct[0].g = buffer_data[3];
    2738:	13 96       	adiw	r26, 0x03	; 3
    273a:	8c 91       	ld	r24, X
    273c:	13 97       	sbiw	r26, 0x03	; 3
    273e:	81 83       	std	Z+1, r24	; 0x01
	m_led_struct[0].b = buffer_data[4];
    2740:	14 96       	adiw	r26, 0x04	; 4
    2742:	8c 91       	ld	r24, X
    2744:	14 97       	sbiw	r26, 0x04	; 4
    2746:	82 83       	std	Z+2, r24	; 0x02
	m_led_struct[3].r = buffer_data[2];
    2748:	12 96       	adiw	r26, 0x02	; 2
    274a:	8c 91       	ld	r24, X
    274c:	12 97       	sbiw	r26, 0x02	; 2
    274e:	81 87       	std	Z+9, r24	; 0x09
	m_led_struct[3].g = buffer_data[3];
    2750:	13 96       	adiw	r26, 0x03	; 3
    2752:	8c 91       	ld	r24, X
    2754:	13 97       	sbiw	r26, 0x03	; 3
    2756:	82 87       	std	Z+10, r24	; 0x0a
	m_led_struct[3].b = buffer_data[4];
    2758:	14 96       	adiw	r26, 0x04	; 4
    275a:	8c 91       	ld	r24, X
    275c:	14 97       	sbiw	r26, 0x04	; 4
    275e:	83 87       	std	Z+11, r24	; 0x0b
	
	m_led_struct[1].r = buffer_data[5];
    2760:	15 96       	adiw	r26, 0x05	; 5
    2762:	8c 91       	ld	r24, X
    2764:	15 97       	sbiw	r26, 0x05	; 5
    2766:	83 83       	std	Z+3, r24	; 0x03
	m_led_struct[1].g = buffer_data[6];
    2768:	16 96       	adiw	r26, 0x06	; 6
    276a:	8c 91       	ld	r24, X
    276c:	16 97       	sbiw	r26, 0x06	; 6
    276e:	84 83       	std	Z+4, r24	; 0x04
	m_led_struct[1].b = buffer_data[7];
    2770:	17 96       	adiw	r26, 0x07	; 7
    2772:	8c 91       	ld	r24, X
    2774:	17 97       	sbiw	r26, 0x07	; 7
    2776:	85 83       	std	Z+5, r24	; 0x05
	m_led_struct[4].r = buffer_data[5];
    2778:	15 96       	adiw	r26, 0x05	; 5
    277a:	8c 91       	ld	r24, X
    277c:	15 97       	sbiw	r26, 0x05	; 5
    277e:	84 87       	std	Z+12, r24	; 0x0c
	m_led_struct[4].g = buffer_data[6];
    2780:	16 96       	adiw	r26, 0x06	; 6
    2782:	8c 91       	ld	r24, X
    2784:	16 97       	sbiw	r26, 0x06	; 6
    2786:	85 87       	std	Z+13, r24	; 0x0d
	m_led_struct[4].b = buffer_data[7];
    2788:	17 96       	adiw	r26, 0x07	; 7
    278a:	8c 91       	ld	r24, X
    278c:	17 97       	sbiw	r26, 0x07	; 7
    278e:	86 87       	std	Z+14, r24	; 0x0e
	
	m_led_struct[2].r = buffer_data[8];
    2790:	18 96       	adiw	r26, 0x08	; 8
    2792:	8c 91       	ld	r24, X
    2794:	18 97       	sbiw	r26, 0x08	; 8
    2796:	86 83       	std	Z+6, r24	; 0x06
	m_led_struct[2].g = buffer_data[9];
    2798:	19 96       	adiw	r26, 0x09	; 9
    279a:	8c 91       	ld	r24, X
    279c:	19 97       	sbiw	r26, 0x09	; 9
    279e:	87 83       	std	Z+7, r24	; 0x07
	m_led_struct[2].b = buffer_data[10];
    27a0:	1a 96       	adiw	r26, 0x0a	; 10
    27a2:	8c 91       	ld	r24, X
    27a4:	1a 97       	sbiw	r26, 0x0a	; 10
    27a6:	80 87       	std	Z+8, r24	; 0x08
	m_led_struct[5].r = buffer_data[8];
    27a8:	18 96       	adiw	r26, 0x08	; 8
    27aa:	8c 91       	ld	r24, X
    27ac:	18 97       	sbiw	r26, 0x08	; 8
    27ae:	87 87       	std	Z+15, r24	; 0x0f
	m_led_struct[5].g = buffer_data[9];
    27b0:	19 96       	adiw	r26, 0x09	; 9
    27b2:	8c 91       	ld	r24, X
    27b4:	19 97       	sbiw	r26, 0x09	; 9
    27b6:	80 8b       	std	Z+16, r24	; 0x10
	m_led_struct[5].b = buffer_data[10];
    27b8:	1a 96       	adiw	r26, 0x0a	; 10
    27ba:	8c 91       	ld	r24, X
    27bc:	81 8b       	std	Z+17, r24	; 0x11
	
	for (int i=0; i<9; i++) {
    27be:	c0 e0       	ldi	r28, 0x00	; 0
    27c0:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    27c2:	fe 01       	movw	r30, r28
    27c4:	e8 51       	subi	r30, 0x18	; 24
    27c6:	ff 4d       	sbci	r31, 0xDF	; 223
    27c8:	80 81       	ld	r24, Z
    27ca:	fe 01       	movw	r30, r28
    27cc:	e3 52       	subi	r30, 0x23	; 35
    27ce:	ff 4d       	sbci	r31, 0xDF	; 223
    27d0:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    27d2:	60 81       	ld	r22, Z
    27d4:	21 96       	adiw	r28, 0x01	; 1
    27d6:	ce 01       	movw	r24, r28
    27d8:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    27dc:	c9 30       	cpi	r28, 0x09	; 9
    27de:	d1 05       	cpc	r29, r1
    27e0:	81 f7       	brne	.-32     	; 0x27c2 <__vector_40+0x138>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    27e2:	3f d1       	rcall	.+638    	; 0x2a62 <ischarging>
    27e4:	81 11       	cpse	r24, r1
    27e6:	f3 c0       	rjmp	.+486    	; 0x29ce <__vector_40+0x344>
		set_flash_ws2812(m_led_struct, 6);
    27e8:	66 e0       	ldi	r22, 0x06	; 6
    27ea:	87 e9       	ldi	r24, 0x97	; 151
    27ec:	9a e2       	ldi	r25, 0x2A	; 42
    27ee:	f8 d5       	rcall	.+3056   	; 0x33e0 <set_flash_ws2812>
    27f0:	ee c0       	rjmp	.+476    	; 0x29ce <__vector_40+0x344>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    27f2:	6f ef       	ldi	r22, 0xFF	; 255
    27f4:	80 e5       	ldi	r24, 0x50	; 80
    27f6:	eb d3       	rcall	.+2006   	; 0x2fce <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    27f8:	80 91 e8 20 	lds	r24, 0x20E8
    27fc:	88 23       	and	r24, r24
    27fe:	19 f0       	breq	.+6      	; 0x2806 <__vector_40+0x17c>
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	39 f0       	breq	.+14     	; 0x2812 <__vector_40+0x188>
    2804:	0c c0       	rjmp	.+24     	; 0x281e <__vector_40+0x194>
		case 0x00:
			pulse_state = false;
    2806:	10 92 35 21 	sts	0x2135, r1
			pulse_state_changed = true;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	80 93 34 21 	sts	0x2134, r24
    2810:	de c0       	rjmp	.+444    	; 0x29ce <__vector_40+0x344>
			break;
		case 0x01:
			pulse_state = true;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	80 93 35 21 	sts	0x2135, r24
			pulse_state_changed = true;
    2818:	80 93 34 21 	sts	0x2134, r24
    281c:	d8 c0       	rjmp	.+432    	; 0x29ce <__vector_40+0x344>
			break;
		default:
			pulse_state = true;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	80 93 35 21 	sts	0x2135, r24
			pulse_state_changed = true;
    2824:	80 93 34 21 	sts	0x2134, r24
    2828:	d2 c0       	rjmp	.+420    	; 0x29ce <__vector_40+0x344>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    282a:	80 91 35 21 	lds	r24, 0x2135
    282e:	88 23       	and	r24, r24
    2830:	29 f0       	breq	.+10     	; 0x283c <__vector_40+0x1b2>
				pulse_state = false;
    2832:	10 92 35 21 	sts	0x2135, r1
				pulse_state_changed = true;	
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	80 93 34 21 	sts	0x2134, r24
			}
			shutdown_received = true;
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	80 93 33 21 	sts	0x2133, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    2842:	6f ef       	ldi	r22, 0xFF	; 255
    2844:	c4 d3       	rcall	.+1928   	; 0x2fce <send_response>
    2846:	c3 c0       	rjmp	.+390    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    2848:	80 91 e8 20 	lds	r24, 0x20E8
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	87 30       	cpi	r24, 0x07	; 7
    2850:	91 05       	cpc	r25, r1
    2852:	08 f0       	brcs	.+2      	; 0x2856 <__vector_40+0x1cc>
    2854:	bc c0       	rjmp	.+376    	; 0x29ce <__vector_40+0x344>
    2856:	fc 01       	movw	r30, r24
    2858:	e7 57       	subi	r30, 0x77	; 119
    285a:	fe 4f       	sbci	r31, 0xFE	; 254
    285c:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    2860:	80 91 e9 20 	lds	r24, 0x20E9
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	80 93 44 21 	sts	0x2144, r24
    286a:	90 93 45 21 	sts	0x2145, r25
    286e:	af c0       	rjmp	.+350    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    2870:	80 91 e9 20 	lds	r24, 0x20E9
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	80 93 ff 20 	sts	0x20FF, r24
    287a:	90 93 00 21 	sts	0x2100, r25
    287e:	a7 c0       	rjmp	.+334    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    2880:	80 91 e9 20 	lds	r24, 0x20E9
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	80 93 fd 20 	sts	0x20FD, r24
    288a:	90 93 fe 20 	sts	0x20FE, r25
    288e:	9f c0       	rjmp	.+318    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    2890:	80 91 e9 20 	lds	r24, 0x20E9
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	80 93 fb 20 	sts	0x20FB, r24
    289a:	90 93 fc 20 	sts	0x20FC, r25
    289e:	97 c0       	rjmp	.+302    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    28a0:	80 91 e9 20 	lds	r24, 0x20E9
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	80 93 f9 20 	sts	0x20F9, r24
    28aa:	90 93 fa 20 	sts	0x20FA, r25
    28ae:	8f c0       	rjmp	.+286    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    28b0:	80 91 e9 20 	lds	r24, 0x20E9
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	80 93 f7 20 	sts	0x20F7, r24
    28ba:	90 93 f8 20 	sts	0x20F8, r25
    28be:	87 c0       	rjmp	.+270    	; 0x29ce <__vector_40+0x344>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    28c0:	80 91 e9 20 	lds	r24, 0x20E9
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	80 93 f5 20 	sts	0x20F5, r24
    28ca:	90 93 f6 20 	sts	0x20F6, r25
    28ce:	7f c0       	rjmp	.+254    	; 0x29ce <__vector_40+0x344>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    28d0:	80 91 e8 20 	lds	r24, 0x20E8
    28d4:	80 93 f4 20 	sts	0x20F4, r24
    28d8:	7a c0       	rjmp	.+244    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    28da:	80 91 e8 20 	lds	r24, 0x20E8
    28de:	80 93 02 20 	sts	0x2002, r24
    28e2:	75 c0       	rjmp	.+234    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    28e4:	80 91 e8 20 	lds	r24, 0x20E8
    28e8:	80 93 01 20 	sts	0x2001, r24
    28ec:	70 c0       	rjmp	.+224    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    28ee:	80 91 e8 20 	lds	r24, 0x20E8
    28f2:	80 93 00 20 	sts	0x2000, r24
    28f6:	6b c0       	rjmp	.+214    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    28f8:	7b d3       	rcall	.+1782   	; 0x2ff0 <send_light_data>
    28fa:	69 c0       	rjmp	.+210    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    28fc:	92 d3       	rcall	.+1828   	; 0x3022 <send_battery_data>
    28fe:	67 c0       	rjmp	.+206    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    2900:	fd d3       	rcall	.+2042   	; 0x30fc <send_pulse_data>
    2902:	65 c0       	rjmp	.+202    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    2904:	d4 d3       	rcall	.+1960   	; 0x30ae <send_color_data>
    2906:	63 c0       	rjmp	.+198    	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    2908:	a6 d3       	rcall	.+1868   	; 0x3056 <send_charging_data>
    290a:	61 c0       	rjmp	.+194    	; 0x29ce <__vector_40+0x344>
			break;		
			
		case UART_SET_MTCH:
			nvm_eeprom_write_byte(buffer_data[2], buffer_data[3]);
    290c:	c6 ee       	ldi	r28, 0xE6	; 230
    290e:	d0 e2       	ldi	r29, 0x20	; 32
    2910:	6b 81       	ldd	r22, Y+3	; 0x03
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
			
			if (buffer_data[2] <= 15) {
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	80 31       	cpi	r24, 0x10	; 16
    291e:	30 f4       	brcc	.+12     	; 0x292c <__vector_40+0x2a2>
				nvm_eeprom_write_byte(EEPROM_INDEX_GENERAL, 1);
    2920:	61 e0       	ldi	r22, 0x01	; 1
    2922:	8d e4       	ldi	r24, 0x4D	; 77
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    292a:	45 c0       	rjmp	.+138    	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 28) {
    292c:	80 91 e8 20 	lds	r24, 0x20E8
    2930:	8d 31       	cpi	r24, 0x1D	; 29
    2932:	30 f4       	brcc	.+12     	; 0x2940 <__vector_40+0x2b6>
				nvm_eeprom_write_byte(EEPROM_INDEX_RXMAP, 1);
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	8e e4       	ldi	r24, 0x4E	; 78
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    293e:	3b c0       	rjmp	.+118    	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 46) {
    2940:	80 91 e8 20 	lds	r24, 0x20E8
    2944:	8f 32       	cpi	r24, 0x2F	; 47
    2946:	30 f4       	brcc	.+12     	; 0x2954 <__vector_40+0x2ca>
				nvm_eeprom_write_byte(EEPROM_INDEX_TXMAP, 1);
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	8f e4       	ldi	r24, 0x4F	; 79
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    2952:	31 c0       	rjmp	.+98     	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 48) {
    2954:	80 91 e8 20 	lds	r24, 0x20E8
    2958:	81 33       	cpi	r24, 0x31	; 49
    295a:	30 f4       	brcc	.+12     	; 0x2968 <__vector_40+0x2de>
				nvm_eeprom_write_byte(EEPROM_INDEX_SELF, 1);
    295c:	61 e0       	ldi	r22, 0x01	; 1
    295e:	80 e5       	ldi	r24, 0x50	; 80
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    2966:	27 c0       	rjmp	.+78     	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 50) {
    2968:	80 91 e8 20 	lds	r24, 0x20E8
    296c:	83 33       	cpi	r24, 0x33	; 51
    296e:	30 f4       	brcc	.+12     	; 0x297c <__vector_40+0x2f2>
				nvm_eeprom_write_byte(EEPROM_INDEX_MUTUAL, 1);
    2970:	61 e0       	ldi	r22, 0x01	; 1
    2972:	81 e5       	ldi	r24, 0x51	; 81
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    297a:	1d c0       	rjmp	.+58     	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 56) {
    297c:	80 91 e8 20 	lds	r24, 0x20E8
    2980:	89 33       	cpi	r24, 0x39	; 57
    2982:	30 f4       	brcc	.+12     	; 0x2990 <__vector_40+0x306>
				nvm_eeprom_write_byte(EEPROM_INDEX_DECODING, 1);
    2984:	61 e0       	ldi	r22, 0x01	; 1
    2986:	82 e5       	ldi	r24, 0x52	; 82
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    298e:	13 c0       	rjmp	.+38     	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 69) {
    2990:	80 91 e8 20 	lds	r24, 0x20E8
    2994:	86 34       	cpi	r24, 0x46	; 70
    2996:	30 f4       	brcc	.+12     	; 0x29a4 <__vector_40+0x31a>
				nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
    2998:	61 e0       	ldi	r22, 0x01	; 1
    299a:	83 e5       	ldi	r24, 0x53	; 83
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    29a2:	09 c0       	rjmp	.+18     	; 0x29b6 <__vector_40+0x32c>
			}
			else if (buffer_data[2] <= 76) {
    29a4:	80 91 e8 20 	lds	r24, 0x20E8
    29a8:	8d 34       	cpi	r24, 0x4D	; 77
    29aa:	28 f4       	brcc	.+10     	; 0x29b6 <__vector_40+0x32c>
				nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
    29ac:	61 e0       	ldi	r22, 0x01	; 1
    29ae:	84 e5       	ldi	r24, 0x54	; 84
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
			}
			nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
    29b6:	61 e0       	ldi	r22, 0x01	; 1
    29b8:	85 e5       	ldi	r24, 0x55	; 85
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <nvm_eeprom_write_byte>
    29c0:	06 c0       	rjmp	.+12     	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_GET_MTCH:
			send_mtch_update_status();
    29c2:	5e d3       	rcall	.+1724   	; 0x3080 <send_mtch_update_status>
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <__vector_40+0x344>
			break;
			
		case UART_SET_RESTART:
			while(1) {barrier();}
    29c6:	ff cf       	rjmp	.-2      	; 0x29c6 <__vector_40+0x33c>
			break;
			
		case UART_WRITE_MTCH:
			write_mtch_settings();
    29c8:	0e 94 26 0c 	call	0x184c	; 0x184c <write_mtch_settings>
			send_mtch_update_status();
    29cc:	59 d3       	rcall	.+1714   	; 0x3080 <send_mtch_update_status>
	{
	interpret_message();
          errflag=0;
	}
	
	uart_done_flag = true;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	80 93 36 21 	sts	0x2136, r24
    29d4:	06 c0       	rjmp	.+12     	; 0x29e2 <__vector_40+0x358>
			break;
	      buffer_data[i] =((uint8_t)(&USARTD0)->DATA);
	}
	
	// check data format. 
	if(uartCmdValid(buffer_data[0])&&(errflag==0||(errflag&&buffer_data[1]<9)))
    29d6:	80 91 e6 20 	lds	r24, 0x20E6
    29da:	49 de       	rcall	.-878    	; 0x266e <uartCmdValid>
    29dc:	81 11       	cpse	r24, r1
    29de:	8f ce       	rjmp	.-738    	; 0x26fe <__vector_40+0x74>
    29e0:	f6 cf       	rjmp	.-20     	; 0x29ce <__vector_40+0x344>
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    29e2:	ff 91       	pop	r31
    29e4:	ef 91       	pop	r30
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	bf 91       	pop	r27
    29ec:	af 91       	pop	r26
    29ee:	9f 91       	pop	r25
    29f0:	8f 91       	pop	r24
    29f2:	7f 91       	pop	r23
    29f4:	6f 91       	pop	r22
    29f6:	5f 91       	pop	r21
    29f8:	4f 91       	pop	r20
    29fa:	3f 91       	pop	r19
    29fc:	2f 91       	pop	r18
    29fe:	0f 90       	pop	r0
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	0f 90       	pop	r0
    2a04:	1f 90       	pop	r1
    2a06:	18 95       	reti

00002a08 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
	for (int i = 0; i < len; i++){
    2a10:	61 15       	cp	r22, r1
    2a12:	71 05       	cpc	r23, r1
    2a14:	61 f0       	breq	.+24     	; 0x2a2e <uart_send_bytes+0x26>
    2a16:	8c 01       	movw	r16, r24
    2a18:	ec 01       	movw	r28, r24
    2a1a:	06 0f       	add	r16, r22
    2a1c:	17 1f       	adc	r17, r23
		usart_putchar(&USARTD0, byte_array[i]);
    2a1e:	69 91       	ld	r22, Y+
    2a20:	80 ec       	ldi	r24, 0xC0	; 192
    2a22:	99 e0       	ldi	r25, 0x09	; 9
    2a24:	0e 94 a6 21 	call	0x434c	; 0x434c <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    2a28:	c0 17       	cp	r28, r16
    2a2a:	d1 07       	cpc	r29, r17
    2a2c:	c1 f7       	brne	.-16     	; 0x2a1e <uart_send_bytes+0x16>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <init_chargingpin>:
	}
	/* If visualization wasn't on then load solid colors that are saved including no color saved */
	else 
	{
		fht_flag = false;
		restore_led_from_eeprom();
    2a38:	98 2f       	mov	r25, r24
    2a3a:	97 70       	andi	r25, 0x07	; 7
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	70 e0       	ldi	r23, 0x00	; 0
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <init_chargingpin+0xe>
    2a42:	66 0f       	add	r22, r22
    2a44:	77 1f       	adc	r23, r23
    2a46:	9a 95       	dec	r25
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <init_chargingpin+0xa>
    2a4a:	86 95       	lsr	r24
    2a4c:	86 95       	lsr	r24
    2a4e:	86 95       	lsr	r24
    2a50:	20 e2       	ldi	r18, 0x20	; 32
    2a52:	82 9f       	mul	r24, r18
    2a54:	c0 01       	movw	r24, r0
    2a56:	11 24       	eor	r1, r1
    2a58:	42 e0       	ldi	r20, 0x02	; 2
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	9a 5f       	subi	r25, 0xFA	; 250
    2a5e:	d4 c6       	rjmp	.+3496   	; 0x3808 <ioport_configure_port_pin>
    2a60:	08 95       	ret

00002a62 <ischarging>:
    2a62:	80 91 e8 07 	lds	r24, 0x07E8
    2a66:	86 95       	lsr	r24
    2a68:	81 70       	andi	r24, 0x01	; 1
    2a6a:	08 95       	ret

00002a6c <twinkle>:
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	f9 01       	movw	r30, r18
    2a72:	ee 0f       	add	r30, r30
    2a74:	ff 1f       	adc	r31, r31
    2a76:	e2 0f       	add	r30, r18
    2a78:	f3 1f       	adc	r31, r19
    2a7a:	e9 56       	subi	r30, 0x69	; 105
    2a7c:	f5 4d       	sbci	r31, 0xD5	; 213
    2a7e:	80 83       	st	Z, r24
    2a80:	61 83       	std	Z+1, r22	; 0x01
    2a82:	42 83       	std	Z+2, r20	; 0x02
    2a84:	2f 5f       	subi	r18, 0xFF	; 255
    2a86:	3f 4f       	sbci	r19, 0xFF	; 255
    2a88:	26 30       	cpi	r18, 0x06	; 6
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	89 f7       	brne	.-30     	; 0x2a70 <twinkle+0x4>
    2a8e:	66 e0       	ldi	r22, 0x06	; 6
    2a90:	87 e9       	ldi	r24, 0x97	; 151
    2a92:	9a e2       	ldi	r25, 0x2A	; 42
    2a94:	a5 c4       	rjmp	.+2378   	; 0x33e0 <set_flash_ws2812>
    2a96:	08 95       	ret

00002a98 <rainbow>:
    2a98:	e7 e9       	ldi	r30, 0x97	; 151
    2a9a:	fa e2       	ldi	r31, 0x2A	; 42
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	80 83       	st	Z, r24
    2aa0:	11 82       	std	Z+1, r1	; 0x01
    2aa2:	12 82       	std	Z+2, r1	; 0x02
    2aa4:	13 82       	std	Z+3, r1	; 0x03
    2aa6:	84 83       	std	Z+4, r24	; 0x04
    2aa8:	15 82       	std	Z+5, r1	; 0x05
    2aaa:	16 82       	std	Z+6, r1	; 0x06
    2aac:	17 82       	std	Z+7, r1	; 0x07
    2aae:	80 87       	std	Z+8, r24	; 0x08
    2ab0:	81 87       	std	Z+9, r24	; 0x09
    2ab2:	12 86       	std	Z+10, r1	; 0x0a
    2ab4:	13 86       	std	Z+11, r1	; 0x0b
    2ab6:	14 86       	std	Z+12, r1	; 0x0c
    2ab8:	85 87       	std	Z+13, r24	; 0x0d
    2aba:	16 86       	std	Z+14, r1	; 0x0e
    2abc:	17 86       	std	Z+15, r1	; 0x0f
    2abe:	10 8a       	std	Z+16, r1	; 0x10
    2ac0:	81 8b       	std	Z+17, r24	; 0x11
    2ac2:	66 e0       	ldi	r22, 0x06	; 6
    2ac4:	cf 01       	movw	r24, r30
    2ac6:	8c c4       	rjmp	.+2328   	; 0x33e0 <set_flash_ws2812>
    2ac8:	08 95       	ret

00002aca <clear_led>:
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	e8 2f       	mov	r30, r24
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	9f 01       	movw	r18, r30
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	e2 0f       	add	r30, r18
    2ad8:	f3 1f       	adc	r31, r19
    2ada:	e9 56       	subi	r30, 0x69	; 105
    2adc:	f5 4d       	sbci	r31, 0xD5	; 213
    2ade:	10 82       	st	Z, r1
    2ae0:	11 82       	std	Z+1, r1	; 0x01
    2ae2:	12 82       	std	Z+2, r1	; 0x02
    2ae4:	8f 5f       	subi	r24, 0xFF	; 255
    2ae6:	86 30       	cpi	r24, 0x06	; 6
    2ae8:	89 f7       	brne	.-30     	; 0x2acc <clear_led+0x2>
    2aea:	66 e0       	ldi	r22, 0x06	; 6
    2aec:	87 e9       	ldi	r24, 0x97	; 151
    2aee:	9a e2       	ldi	r25, 0x2A	; 42
    2af0:	77 c4       	rjmp	.+2286   	; 0x33e0 <set_flash_ws2812>
    2af2:	08 95       	ret

00002af4 <load_data_color_led>:
    2af4:	ad ed       	ldi	r26, 0xDD	; 221
    2af6:	b0 e2       	ldi	r27, 0x20	; 32
    2af8:	8c 91       	ld	r24, X
    2afa:	e7 e9       	ldi	r30, 0x97	; 151
    2afc:	fa e2       	ldi	r31, 0x2A	; 42
    2afe:	80 83       	st	Z, r24
    2b00:	11 96       	adiw	r26, 0x01	; 1
    2b02:	8c 91       	ld	r24, X
    2b04:	11 97       	sbiw	r26, 0x01	; 1
    2b06:	81 83       	std	Z+1, r24	; 0x01
    2b08:	12 96       	adiw	r26, 0x02	; 2
    2b0a:	8c 91       	ld	r24, X
    2b0c:	12 97       	sbiw	r26, 0x02	; 2
    2b0e:	82 83       	std	Z+2, r24	; 0x02
    2b10:	13 96       	adiw	r26, 0x03	; 3
    2b12:	8c 91       	ld	r24, X
    2b14:	13 97       	sbiw	r26, 0x03	; 3
    2b16:	83 83       	std	Z+3, r24	; 0x03
    2b18:	14 96       	adiw	r26, 0x04	; 4
    2b1a:	8c 91       	ld	r24, X
    2b1c:	14 97       	sbiw	r26, 0x04	; 4
    2b1e:	84 83       	std	Z+4, r24	; 0x04
    2b20:	15 96       	adiw	r26, 0x05	; 5
    2b22:	8c 91       	ld	r24, X
    2b24:	15 97       	sbiw	r26, 0x05	; 5
    2b26:	85 83       	std	Z+5, r24	; 0x05
    2b28:	16 96       	adiw	r26, 0x06	; 6
    2b2a:	8c 91       	ld	r24, X
    2b2c:	16 97       	sbiw	r26, 0x06	; 6
    2b2e:	86 83       	std	Z+6, r24	; 0x06
    2b30:	17 96       	adiw	r26, 0x07	; 7
    2b32:	8c 91       	ld	r24, X
    2b34:	17 97       	sbiw	r26, 0x07	; 7
    2b36:	87 83       	std	Z+7, r24	; 0x07
    2b38:	18 96       	adiw	r26, 0x08	; 8
    2b3a:	8c 91       	ld	r24, X
    2b3c:	18 97       	sbiw	r26, 0x08	; 8
    2b3e:	80 87       	std	Z+8, r24	; 0x08
    2b40:	8c 91       	ld	r24, X
    2b42:	81 87       	std	Z+9, r24	; 0x09
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	8c 91       	ld	r24, X
    2b48:	11 97       	sbiw	r26, 0x01	; 1
    2b4a:	82 87       	std	Z+10, r24	; 0x0a
    2b4c:	12 96       	adiw	r26, 0x02	; 2
    2b4e:	8c 91       	ld	r24, X
    2b50:	12 97       	sbiw	r26, 0x02	; 2
    2b52:	83 87       	std	Z+11, r24	; 0x0b
    2b54:	13 96       	adiw	r26, 0x03	; 3
    2b56:	8c 91       	ld	r24, X
    2b58:	13 97       	sbiw	r26, 0x03	; 3
    2b5a:	84 87       	std	Z+12, r24	; 0x0c
    2b5c:	14 96       	adiw	r26, 0x04	; 4
    2b5e:	8c 91       	ld	r24, X
    2b60:	14 97       	sbiw	r26, 0x04	; 4
    2b62:	85 87       	std	Z+13, r24	; 0x0d
    2b64:	15 96       	adiw	r26, 0x05	; 5
    2b66:	8c 91       	ld	r24, X
    2b68:	15 97       	sbiw	r26, 0x05	; 5
    2b6a:	86 87       	std	Z+14, r24	; 0x0e
    2b6c:	16 96       	adiw	r26, 0x06	; 6
    2b6e:	8c 91       	ld	r24, X
    2b70:	16 97       	sbiw	r26, 0x06	; 6
    2b72:	87 87       	std	Z+15, r24	; 0x0f
    2b74:	17 96       	adiw	r26, 0x07	; 7
    2b76:	8c 91       	ld	r24, X
    2b78:	17 97       	sbiw	r26, 0x07	; 7
    2b7a:	80 8b       	std	Z+16, r24	; 0x10
    2b7c:	18 96       	adiw	r26, 0x08	; 8
    2b7e:	8c 91       	ld	r24, X
    2b80:	81 8b       	std	Z+17, r24	; 0x11
    2b82:	66 e0       	ldi	r22, 0x06	; 6
    2b84:	cf 01       	movw	r24, r30
    2b86:	2c c4       	rjmp	.+2136   	; 0x33e0 <set_flash_ws2812>
    2b88:	08 95       	ret

00002b8a <update_led_charge>:
    2b8a:	10 92 7c 2a 	sts	0x2A7C, r1
    2b8e:	80 91 39 21 	lds	r24, 0x2139
    2b92:	88 23       	and	r24, r24
    2b94:	59 f1       	breq	.+86     	; 0x2bec <update_led_charge+0x62>
    2b96:	80 91 3c 21 	lds	r24, 0x213C
    2b9a:	90 91 3d 21 	lds	r25, 0x213D
    2b9e:	9c 01       	movw	r18, r24
    2ba0:	20 56       	subi	r18, 0x60	; 96
    2ba2:	35 40       	sbci	r19, 0x05	; 5
    2ba4:	2f 35       	cpi	r18, 0x5F	; 95
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	48 f4       	brcc	.+18     	; 0x2bbc <update_led_charge+0x32>
    2baa:	80 91 fd 20 	lds	r24, 0x20FD
    2bae:	90 91 fe 20 	lds	r25, 0x20FE
    2bb2:	80 93 40 21 	sts	0x2140, r24
    2bb6:	90 93 41 21 	sts	0x2141, r25
    2bba:	16 c0       	rjmp	.+44     	; 0x2be8 <update_led_charge+0x5e>
    2bbc:	81 5b       	subi	r24, 0xB1	; 177
    2bbe:	94 40       	sbci	r25, 0x04	; 4
    2bc0:	8f 3a       	cpi	r24, 0xAF	; 175
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	48 f4       	brcc	.+18     	; 0x2bd8 <update_led_charge+0x4e>
    2bc6:	80 91 f9 20 	lds	r24, 0x20F9
    2bca:	90 91 fa 20 	lds	r25, 0x20FA
    2bce:	80 93 40 21 	sts	0x2140, r24
    2bd2:	90 93 41 21 	sts	0x2141, r25
    2bd6:	08 c0       	rjmp	.+16     	; 0x2be8 <update_led_charge+0x5e>
    2bd8:	80 91 44 21 	lds	r24, 0x2144
    2bdc:	90 91 45 21 	lds	r25, 0x2145
    2be0:	80 93 40 21 	sts	0x2140, r24
    2be4:	90 93 41 21 	sts	0x2141, r25
    2be8:	10 92 39 21 	sts	0x2139, r1
    2bec:	3a df       	rcall	.-396    	; 0x2a62 <ischarging>
    2bee:	81 11       	cpse	r24, r1
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <update_led_charge+0x90>
    2bf2:	80 91 43 21 	lds	r24, 0x2143
    2bf6:	80 93 42 21 	sts	0x2142, r24
    2bfa:	86 e0       	ldi	r24, 0x06	; 6
    2bfc:	80 93 43 21 	sts	0x2143, r24
    2c00:	80 91 43 21 	lds	r24, 0x2143
    2c04:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	98 e0       	ldi	r25, 0x08	; 8
    2c0c:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tc45_enable>
    2c10:	80 e4       	ldi	r24, 0x40	; 64
    2c12:	98 e0       	ldi	r25, 0x08	; 8
    2c14:	0e 94 28 20 	call	0x4050	; 0x4050 <tc45_disable>
    2c18:	6d df       	rcall	.-294    	; 0x2af4 <load_data_color_led>
    2c1a:	80 91 40 21 	lds	r24, 0x2140
    2c1e:	90 91 41 21 	lds	r25, 0x2141
    2c22:	20 91 ff 20 	lds	r18, 0x20FF
    2c26:	30 91 00 21 	lds	r19, 0x2100
    2c2a:	82 17       	cp	r24, r18
    2c2c:	93 07       	cpc	r25, r19
    2c2e:	b8 f5       	brcc	.+110    	; 0x2c9e <update_led_charge+0x114>
    2c30:	4c df       	rcall	.-360    	; 0x2aca <clear_led>
    2c32:	40 91 f4 20 	lds	r20, 0x20F4
    2c36:	20 91 40 21 	lds	r18, 0x2140
    2c3a:	30 91 41 21 	lds	r19, 0x2141
    2c3e:	60 91 ff 20 	lds	r22, 0x20FF
    2c42:	70 91 00 21 	lds	r23, 0x2100
    2c46:	42 9f       	mul	r20, r18
    2c48:	c0 01       	movw	r24, r0
    2c4a:	43 9f       	mul	r20, r19
    2c4c:	90 0d       	add	r25, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2c54:	e7 e9       	ldi	r30, 0x97	; 151
    2c56:	fa e2       	ldi	r31, 0x2A	; 42
    2c58:	60 83       	st	Z, r22
    2c5a:	11 82       	std	Z+1, r1	; 0x01
    2c5c:	12 82       	std	Z+2, r1	; 0x02
    2c5e:	13 82       	std	Z+3, r1	; 0x03
    2c60:	14 82       	std	Z+4, r1	; 0x04
    2c62:	15 82       	std	Z+5, r1	; 0x05
    2c64:	16 82       	std	Z+6, r1	; 0x06
    2c66:	17 82       	std	Z+7, r1	; 0x07
    2c68:	10 86       	std	Z+8, r1	; 0x08
    2c6a:	40 91 f4 20 	lds	r20, 0x20F4
    2c6e:	60 91 ff 20 	lds	r22, 0x20FF
    2c72:	70 91 00 21 	lds	r23, 0x2100
    2c76:	42 9f       	mul	r20, r18
    2c78:	c0 01       	movw	r24, r0
    2c7a:	43 9f       	mul	r20, r19
    2c7c:	90 0d       	add	r25, r0
    2c7e:	11 24       	eor	r1, r1
    2c80:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2c84:	61 87       	std	Z+9, r22	; 0x09
    2c86:	12 86       	std	Z+10, r1	; 0x0a
    2c88:	13 86       	std	Z+11, r1	; 0x0b
    2c8a:	14 86       	std	Z+12, r1	; 0x0c
    2c8c:	15 86       	std	Z+13, r1	; 0x0d
    2c8e:	16 86       	std	Z+14, r1	; 0x0e
    2c90:	17 86       	std	Z+15, r1	; 0x0f
    2c92:	10 8a       	std	Z+16, r1	; 0x10
    2c94:	11 8a       	std	Z+17, r1	; 0x11
    2c96:	66 e0       	ldi	r22, 0x06	; 6
    2c98:	cf 01       	movw	r24, r30
    2c9a:	a2 d3       	rcall	.+1860   	; 0x33e0 <set_flash_ws2812>
    2c9c:	64 c1       	rjmp	.+712    	; 0x2f66 <update_led_charge+0x3dc>
    2c9e:	20 91 fb 20 	lds	r18, 0x20FB
    2ca2:	30 91 fc 20 	lds	r19, 0x20FC
    2ca6:	82 17       	cp	r24, r18
    2ca8:	93 07       	cpc	r25, r19
    2caa:	08 f0       	brcs	.+2      	; 0x2cae <update_led_charge+0x124>
    2cac:	48 c0       	rjmp	.+144    	; 0x2d3e <update_led_charge+0x1b4>
    2cae:	0d df       	rcall	.-486    	; 0x2aca <clear_led>
    2cb0:	80 91 f4 20 	lds	r24, 0x20F4
    2cb4:	e7 e9       	ldi	r30, 0x97	; 151
    2cb6:	fa e2       	ldi	r31, 0x2A	; 42
    2cb8:	80 83       	st	Z, r24
    2cba:	11 82       	std	Z+1, r1	; 0x01
    2cbc:	12 82       	std	Z+2, r1	; 0x02
    2cbe:	13 82       	std	Z+3, r1	; 0x03
    2cc0:	14 82       	std	Z+4, r1	; 0x04
    2cc2:	15 82       	std	Z+5, r1	; 0x05
    2cc4:	20 91 40 21 	lds	r18, 0x2140
    2cc8:	30 91 41 21 	lds	r19, 0x2141
    2ccc:	80 91 ff 20 	lds	r24, 0x20FF
    2cd0:	90 91 00 21 	lds	r25, 0x2100
    2cd4:	a0 91 f4 20 	lds	r26, 0x20F4
    2cd8:	60 91 fb 20 	lds	r22, 0x20FB
    2cdc:	70 91 fc 20 	lds	r23, 0x20FC
    2ce0:	a9 01       	movw	r20, r18
    2ce2:	48 1b       	sub	r20, r24
    2ce4:	59 0b       	sbc	r21, r25
    2ce6:	a4 9f       	mul	r26, r20
    2ce8:	c0 01       	movw	r24, r0
    2cea:	a5 9f       	mul	r26, r21
    2cec:	90 0d       	add	r25, r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2cf4:	66 83       	std	Z+6, r22	; 0x06
    2cf6:	17 82       	std	Z+7, r1	; 0x07
    2cf8:	10 86       	std	Z+8, r1	; 0x08
    2cfa:	80 91 f4 20 	lds	r24, 0x20F4
    2cfe:	81 87       	std	Z+9, r24	; 0x09
    2d00:	12 86       	std	Z+10, r1	; 0x0a
    2d02:	13 86       	std	Z+11, r1	; 0x0b
    2d04:	14 86       	std	Z+12, r1	; 0x0c
    2d06:	15 86       	std	Z+13, r1	; 0x0d
    2d08:	16 86       	std	Z+14, r1	; 0x0e
    2d0a:	80 91 ff 20 	lds	r24, 0x20FF
    2d0e:	90 91 00 21 	lds	r25, 0x2100
    2d12:	40 91 f4 20 	lds	r20, 0x20F4
    2d16:	60 91 fb 20 	lds	r22, 0x20FB
    2d1a:	70 91 fc 20 	lds	r23, 0x20FC
    2d1e:	28 1b       	sub	r18, r24
    2d20:	39 0b       	sbc	r19, r25
    2d22:	42 9f       	mul	r20, r18
    2d24:	c0 01       	movw	r24, r0
    2d26:	43 9f       	mul	r20, r19
    2d28:	90 0d       	add	r25, r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2d30:	67 87       	std	Z+15, r22	; 0x0f
    2d32:	10 8a       	std	Z+16, r1	; 0x10
    2d34:	11 8a       	std	Z+17, r1	; 0x11
    2d36:	66 e0       	ldi	r22, 0x06	; 6
    2d38:	cf 01       	movw	r24, r30
    2d3a:	52 d3       	rcall	.+1700   	; 0x33e0 <set_flash_ws2812>
    2d3c:	14 c1       	rjmp	.+552    	; 0x2f66 <update_led_charge+0x3dc>
    2d3e:	20 91 f7 20 	lds	r18, 0x20F7
    2d42:	30 91 f8 20 	lds	r19, 0x20F8
    2d46:	82 17       	cp	r24, r18
    2d48:	93 07       	cpc	r25, r19
    2d4a:	08 f0       	brcs	.+2      	; 0x2d4e <update_led_charge+0x1c4>
    2d4c:	4c c0       	rjmp	.+152    	; 0x2de6 <update_led_charge+0x25c>
    2d4e:	bd de       	rcall	.-646    	; 0x2aca <clear_led>
    2d50:	80 91 f4 20 	lds	r24, 0x20F4
    2d54:	e7 e9       	ldi	r30, 0x97	; 151
    2d56:	fa e2       	ldi	r31, 0x2A	; 42
    2d58:	80 83       	st	Z, r24
    2d5a:	11 82       	std	Z+1, r1	; 0x01
    2d5c:	12 82       	std	Z+2, r1	; 0x02
    2d5e:	20 91 40 21 	lds	r18, 0x2140
    2d62:	30 91 41 21 	lds	r19, 0x2141
    2d66:	80 91 fb 20 	lds	r24, 0x20FB
    2d6a:	90 91 fc 20 	lds	r25, 0x20FC
    2d6e:	a0 91 f4 20 	lds	r26, 0x20F4
    2d72:	60 91 f7 20 	lds	r22, 0x20F7
    2d76:	70 91 f8 20 	lds	r23, 0x20F8
    2d7a:	a9 01       	movw	r20, r18
    2d7c:	48 1b       	sub	r20, r24
    2d7e:	59 0b       	sbc	r21, r25
    2d80:	a4 9f       	mul	r26, r20
    2d82:	c0 01       	movw	r24, r0
    2d84:	a5 9f       	mul	r26, r21
    2d86:	90 0d       	add	r25, r0
    2d88:	11 24       	eor	r1, r1
    2d8a:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2d8e:	63 83       	std	Z+3, r22	; 0x03
    2d90:	14 82       	std	Z+4, r1	; 0x04
    2d92:	15 82       	std	Z+5, r1	; 0x05
    2d94:	80 91 f4 20 	lds	r24, 0x20F4
    2d98:	86 83       	std	Z+6, r24	; 0x06
    2d9a:	17 82       	std	Z+7, r1	; 0x07
    2d9c:	10 86       	std	Z+8, r1	; 0x08
    2d9e:	80 91 f4 20 	lds	r24, 0x20F4
    2da2:	81 87       	std	Z+9, r24	; 0x09
    2da4:	12 86       	std	Z+10, r1	; 0x0a
    2da6:	13 86       	std	Z+11, r1	; 0x0b
    2da8:	80 91 fb 20 	lds	r24, 0x20FB
    2dac:	90 91 fc 20 	lds	r25, 0x20FC
    2db0:	40 91 f4 20 	lds	r20, 0x20F4
    2db4:	60 91 f7 20 	lds	r22, 0x20F7
    2db8:	70 91 f8 20 	lds	r23, 0x20F8
    2dbc:	28 1b       	sub	r18, r24
    2dbe:	39 0b       	sbc	r19, r25
    2dc0:	42 9f       	mul	r20, r18
    2dc2:	c0 01       	movw	r24, r0
    2dc4:	43 9f       	mul	r20, r19
    2dc6:	90 0d       	add	r25, r0
    2dc8:	11 24       	eor	r1, r1
    2dca:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2dce:	64 87       	std	Z+12, r22	; 0x0c
    2dd0:	15 86       	std	Z+13, r1	; 0x0d
    2dd2:	16 86       	std	Z+14, r1	; 0x0e
    2dd4:	80 91 f4 20 	lds	r24, 0x20F4
    2dd8:	87 87       	std	Z+15, r24	; 0x0f
    2dda:	10 8a       	std	Z+16, r1	; 0x10
    2ddc:	11 8a       	std	Z+17, r1	; 0x11
    2dde:	66 e0       	ldi	r22, 0x06	; 6
    2de0:	cf 01       	movw	r24, r30
    2de2:	fe d2       	rcall	.+1532   	; 0x33e0 <set_flash_ws2812>
    2de4:	c0 c0       	rjmp	.+384    	; 0x2f66 <update_led_charge+0x3dc>
    2de6:	20 91 f5 20 	lds	r18, 0x20F5
    2dea:	30 91 f6 20 	lds	r19, 0x20F6
    2dee:	82 17       	cp	r24, r18
    2df0:	93 07       	cpc	r25, r19
    2df2:	08 f0       	brcs	.+2      	; 0x2df6 <update_led_charge+0x26c>
    2df4:	94 c0       	rjmp	.+296    	; 0x2f1e <update_led_charge+0x394>
    2df6:	69 de       	rcall	.-814    	; 0x2aca <clear_led>
    2df8:	e7 e9       	ldi	r30, 0x97	; 151
    2dfa:	fa e2       	ldi	r31, 0x2A	; 42
    2dfc:	10 82       	st	Z, r1
    2dfe:	20 91 40 21 	lds	r18, 0x2140
    2e02:	30 91 41 21 	lds	r19, 0x2141
    2e06:	80 91 f9 20 	lds	r24, 0x20F9
    2e0a:	90 91 fa 20 	lds	r25, 0x20FA
    2e0e:	a0 91 f4 20 	lds	r26, 0x20F4
    2e12:	60 91 f5 20 	lds	r22, 0x20F5
    2e16:	70 91 f6 20 	lds	r23, 0x20F6
    2e1a:	a9 01       	movw	r20, r18
    2e1c:	48 1b       	sub	r20, r24
    2e1e:	59 0b       	sbc	r21, r25
    2e20:	a4 9f       	mul	r26, r20
    2e22:	c0 01       	movw	r24, r0
    2e24:	a5 9f       	mul	r26, r21
    2e26:	90 0d       	add	r25, r0
    2e28:	11 24       	eor	r1, r1
    2e2a:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2e2e:	61 83       	std	Z+1, r22	; 0x01
    2e30:	12 82       	std	Z+2, r1	; 0x02
    2e32:	13 82       	std	Z+3, r1	; 0x03
    2e34:	80 91 f9 20 	lds	r24, 0x20F9
    2e38:	90 91 fa 20 	lds	r25, 0x20FA
    2e3c:	a0 91 f4 20 	lds	r26, 0x20F4
    2e40:	60 91 f5 20 	lds	r22, 0x20F5
    2e44:	70 91 f6 20 	lds	r23, 0x20F6
    2e48:	a9 01       	movw	r20, r18
    2e4a:	48 1b       	sub	r20, r24
    2e4c:	59 0b       	sbc	r21, r25
    2e4e:	a4 9f       	mul	r26, r20
    2e50:	c0 01       	movw	r24, r0
    2e52:	a5 9f       	mul	r26, r21
    2e54:	90 0d       	add	r25, r0
    2e56:	11 24       	eor	r1, r1
    2e58:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2e5c:	64 83       	std	Z+4, r22	; 0x04
    2e5e:	15 82       	std	Z+5, r1	; 0x05
    2e60:	16 82       	std	Z+6, r1	; 0x06
    2e62:	80 91 f9 20 	lds	r24, 0x20F9
    2e66:	90 91 fa 20 	lds	r25, 0x20FA
    2e6a:	a0 91 f4 20 	lds	r26, 0x20F4
    2e6e:	60 91 f5 20 	lds	r22, 0x20F5
    2e72:	70 91 f6 20 	lds	r23, 0x20F6
    2e76:	a9 01       	movw	r20, r18
    2e78:	48 1b       	sub	r20, r24
    2e7a:	59 0b       	sbc	r21, r25
    2e7c:	a4 9f       	mul	r26, r20
    2e7e:	c0 01       	movw	r24, r0
    2e80:	a5 9f       	mul	r26, r21
    2e82:	90 0d       	add	r25, r0
    2e84:	11 24       	eor	r1, r1
    2e86:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2e8a:	67 83       	std	Z+7, r22	; 0x07
    2e8c:	10 86       	std	Z+8, r1	; 0x08
    2e8e:	11 86       	std	Z+9, r1	; 0x09
    2e90:	80 91 f9 20 	lds	r24, 0x20F9
    2e94:	90 91 fa 20 	lds	r25, 0x20FA
    2e98:	a0 91 f4 20 	lds	r26, 0x20F4
    2e9c:	60 91 f5 20 	lds	r22, 0x20F5
    2ea0:	70 91 f6 20 	lds	r23, 0x20F6
    2ea4:	a9 01       	movw	r20, r18
    2ea6:	48 1b       	sub	r20, r24
    2ea8:	59 0b       	sbc	r21, r25
    2eaa:	a4 9f       	mul	r26, r20
    2eac:	c0 01       	movw	r24, r0
    2eae:	a5 9f       	mul	r26, r21
    2eb0:	90 0d       	add	r25, r0
    2eb2:	11 24       	eor	r1, r1
    2eb4:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2eb8:	62 87       	std	Z+10, r22	; 0x0a
    2eba:	13 86       	std	Z+11, r1	; 0x0b
    2ebc:	14 86       	std	Z+12, r1	; 0x0c
    2ebe:	80 91 f9 20 	lds	r24, 0x20F9
    2ec2:	90 91 fa 20 	lds	r25, 0x20FA
    2ec6:	a0 91 f4 20 	lds	r26, 0x20F4
    2eca:	60 91 f5 20 	lds	r22, 0x20F5
    2ece:	70 91 f6 20 	lds	r23, 0x20F6
    2ed2:	a9 01       	movw	r20, r18
    2ed4:	48 1b       	sub	r20, r24
    2ed6:	59 0b       	sbc	r21, r25
    2ed8:	a4 9f       	mul	r26, r20
    2eda:	c0 01       	movw	r24, r0
    2edc:	a5 9f       	mul	r26, r21
    2ede:	90 0d       	add	r25, r0
    2ee0:	11 24       	eor	r1, r1
    2ee2:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2ee6:	65 87       	std	Z+13, r22	; 0x0d
    2ee8:	16 86       	std	Z+14, r1	; 0x0e
    2eea:	17 86       	std	Z+15, r1	; 0x0f
    2eec:	80 91 f9 20 	lds	r24, 0x20F9
    2ef0:	90 91 fa 20 	lds	r25, 0x20FA
    2ef4:	40 91 f4 20 	lds	r20, 0x20F4
    2ef8:	60 91 f5 20 	lds	r22, 0x20F5
    2efc:	70 91 f6 20 	lds	r23, 0x20F6
    2f00:	28 1b       	sub	r18, r24
    2f02:	39 0b       	sbc	r19, r25
    2f04:	42 9f       	mul	r20, r18
    2f06:	c0 01       	movw	r24, r0
    2f08:	43 9f       	mul	r20, r19
    2f0a:	90 0d       	add	r25, r0
    2f0c:	11 24       	eor	r1, r1
    2f0e:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <__udivmodhi4>
    2f12:	60 8b       	std	Z+16, r22	; 0x10
    2f14:	11 8a       	std	Z+17, r1	; 0x11
    2f16:	66 e0       	ldi	r22, 0x06	; 6
    2f18:	cf 01       	movw	r24, r30
    2f1a:	62 d2       	rcall	.+1220   	; 0x33e0 <set_flash_ws2812>
    2f1c:	24 c0       	rjmp	.+72     	; 0x2f66 <update_led_charge+0x3dc>
    2f1e:	d5 dd       	rcall	.-1110   	; 0x2aca <clear_led>
    2f20:	e7 e9       	ldi	r30, 0x97	; 151
    2f22:	fa e2       	ldi	r31, 0x2A	; 42
    2f24:	10 82       	st	Z, r1
    2f26:	80 91 f4 20 	lds	r24, 0x20F4
    2f2a:	81 83       	std	Z+1, r24	; 0x01
    2f2c:	12 82       	std	Z+2, r1	; 0x02
    2f2e:	13 82       	std	Z+3, r1	; 0x03
    2f30:	80 91 f4 20 	lds	r24, 0x20F4
    2f34:	84 83       	std	Z+4, r24	; 0x04
    2f36:	15 82       	std	Z+5, r1	; 0x05
    2f38:	16 82       	std	Z+6, r1	; 0x06
    2f3a:	80 91 f4 20 	lds	r24, 0x20F4
    2f3e:	87 83       	std	Z+7, r24	; 0x07
    2f40:	10 86       	std	Z+8, r1	; 0x08
    2f42:	11 86       	std	Z+9, r1	; 0x09
    2f44:	80 91 f4 20 	lds	r24, 0x20F4
    2f48:	82 87       	std	Z+10, r24	; 0x0a
    2f4a:	13 86       	std	Z+11, r1	; 0x0b
    2f4c:	14 86       	std	Z+12, r1	; 0x0c
    2f4e:	80 91 f4 20 	lds	r24, 0x20F4
    2f52:	85 87       	std	Z+13, r24	; 0x0d
    2f54:	16 86       	std	Z+14, r1	; 0x0e
    2f56:	17 86       	std	Z+15, r1	; 0x0f
    2f58:	80 91 f4 20 	lds	r24, 0x20F4
    2f5c:	80 8b       	std	Z+16, r24	; 0x10
    2f5e:	11 8a       	std	Z+17, r1	; 0x11
    2f60:	66 e0       	ldi	r22, 0x06	; 6
    2f62:	cf 01       	movw	r24, r30
    2f64:	3d d2       	rcall	.+1146   	; 0x33e0 <set_flash_ws2812>
    2f66:	80 91 40 21 	lds	r24, 0x2140
    2f6a:	90 91 41 21 	lds	r25, 0x2141
    2f6e:	01 96       	adiw	r24, 0x01	; 1
    2f70:	80 93 40 21 	sts	0x2140, r24
    2f74:	90 93 41 21 	sts	0x2141, r25
    2f78:	08 95       	ret

00002f7a <__vector_35>:
    2f7a:	1f 92       	push	r1
    2f7c:	0f 92       	push	r0
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	0f 92       	push	r0
    2f82:	11 24       	eor	r1, r1
    2f84:	2f 93       	push	r18
    2f86:	3f 93       	push	r19
    2f88:	4f 93       	push	r20
    2f8a:	5f 93       	push	r21
    2f8c:	6f 93       	push	r22
    2f8e:	7f 93       	push	r23
    2f90:	8f 93       	push	r24
    2f92:	9f 93       	push	r25
    2f94:	af 93       	push	r26
    2f96:	bf 93       	push	r27
    2f98:	ef 93       	push	r30
    2f9a:	ff 93       	push	r31
    2f9c:	80 e2       	ldi	r24, 0x20	; 32
    2f9e:	80 93 6c 06 	sts	0x066C, r24
    2fa2:	93 dd       	rcall	.-1242   	; 0x2aca <clear_led>
    2fa4:	82 e1       	ldi	r24, 0x12	; 18
    2fa6:	97 e2       	ldi	r25, 0x27	; 39
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	f1 f7       	brne	.-4      	; 0x2fa8 <__vector_35+0x2e>
    2fac:	ff 91       	pop	r31
    2fae:	ef 91       	pop	r30
    2fb0:	bf 91       	pop	r27
    2fb2:	af 91       	pop	r26
    2fb4:	9f 91       	pop	r25
    2fb6:	8f 91       	pop	r24
    2fb8:	7f 91       	pop	r23
    2fba:	6f 91       	pop	r22
    2fbc:	5f 91       	pop	r21
    2fbe:	4f 91       	pop	r20
    2fc0:	3f 91       	pop	r19
    2fc2:	2f 91       	pop	r18
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <send_response>:
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <send_response+0x6>
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	89 83       	std	Y+1, r24	; 0x01
    2fda:	6a 83       	std	Y+2, r22	; 0x02
    2fdc:	62 e0       	ldi	r22, 0x02	; 2
    2fde:	70 e0       	ldi	r23, 0x00	; 0
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	11 dd       	rcall	.-1502   	; 0x2a08 <uart_send_bytes>
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	08 95       	ret

00002ff0 <send_light_data>:
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <send_light_data+0x6>
    2ff6:	1f 92       	push	r1
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	90 91 3e 21 	lds	r25, 0x213E
    3000:	80 91 3f 21 	lds	r24, 0x213F
    3004:	9b 83       	std	Y+3, r25	; 0x03
    3006:	8a 83       	std	Y+2, r24	; 0x02
    3008:	8d e4       	ldi	r24, 0x4D	; 77
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	70 e0       	ldi	r23, 0x00	; 0
    3010:	ce 01       	movw	r24, r28
    3012:	01 96       	adiw	r24, 0x01	; 1
    3014:	f9 dc       	rcall	.-1550   	; 0x2a08 <uart_send_bytes>
    3016:	23 96       	adiw	r28, 0x03	; 3
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <send_battery_data>:
    3022:	cf 93       	push	r28
    3024:	df 93       	push	r29
    3026:	00 d0       	rcall	.+0      	; 0x3028 <send_battery_data+0x6>
    3028:	cd b7       	in	r28, 0x3d	; 61
    302a:	de b7       	in	r29, 0x3e	; 62
    302c:	80 91 3c 21 	lds	r24, 0x213C
    3030:	90 91 3d 21 	lds	r25, 0x213D
    3034:	6a e0       	ldi	r22, 0x0A	; 10
    3036:	70 e0       	ldi	r23, 0x00	; 0
    3038:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__divmodhi4>
    303c:	6a 83       	std	Y+2, r22	; 0x02
    303e:	82 e4       	ldi	r24, 0x42	; 66
    3040:	89 83       	std	Y+1, r24	; 0x01
    3042:	62 e0       	ldi	r22, 0x02	; 2
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	ce 01       	movw	r24, r28
    3048:	01 96       	adiw	r24, 0x01	; 1
    304a:	de dc       	rcall	.-1604   	; 0x2a08 <uart_send_bytes>
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	08 95       	ret

00003056 <send_charging_data>:
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	00 d0       	rcall	.+0      	; 0x305c <send_charging_data+0x6>
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	19 82       	std	Y+1, r1	; 0x01
    3062:	1a 82       	std	Y+2, r1	; 0x02
    3064:	fe dc       	rcall	.-1540   	; 0x2a62 <ischarging>
    3066:	8a 83       	std	Y+2, r24	; 0x02
    3068:	87 e4       	ldi	r24, 0x47	; 71
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	62 e0       	ldi	r22, 0x02	; 2
    306e:	70 e0       	ldi	r23, 0x00	; 0
    3070:	ce 01       	movw	r24, r28
    3072:	01 96       	adiw	r24, 0x01	; 1
    3074:	c9 dc       	rcall	.-1646   	; 0x2a08 <uart_send_bytes>
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	df 91       	pop	r29
    307c:	cf 91       	pop	r28
    307e:	08 95       	ret

00003080 <send_mtch_update_status>:
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	00 d0       	rcall	.+0      	; 0x3086 <send_mtch_update_status+0x6>
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	19 82       	std	Y+1, r1	; 0x01
    308c:	1a 82       	std	Y+2, r1	; 0x02
    308e:	85 e5       	ldi	r24, 0x55	; 85
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	1a d5       	rcall	.+2612   	; 0x3ac8 <nvm_eeprom_read_byte>
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	88 e4       	ldi	r24, 0x48	; 72
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	62 e0       	ldi	r22, 0x02	; 2
    309c:	70 e0       	ldi	r23, 0x00	; 0
    309e:	ce 01       	movw	r24, r28
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	b2 dc       	rcall	.-1692   	; 0x2a08 <uart_send_bytes>
    30a4:	0f 90       	pop	r0
    30a6:	0f 90       	pop	r0
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	08 95       	ret

000030ae <send_color_data>:
    30ae:	cf 93       	push	r28
    30b0:	df 93       	push	r29
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
    30b6:	2a 97       	sbiw	r28, 0x0a	; 10
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	fe 01       	movw	r30, r28
    30be:	31 96       	adiw	r30, 0x01	; 1
    30c0:	8a e0       	ldi	r24, 0x0A	; 10
    30c2:	df 01       	movw	r26, r30
    30c4:	1d 92       	st	X+, r1
    30c6:	8a 95       	dec	r24
    30c8:	e9 f7       	brne	.-6      	; 0x30c4 <send_color_data+0x16>
    30ca:	83 e6       	ldi	r24, 0x63	; 99
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	31 96       	adiw	r30, 0x01	; 1
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	dc 01       	movw	r26, r24
    30d6:	a3 52       	subi	r26, 0x23	; 35
    30d8:	bf 4d       	sbci	r27, 0xDF	; 223
    30da:	2c 91       	ld	r18, X
    30dc:	21 93       	st	Z+, r18
    30de:	01 96       	adiw	r24, 0x01	; 1
    30e0:	89 30       	cpi	r24, 0x09	; 9
    30e2:	91 05       	cpc	r25, r1
    30e4:	b9 f7       	brne	.-18     	; 0x30d4 <send_color_data+0x26>
    30e6:	6a e0       	ldi	r22, 0x0A	; 10
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	8c dc       	rcall	.-1768   	; 0x2a08 <uart_send_bytes>
    30f0:	2a 96       	adiw	r28, 0x0a	; 10
    30f2:	cd bf       	out	0x3d, r28	; 61
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	08 95       	ret

000030fc <send_pulse_data>:
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	00 d0       	rcall	.+0      	; 0x3102 <send_pulse_data+0x6>
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	19 82       	std	Y+1, r1	; 0x01
    3108:	1a 82       	std	Y+2, r1	; 0x02
    310a:	38 da       	rcall	.-2960   	; 0x257c <get_pulse_state>
    310c:	8a 83       	std	Y+2, r24	; 0x02
    310e:	80 e7       	ldi	r24, 0x70	; 112
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	62 e0       	ldi	r22, 0x02	; 2
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	ce 01       	movw	r24, r28
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	76 dc       	rcall	.-1812   	; 0x2a08 <uart_send_bytes>
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	08 95       	ret

00003126 <restore_led_from_eeprom>:
    3126:	cf 93       	push	r28
    3128:	df 93       	push	r29
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	cc d4       	rcall	.+2456   	; 0x3ac8 <nvm_eeprom_read_byte>
    3130:	cd ed       	ldi	r28, 0xDD	; 221
    3132:	d0 e2       	ldi	r29, 0x20	; 32
    3134:	88 83       	st	Y, r24
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	c6 d4       	rcall	.+2444   	; 0x3ac8 <nvm_eeprom_read_byte>
    313c:	89 83       	std	Y+1, r24	; 0x01
    313e:	83 e0       	ldi	r24, 0x03	; 3
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	c2 d4       	rcall	.+2436   	; 0x3ac8 <nvm_eeprom_read_byte>
    3144:	8a 83       	std	Y+2, r24	; 0x02
    3146:	84 e0       	ldi	r24, 0x04	; 4
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	be d4       	rcall	.+2428   	; 0x3ac8 <nvm_eeprom_read_byte>
    314c:	8b 83       	std	Y+3, r24	; 0x03
    314e:	85 e0       	ldi	r24, 0x05	; 5
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	ba d4       	rcall	.+2420   	; 0x3ac8 <nvm_eeprom_read_byte>
    3154:	8c 83       	std	Y+4, r24	; 0x04
    3156:	86 e0       	ldi	r24, 0x06	; 6
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	b6 d4       	rcall	.+2412   	; 0x3ac8 <nvm_eeprom_read_byte>
    315c:	8d 83       	std	Y+5, r24	; 0x05
    315e:	87 e0       	ldi	r24, 0x07	; 7
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	b2 d4       	rcall	.+2404   	; 0x3ac8 <nvm_eeprom_read_byte>
    3164:	8e 83       	std	Y+6, r24	; 0x06
    3166:	88 e0       	ldi	r24, 0x08	; 8
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	ae d4       	rcall	.+2396   	; 0x3ac8 <nvm_eeprom_read_byte>
    316c:	8f 83       	std	Y+7, r24	; 0x07
    316e:	89 e0       	ldi	r24, 0x09	; 9
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	aa d4       	rcall	.+2388   	; 0x3ac8 <nvm_eeprom_read_byte>
    3174:	88 87       	std	Y+8, r24	; 0x08
    3176:	a2 d9       	rcall	.-3260   	; 0x24bc <led_set_from_colors>
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <save_led_to_eeprom>:
    317e:	08 95       	ret

00003180 <wdt_kick>:
	}
}

void wdt_kick(void) {
	if (flag_timerd5) {
    3180:	80 91 7e 2a 	lds	r24, 0x2A7E
    3184:	88 23       	and	r24, r24
    3186:	19 f0       	breq	.+6      	; 0x318e <wdt_kick+0xe>
		flag_timerd5 = false;
    3188:	10 92 7e 2a 	sts	0x2A7E, r1
		wdt_reset();
    318c:	a8 95       	wdr
    318e:	08 95       	ret

00003190 <init_ws2812>:
    3190:	98 2f       	mov	r25, r24
    3192:	97 70       	andi	r25, 0x07	; 7
    3194:	61 e0       	ldi	r22, 0x01	; 1
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	02 c0       	rjmp	.+4      	; 0x319e <init_ws2812+0xe>
    319a:	66 0f       	add	r22, r22
    319c:	77 1f       	adc	r23, r23
    319e:	9a 95       	dec	r25
    31a0:	e2 f7       	brpl	.-8      	; 0x319a <init_ws2812+0xa>
    31a2:	86 95       	lsr	r24
    31a4:	86 95       	lsr	r24
    31a6:	86 95       	lsr	r24
    31a8:	20 e2       	ldi	r18, 0x20	; 32
    31aa:	82 9f       	mul	r24, r18
    31ac:	c0 01       	movw	r24, r0
    31ae:	11 24       	eor	r1, r1
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	50 e0       	ldi	r21, 0x00	; 0
    31b4:	9a 5f       	subi	r25, 0xFA	; 250
    31b6:	28 c3       	rjmp	.+1616   	; 0x3808 <ioport_configure_port_pin>
    31b8:	08 95       	ret

000031ba <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    31ba:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	2c 91       	ld	r18, X
    31c0:	11 97       	sbiw	r26, 0x01	; 1
    31c2:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    31c4:	e0 e4       	ldi	r30, 0x40	; 64
    31c6:	f6 e0       	ldi	r31, 0x06	; 6
    31c8:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    31ca:	22 23       	and	r18, r18
    31cc:	0c f0       	brlt	.+2      	; 0x31d0 <set_led_ws2812+0x16>
    31ce:	28 c0       	rjmp	.+80     	; 0x3220 <set_led_ws2812+0x66>
    31d0:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3202:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    321c:	00 00       	nop
    321e:	26 c0       	rjmp	.+76     	; 0x326c <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3220:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3236:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3238:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    326a:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    326c:	22 0f       	add	r18, r18
    326e:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    3270:	09 f0       	breq	.+2      	; 0x3274 <set_led_ws2812+0xba>
    3272:	ab cf       	rjmp	.-170    	; 0x31ca <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    3274:	2c 91       	ld	r18, X
    3276:	98 e0       	ldi	r25, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3278:	e0 e4       	ldi	r30, 0x40	; 64
    327a:	f6 e0       	ldi	r31, 0x06	; 6
    327c:	30 e4       	ldi	r19, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    327e:	22 23       	and	r18, r18
    3280:	0c f0       	brlt	.+2      	; 0x3284 <set_led_ws2812+0xca>
    3282:	28 c0       	rjmp	.+80     	; 0x32d4 <set_led_ws2812+0x11a>
    3284:	35 83       	std	Z+5, r19	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    32b6:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    32d0:	00 00       	nop
    32d2:	26 c0       	rjmp	.+76     	; 0x3320 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    32d4:	35 83       	std	Z+5, r19	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    32ea:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    32ec:	36 83       	std	Z+6, r19	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    331e:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    3320:	22 0f       	add	r18, r18
    3322:	91 50       	subi	r25, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    3324:	09 f0       	breq	.+2      	; 0x3328 <set_led_ws2812+0x16e>
    3326:	ab cf       	rjmp	.-170    	; 0x327e <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    3328:	12 96       	adiw	r26, 0x02	; 2
    332a:	9c 91       	ld	r25, X
    332c:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    332e:	e0 e4       	ldi	r30, 0x40	; 64
    3330:	f6 e0       	ldi	r31, 0x06	; 6
    3332:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    3334:	99 23       	and	r25, r25
    3336:	0c f0       	brlt	.+2      	; 0x333a <set_led_ws2812+0x180>
    3338:	28 c0       	rjmp	.+80     	; 0x338a <set_led_ws2812+0x1d0>
    333a:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    336c:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    3386:	00 00       	nop
    3388:	26 c0       	rjmp	.+76     	; 0x33d6 <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    338a:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    33a0:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    33a2:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    33d4:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    33d6:	99 0f       	add	r25, r25
    33d8:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    33da:	09 f0       	breq	.+2      	; 0x33de <set_led_ws2812+0x224>
    33dc:	ab cf       	rjmp	.-170    	; 0x3334 <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    33de:	08 95       	ret

000033e0 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    33e8:	66 23       	and	r22, r22
    33ea:	51 f0       	breq	.+20     	; 0x3400 <set_flash_ws2812+0x20>
    33ec:	06 2f       	mov	r16, r22
    33ee:	c8 2f       	mov	r28, r24
    33f0:	d9 2f       	mov	r29, r25
    33f2:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    33f4:	ce 01       	movw	r24, r28
    33f6:	e1 de       	rcall	.-574    	; 0x31ba <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    33f8:	1f 5f       	subi	r17, 0xFF	; 255
    33fa:	23 96       	adiw	r28, 0x03	; 3
    33fc:	10 13       	cpse	r17, r16
    33fe:	fa cf       	rjmp	.-12     	; 0x33f4 <set_flash_ws2812+0x14>
    3400:	80 e4       	ldi	r24, 0x40	; 64
    3402:	80 93 46 06 	sts	0x0646, r24
    3406:	89 ef       	ldi	r24, 0xF9	; 249
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <set_flash_ws2812+0x2a>
    340e:	00 c0       	rjmp	.+0      	; 0x3410 <set_flash_ws2812+0x30>
    3410:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    3412:	df 91       	pop	r29
    3414:	cf 91       	pop	r28
    3416:	1f 91       	pop	r17
    3418:	0f 91       	pop	r16
    341a:	08 95       	ret

0000341c <main>:
int main(void)
{
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    341c:	b7 d1       	rcall	.+878    	; 0x378c <sysclk_init>
	nvm_eeprom_write_byte(76, 0x01);
	*/
	
		/* Charging and watchdog timer - Using two compare channels with single timer */
	#ifdef ENABLE_WDT
		wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_2KCLK);
    341e:	88 e0       	ldi	r24, 0x08	; 8
    3420:	0e 94 5d 04 	call	0x8ba	; 0x8ba <wdt_set_timeout_period>
		wdt_reset();
    3424:	a8 95       	wdr
		wdt_enable();
    3426:	0e 94 71 04 	call	0x8e2	; 0x8e2 <wdt_enable>
		init_timerd5();
    342a:	0e 94 10 12 	call	0x2420	; 0x2420 <init_timerd5>
	#endif
	
	tc45_disable(&TCC4);
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	98 e0       	ldi	r25, 0x08	; 8
    3432:	0e d6       	rcall	.+3100   	; 0x4050 <tc45_disable>
	tc45_enable(&TCC5);
    3434:	80 e4       	ldi	r24, 0x40	; 64
    3436:	98 e0       	ldi	r25, 0x08	; 8
    3438:	d9 d5       	rcall	.+2994   	; 0x3fec <tc45_enable>
	
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    343a:	86 e1       	ldi	r24, 0x16	; 22
    343c:	a9 de       	rcall	.-686    	; 0x3190 <init_ws2812>
	clear_led();
    343e:	45 db       	rcall	.-2422   	; 0x2aca <clear_led>
	
	// init the mtch 6301
	init_mtchio();
    3440:	0e 94 85 0b 	call	0x170a	; 0x170a <init_mtchio>
	init_i2c();
    3444:	0e 94 3f 0b 	call	0x167e	; 0x167e <init_i2c>
	init_mtch6301();
    3448:	0e 94 6f 0b 	call	0x16de	; 0x16de <init_mtch6301>
	
	write_mtch_settings();
    344c:	0e 94 26 0c 	call	0x184c	; 0x184c <write_mtch_settings>
	}
	*/
	//board_init();
//	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);

	init_uart();
    3450:	0f d8       	rcall	.-4066   	; 0x2470 <init_uart>
	
	init_chargingpin(IOPORT_CREATE_PIN(PORTR, 1));
    3452:	89 e7       	ldi	r24, 0x79	; 121
    3454:	f1 da       	rcall	.-2590   	; 0x2a38 <init_chargingpin>
	nvm_eeprom_write_byte(EEPROM_INDEX_GESTURES, 1);
	nvm_eeprom_write_byte(EEPROM_INDEX_CONFIG, 1);
	nvm_eeprom_write_byte(EEPROM_INDEX_MTCH, 1);
	*/
	
	restore_led_from_eeprom();
    3456:	67 de       	rcall	.-818    	; 0x3126 <restore_led_from_eeprom>
	
	core_status = STATUS_CHARGE;
    3458:	c1 e0       	ldi	r28, 0x01	; 1
    345a:	c0 93 43 21 	sts	0x2143, r28
	change_adc_channel(core_status);
    345e:	80 91 43 21 	lds	r24, 0x2143
    3462:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
	flag_initcharge = true;
    3466:	c0 93 39 21 	sts	0x2139, r28
	init_adc(core_status);
    346a:	80 91 43 21 	lds	r24, 0x2143
    346e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <init_adc>
	adc_enable_interrupt();
    3472:	0e 94 ef 05 	call	0xbde	; 0xbde <adc_enable_interrupt>
	init_timer5();
    3476:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <init_timer5>
	init_timer4();		
    347a:	0e 94 c4 11 	call	0x2388	; 0x2388 <init_timer4>
		flag_initcharge = true;
		tc45_disable(&TCC4);
		tc45_enable(&TCC5);
	}
	else*/
	(!ischarging())
    347e:	f1 da       	rcall	.-2590   	; 0x2a62 <ischarging>
    3480:	81 11       	cpse	r24, r1
    3482:	11 c0       	rjmp	.+34     	; 0x34a6 <main+0x8a>
	{
		old_core_status = core_status;
    3484:	80 91 43 21 	lds	r24, 0x2143
    3488:	80 93 42 21 	sts	0x2142, r24
		core_status = STATUS_BATT_READ;
    348c:	86 e0       	ldi	r24, 0x06	; 6
    348e:	80 93 43 21 	sts	0x2143, r24
		change_adc_channel(core_status);
    3492:	80 91 43 21 	lds	r24, 0x2143
    3496:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
		tc45_disable(&TCC5);
    349a:	80 e4       	ldi	r24, 0x40	; 64
    349c:	98 e0       	ldi	r25, 0x08	; 8
    349e:	d8 d5       	rcall	.+2992   	; 0x4050 <tc45_disable>
		tc45_enable(&TCC4);
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	98 e0       	ldi	r25, 0x08	; 8
    34a4:	a3 d5       	rcall	.+2886   	; 0x3fec <tc45_enable>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    34a6:	0f 2e       	mov	r0, r31
    34a8:	f0 e6       	ldi	r31, 0x60	; 96
    34aa:	ef 2e       	mov	r14, r31
    34ac:	f6 e0       	ldi	r31, 0x06	; 6
    34ae:	ff 2e       	mov	r15, r31
    34b0:	f0 2d       	mov	r31, r0
    34b2:	68 94       	set
    34b4:	88 24       	eor	r8, r8
    34b6:	81 f8       	bld	r8, 1
    34b8:	d1 e0       	ldi	r29, 0x01	; 1
    34ba:	0f 2e       	mov	r0, r31
    34bc:	f0 ee       	ldi	r31, 0xE0	; 224
    34be:	af 2e       	mov	r10, r31
    34c0:	f7 e0       	ldi	r31, 0x07	; 7
    34c2:	bf 2e       	mov	r11, r31
    34c4:	f0 2d       	mov	r31, r0
    34c6:	68 94       	set
    34c8:	dd 24       	eor	r13, r13
    34ca:	d6 f8       	bld	r13, 6
    34cc:	00 e0       	ldi	r16, 0x00	; 0
    34ce:	16 e0       	ldi	r17, 0x06	; 6
    34d0:	68 94       	set
    34d2:	77 24       	eor	r7, r7
    34d4:	77 f8       	bld	r7, 7
    34d6:	58 2c       	mov	r5, r8
    34d8:	cd 2f       	mov	r28, r29
    34da:	68 94       	set
    34dc:	cc 24       	eor	r12, r12
    34de:	c5 f8       	bld	r12, 5
						{
							//	usart_putchar(M_USART, 0x55);

							run();
							old_core_status = core_status;
							core_status = STATUS_FFT_R;
    34e0:	68 94       	set
    34e2:	66 24       	eor	r6, r6
    34e4:	62 f8       	bld	r6, 2
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
					old_core_status = core_status;
					core_status = STATUS_BATT_READ;
    34e6:	0f 2e       	mov	r0, r31
    34e8:	f6 e0       	ldi	r31, 0x06	; 6
    34ea:	9f 2e       	mov	r9, r31
    34ec:	f0 2d       	mov	r31, r0
	
	// Insert application code here, after the board has been initialized.
	while(1)
	{

		if (latest_gesture) {
    34ee:	80 91 27 21 	lds	r24, 0x2127
    34f2:	88 23       	and	r24, r24
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <main+0xdc>
    34f6:	72 c0       	rjmp	.+228    	; 0x35dc <main+0x1c0>
			//twinkle(255, 0, 255);
			switch (latest_gesture) {
    34f8:	e0 91 27 21 	lds	r30, 0x2127
    34fc:	8e 2f       	mov	r24, r30
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	fc 01       	movw	r30, r24
    3502:	e0 5a       	subi	r30, 0xA0	; 160
    3504:	f1 09       	sbc	r31, r1
    3506:	e7 30       	cpi	r30, 0x07	; 7
    3508:	f1 05       	cpc	r31, r1
    350a:	08 f0       	brcs	.+2      	; 0x350e <main+0xf2>
    350c:	65 c0       	rjmp	.+202    	; 0x35d8 <main+0x1bc>
    350e:	e0 57       	subi	r30, 0x70	; 112
    3510:	fe 4f       	sbci	r31, 0xFE	; 254
    3512:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__tablejump2__>
    3516:	f8 01       	movw	r30, r16
    3518:	c5 82       	std	Z+5, r12	; 0x05
    351a:	ff e7       	ldi	r31, 0x7F	; 127
    351c:	2a e1       	ldi	r18, 0x1A	; 26
    351e:	86 e0       	ldi	r24, 0x06	; 6
    3520:	f1 50       	subi	r31, 0x01	; 1
    3522:	20 40       	sbci	r18, 0x00	; 0
    3524:	80 40       	sbci	r24, 0x00	; 0
    3526:	e1 f7       	brne	.-8      	; 0x3520 <main+0x104>
    3528:	00 c0       	rjmp	.+0      	; 0x352a <main+0x10e>
    352a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    352c:	f8 01       	movw	r30, r16
    352e:	c6 82       	std	Z+6, r12	; 0x06
    3530:	53 c0       	rjmp	.+166    	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3532:	f8 01       	movw	r30, r16
    3534:	d5 82       	std	Z+5, r13	; 0x05
    3536:	ff e7       	ldi	r31, 0x7F	; 127
    3538:	2a e1       	ldi	r18, 0x1A	; 26
    353a:	86 e0       	ldi	r24, 0x06	; 6
    353c:	f1 50       	subi	r31, 0x01	; 1
    353e:	20 40       	sbci	r18, 0x00	; 0
    3540:	80 40       	sbci	r24, 0x00	; 0
    3542:	e1 f7       	brne	.-8      	; 0x353c <main+0x120>
    3544:	00 c0       	rjmp	.+0      	; 0x3546 <main+0x12a>
    3546:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3548:	f8 01       	movw	r30, r16
    354a:	d6 82       	std	Z+6, r13	; 0x06
    354c:	45 c0       	rjmp	.+138    	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    354e:	f8 01       	movw	r30, r16
    3550:	75 82       	std	Z+5, r7	; 0x05
    3552:	ff e7       	ldi	r31, 0x7F	; 127
    3554:	2a e1       	ldi	r18, 0x1A	; 26
    3556:	86 e0       	ldi	r24, 0x06	; 6
    3558:	f1 50       	subi	r31, 0x01	; 1
    355a:	20 40       	sbci	r18, 0x00	; 0
    355c:	80 40       	sbci	r24, 0x00	; 0
    355e:	e1 f7       	brne	.-8      	; 0x3558 <main+0x13c>
    3560:	00 c0       	rjmp	.+0      	; 0x3562 <main+0x146>
    3562:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3564:	f8 01       	movw	r30, r16
    3566:	76 82       	std	Z+6, r7	; 0x06
    3568:	37 c0       	rjmp	.+110    	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    356a:	f7 01       	movw	r30, r14
    356c:	d5 82       	std	Z+5, r13	; 0x05
    356e:	ff e7       	ldi	r31, 0x7F	; 127
    3570:	2a e1       	ldi	r18, 0x1A	; 26
    3572:	86 e0       	ldi	r24, 0x06	; 6
    3574:	f1 50       	subi	r31, 0x01	; 1
    3576:	20 40       	sbci	r18, 0x00	; 0
    3578:	80 40       	sbci	r24, 0x00	; 0
    357a:	e1 f7       	brne	.-8      	; 0x3574 <main+0x158>
    357c:	00 c0       	rjmp	.+0      	; 0x357e <main+0x162>
    357e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    3580:	f7 01       	movw	r30, r14
    3582:	d6 82       	std	Z+6, r13	; 0x06
    3584:	29 c0       	rjmp	.+82     	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    3586:	f5 01       	movw	r30, r10
    3588:	d5 83       	std	Z+5, r29	; 0x05
    358a:	ff e7       	ldi	r31, 0x7F	; 127
    358c:	2a e1       	ldi	r18, 0x1A	; 26
    358e:	86 e0       	ldi	r24, 0x06	; 6
    3590:	f1 50       	subi	r31, 0x01	; 1
    3592:	20 40       	sbci	r18, 0x00	; 0
    3594:	80 40       	sbci	r24, 0x00	; 0
    3596:	e1 f7       	brne	.-8      	; 0x3590 <main+0x174>
    3598:	00 c0       	rjmp	.+0      	; 0x359a <main+0x17e>
    359a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    359c:	f5 01       	movw	r30, r10
    359e:	d6 83       	std	Z+6, r29	; 0x06
    35a0:	1b c0       	rjmp	.+54     	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    35a2:	f7 01       	movw	r30, r14
    35a4:	d5 83       	std	Z+5, r29	; 0x05
    35a6:	ff e7       	ldi	r31, 0x7F	; 127
    35a8:	2a e1       	ldi	r18, 0x1A	; 26
    35aa:	86 e0       	ldi	r24, 0x06	; 6
    35ac:	f1 50       	subi	r31, 0x01	; 1
    35ae:	20 40       	sbci	r18, 0x00	; 0
    35b0:	80 40       	sbci	r24, 0x00	; 0
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <main+0x190>
    35b4:	00 c0       	rjmp	.+0      	; 0x35b6 <main+0x19a>
    35b6:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    35b8:	f7 01       	movw	r30, r14
    35ba:	d6 83       	std	Z+6, r29	; 0x06
    35bc:	0d c0       	rjmp	.+26     	; 0x35d8 <main+0x1bc>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    35be:	f7 01       	movw	r30, r14
    35c0:	85 82       	std	Z+5, r8	; 0x05
    35c2:	ff e7       	ldi	r31, 0x7F	; 127
    35c4:	2a e1       	ldi	r18, 0x1A	; 26
    35c6:	86 e0       	ldi	r24, 0x06	; 6
    35c8:	f1 50       	subi	r31, 0x01	; 1
    35ca:	20 40       	sbci	r18, 0x00	; 0
    35cc:	80 40       	sbci	r24, 0x00	; 0
    35ce:	e1 f7       	brne	.-8      	; 0x35c8 <main+0x1ac>
    35d0:	00 c0       	rjmp	.+0      	; 0x35d2 <main+0x1b6>
    35d2:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    35d4:	f7 01       	movw	r30, r14
    35d6:	86 82       	std	Z+6, r8	; 0x06
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 1));
					break;
				default:
				break;
			}
			latest_gesture = NONE;
    35d8:	10 92 27 21 	sts	0x2127, r1
			//twinkle(0, 0, 0);
		}
		
	
		if (ischarging()) 
    35dc:	42 da       	rcall	.-2940   	; 0x2a62 <ischarging>
    35de:	88 23       	and	r24, r24
    35e0:	f1 f0       	breq	.+60     	; 0x361e <main+0x202>
		{
			if (core_status != STATUS_CHARGE)
    35e2:	80 91 43 21 	lds	r24, 0x2143
    35e6:	81 30       	cpi	r24, 0x01	; 1
    35e8:	09 f4       	brne	.+2      	; 0x35ec <main+0x1d0>
    35ea:	c7 c0       	rjmp	.+398    	; 0x377a <main+0x35e>
			{
				twinkle(0, 0, 255);
    35ec:	4f ef       	ldi	r20, 0xFF	; 255
    35ee:	60 e0       	ldi	r22, 0x00	; 0
    35f0:	80 e0       	ldi	r24, 0x00	; 0
    35f2:	3c da       	rcall	.-2952   	; 0x2a6c <twinkle>
				shutdown_received = false;
    35f4:	10 92 33 21 	sts	0x2133, r1
				old_core_status = core_status;
    35f8:	80 91 43 21 	lds	r24, 0x2143
    35fc:	80 93 42 21 	sts	0x2142, r24
				core_status = STATUS_CHARGE;
    3600:	c0 93 43 21 	sts	0x2143, r28
				change_adc_channel(core_status);
    3604:	80 91 43 21 	lds	r24, 0x2143
    3608:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
				flag_initcharge = true;
    360c:	c0 93 39 21 	sts	0x2139, r28
				tc45_disable(&TCC4);
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	98 e0       	ldi	r25, 0x08	; 8
    3614:	1d d5       	rcall	.+2618   	; 0x4050 <tc45_disable>
				tc45_enable(&TCC5);
    3616:	80 e4       	ldi	r24, 0x40	; 64
    3618:	98 e0       	ldi	r25, 0x08	; 8
    361a:	e8 d4       	rcall	.+2512   	; 0x3fec <tc45_enable>
    361c:	ae c0       	rjmp	.+348    	; 0x377a <main+0x35e>
			}
		}
		else 	
		{
			if (core_status == STATUS_CHARGE) {
    361e:	80 91 43 21 	lds	r24, 0x2143
    3622:	81 30       	cpi	r24, 0x01	; 1
    3624:	89 f4       	brne	.+34     	; 0x3648 <main+0x22c>
				old_core_status = core_status;
    3626:	80 91 43 21 	lds	r24, 0x2143
    362a:	80 93 42 21 	sts	0x2142, r24
				core_status = STATUS_BATT_READ;
    362e:	90 92 43 21 	sts	0x2143, r9
				change_adc_channel(core_status);
    3632:	80 91 43 21 	lds	r24, 0x2143
    3636:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
				tc45_disable(&TCC5);
    363a:	80 e4       	ldi	r24, 0x40	; 64
    363c:	98 e0       	ldi	r25, 0x08	; 8
    363e:	08 d5       	rcall	.+2576   	; 0x4050 <tc45_disable>
				tc45_enable(&TCC4);
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	98 e0       	ldi	r25, 0x08	; 8
    3644:	d3 d4       	rcall	.+2470   	; 0x3fec <tc45_enable>
				load_data_color_led();
    3646:	56 da       	rcall	.-2900   	; 0x2af4 <load_data_color_led>
			}
			
			if (get_pulse_state() && core_status != STATUS_FFT_L && core_status != STATUS_FFT_R) {
    3648:	0e 94 be 12 	call	0x257c	; 0x257c <get_pulse_state>
    364c:	88 23       	and	r24, r24
    364e:	51 f0       	breq	.+20     	; 0x3664 <main+0x248>
    3650:	80 91 43 21 	lds	r24, 0x2143
    3654:	82 30       	cpi	r24, 0x02	; 2
    3656:	31 f0       	breq	.+12     	; 0x3664 <main+0x248>
    3658:	80 91 43 21 	lds	r24, 0x2143
    365c:	84 30       	cpi	r24, 0x04	; 4
    365e:	11 f0       	breq	.+4      	; 0x3664 <main+0x248>
				trigger_pulse_state_changed();
    3660:	0e 94 c6 12 	call	0x258c	; 0x258c <trigger_pulse_state_changed>
			}
			
			if (shutdown_received) {
    3664:	80 91 33 21 	lds	r24, 0x2133
    3668:	88 23       	and	r24, r24
    366a:	79 f0       	breq	.+30     	; 0x368a <main+0x26e>
				old_core_status = core_status;
    366c:	80 91 43 21 	lds	r24, 0x2143
    3670:	80 93 42 21 	sts	0x2142, r24
				core_status = STATUS_NULL;
    3674:	10 92 43 21 	sts	0x2143, r1
				tc45_disable(&TCC4);
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	98 e0       	ldi	r25, 0x08	; 8
    367c:	e9 d4       	rcall	.+2514   	; 0x4050 <tc45_disable>
				save_led_to_eeprom();
    367e:	7f dd       	rcall	.-1282   	; 0x317e <save_led_to_eeprom>
				twinkle(0, 0, 0);
    3680:	40 e0       	ldi	r20, 0x00	; 0
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	80 e0       	ldi	r24, 0x00	; 0
    3686:	f2 d9       	rcall	.-3100   	; 0x2a6c <twinkle>
    3688:	78 c0       	rjmp	.+240    	; 0x377a <main+0x35e>
			}
			else if (get_and_clear_pulse_state_changed()) {
    368a:	0e 94 c1 12 	call	0x2582	; 0x2582 <get_and_clear_pulse_state_changed>
    368e:	88 23       	and	r24, r24
    3690:	59 f1       	breq	.+86     	; 0x36e8 <main+0x2cc>
				if (get_pulse_state()) {
    3692:	0e 94 be 12 	call	0x257c	; 0x257c <get_pulse_state>
    3696:	88 23       	and	r24, r24
    3698:	a1 f0       	breq	.+40     	; 0x36c2 <main+0x2a6>
					// If new message is to turn on visualization and if it is already on then ignore it
					
					// Initialize the ADC by changing to correct channel
					fht_flag = true;
    369a:	c0 93 46 21 	sts	0x2146, r28
					
					old_core_status = core_status;
    369e:	80 91 43 21 	lds	r24, 0x2143
    36a2:	80 93 42 21 	sts	0x2142, r24
					core_status = STATUS_FFT_L;
    36a6:	50 92 43 21 	sts	0x2143, r5
					change_adc_channel(core_status);
    36aa:	80 91 43 21 	lds	r24, 0x2143
    36ae:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
					// Switch on visualization interrupt
					tc45_enable(&TCC4);
    36b2:	80 e0       	ldi	r24, 0x00	; 0
    36b4:	98 e0       	ldi	r25, 0x08	; 8
    36b6:	9a d4       	rcall	.+2356   	; 0x3fec <tc45_enable>
					// save state to CSR- the fact that visualization is on
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x01);
    36b8:	6c 2f       	mov	r22, r28
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <write_byte_eeprom>
    36c0:	5c c0       	rjmp	.+184    	; 0x377a <main+0x35e>
					// respond to CSR
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
    36c2:	10 92 46 21 	sts	0x2146, r1
					old_core_status = core_status;
    36c6:	80 91 43 21 	lds	r24, 0x2143
    36ca:	80 93 42 21 	sts	0x2142, r24
					core_status = STATUS_BATT_READ;
    36ce:	90 92 43 21 	sts	0x2143, r9
					change_adc_channel(core_status);
    36d2:	80 91 43 21 	lds	r24, 0x2143
    36d6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
					clear_led();
    36da:	f7 d9       	rcall	.-3090   	; 0x2aca <clear_led>
					// save the state to eeprom (Clear visualization was on)
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x00);
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <write_byte_eeprom>
					// Update LED from led_color_buf_data to last saved state
					load_data_color_led();
    36e4:	07 da       	rcall	.-3058   	; 0x2af4 <load_data_color_led>
    36e6:	49 c0       	rjmp	.+146    	; 0x377a <main+0x35e>
					//send_response(new_message_ID, 0x01);
				}
			}
			else {
				// if the fht led function was turned on
				if (fht_flag == true)
    36e8:	80 91 46 21 	lds	r24, 0x2146
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <main+0x2d6>
    36f0:	44 c0       	rjmp	.+136    	; 0x377a <main+0x35e>
				{
					if (flag_fft == true)
    36f2:	80 91 02 21 	lds	r24, 0x2102
    36f6:	88 23       	and	r24, r24
    36f8:	09 f4       	brne	.+2      	; 0x36fc <main+0x2e0>
    36fa:	3f c0       	rjmp	.+126    	; 0x377a <main+0x35e>
					{
						
						if (core_status == STATUS_FFT_L)
    36fc:	80 91 43 21 	lds	r24, 0x2143
    3700:	82 30       	cpi	r24, 0x02	; 2
    3702:	81 f4       	brne	.+32     	; 0x3724 <main+0x308>
						{
							//	usart_putchar(M_USART, 0x55);

							run();
    3704:	0e 94 a7 08 	call	0x114e	; 0x114e <run>
							old_core_status = core_status;
    3708:	80 91 43 21 	lds	r24, 0x2143
    370c:	80 93 42 21 	sts	0x2142, r24
							core_status = STATUS_FFT_R;
    3710:	60 92 43 21 	sts	0x2143, r6
							change_adc_channel(core_status);
    3714:	80 91 43 21 	lds	r24, 0x2143
    3718:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
							tc45_enable(&TCC4);
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	98 e0       	ldi	r25, 0x08	; 8
    3720:	65 d4       	rcall	.+2250   	; 0x3fec <tc45_enable>
    3722:	29 c0       	rjmp	.+82     	; 0x3776 <main+0x35a>
						}
						else if (core_status == STATUS_FFT_R)
    3724:	80 91 43 21 	lds	r24, 0x2143
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	29 f5       	brne	.+74     	; 0x3776 <main+0x35a>
						{
							//	usart_putchar(M_USART, 0x66);

							run();
    372c:	0e 94 a7 08 	call	0x114e	; 0x114e <run>
							
							if (ischarging())
    3730:	98 d9       	rcall	.-3280   	; 0x2a62 <ischarging>
    3732:	88 23       	and	r24, r24
    3734:	99 f0       	breq	.+38     	; 0x375c <main+0x340>
							{
								old_core_status = core_status;
    3736:	80 91 43 21 	lds	r24, 0x2143
    373a:	80 93 42 21 	sts	0x2142, r24
								core_status = STATUS_CHARGE;
    373e:	c0 93 43 21 	sts	0x2143, r28
								change_adc_channel(core_status);
    3742:	80 91 43 21 	lds	r24, 0x2143
    3746:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
								flag_initcharge = true;
    374a:	c0 93 39 21 	sts	0x2139, r28
								tc45_disable(&TCC4);
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	98 e0       	ldi	r25, 0x08	; 8
    3752:	7e d4       	rcall	.+2300   	; 0x4050 <tc45_disable>
								tc45_enable(&TCC5);
    3754:	80 e4       	ldi	r24, 0x40	; 64
    3756:	98 e0       	ldi	r25, 0x08	; 8
    3758:	49 d4       	rcall	.+2194   	; 0x3fec <tc45_enable>
    375a:	0d c0       	rjmp	.+26     	; 0x3776 <main+0x35a>
							}
							else
							{
								old_core_status = core_status;
    375c:	80 91 43 21 	lds	r24, 0x2143
    3760:	80 93 42 21 	sts	0x2142, r24
								core_status = STATUS_FFT_L;
    3764:	50 92 43 21 	sts	0x2143, r5
								change_adc_channel(core_status);
    3768:	80 91 43 21 	lds	r24, 0x2143
    376c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <change_adc_channel>
								tc45_enable(&TCC4);
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	98 e0       	ldi	r25, 0x08	; 8
    3774:	3b d4       	rcall	.+2166   	; 0x3fec <tc45_enable>
							}
							
						}
						
						flag_fft = false;
    3776:	10 92 02 21 	sts	0x2102, r1
				}
			}
		}

	#ifdef ENABLE_WDT
		if (flag_timerd5) {
    377a:	80 91 7e 2a 	lds	r24, 0x2A7E
    377e:	88 23       	and	r24, r24
    3780:	09 f4       	brne	.+2      	; 0x3784 <main+0x368>
    3782:	b5 ce       	rjmp	.-662    	; 0x34ee <main+0xd2>
			flag_timerd5 = false;
    3784:	10 92 7e 2a 	sts	0x2A7E, r1
			wdt_reset(); 
    3788:	a8 95       	wdr
    378a:	a7 ce       	rjmp	.-690    	; 0x34da <main+0xbe>

0000378c <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    378c:	8f ef       	ldi	r24, 0xFF	; 255
    378e:	80 93 70 00 	sts	0x0070, r24
    3792:	80 93 71 00 	sts	0x0071, r24
    3796:	80 93 72 00 	sts	0x0072, r24
    379a:	80 93 73 00 	sts	0x0073, r24
    379e:	80 93 74 00 	sts	0x0074, r24
    37a2:	80 93 75 00 	sts	0x0075, r24
    37a6:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37aa:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    37ac:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    37ae:	e0 e5       	ldi	r30, 0x50	; 80
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	80 81       	ld	r24, Z
    37b4:	82 60       	ori	r24, 0x02	; 2
    37b6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37b8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    37ba:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    37bc:	81 ff       	sbrs	r24, 1
    37be:	fd cf       	rjmp	.-6      	; 0x37ba <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    37c0:	61 e0       	ldi	r22, 0x01	; 1
    37c2:	80 e4       	ldi	r24, 0x40	; 64
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	7a d1       	rcall	.+756    	; 0x3abc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37c8:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    37ca:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    37cc:	e0 e5       	ldi	r30, 0x50	; 80
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	8e 7f       	andi	r24, 0xFE	; 254
    37d4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37d6:	9f bf       	out	0x3f, r25	; 63
    37d8:	08 95       	ret

000037da <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37da:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    37dc:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    37de:	e8 2f       	mov	r30, r24
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	e0 59       	subi	r30, 0x90	; 144
    37e4:	ff 4f       	sbci	r31, 0xFF	; 255
    37e6:	60 95       	com	r22
    37e8:	80 81       	ld	r24, Z
    37ea:	68 23       	and	r22, r24
    37ec:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37ee:	9f bf       	out	0x3f, r25	; 63
    37f0:	08 95       	ret

000037f2 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37f2:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    37f4:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    37f6:	e8 2f       	mov	r30, r24
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	e0 59       	subi	r30, 0x90	; 144
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	68 2b       	or	r22, r24
    3802:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3804:	9f bf       	out	0x3f, r25	; 63
    3806:	08 95       	ret

00003808 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	fc 01       	movw	r30, r24
    380e:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    3814:	c6 2f       	mov	r28, r22
    3816:	d0 e0       	ldi	r29, 0x00	; 0
    3818:	de 01       	movw	r26, r28
    381a:	02 2e       	mov	r0, r18
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <ioport_configure_port_pin+0x1a>
    381e:	b5 95       	asr	r27
    3820:	a7 95       	ror	r26
    3822:	0a 94       	dec	r0
    3824:	e2 f7       	brpl	.-8      	; 0x381e <ioport_configure_port_pin+0x16>
    3826:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    3828:	50 83       	st	Z, r21
    382a:	2f 5f       	subi	r18, 0xFF	; 255
    382c:	3f 4f       	sbci	r19, 0xFF	; 255
    382e:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    3830:	28 30       	cpi	r18, 0x08	; 8
    3832:	31 05       	cpc	r19, r1
    3834:	89 f7       	brne	.-30     	; 0x3818 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    3836:	40 ff       	sbrs	r20, 0
    3838:	0a c0       	rjmp	.+20     	; 0x384e <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    383a:	41 ff       	sbrs	r20, 1
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    383e:	fc 01       	movw	r30, r24
    3840:	65 83       	std	Z+5, r22	; 0x05
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    3844:	fc 01       	movw	r30, r24
    3846:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    3848:	fc 01       	movw	r30, r24
    384a:	61 83       	std	Z+1, r22	; 0x01
    384c:	02 c0       	rjmp	.+4      	; 0x3852 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    384e:	fc 01       	movw	r30, r24
    3850:	62 83       	std	Z+2, r22	; 0x02
	}
}
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	08 95       	ret

00003858 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    3858:	9c 01       	movw	r18, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    385a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    385c:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    385e:	21 15       	cp	r18, r1
    3860:	32 40       	sbci	r19, 0x02	; 2
    3862:	21 f4       	brne	.+8      	; 0x386c <adc_set_callback+0x14>
		adca_callback = callback;
    3864:	60 93 af 2a 	sts	0x2AAF, r22
    3868:	70 93 b0 2a 	sts	0x2AB0, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    386c:	9f bf       	out	0x3f, r25	; 63
    386e:	08 95       	ret

00003870 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3870:	81 15       	cp	r24, r1
    3872:	92 40       	sbci	r25, 0x02	; 2
    3874:	59 f4       	brne	.+22     	; 0x388c <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    3876:	80 91 47 21 	lds	r24, 0x2147
    387a:	91 e0       	ldi	r25, 0x01	; 1
    387c:	98 0f       	add	r25, r24
    387e:	90 93 47 21 	sts	0x2147, r25
    3882:	81 11       	cpse	r24, r1
    3884:	03 c0       	rjmp	.+6      	; 0x388c <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3886:	62 e0       	ldi	r22, 0x02	; 2
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	a7 cf       	rjmp	.-178    	; 0x37da <sysclk_enable_module>
    388c:	08 95       	ret

0000388e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    388e:	81 15       	cp	r24, r1
    3890:	92 40       	sbci	r25, 0x02	; 2
    3892:	51 f4       	brne	.+20     	; 0x38a8 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    3894:	80 91 47 21 	lds	r24, 0x2147
    3898:	81 50       	subi	r24, 0x01	; 1
    389a:	80 93 47 21 	sts	0x2147, r24
    389e:	81 11       	cpse	r24, r1
    38a0:	03 c0       	rjmp	.+6      	; 0x38a8 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38a2:	62 e0       	ldi	r22, 0x02	; 2
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	a5 cf       	rjmp	.-182    	; 0x37f2 <sysclk_disable_module>
    38a8:	08 95       	ret

000038aa <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    38b2:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    38b4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    38b6:	dc df       	rcall	.-72     	; 0x3870 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    38b8:	88 81       	ld	r24, Y
    38ba:	81 60       	ori	r24, 0x01	; 1
    38bc:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38be:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    38c0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    38c2:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    38c4:	e9 ea       	ldi	r30, 0xA9	; 169
    38c6:	fa e2       	ldi	r31, 0x2A	; 42
    38c8:	81 81       	ldd	r24, Z+1	; 0x01
    38ca:	8f 5f       	subi	r24, 0xFF	; 255
    38cc:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38ce:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	1f 91       	pop	r17
    38d6:	08 95       	ret

000038d8 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    38d8:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    38da:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    38dc:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    38de:	fc 01       	movw	r30, r24
    38e0:	20 81       	ld	r18, Z
    38e2:	2e 7f       	andi	r18, 0xFE	; 254
    38e4:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    38e6:	d3 df       	rcall	.-90     	; 0x388e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38e8:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    38ea:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    38ec:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    38ee:	e9 ea       	ldi	r30, 0xA9	; 169
    38f0:	fa e2       	ldi	r31, 0x2A	; 42
    38f2:	81 81       	ldd	r24, Z+1	; 0x01
    38f4:	81 50       	subi	r24, 0x01	; 1
    38f6:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    38f8:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    38fa:	cf 91       	pop	r28
    38fc:	08 95       	ret

000038fe <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    38fe:	1f 92       	push	r1
    3900:	0f 92       	push	r0
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	0f 92       	push	r0
    3906:	11 24       	eor	r1, r1
    3908:	2f 93       	push	r18
    390a:	3f 93       	push	r19
    390c:	4f 93       	push	r20
    390e:	5f 93       	push	r21
    3910:	6f 93       	push	r22
    3912:	7f 93       	push	r23
    3914:	8f 93       	push	r24
    3916:	9f 93       	push	r25
    3918:	af 93       	push	r26
    391a:	bf 93       	push	r27
    391c:	ef 93       	push	r30
    391e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    3920:	40 91 24 02 	lds	r20, 0x0224
    3924:	50 91 25 02 	lds	r21, 0x0225
    3928:	e0 91 af 2a 	lds	r30, 0x2AAF
    392c:	f0 91 b0 2a 	lds	r31, 0x2AB0
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	92 e0       	ldi	r25, 0x02	; 2
    3936:	09 95       	icall
}
    3938:	ff 91       	pop	r31
    393a:	ef 91       	pop	r30
    393c:	bf 91       	pop	r27
    393e:	af 91       	pop	r26
    3940:	9f 91       	pop	r25
    3942:	8f 91       	pop	r24
    3944:	7f 91       	pop	r23
    3946:	6f 91       	pop	r22
    3948:	5f 91       	pop	r21
    394a:	4f 91       	pop	r20
    394c:	3f 91       	pop	r19
    394e:	2f 91       	pop	r18
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    395a:	df 92       	push	r13
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	cf 93       	push	r28
    3966:	df 93       	push	r29
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3968:	81 15       	cp	r24, r1
    396a:	22 e0       	ldi	r18, 0x02	; 2
    396c:	92 07       	cpc	r25, r18
    396e:	61 f5       	brne	.+88     	; 0x39c8 <adc_write_configuration+0x6e>
    3970:	8b 01       	movw	r16, r22
    3972:	ec 01       	movw	r28, r24
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3974:	61 e2       	ldi	r22, 0x21	; 33
    3976:	70 e0       	ldi	r23, 0x00	; 0
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	f0 d0       	rcall	.+480    	; 0x3b5c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    397c:	e8 2e       	mov	r14, r24
    397e:	f1 2c       	mov	r15, r1
    3980:	60 e2       	ldi	r22, 0x20	; 32
    3982:	70 e0       	ldi	r23, 0x00	; 0
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	ea d0       	rcall	.+468    	; 0x3b5c <nvm_read_byte>
		data <<= 8;
    3988:	fe 2c       	mov	r15, r14
    398a:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    398c:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    398e:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    3990:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3992:	ce 01       	movw	r24, r28
    3994:	6d df       	rcall	.-294    	; 0x3870 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3996:	88 81       	ld	r24, Y
    3998:	81 70       	andi	r24, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    399a:	92 e0       	ldi	r25, 0x02	; 2
    399c:	98 83       	st	Y, r25
	adc->CAL = cal;
    399e:	ec 86       	std	Y+12, r14	; 0x0c
    39a0:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    39a2:	f8 01       	movw	r30, r16
    39a4:	24 81       	ldd	r18, Z+4	; 0x04
    39a6:	35 81       	ldd	r19, Z+5	; 0x05
    39a8:	28 8f       	std	Y+24, r18	; 0x18
    39aa:	39 8f       	std	Y+25, r19	; 0x19
	adc->REFCTRL = conf->refctrl;
    39ac:	91 81       	ldd	r25, Z+1	; 0x01
    39ae:	9a 83       	std	Y+2, r25	; 0x02
	adc->PRESCALER = conf->prescaler;
    39b0:	93 81       	ldd	r25, Z+3	; 0x03
    39b2:	9c 83       	std	Y+4, r25	; 0x04
	adc->EVCTRL = conf->evctrl;
    39b4:	92 81       	ldd	r25, Z+2	; 0x02
    39b6:	9b 83       	std	Y+3, r25	; 0x03
	adc->CTRLB = conf->ctrlb;
    39b8:	90 81       	ld	r25, Z
    39ba:	99 83       	std	Y+1, r25	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    39bc:	96 81       	ldd	r25, Z+6	; 0x06
    39be:	98 87       	std	Y+8, r25	; 0x08

	adc->CTRLA = enable;
    39c0:	88 83       	st	Y, r24

	adc_disable_clock(adc);
    39c2:	ce 01       	movw	r24, r28
    39c4:	64 df       	rcall	.-312    	; 0x388e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39c6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	ff 90       	pop	r15
    39d2:	ef 90       	pop	r14
    39d4:	df 90       	pop	r13
    39d6:	08 95       	ret

000039d8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    39d8:	ff 92       	push	r15
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	ec 01       	movw	r28, r24
    39e4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    39e6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    39e8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    39ea:	42 df       	rcall	.-380    	; 0x3870 <adc_enable_clock>

	conf->cmp = adc->CMP;
    39ec:	88 8d       	ldd	r24, Y+24	; 0x18
    39ee:	99 8d       	ldd	r25, Y+25	; 0x19
    39f0:	f8 01       	movw	r30, r16
    39f2:	84 83       	std	Z+4, r24	; 0x04
    39f4:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    39fa:	8c 81       	ldd	r24, Y+4	; 0x04
    39fc:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    39fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3a00:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    3a06:	88 85       	ldd	r24, Y+8	; 0x08
    3a08:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    3a0a:	ce 01       	movw	r24, r28
    3a0c:	40 df       	rcall	.-384    	; 0x388e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a0e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3a10:	df 91       	pop	r29
    3a12:	cf 91       	pop	r28
    3a14:	1f 91       	pop	r17
    3a16:	0f 91       	pop	r16
    3a18:	ff 90       	pop	r15
    3a1a:	08 95       	ret

00003a1c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	ec 01       	movw	r28, r24
    3a28:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a2a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3a2c:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3a2e:	20 df       	rcall	.-448    	; 0x3870 <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    3a30:	f8 01       	movw	r30, r16
    3a32:	80 81       	ld	r24, Z
    3a34:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3a3a:	81 81       	ldd	r24, Z+1	; 0x01
    3a3c:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    3a3e:	83 81       	ldd	r24, Z+3	; 0x03
    3a40:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    3a42:	84 81       	ldd	r24, Z+4	; 0x04
    3a44:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    3a46:	85 81       	ldd	r24, Z+5	; 0x05
    3a48:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    3a4a:	86 81       	ldd	r24, Z+6	; 0x06
    3a4c:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    3a4e:	87 81       	ldd	r24, Z+7	; 0x07
    3a50:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    3a52:	80 85       	ldd	r24, Z+8	; 0x08
    3a54:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    3a56:	81 85       	ldd	r24, Z+9	; 0x09
    3a58:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    3a5a:	ce 01       	movw	r24, r28
    3a5c:	18 df       	rcall	.-464    	; 0x388e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a5e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	ff 90       	pop	r15
    3a6a:	08 95       	ret

00003a6c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3a6c:	ff 92       	push	r15
    3a6e:	0f 93       	push	r16
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	ec 01       	movw	r28, r24
    3a78:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a7a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3a7c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3a7e:	f8 de       	rcall	.-528    	; 0x3870 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3a80:	88 a1       	ldd	r24, Y+32	; 0x20
    3a82:	f8 01       	movw	r30, r16
    3a84:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3a86:	8a a1       	ldd	r24, Y+34	; 0x22
    3a88:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a8c:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    3a8e:	8e a1       	ldd	r24, Y+38	; 0x26
    3a90:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    3a92:	8f a1       	ldd	r24, Y+39	; 0x27
    3a94:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    3a96:	88 a5       	ldd	r24, Y+40	; 0x28
    3a98:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    3a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a9c:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    3a9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3aa0:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    3aa2:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aa4:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    3aa6:	8c a5       	ldd	r24, Y+44	; 0x2c
    3aa8:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    3aaa:	ce 01       	movw	r24, r28
    3aac:	f0 de       	rcall	.-544    	; 0x388e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3aae:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	ff 90       	pop	r15
    3aba:	08 95       	ret

00003abc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    3abc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    3abe:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    3ac0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    3ac2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    3ac4:	60 83       	st	Z, r22
	ret                             // Return to caller
    3ac6:	08 95       	ret

00003ac8 <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    3ac8:	9c 01       	movw	r18, r24
    3aca:	e0 ec       	ldi	r30, 0xC0	; 192
    3acc:	f1 e0       	ldi	r31, 0x01	; 1
    3ace:	97 85       	ldd	r25, Z+15	; 0x0f
    3ad0:	99 23       	and	r25, r25
    3ad2:	ec f3       	brlt	.-6      	; 0x3ace <nvm_eeprom_read_byte+0x6>
    3ad4:	f9 01       	movw	r30, r18
    3ad6:	f0 5f       	subi	r31, 0xF0	; 240
    3ad8:	80 81       	ld	r24, Z
    3ada:	08 95       	ret

00003adc <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3adc:	e0 ec       	ldi	r30, 0xC0	; 192
    3ade:	f1 e0       	ldi	r31, 0x01	; 1
    3ae0:	87 85       	ldd	r24, Z+15	; 0x0f
    3ae2:	88 23       	and	r24, r24
    3ae4:	ec f3       	brlt	.-6      	; 0x3ae0 <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3ae6:	80 91 cf 01 	lds	r24, 0x01CF
    3aea:	81 ff       	sbrs	r24, 1
    3aec:	07 c0       	rjmp	.+14     	; 0x3afc <nvm_eeprom_flush_buffer+0x20>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3aee:	86 e3       	ldi	r24, 0x36	; 54
    3af0:	80 93 ca 01 	sts	0x01CA, r24
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3af4:	61 e0       	ldi	r22, 0x01	; 1
    3af6:	8b ec       	ldi	r24, 0xCB	; 203
    3af8:	91 e0       	ldi	r25, 0x01	; 1
    3afa:	e0 cf       	rjmp	.-64     	; 0x3abc <ccp_write_io>
    3afc:	08 95       	ret

00003afe <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3afe:	e0 ec       	ldi	r30, 0xC0	; 192
    3b00:	f1 e0       	ldi	r31, 0x01	; 1
    3b02:	97 85       	ldd	r25, Z+15	; 0x0f
    3b04:	99 23       	and	r25, r25
    3b06:	ec f3       	brlt	.-6      	; 0x3b02 <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    3b08:	e8 2f       	mov	r30, r24
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	f0 5f       	subi	r31, 0xF0	; 240
    3b0e:	60 83       	st	Z, r22
    3b10:	08 95       	ret

00003b12 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	18 2f       	mov	r17, r24
    3b1e:	f9 2e       	mov	r15, r25
    3b20:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    3b22:	00 91 ca 01 	lds	r16, 0x01CA
	nvm_eeprom_flush_buffer();
    3b26:	da df       	rcall	.-76     	; 0x3adc <nvm_eeprom_flush_buffer>
    3b28:	e0 ec       	ldi	r30, 0xC0	; 192
    3b2a:	f1 e0       	ldi	r31, 0x01	; 1
    3b2c:	27 85       	ldd	r18, Z+15	; 0x0f
    3b2e:	22 23       	and	r18, r18
    3b30:	ec f3       	brlt	.-6      	; 0x3b2c <nvm_eeprom_write_byte+0x1a>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    3b32:	6c 2f       	mov	r22, r28
    3b34:	81 2f       	mov	r24, r17
    3b36:	e3 df       	rcall	.-58     	; 0x3afe <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    3b38:	c0 ec       	ldi	r28, 0xC0	; 192
    3b3a:	d1 e0       	ldi	r29, 0x01	; 1
    3b3c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    3b3e:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    3b40:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3b42:	85 e3       	ldi	r24, 0x35	; 53
    3b44:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3b46:	61 e0       	ldi	r22, 0x01	; 1
    3b48:	8b ec       	ldi	r24, 0xCB	; 203
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	b7 df       	rcall	.-146    	; 0x3abc <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    3b4e:	0a 87       	std	Y+10, r16	; 0x0a
}
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	1f 91       	pop	r17
    3b56:	0f 91       	pop	r16
    3b58:	ff 90       	pop	r15
    3b5a:	08 95       	ret

00003b5c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    3b5c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3b60:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3b62:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3b64:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3b68:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    3b6a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    3b6e:	08 95       	ret

00003b70 <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    3b70:	1f 92       	push	r1
    3b72:	0f 92       	push	r0
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	0f 92       	push	r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	2f 93       	push	r18
    3b7c:	3f 93       	push	r19
    3b7e:	4f 93       	push	r20
    3b80:	5f 93       	push	r21
    3b82:	6f 93       	push	r22
    3b84:	7f 93       	push	r23
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    3b8e:	ef 93       	push	r30
    3b90:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    3b92:	e0 91 62 21 	lds	r30, 0x2162
    3b96:	f0 91 63 21 	lds	r31, 0x2163
    3b9a:	30 97       	sbiw	r30, 0x00	; 0
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    3b9e:	09 95       	icall
	}
}
    3ba0:	ff 91       	pop	r31
    3ba2:	ef 91       	pop	r30
    3ba4:	bf 91       	pop	r27
    3ba6:	af 91       	pop	r26
    3ba8:	9f 91       	pop	r25
    3baa:	8f 91       	pop	r24
    3bac:	7f 91       	pop	r23
    3bae:	6f 91       	pop	r22
    3bb0:	5f 91       	pop	r21
    3bb2:	4f 91       	pop	r20
    3bb4:	3f 91       	pop	r19
    3bb6:	2f 91       	pop	r18
    3bb8:	0f 90       	pop	r0
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	0f 90       	pop	r0
    3bbe:	1f 90       	pop	r1
    3bc0:	18 95       	reti

00003bc2 <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    3bc2:	1f 92       	push	r1
    3bc4:	0f 92       	push	r0
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	0f 92       	push	r0
    3bca:	11 24       	eor	r1, r1
    3bcc:	2f 93       	push	r18
    3bce:	3f 93       	push	r19
    3bd0:	4f 93       	push	r20
    3bd2:	5f 93       	push	r21
    3bd4:	6f 93       	push	r22
    3bd6:	7f 93       	push	r23
    3bd8:	8f 93       	push	r24
    3bda:	9f 93       	push	r25
    3bdc:	af 93       	push	r26
    3bde:	bf 93       	push	r27
    3be0:	ef 93       	push	r30
    3be2:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    3be4:	e0 91 60 21 	lds	r30, 0x2160
    3be8:	f0 91 61 21 	lds	r31, 0x2161
    3bec:	30 97       	sbiw	r30, 0x00	; 0
    3bee:	09 f0       	breq	.+2      	; 0x3bf2 <__vector_13+0x30>
		tc45_tcc4_err_callback();
    3bf0:	09 95       	icall
	}
}
    3bf2:	ff 91       	pop	r31
    3bf4:	ef 91       	pop	r30
    3bf6:	bf 91       	pop	r27
    3bf8:	af 91       	pop	r26
    3bfa:	9f 91       	pop	r25
    3bfc:	8f 91       	pop	r24
    3bfe:	7f 91       	pop	r23
    3c00:	6f 91       	pop	r22
    3c02:	5f 91       	pop	r21
    3c04:	4f 91       	pop	r20
    3c06:	3f 91       	pop	r19
    3c08:	2f 91       	pop	r18
    3c0a:	0f 90       	pop	r0
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	0f 90       	pop	r0
    3c10:	1f 90       	pop	r1
    3c12:	18 95       	reti

00003c14 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    3c14:	1f 92       	push	r1
    3c16:	0f 92       	push	r0
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	0f 92       	push	r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	2f 93       	push	r18
    3c20:	3f 93       	push	r19
    3c22:	4f 93       	push	r20
    3c24:	5f 93       	push	r21
    3c26:	6f 93       	push	r22
    3c28:	7f 93       	push	r23
    3c2a:	8f 93       	push	r24
    3c2c:	9f 93       	push	r25
    3c2e:	af 93       	push	r26
    3c30:	bf 93       	push	r27
    3c32:	ef 93       	push	r30
    3c34:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    3c36:	e0 91 5e 21 	lds	r30, 0x215E
    3c3a:	f0 91 5f 21 	lds	r31, 0x215F
    3c3e:	30 97       	sbiw	r30, 0x00	; 0
    3c40:	09 f0       	breq	.+2      	; 0x3c44 <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    3c42:	09 95       	icall
	}
}
    3c44:	ff 91       	pop	r31
    3c46:	ef 91       	pop	r30
    3c48:	bf 91       	pop	r27
    3c4a:	af 91       	pop	r26
    3c4c:	9f 91       	pop	r25
    3c4e:	8f 91       	pop	r24
    3c50:	7f 91       	pop	r23
    3c52:	6f 91       	pop	r22
    3c54:	5f 91       	pop	r21
    3c56:	4f 91       	pop	r20
    3c58:	3f 91       	pop	r19
    3c5a:	2f 91       	pop	r18
    3c5c:	0f 90       	pop	r0
    3c5e:	0f be       	out	0x3f, r0	; 63
    3c60:	0f 90       	pop	r0
    3c62:	1f 90       	pop	r1
    3c64:	18 95       	reti

00003c66 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    3c66:	1f 92       	push	r1
    3c68:	0f 92       	push	r0
    3c6a:	0f b6       	in	r0, 0x3f	; 63
    3c6c:	0f 92       	push	r0
    3c6e:	11 24       	eor	r1, r1
    3c70:	2f 93       	push	r18
    3c72:	3f 93       	push	r19
    3c74:	4f 93       	push	r20
    3c76:	5f 93       	push	r21
    3c78:	6f 93       	push	r22
    3c7a:	7f 93       	push	r23
    3c7c:	8f 93       	push	r24
    3c7e:	9f 93       	push	r25
    3c80:	af 93       	push	r26
    3c82:	bf 93       	push	r27
    3c84:	ef 93       	push	r30
    3c86:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    3c88:	e0 91 5c 21 	lds	r30, 0x215C
    3c8c:	f0 91 5d 21 	lds	r31, 0x215D
    3c90:	30 97       	sbiw	r30, 0x00	; 0
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    3c94:	09 95       	icall
	}
}
    3c96:	ff 91       	pop	r31
    3c98:	ef 91       	pop	r30
    3c9a:	bf 91       	pop	r27
    3c9c:	af 91       	pop	r26
    3c9e:	9f 91       	pop	r25
    3ca0:	8f 91       	pop	r24
    3ca2:	7f 91       	pop	r23
    3ca4:	6f 91       	pop	r22
    3ca6:	5f 91       	pop	r21
    3ca8:	4f 91       	pop	r20
    3caa:	3f 91       	pop	r19
    3cac:	2f 91       	pop	r18
    3cae:	0f 90       	pop	r0
    3cb0:	0f be       	out	0x3f, r0	; 63
    3cb2:	0f 90       	pop	r0
    3cb4:	1f 90       	pop	r1
    3cb6:	18 95       	reti

00003cb8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    3cb8:	1f 92       	push	r1
    3cba:	0f 92       	push	r0
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	0f 92       	push	r0
    3cc0:	11 24       	eor	r1, r1
    3cc2:	2f 93       	push	r18
    3cc4:	3f 93       	push	r19
    3cc6:	4f 93       	push	r20
    3cc8:	5f 93       	push	r21
    3cca:	6f 93       	push	r22
    3ccc:	7f 93       	push	r23
    3cce:	8f 93       	push	r24
    3cd0:	9f 93       	push	r25
    3cd2:	af 93       	push	r26
    3cd4:	bf 93       	push	r27
    3cd6:	ef 93       	push	r30
    3cd8:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    3cda:	e0 91 5a 21 	lds	r30, 0x215A
    3cde:	f0 91 5b 21 	lds	r31, 0x215B
    3ce2:	30 97       	sbiw	r30, 0x00	; 0
    3ce4:	09 f0       	breq	.+2      	; 0x3ce8 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    3ce6:	09 95       	icall
	}
}
    3ce8:	ff 91       	pop	r31
    3cea:	ef 91       	pop	r30
    3cec:	bf 91       	pop	r27
    3cee:	af 91       	pop	r26
    3cf0:	9f 91       	pop	r25
    3cf2:	8f 91       	pop	r24
    3cf4:	7f 91       	pop	r23
    3cf6:	6f 91       	pop	r22
    3cf8:	5f 91       	pop	r21
    3cfa:	4f 91       	pop	r20
    3cfc:	3f 91       	pop	r19
    3cfe:	2f 91       	pop	r18
    3d00:	0f 90       	pop	r0
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	0f 90       	pop	r0
    3d06:	1f 90       	pop	r1
    3d08:	18 95       	reti

00003d0a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    3d0a:	1f 92       	push	r1
    3d0c:	0f 92       	push	r0
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	0f 92       	push	r0
    3d12:	11 24       	eor	r1, r1
    3d14:	2f 93       	push	r18
    3d16:	3f 93       	push	r19
    3d18:	4f 93       	push	r20
    3d1a:	5f 93       	push	r21
    3d1c:	6f 93       	push	r22
    3d1e:	7f 93       	push	r23
    3d20:	8f 93       	push	r24
    3d22:	9f 93       	push	r25
    3d24:	af 93       	push	r26
    3d26:	bf 93       	push	r27
    3d28:	ef 93       	push	r30
    3d2a:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    3d2c:	e0 91 58 21 	lds	r30, 0x2158
    3d30:	f0 91 59 21 	lds	r31, 0x2159
    3d34:	30 97       	sbiw	r30, 0x00	; 0
    3d36:	09 f0       	breq	.+2      	; 0x3d3a <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    3d38:	09 95       	icall
	}
}
    3d3a:	ff 91       	pop	r31
    3d3c:	ef 91       	pop	r30
    3d3e:	bf 91       	pop	r27
    3d40:	af 91       	pop	r26
    3d42:	9f 91       	pop	r25
    3d44:	8f 91       	pop	r24
    3d46:	7f 91       	pop	r23
    3d48:	6f 91       	pop	r22
    3d4a:	5f 91       	pop	r21
    3d4c:	4f 91       	pop	r20
    3d4e:	3f 91       	pop	r19
    3d50:	2f 91       	pop	r18
    3d52:	0f 90       	pop	r0
    3d54:	0f be       	out	0x3f, r0	; 63
    3d56:	0f 90       	pop	r0
    3d58:	1f 90       	pop	r1
    3d5a:	18 95       	reti

00003d5c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    3d5c:	1f 92       	push	r1
    3d5e:	0f 92       	push	r0
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	0f 92       	push	r0
    3d64:	11 24       	eor	r1, r1
    3d66:	2f 93       	push	r18
    3d68:	3f 93       	push	r19
    3d6a:	4f 93       	push	r20
    3d6c:	5f 93       	push	r21
    3d6e:	6f 93       	push	r22
    3d70:	7f 93       	push	r23
    3d72:	8f 93       	push	r24
    3d74:	9f 93       	push	r25
    3d76:	af 93       	push	r26
    3d78:	bf 93       	push	r27
    3d7a:	ef 93       	push	r30
    3d7c:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    3d7e:	e0 91 56 21 	lds	r30, 0x2156
    3d82:	f0 91 57 21 	lds	r31, 0x2157
    3d86:	30 97       	sbiw	r30, 0x00	; 0
    3d88:	09 f0       	breq	.+2      	; 0x3d8c <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    3d8a:	09 95       	icall
	}
}
    3d8c:	ff 91       	pop	r31
    3d8e:	ef 91       	pop	r30
    3d90:	bf 91       	pop	r27
    3d92:	af 91       	pop	r26
    3d94:	9f 91       	pop	r25
    3d96:	8f 91       	pop	r24
    3d98:	7f 91       	pop	r23
    3d9a:	6f 91       	pop	r22
    3d9c:	5f 91       	pop	r21
    3d9e:	4f 91       	pop	r20
    3da0:	3f 91       	pop	r19
    3da2:	2f 91       	pop	r18
    3da4:	0f 90       	pop	r0
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	0f 90       	pop	r0
    3daa:	1f 90       	pop	r1
    3dac:	18 95       	reti

00003dae <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    3dae:	1f 92       	push	r1
    3db0:	0f 92       	push	r0
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	0f 92       	push	r0
    3db6:	11 24       	eor	r1, r1
    3db8:	2f 93       	push	r18
    3dba:	3f 93       	push	r19
    3dbc:	4f 93       	push	r20
    3dbe:	5f 93       	push	r21
    3dc0:	6f 93       	push	r22
    3dc2:	7f 93       	push	r23
    3dc4:	8f 93       	push	r24
    3dc6:	9f 93       	push	r25
    3dc8:	af 93       	push	r26
    3dca:	bf 93       	push	r27
    3dcc:	ef 93       	push	r30
    3dce:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    3dd0:	e0 91 54 21 	lds	r30, 0x2154
    3dd4:	f0 91 55 21 	lds	r31, 0x2155
    3dd8:	30 97       	sbiw	r30, 0x00	; 0
    3dda:	09 f0       	breq	.+2      	; 0x3dde <__vector_19+0x30>
		tc45_tcc5_err_callback();
    3ddc:	09 95       	icall
	}
}
    3dde:	ff 91       	pop	r31
    3de0:	ef 91       	pop	r30
    3de2:	bf 91       	pop	r27
    3de4:	af 91       	pop	r26
    3de6:	9f 91       	pop	r25
    3de8:	8f 91       	pop	r24
    3dea:	7f 91       	pop	r23
    3dec:	6f 91       	pop	r22
    3dee:	5f 91       	pop	r21
    3df0:	4f 91       	pop	r20
    3df2:	3f 91       	pop	r19
    3df4:	2f 91       	pop	r18
    3df6:	0f 90       	pop	r0
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	0f 90       	pop	r0
    3dfc:	1f 90       	pop	r1
    3dfe:	18 95       	reti

00003e00 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    3e00:	1f 92       	push	r1
    3e02:	0f 92       	push	r0
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	0f 92       	push	r0
    3e08:	11 24       	eor	r1, r1
    3e0a:	2f 93       	push	r18
    3e0c:	3f 93       	push	r19
    3e0e:	4f 93       	push	r20
    3e10:	5f 93       	push	r21
    3e12:	6f 93       	push	r22
    3e14:	7f 93       	push	r23
    3e16:	8f 93       	push	r24
    3e18:	9f 93       	push	r25
    3e1a:	af 93       	push	r26
    3e1c:	bf 93       	push	r27
    3e1e:	ef 93       	push	r30
    3e20:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    3e22:	e0 91 52 21 	lds	r30, 0x2152
    3e26:	f0 91 53 21 	lds	r31, 0x2153
    3e2a:	30 97       	sbiw	r30, 0x00	; 0
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    3e2e:	09 95       	icall
	}
}
    3e30:	ff 91       	pop	r31
    3e32:	ef 91       	pop	r30
    3e34:	bf 91       	pop	r27
    3e36:	af 91       	pop	r26
    3e38:	9f 91       	pop	r25
    3e3a:	8f 91       	pop	r24
    3e3c:	7f 91       	pop	r23
    3e3e:	6f 91       	pop	r22
    3e40:	5f 91       	pop	r21
    3e42:	4f 91       	pop	r20
    3e44:	3f 91       	pop	r19
    3e46:	2f 91       	pop	r18
    3e48:	0f 90       	pop	r0
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	0f 90       	pop	r0
    3e4e:	1f 90       	pop	r1
    3e50:	18 95       	reti

00003e52 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    3e52:	1f 92       	push	r1
    3e54:	0f 92       	push	r0
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	0f 92       	push	r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	2f 93       	push	r18
    3e5e:	3f 93       	push	r19
    3e60:	4f 93       	push	r20
    3e62:	5f 93       	push	r21
    3e64:	6f 93       	push	r22
    3e66:	7f 93       	push	r23
    3e68:	8f 93       	push	r24
    3e6a:	9f 93       	push	r25
    3e6c:	af 93       	push	r26
    3e6e:	bf 93       	push	r27
    3e70:	ef 93       	push	r30
    3e72:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    3e74:	e0 91 50 21 	lds	r30, 0x2150
    3e78:	f0 91 51 21 	lds	r31, 0x2151
    3e7c:	30 97       	sbiw	r30, 0x00	; 0
    3e7e:	09 f0       	breq	.+2      	; 0x3e82 <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    3e80:	09 95       	icall
	}
}
    3e82:	ff 91       	pop	r31
    3e84:	ef 91       	pop	r30
    3e86:	bf 91       	pop	r27
    3e88:	af 91       	pop	r26
    3e8a:	9f 91       	pop	r25
    3e8c:	8f 91       	pop	r24
    3e8e:	7f 91       	pop	r23
    3e90:	6f 91       	pop	r22
    3e92:	5f 91       	pop	r21
    3e94:	4f 91       	pop	r20
    3e96:	3f 91       	pop	r19
    3e98:	2f 91       	pop	r18
    3e9a:	0f 90       	pop	r0
    3e9c:	0f be       	out	0x3f, r0	; 63
    3e9e:	0f 90       	pop	r0
    3ea0:	1f 90       	pop	r1
    3ea2:	18 95       	reti

00003ea4 <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    3ea4:	1f 92       	push	r1
    3ea6:	0f 92       	push	r0
    3ea8:	0f b6       	in	r0, 0x3f	; 63
    3eaa:	0f 92       	push	r0
    3eac:	11 24       	eor	r1, r1
    3eae:	2f 93       	push	r18
    3eb0:	3f 93       	push	r19
    3eb2:	4f 93       	push	r20
    3eb4:	5f 93       	push	r21
    3eb6:	6f 93       	push	r22
    3eb8:	7f 93       	push	r23
    3eba:	8f 93       	push	r24
    3ebc:	9f 93       	push	r25
    3ebe:	af 93       	push	r26
    3ec0:	bf 93       	push	r27
    3ec2:	ef 93       	push	r30
    3ec4:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    3ec6:	e0 91 4e 21 	lds	r30, 0x214E
    3eca:	f0 91 4f 21 	lds	r31, 0x214F
    3ece:	30 97       	sbiw	r30, 0x00	; 0
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    3ed2:	09 95       	icall
	}
}
    3ed4:	ff 91       	pop	r31
    3ed6:	ef 91       	pop	r30
    3ed8:	bf 91       	pop	r27
    3eda:	af 91       	pop	r26
    3edc:	9f 91       	pop	r25
    3ede:	8f 91       	pop	r24
    3ee0:	7f 91       	pop	r23
    3ee2:	6f 91       	pop	r22
    3ee4:	5f 91       	pop	r21
    3ee6:	4f 91       	pop	r20
    3ee8:	3f 91       	pop	r19
    3eea:	2f 91       	pop	r18
    3eec:	0f 90       	pop	r0
    3eee:	0f be       	out	0x3f, r0	; 63
    3ef0:	0f 90       	pop	r0
    3ef2:	1f 90       	pop	r1
    3ef4:	18 95       	reti

00003ef6 <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    3ef6:	1f 92       	push	r1
    3ef8:	0f 92       	push	r0
    3efa:	0f b6       	in	r0, 0x3f	; 63
    3efc:	0f 92       	push	r0
    3efe:	11 24       	eor	r1, r1
    3f00:	2f 93       	push	r18
    3f02:	3f 93       	push	r19
    3f04:	4f 93       	push	r20
    3f06:	5f 93       	push	r21
    3f08:	6f 93       	push	r22
    3f0a:	7f 93       	push	r23
    3f0c:	8f 93       	push	r24
    3f0e:	9f 93       	push	r25
    3f10:	af 93       	push	r26
    3f12:	bf 93       	push	r27
    3f14:	ef 93       	push	r30
    3f16:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    3f18:	e0 91 4c 21 	lds	r30, 0x214C
    3f1c:	f0 91 4d 21 	lds	r31, 0x214D
    3f20:	30 97       	sbiw	r30, 0x00	; 0
    3f22:	09 f0       	breq	.+2      	; 0x3f26 <__vector_37+0x30>
		tc45_tcd5_err_callback();
    3f24:	09 95       	icall
	}
}
    3f26:	ff 91       	pop	r31
    3f28:	ef 91       	pop	r30
    3f2a:	bf 91       	pop	r27
    3f2c:	af 91       	pop	r26
    3f2e:	9f 91       	pop	r25
    3f30:	8f 91       	pop	r24
    3f32:	7f 91       	pop	r23
    3f34:	6f 91       	pop	r22
    3f36:	5f 91       	pop	r21
    3f38:	4f 91       	pop	r20
    3f3a:	3f 91       	pop	r19
    3f3c:	2f 91       	pop	r18
    3f3e:	0f 90       	pop	r0
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	0f 90       	pop	r0
    3f44:	1f 90       	pop	r1
    3f46:	18 95       	reti

00003f48 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    3f48:	1f 92       	push	r1
    3f4a:	0f 92       	push	r0
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	0f 92       	push	r0
    3f50:	11 24       	eor	r1, r1
    3f52:	2f 93       	push	r18
    3f54:	3f 93       	push	r19
    3f56:	4f 93       	push	r20
    3f58:	5f 93       	push	r21
    3f5a:	6f 93       	push	r22
    3f5c:	7f 93       	push	r23
    3f5e:	8f 93       	push	r24
    3f60:	9f 93       	push	r25
    3f62:	af 93       	push	r26
    3f64:	bf 93       	push	r27
    3f66:	ef 93       	push	r30
    3f68:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    3f6a:	e0 91 4a 21 	lds	r30, 0x214A
    3f6e:	f0 91 4b 21 	lds	r31, 0x214B
    3f72:	30 97       	sbiw	r30, 0x00	; 0
    3f74:	09 f0       	breq	.+2      	; 0x3f78 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    3f76:	09 95       	icall
	}
}
    3f78:	ff 91       	pop	r31
    3f7a:	ef 91       	pop	r30
    3f7c:	bf 91       	pop	r27
    3f7e:	af 91       	pop	r26
    3f80:	9f 91       	pop	r25
    3f82:	8f 91       	pop	r24
    3f84:	7f 91       	pop	r23
    3f86:	6f 91       	pop	r22
    3f88:	5f 91       	pop	r21
    3f8a:	4f 91       	pop	r20
    3f8c:	3f 91       	pop	r19
    3f8e:	2f 91       	pop	r18
    3f90:	0f 90       	pop	r0
    3f92:	0f be       	out	0x3f, r0	; 63
    3f94:	0f 90       	pop	r0
    3f96:	1f 90       	pop	r1
    3f98:	18 95       	reti

00003f9a <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    3f9a:	1f 92       	push	r1
    3f9c:	0f 92       	push	r0
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	0f 92       	push	r0
    3fa2:	11 24       	eor	r1, r1
    3fa4:	2f 93       	push	r18
    3fa6:	3f 93       	push	r19
    3fa8:	4f 93       	push	r20
    3faa:	5f 93       	push	r21
    3fac:	6f 93       	push	r22
    3fae:	7f 93       	push	r23
    3fb0:	8f 93       	push	r24
    3fb2:	9f 93       	push	r25
    3fb4:	af 93       	push	r26
    3fb6:	bf 93       	push	r27
    3fb8:	ef 93       	push	r30
    3fba:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    3fbc:	e0 91 48 21 	lds	r30, 0x2148
    3fc0:	f0 91 49 21 	lds	r31, 0x2149
    3fc4:	30 97       	sbiw	r30, 0x00	; 0
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    3fc8:	09 95       	icall
	}
}
    3fca:	ff 91       	pop	r31
    3fcc:	ef 91       	pop	r30
    3fce:	bf 91       	pop	r27
    3fd0:	af 91       	pop	r26
    3fd2:	9f 91       	pop	r25
    3fd4:	8f 91       	pop	r24
    3fd6:	7f 91       	pop	r23
    3fd8:	6f 91       	pop	r22
    3fda:	5f 91       	pop	r21
    3fdc:	4f 91       	pop	r20
    3fde:	3f 91       	pop	r19
    3fe0:	2f 91       	pop	r18
    3fe2:	0f 90       	pop	r0
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	0f 90       	pop	r0
    3fe8:	1f 90       	pop	r1
    3fea:	18 95       	reti

00003fec <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    3fec:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3fee:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3ff0:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3ff2:	28 2f       	mov	r18, r24
    3ff4:	39 2f       	mov	r19, r25
    3ff6:	21 15       	cp	r18, r1
    3ff8:	88 e0       	ldi	r24, 0x08	; 8
    3ffa:	38 07       	cpc	r19, r24
    3ffc:	39 f4       	brne	.+14     	; 0x400c <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3ffe:	61 e0       	ldi	r22, 0x01	; 1
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	eb db       	rcall	.-2090   	; 0x37da <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4004:	64 e0       	ldi	r22, 0x04	; 4
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	e8 db       	rcall	.-2096   	; 0x37da <sysclk_enable_module>
    400a:	17 c0       	rjmp	.+46     	; 0x403a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    400c:	20 34       	cpi	r18, 0x40	; 64
    400e:	88 e0       	ldi	r24, 0x08	; 8
    4010:	38 07       	cpc	r19, r24
    4012:	39 f4       	brne	.+14     	; 0x4022 <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    4014:	62 e0       	ldi	r22, 0x02	; 2
    4016:	83 e0       	ldi	r24, 0x03	; 3
    4018:	e0 db       	rcall	.-2112   	; 0x37da <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    401a:	64 e0       	ldi	r22, 0x04	; 4
    401c:	83 e0       	ldi	r24, 0x03	; 3
    401e:	dd db       	rcall	.-2118   	; 0x37da <sysclk_enable_module>
    4020:	0c c0       	rjmp	.+24     	; 0x403a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    4022:	20 34       	cpi	r18, 0x40	; 64
    4024:	39 40       	sbci	r19, 0x09	; 9
    4026:	39 f4       	brne	.+14     	; 0x4036 <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    4028:	62 e0       	ldi	r22, 0x02	; 2
    402a:	84 e0       	ldi	r24, 0x04	; 4
    402c:	d6 db       	rcall	.-2132   	; 0x37da <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    402e:	64 e0       	ldi	r22, 0x04	; 4
    4030:	84 e0       	ldi	r24, 0x04	; 4
    4032:	d3 db       	rcall	.-2138   	; 0x37da <sysclk_enable_module>
    4034:	02 c0       	rjmp	.+4      	; 0x403a <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4036:	cf bf       	out	0x3f, r28	; 63
    4038:	09 c0       	rjmp	.+18     	; 0x404c <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    403a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    403c:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    403e:	e9 ea       	ldi	r30, 0xA9	; 169
    4040:	fa e2       	ldi	r31, 0x2A	; 42
    4042:	81 81       	ldd	r24, Z+1	; 0x01
    4044:	8f 5f       	subi	r24, 0xFF	; 255
    4046:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4048:	9f bf       	out	0x3f, r25	; 63
    404a:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    404c:	cf 91       	pop	r28
    404e:	08 95       	ret

00004050 <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    4050:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4052:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    4054:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    4056:	3f b7       	in	r19, 0x3f	; 63
	cpu_irq_disable();
    4058:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    405a:	e9 ea       	ldi	r30, 0xA9	; 169
    405c:	fa e2       	ldi	r31, 0x2A	; 42
    405e:	21 81       	ldd	r18, Z+1	; 0x01
    4060:	21 50       	subi	r18, 0x01	; 1
    4062:	21 83       	std	Z+1, r18	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    4064:	3f bf       	out	0x3f, r19	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    4066:	28 2f       	mov	r18, r24
    4068:	39 2f       	mov	r19, r25
    406a:	21 15       	cp	r18, r1
    406c:	88 e0       	ldi	r24, 0x08	; 8
    406e:	38 07       	cpc	r19, r24
    4070:	39 f4       	brne	.+14     	; 0x4080 <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    4072:	61 e0       	ldi	r22, 0x01	; 1
    4074:	83 e0       	ldi	r24, 0x03	; 3
    4076:	bd db       	rcall	.-2182   	; 0x37f2 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4078:	64 e0       	ldi	r22, 0x04	; 4
    407a:	83 e0       	ldi	r24, 0x03	; 3
    407c:	ba db       	rcall	.-2188   	; 0x37f2 <sysclk_disable_module>
    407e:	17 c0       	rjmp	.+46     	; 0x40ae <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    4080:	20 34       	cpi	r18, 0x40	; 64
    4082:	88 e0       	ldi	r24, 0x08	; 8
    4084:	38 07       	cpc	r19, r24
    4086:	39 f4       	brne	.+14     	; 0x4096 <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    4088:	62 e0       	ldi	r22, 0x02	; 2
    408a:	83 e0       	ldi	r24, 0x03	; 3
    408c:	b2 db       	rcall	.-2204   	; 0x37f2 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    408e:	64 e0       	ldi	r22, 0x04	; 4
    4090:	83 e0       	ldi	r24, 0x03	; 3
    4092:	af db       	rcall	.-2210   	; 0x37f2 <sysclk_disable_module>
    4094:	0c c0       	rjmp	.+24     	; 0x40ae <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    4096:	20 34       	cpi	r18, 0x40	; 64
    4098:	39 40       	sbci	r19, 0x09	; 9
    409a:	39 f4       	brne	.+14     	; 0x40aa <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    409c:	61 e0       	ldi	r22, 0x01	; 1
    409e:	84 e0       	ldi	r24, 0x04	; 4
    40a0:	a8 db       	rcall	.-2224   	; 0x37f2 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    40a2:	64 e0       	ldi	r22, 0x04	; 4
    40a4:	84 e0       	ldi	r24, 0x04	; 4
    40a6:	a5 db       	rcall	.-2230   	; 0x37f2 <sysclk_disable_module>
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <tc45_disable+0x5e>
    40aa:	cf bf       	out	0x3f, r28	; 63
    40ac:	01 c0       	rjmp	.+2      	; 0x40b0 <tc45_disable+0x60>
    40ae:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    40b0:	cf 91       	pop	r28
    40b2:	08 95       	ret

000040b4 <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    40b4:	81 15       	cp	r24, r1
    40b6:	28 e0       	ldi	r18, 0x08	; 8
    40b8:	92 07       	cpc	r25, r18
    40ba:	29 f4       	brne	.+10     	; 0x40c6 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    40bc:	60 93 62 21 	sts	0x2162, r22
    40c0:	70 93 63 21 	sts	0x2163, r23
    40c4:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    40c6:	80 34       	cpi	r24, 0x40	; 64
    40c8:	28 e0       	ldi	r18, 0x08	; 8
    40ca:	92 07       	cpc	r25, r18
    40cc:	29 f4       	brne	.+10     	; 0x40d8 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    40ce:	60 93 56 21 	sts	0x2156, r22
    40d2:	70 93 57 21 	sts	0x2157, r23
    40d6:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    40d8:	80 34       	cpi	r24, 0x40	; 64
    40da:	99 40       	sbci	r25, 0x09	; 9
    40dc:	21 f4       	brne	.+8      	; 0x40e6 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    40de:	60 93 4e 21 	sts	0x214E, r22
    40e2:	70 93 4f 21 	sts	0x214F, r23
    40e6:	08 95       	ret

000040e8 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    40e8:	1f 92       	push	r1
    40ea:	0f 92       	push	r0
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	0f 92       	push	r0
    40f0:	11 24       	eor	r1, r1
    40f2:	2f 93       	push	r18
    40f4:	3f 93       	push	r19
    40f6:	4f 93       	push	r20
    40f8:	5f 93       	push	r21
    40fa:	6f 93       	push	r22
    40fc:	7f 93       	push	r23
    40fe:	8f 93       	push	r24
    4100:	9f 93       	push	r25
    4102:	af 93       	push	r26
    4104:	bf 93       	push	r27
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
    410a:	ef 93       	push	r30
    410c:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    410e:	e0 91 64 21 	lds	r30, 0x2164
    4112:	f0 91 65 21 	lds	r31, 0x2165
    4116:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    4118:	83 ff       	sbrs	r24, 3
    411a:	08 c0       	rjmp	.+16     	; 0x412c <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    411c:	88 60       	ori	r24, 0x08	; 8
    411e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    4120:	83 e0       	ldi	r24, 0x03	; 3
    4122:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    4124:	86 ef       	ldi	r24, 0xF6	; 246
    4126:	80 93 6e 21 	sts	0x216E, r24
    412a:	95 c0       	rjmp	.+298    	; 0x4256 <__vector_11+0x16e>
    412c:	98 2f       	mov	r25, r24
    412e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    4130:	31 f0       	breq	.+12     	; 0x413e <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4132:	83 e0       	ldi	r24, 0x03	; 3
    4134:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    4136:	8f ef       	ldi	r24, 0xFF	; 255
    4138:	80 93 6e 21 	sts	0x216E, r24
    413c:	8c c0       	rjmp	.+280    	; 0x4256 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    413e:	86 ff       	sbrs	r24, 6
    4140:	43 c0       	rjmp	.+134    	; 0x41c8 <__vector_11+0xe0>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    4142:	c4 e6       	ldi	r28, 0x64	; 100
    4144:	d1 e2       	ldi	r29, 0x21	; 33
    4146:	aa 81       	ldd	r26, Y+2	; 0x02
    4148:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
    414a:	8c 81       	ldd	r24, Y+4	; 0x04
    414c:	9d 81       	ldd	r25, Y+5	; 0x05
    414e:	14 96       	adiw	r26, 0x04	; 4
    4150:	2d 91       	ld	r18, X+
    4152:	3c 91       	ld	r19, X
    4154:	15 97       	sbiw	r26, 0x05	; 5
    4156:	82 17       	cp	r24, r18
    4158:	93 07       	cpc	r25, r19
    415a:	6c f4       	brge	.+26     	; 0x4176 <__vector_11+0x8e>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    415c:	9c 01       	movw	r18, r24
    415e:	2f 5f       	subi	r18, 0xFF	; 255
    4160:	3f 4f       	sbci	r19, 0xFF	; 255
    4162:	20 93 68 21 	sts	0x2168, r18
    4166:	30 93 69 21 	sts	0x2169, r19
    416a:	a8 0f       	add	r26, r24
    416c:	b9 1f       	adc	r27, r25
    416e:	11 96       	adiw	r26, 0x01	; 1
    4170:	8c 91       	ld	r24, X
    4172:	87 83       	std	Z+7, r24	; 0x07
    4174:	70 c0       	rjmp	.+224    	; 0x4256 <__vector_11+0x16e>

	} else if (transfer.data_count < pkg->length) {
    4176:	80 91 6a 21 	lds	r24, 0x216A
    417a:	90 91 6b 21 	lds	r25, 0x216B
    417e:	18 96       	adiw	r26, 0x08	; 8
    4180:	2d 91       	ld	r18, X+
    4182:	3c 91       	ld	r19, X
    4184:	19 97       	sbiw	r26, 0x09	; 9
    4186:	82 17       	cp	r24, r18
    4188:	93 07       	cpc	r25, r19
    418a:	c8 f4       	brcc	.+50     	; 0x41be <__vector_11+0xd6>

		if (transfer.read) {
    418c:	20 91 6c 21 	lds	r18, 0x216C
    4190:	22 23       	and	r18, r18
    4192:	21 f0       	breq	.+8      	; 0x419c <__vector_11+0xb4>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    4194:	86 81       	ldd	r24, Z+6	; 0x06
    4196:	81 60       	ori	r24, 0x01	; 1
    4198:	86 83       	std	Z+6, r24	; 0x06
    419a:	5d c0       	rjmp	.+186    	; 0x4256 <__vector_11+0x16e>

		} else {
			const uint8_t * const data = pkg->buffer;
    419c:	16 96       	adiw	r26, 0x06	; 6
    419e:	2d 91       	ld	r18, X+
    41a0:	3c 91       	ld	r19, X
    41a2:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    41a4:	ac 01       	movw	r20, r24
    41a6:	4f 5f       	subi	r20, 0xFF	; 255
    41a8:	5f 4f       	sbci	r21, 0xFF	; 255
    41aa:	40 93 6a 21 	sts	0x216A, r20
    41ae:	50 93 6b 21 	sts	0x216B, r21
    41b2:	d9 01       	movw	r26, r18
    41b4:	a8 0f       	add	r26, r24
    41b6:	b9 1f       	adc	r27, r25
    41b8:	8c 91       	ld	r24, X
    41ba:	87 83       	std	Z+7, r24	; 0x07
    41bc:	4c c0       	rjmp	.+152    	; 0x4256 <__vector_11+0x16e>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    41be:	83 e0       	ldi	r24, 0x03	; 3
    41c0:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    41c2:	10 92 6e 21 	sts	0x216E, r1
    41c6:	47 c0       	rjmp	.+142    	; 0x4256 <__vector_11+0x16e>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    41c8:	88 23       	and	r24, r24
    41ca:	0c f0       	brlt	.+2      	; 0x41ce <__vector_11+0xe6>
    41cc:	41 c0       	rjmp	.+130    	; 0x4250 <__vector_11+0x168>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    41ce:	c4 e6       	ldi	r28, 0x64	; 100
    41d0:	d1 e2       	ldi	r29, 0x21	; 33
    41d2:	aa 81       	ldd	r26, Y+2	; 0x02
    41d4:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.data_count < pkg->length) {
    41d6:	8e 81       	ldd	r24, Y+6	; 0x06
    41d8:	9f 81       	ldd	r25, Y+7	; 0x07
    41da:	18 96       	adiw	r26, 0x08	; 8
    41dc:	2d 91       	ld	r18, X+
    41de:	3c 91       	ld	r19, X
    41e0:	19 97       	sbiw	r26, 0x09	; 9
    41e2:	82 17       	cp	r24, r18
    41e4:	93 07       	cpc	r25, r19
    41e6:	70 f5       	brcc	.+92     	; 0x4244 <__vector_11+0x15c>

		uint8_t * const data = pkg->buffer;
    41e8:	16 96       	adiw	r26, 0x06	; 6
    41ea:	6d 91       	ld	r22, X+
    41ec:	7c 91       	ld	r23, X
    41ee:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    41f0:	9c 01       	movw	r18, r24
    41f2:	2f 5f       	subi	r18, 0xFF	; 255
    41f4:	3f 4f       	sbci	r19, 0xFF	; 255
    41f6:	20 93 6a 21 	sts	0x216A, r18
    41fa:	30 93 6b 21 	sts	0x216B, r19
    41fe:	47 81       	ldd	r20, Z+7	; 0x07
    4200:	86 0f       	add	r24, r22
    4202:	97 1f       	adc	r25, r23
    4204:	ec 01       	movw	r28, r24
    4206:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    4208:	eb 01       	movw	r28, r22
    420a:	88 81       	ld	r24, Y
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	01 96       	adiw	r24, 0x01	; 1
    4210:	18 96       	adiw	r26, 0x08	; 8
    4212:	4d 91       	ld	r20, X+
    4214:	5c 91       	ld	r21, X
    4216:	19 97       	sbiw	r26, 0x09	; 9
    4218:	48 17       	cp	r20, r24
    421a:	59 07       	cpc	r21, r25
    421c:	21 f0       	breq	.+8      	; 0x4226 <__vector_11+0x13e>
		{
			pkg->length = data[0]+1;
    421e:	18 96       	adiw	r26, 0x08	; 8
    4220:	8d 93       	st	X+, r24
    4222:	9c 93       	st	X, r25
    4224:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    4226:	18 96       	adiw	r26, 0x08	; 8
    4228:	8d 91       	ld	r24, X+
    422a:	9c 91       	ld	r25, X
    422c:	19 97       	sbiw	r26, 0x09	; 9
    422e:	28 17       	cp	r18, r24
    4230:	39 07       	cpc	r19, r25
    4232:	18 f4       	brcc	.+6      	; 0x423a <__vector_11+0x152>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    4234:	82 e0       	ldi	r24, 0x02	; 2
    4236:	83 83       	std	Z+3, r24	; 0x03
    4238:	0e c0       	rjmp	.+28     	; 0x4256 <__vector_11+0x16e>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    423a:	87 e0       	ldi	r24, 0x07	; 7
    423c:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    423e:	10 92 6e 21 	sts	0x216E, r1
    4242:	09 c0       	rjmp	.+18     	; 0x4256 <__vector_11+0x16e>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    4244:	83 e0       	ldi	r24, 0x03	; 3
    4246:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    4248:	89 ef       	ldi	r24, 0xF9	; 249
    424a:	80 93 6e 21 	sts	0x216E, r24
    424e:	03 c0       	rjmp	.+6      	; 0x4256 <__vector_11+0x16e>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    4250:	8b ef       	ldi	r24, 0xFB	; 251
    4252:	80 93 6e 21 	sts	0x216E, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    4256:	ff 91       	pop	r31
    4258:	ef 91       	pop	r30
    425a:	df 91       	pop	r29
    425c:	cf 91       	pop	r28
    425e:	bf 91       	pop	r27
    4260:	af 91       	pop	r26
    4262:	9f 91       	pop	r25
    4264:	8f 91       	pop	r24
    4266:	7f 91       	pop	r23
    4268:	6f 91       	pop	r22
    426a:	5f 91       	pop	r21
    426c:	4f 91       	pop	r20
    426e:	3f 91       	pop	r19
    4270:	2f 91       	pop	r18
    4272:	0f 90       	pop	r0
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	0f 90       	pop	r0
    4278:	1f 90       	pop	r1
    427a:	18 95       	reti

0000427c <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    427c:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    427e:	db 01       	movw	r26, r22
    4280:	14 96       	adiw	r26, 0x04	; 4
    4282:	8c 91       	ld	r24, X
    4284:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    4286:	88 eb       	ldi	r24, 0xB8	; 184
    4288:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    428e:	e4 e6       	ldi	r30, 0x64	; 100
    4290:	f1 e2       	ldi	r31, 0x21	; 33
    4292:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
    4294:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    4296:	e0 ea       	ldi	r30, 0xA0	; 160
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	82 60       	ori	r24, 0x02	; 2
    429e:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    42a0:	78 94       	sei

	return STATUS_OK;
}
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	08 95       	ret

000042a6 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
    42a6:	dc 01       	movw	r26, r24
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    42a8:	89 2b       	or	r24, r25
    42aa:	09 f4       	brne	.+2      	; 0x42ae <twi_master_transfer+0x8>
    42ac:	49 c0       	rjmp	.+146    	; 0x4340 <twi_master_transfer+0x9a>
    42ae:	61 15       	cp	r22, r1
    42b0:	71 05       	cpc	r23, r1
    42b2:	09 f4       	brne	.+2      	; 0x42b6 <twi_master_transfer+0x10>
    42b4:	47 c0       	rjmp	.+142    	; 0x4344 <twi_master_transfer+0x9e>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    42b6:	fb 01       	movw	r30, r22
    42b8:	92 85       	ldd	r25, Z+10	; 0x0a
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {
    42ba:	80 91 6d 21 	lds	r24, 0x216D
    42be:	88 23       	and	r24, r24
    42c0:	19 f0       	breq	.+6      	; 0x42c8 <twi_master_transfer+0x22>

		if (no_wait) { return ERR_BUSY; }
    42c2:	99 23       	and	r25, r25
    42c4:	f1 f3       	breq	.-4      	; 0x42c2 <twi_master_transfer+0x1c>
    42c6:	40 c0       	rjmp	.+128    	; 0x4348 <twi_master_transfer+0xa2>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    42c8:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    42ca:	f8 94       	cli
		#endif
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    42cc:	e4 e6       	ldi	r30, 0x64	; 100
    42ce:	f1 e2       	ldi	r31, 0x21	; 33
    42d0:	91 e0       	ldi	r25, 0x01	; 1
    42d2:	91 87       	std	Z+9, r25	; 0x09
	transfer.status = OPERATION_IN_PROGRESS;
    42d4:	90 e8       	ldi	r25, 0x80	; 128
    42d6:	92 87       	std	Z+10, r25	; 0x0a
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    42d8:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    42da:	a0 83       	st	Z, r26
    42dc:	b1 83       	std	Z+1, r27	; 0x01
		transfer.pkg         = (twi_package_t *) package;
    42de:	62 83       	std	Z+2, r22	; 0x02
    42e0:	73 83       	std	Z+3, r23	; 0x03
		transfer.addr_count  = 0;
    42e2:	14 82       	std	Z+4, r1	; 0x04
    42e4:	15 82       	std	Z+5, r1	; 0x05
		transfer.data_count  = 0;
    42e6:	16 82       	std	Z+6, r1	; 0x06
    42e8:	17 82       	std	Z+7, r1	; 0x07
		transfer.read        = read;
    42ea:	40 87       	std	Z+8, r20	; 0x08

		uint8_t const chip = (package->chip) << 1;
    42ec:	fb 01       	movw	r30, r22
    42ee:	80 81       	ld	r24, Z
    42f0:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
    42f2:	24 81       	ldd	r18, Z+4	; 0x04
    42f4:	35 81       	ldd	r19, Z+5	; 0x05
    42f6:	23 2b       	or	r18, r19
    42f8:	11 f4       	brne	.+4      	; 0x42fe <twi_master_transfer+0x58>
    42fa:	41 11       	cpse	r20, r1
    42fc:	03 c0       	rjmp	.+6      	; 0x4304 <twi_master_transfer+0x5e>
			transfer.bus->MASTER.ADDR = chip;
    42fe:	16 96       	adiw	r26, 0x06	; 6
    4300:	8c 93       	st	X, r24
    4302:	03 c0       	rjmp	.+6      	; 0x430a <twi_master_transfer+0x64>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    4304:	81 60       	ori	r24, 0x01	; 1
    4306:	16 96       	adiw	r26, 0x06	; 6
    4308:	8c 93       	st	X, r24
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	int count=0;
	while (OPERATION_IN_PROGRESS == transfer.status) {
    430a:	e4 e6       	ldi	r30, 0x64	; 100
    430c:	f1 e2       	ldi	r31, 0x21	; 33
    430e:	82 85       	ldd	r24, Z+10	; 0x0a
    4310:	80 38       	cpi	r24, 0x80	; 128
    4312:	e9 f3       	breq	.-6      	; 0x430e <twi_master_transfer+0x68>
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    4314:	e0 91 64 21 	lds	r30, 0x2164
    4318:	f0 91 65 21 	lds	r31, 0x2165
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    431c:	84 81       	ldd	r24, Z+4	; 0x04
    431e:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    4320:	81 30       	cpi	r24, 0x01	; 1
    4322:	49 f0       	breq	.+18     	; 0x4336 <twi_master_transfer+0x90>
    4324:	a4 e6       	ldi	r26, 0x64	; 100
    4326:	b1 e2       	ldi	r27, 0x21	; 33
    4328:	ed 91       	ld	r30, X+
    432a:	fc 91       	ld	r31, X
    432c:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    432e:	84 81       	ldd	r24, Z+4	; 0x04
    4330:	83 70       	andi	r24, 0x03	; 3
			return ERR_BUSY;
		#endif
	};
	
	count=0;
	while (! twim_idle(transfer.bus)) { 
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	c9 f7       	brne	.-14     	; 0x4328 <twi_master_transfer+0x82>
			if(count++>10000)
			return ERR_BUSY;
		#endif
	}

	status_code_t const status = transfer.status;
    4336:	e4 e6       	ldi	r30, 0x64	; 100
    4338:	f1 e2       	ldi	r31, 0x21	; 33
    433a:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
    433c:	11 86       	std	Z+9, r1	; 0x09
    433e:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    4340:	88 ef       	ldi	r24, 0xF8	; 248
    4342:	08 95       	ret
    4344:	88 ef       	ldi	r24, 0xF8	; 248
    4346:	08 95       	ret
static inline status_code_t twim_acquire(bool no_wait)
{
	int count=0;
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    4348:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    434a:	08 95       	ret

0000434c <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    434c:	fc 01       	movw	r30, r24
    434e:	22 e1       	ldi	r18, 0x12	; 18
    4350:	37 e2       	ldi	r19, 0x27	; 39
    4352:	03 c0       	rjmp	.+6      	; 0x435a <usart_putchar+0xe>
    4354:	21 50       	subi	r18, 0x01	; 1
    4356:	31 09       	sbc	r19, r1
    4358:	19 f0       	breq	.+6      	; 0x4360 <usart_putchar+0x14>
    435a:	91 81       	ldd	r25, Z+1	; 0x01
    435c:	95 ff       	sbrs	r25, 5
    435e:	fa cf       	rjmp	.-12     	; 0x4354 <usart_putchar+0x8>
    4360:	60 83       	st	Z, r22
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	08 95       	ret

00004368 <usart_getchar>:
    4368:	fc 01       	movw	r30, r24
    436a:	22 e1       	ldi	r18, 0x12	; 18
    436c:	37 e2       	ldi	r19, 0x27	; 39
    436e:	03 c0       	rjmp	.+6      	; 0x4376 <usart_getchar+0xe>
    4370:	21 50       	subi	r18, 0x01	; 1
    4372:	31 09       	sbc	r19, r1
    4374:	19 f0       	breq	.+6      	; 0x437c <usart_getchar+0x14>
    4376:	91 81       	ldd	r25, Z+1	; 0x01
    4378:	99 23       	and	r25, r25
    437a:	d4 f7       	brge	.-12     	; 0x4370 <usart_getchar+0x8>
    437c:	80 81       	ld	r24, Z
    437e:	08 95       	ret

00004380 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    4380:	2f 92       	push	r2
    4382:	3f 92       	push	r3
    4384:	4f 92       	push	r4
    4386:	5f 92       	push	r5
    4388:	6f 92       	push	r6
    438a:	7f 92       	push	r7
    438c:	8f 92       	push	r8
    438e:	9f 92       	push	r9
    4390:	af 92       	push	r10
    4392:	bf 92       	push	r11
    4394:	cf 92       	push	r12
    4396:	df 92       	push	r13
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	0f 93       	push	r16
    439e:	1f 93       	push	r17
    43a0:	cf 93       	push	r28
    43a2:	1c 01       	movw	r2, r24
    43a4:	2a 01       	movw	r4, r20
    43a6:	3b 01       	movw	r6, r22
    43a8:	48 01       	movw	r8, r16
    43aa:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    43ac:	d9 01       	movw	r26, r18
    43ae:	c8 01       	movw	r24, r16
    43b0:	68 94       	set
    43b2:	12 f8       	bld	r1, 2
    43b4:	b6 95       	lsr	r27
    43b6:	a7 95       	ror	r26
    43b8:	97 95       	ror	r25
    43ba:	87 95       	ror	r24
    43bc:	16 94       	lsr	r1
    43be:	d1 f7       	brne	.-12     	; 0x43b4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    43c0:	b9 01       	movw	r22, r18
    43c2:	a8 01       	movw	r20, r16
    43c4:	03 2e       	mov	r0, r19
    43c6:	36 e1       	ldi	r19, 0x16	; 22
    43c8:	76 95       	lsr	r23
    43ca:	67 95       	ror	r22
    43cc:	57 95       	ror	r21
    43ce:	47 95       	ror	r20
    43d0:	3a 95       	dec	r19
    43d2:	d1 f7       	brne	.-12     	; 0x43c8 <usart_set_baudrate+0x48>
    43d4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    43d6:	f1 01       	movw	r30, r2
    43d8:	23 81       	ldd	r18, Z+3	; 0x03
    43da:	22 fd       	sbrc	r18, 2
    43dc:	08 c0       	rjmp	.+16     	; 0x43ee <usart_set_baudrate+0x6e>
		max_rate /= 2;
    43de:	b6 95       	lsr	r27
    43e0:	a7 95       	ror	r26
    43e2:	97 95       	ror	r25
    43e4:	87 95       	ror	r24
		min_rate /= 2;
    43e6:	76 95       	lsr	r23
    43e8:	67 95       	ror	r22
    43ea:	57 95       	ror	r21
    43ec:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    43ee:	84 15       	cp	r24, r4
    43f0:	95 05       	cpc	r25, r5
    43f2:	a6 05       	cpc	r26, r6
    43f4:	b7 05       	cpc	r27, r7
    43f6:	08 f4       	brcc	.+2      	; 0x43fa <usart_set_baudrate+0x7a>
    43f8:	aa c0       	rjmp	.+340    	; 0x454e <usart_set_baudrate+0x1ce>
    43fa:	44 16       	cp	r4, r20
    43fc:	55 06       	cpc	r5, r21
    43fe:	66 06       	cpc	r6, r22
    4400:	77 06       	cpc	r7, r23
    4402:	08 f4       	brcc	.+2      	; 0x4406 <usart_set_baudrate+0x86>
    4404:	a6 c0       	rjmp	.+332    	; 0x4552 <usart_set_baudrate+0x1d2>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    4406:	f1 01       	movw	r30, r2
    4408:	83 81       	ldd	r24, Z+3	; 0x03
    440a:	82 fd       	sbrc	r24, 2
    440c:	04 c0       	rjmp	.+8      	; 0x4416 <usart_set_baudrate+0x96>
		baud *= 2;
    440e:	44 0c       	add	r4, r4
    4410:	55 1c       	adc	r5, r5
    4412:	66 1c       	adc	r6, r6
    4414:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    4416:	c5 01       	movw	r24, r10
    4418:	b4 01       	movw	r22, r8
    441a:	a3 01       	movw	r20, r6
    441c:	92 01       	movw	r18, r4
    441e:	a4 d3       	rcall	.+1864   	; 0x4b68 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    4420:	2f 3f       	cpi	r18, 0xFF	; 255
    4422:	31 05       	cpc	r19, r1
    4424:	41 05       	cpc	r20, r1
    4426:	51 05       	cpc	r21, r1
    4428:	08 f4       	brcc	.+2      	; 0x442c <usart_set_baudrate+0xac>
    442a:	95 c0       	rjmp	.+298    	; 0x4556 <usart_set_baudrate+0x1d6>
    442c:	c1 2c       	mov	r12, r1
    442e:	d1 2c       	mov	r13, r1
    4430:	76 01       	movw	r14, r12
    4432:	ca 94       	dec	r12
    4434:	c9 ef       	ldi	r28, 0xF9	; 249
    4436:	05 c0       	rjmp	.+10     	; 0x4442 <usart_set_baudrate+0xc2>
    4438:	2c 15       	cp	r18, r12
    443a:	3d 05       	cpc	r19, r13
    443c:	4e 05       	cpc	r20, r14
    443e:	5f 05       	cpc	r21, r15
    4440:	68 f0       	brcs	.+26     	; 0x445c <usart_set_baudrate+0xdc>
			break;
		}

		limit <<= 1;
    4442:	cc 0c       	add	r12, r12
    4444:	dd 1c       	adc	r13, r13
    4446:	ee 1c       	adc	r14, r14
    4448:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    444a:	cd 3f       	cpi	r28, 0xFD	; 253
    444c:	14 f4       	brge	.+4      	; 0x4452 <usart_set_baudrate+0xd2>
			limit |= 1;
    444e:	68 94       	set
    4450:	c0 f8       	bld	r12, 0
    4452:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    4454:	c7 30       	cpi	r28, 0x07	; 7
    4456:	81 f7       	brne	.-32     	; 0x4438 <usart_set_baudrate+0xb8>
    4458:	8c 2f       	mov	r24, r28
    445a:	54 c0       	rjmp	.+168    	; 0x4504 <usart_set_baudrate+0x184>
    445c:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    445e:	cc 23       	and	r28, r28
    4460:	0c f0       	brlt	.+2      	; 0x4464 <usart_set_baudrate+0xe4>
    4462:	50 c0       	rjmp	.+160    	; 0x4504 <usart_set_baudrate+0x184>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    4464:	d3 01       	movw	r26, r6
    4466:	c2 01       	movw	r24, r4
    4468:	88 0f       	add	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	aa 1f       	adc	r26, r26
    446e:	bb 1f       	adc	r27, r27
    4470:	88 0f       	add	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	aa 1f       	adc	r26, r26
    4476:	bb 1f       	adc	r27, r27
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	aa 1f       	adc	r26, r26
    447e:	bb 1f       	adc	r27, r27
    4480:	85 01       	movw	r16, r10
    4482:	74 01       	movw	r14, r8
    4484:	e8 1a       	sub	r14, r24
    4486:	f9 0a       	sbc	r15, r25
    4488:	0a 0b       	sbc	r16, r26
    448a:	1b 0b       	sbc	r17, r27
    448c:	d8 01       	movw	r26, r16
    448e:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    4490:	ce 3f       	cpi	r28, 0xFE	; 254
    4492:	ec f4       	brge	.+58     	; 0x44ce <usart_set_baudrate+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    4494:	2d ef       	ldi	r18, 0xFD	; 253
    4496:	3f ef       	ldi	r19, 0xFF	; 255
    4498:	2c 1b       	sub	r18, r28
    449a:	31 09       	sbc	r19, r1
    449c:	c7 fd       	sbrc	r28, 7
    449e:	33 95       	inc	r19
    44a0:	04 c0       	rjmp	.+8      	; 0x44aa <usart_set_baudrate+0x12a>
    44a2:	88 0f       	add	r24, r24
    44a4:	99 1f       	adc	r25, r25
    44a6:	aa 1f       	adc	r26, r26
    44a8:	bb 1f       	adc	r27, r27
    44aa:	2a 95       	dec	r18
    44ac:	d2 f7       	brpl	.-12     	; 0x44a2 <usart_set_baudrate+0x122>
    44ae:	73 01       	movw	r14, r6
    44b0:	62 01       	movw	r12, r4
    44b2:	f6 94       	lsr	r15
    44b4:	e7 94       	ror	r14
    44b6:	d7 94       	ror	r13
    44b8:	c7 94       	ror	r12
    44ba:	bc 01       	movw	r22, r24
    44bc:	cd 01       	movw	r24, r26
    44be:	6c 0d       	add	r22, r12
    44c0:	7d 1d       	adc	r23, r13
    44c2:	8e 1d       	adc	r24, r14
    44c4:	9f 1d       	adc	r25, r15
    44c6:	a3 01       	movw	r20, r6
    44c8:	92 01       	movw	r18, r4
    44ca:	4e d3       	rcall	.+1692   	; 0x4b68 <__udivmodsi4>
    44cc:	36 c0       	rjmp	.+108    	; 0x453a <usart_set_baudrate+0x1ba>
		} else {
			baud <<= exp + 3;
    44ce:	23 e0       	ldi	r18, 0x03	; 3
    44d0:	2c 0f       	add	r18, r28
    44d2:	83 01       	movw	r16, r6
    44d4:	72 01       	movw	r14, r4
    44d6:	04 c0       	rjmp	.+8      	; 0x44e0 <usart_set_baudrate+0x160>
    44d8:	ee 0c       	add	r14, r14
    44da:	ff 1c       	adc	r15, r15
    44dc:	00 1f       	adc	r16, r16
    44de:	11 1f       	adc	r17, r17
    44e0:	2a 95       	dec	r18
    44e2:	d2 f7       	brpl	.-12     	; 0x44d8 <usart_set_baudrate+0x158>
    44e4:	a8 01       	movw	r20, r16
    44e6:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
    44e8:	67 01       	movw	r12, r14
    44ea:	78 01       	movw	r14, r16
    44ec:	f6 94       	lsr	r15
    44ee:	e7 94       	ror	r14
    44f0:	d7 94       	ror	r13
    44f2:	c7 94       	ror	r12
    44f4:	bc 01       	movw	r22, r24
    44f6:	cd 01       	movw	r24, r26
    44f8:	6c 0d       	add	r22, r12
    44fa:	7d 1d       	adc	r23, r13
    44fc:	8e 1d       	adc	r24, r14
    44fe:	9f 1d       	adc	r25, r15
    4500:	33 d3       	rcall	.+1638   	; 0x4b68 <__udivmodsi4>
    4502:	1b c0       	rjmp	.+54     	; 0x453a <usart_set_baudrate+0x1ba>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    4504:	8d 5f       	subi	r24, 0xFD	; 253
    4506:	a3 01       	movw	r20, r6
    4508:	92 01       	movw	r18, r4
    450a:	04 c0       	rjmp	.+8      	; 0x4514 <usart_set_baudrate+0x194>
    450c:	22 0f       	add	r18, r18
    450e:	33 1f       	adc	r19, r19
    4510:	44 1f       	adc	r20, r20
    4512:	55 1f       	adc	r21, r21
    4514:	8a 95       	dec	r24
    4516:	d2 f7       	brpl	.-12     	; 0x450c <usart_set_baudrate+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
    4518:	da 01       	movw	r26, r20
    451a:	c9 01       	movw	r24, r18
    451c:	b6 95       	lsr	r27
    451e:	a7 95       	ror	r26
    4520:	97 95       	ror	r25
    4522:	87 95       	ror	r24
    4524:	bc 01       	movw	r22, r24
    4526:	cd 01       	movw	r24, r26
    4528:	68 0d       	add	r22, r8
    452a:	79 1d       	adc	r23, r9
    452c:	8a 1d       	adc	r24, r10
    452e:	9b 1d       	adc	r25, r11
    4530:	1b d3       	rcall	.+1590   	; 0x4b68 <__udivmodsi4>
    4532:	21 50       	subi	r18, 0x01	; 1
    4534:	31 09       	sbc	r19, r1
    4536:	41 09       	sbc	r20, r1
    4538:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    453a:	83 2f       	mov	r24, r19
    453c:	8f 70       	andi	r24, 0x0F	; 15
    453e:	c2 95       	swap	r28
    4540:	c0 7f       	andi	r28, 0xF0	; 240
    4542:	c8 2b       	or	r28, r24
    4544:	f1 01       	movw	r30, r2
    4546:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    4548:	26 83       	std	Z+6, r18	; 0x06

	return true;
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	1c c0       	rjmp	.+56     	; 0x4586 <usart_set_baudrate+0x206>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	1a c0       	rjmp	.+52     	; 0x4586 <usart_set_baudrate+0x206>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	18 c0       	rjmp	.+48     	; 0x4586 <usart_set_baudrate+0x206>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    4556:	d3 01       	movw	r26, r6
    4558:	c2 01       	movw	r24, r4
    455a:	88 0f       	add	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	aa 1f       	adc	r26, r26
    4560:	bb 1f       	adc	r27, r27
    4562:	88 0f       	add	r24, r24
    4564:	99 1f       	adc	r25, r25
    4566:	aa 1f       	adc	r26, r26
    4568:	bb 1f       	adc	r27, r27
    456a:	88 0f       	add	r24, r24
    456c:	99 1f       	adc	r25, r25
    456e:	aa 1f       	adc	r26, r26
    4570:	bb 1f       	adc	r27, r27
    4572:	85 01       	movw	r16, r10
    4574:	74 01       	movw	r14, r8
    4576:	e8 1a       	sub	r14, r24
    4578:	f9 0a       	sbc	r15, r25
    457a:	0a 0b       	sbc	r16, r26
    457c:	1b 0b       	sbc	r17, r27
    457e:	d8 01       	movw	r26, r16
    4580:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    4582:	c9 ef       	ldi	r28, 0xF9	; 249
    4584:	87 cf       	rjmp	.-242    	; 0x4494 <usart_set_baudrate+0x114>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    4586:	cf 91       	pop	r28
    4588:	1f 91       	pop	r17
    458a:	0f 91       	pop	r16
    458c:	ff 90       	pop	r15
    458e:	ef 90       	pop	r14
    4590:	df 90       	pop	r13
    4592:	cf 90       	pop	r12
    4594:	bf 90       	pop	r11
    4596:	af 90       	pop	r10
    4598:	9f 90       	pop	r9
    459a:	8f 90       	pop	r8
    459c:	7f 90       	pop	r7
    459e:	6f 90       	pop	r6
    45a0:	5f 90       	pop	r5
    45a2:	4f 90       	pop	r4
    45a4:	3f 90       	pop	r3
    45a6:	2f 90       	pop	r2
    45a8:	08 95       	ret

000045aa <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    45aa:	0f 93       	push	r16
    45ac:	1f 93       	push	r17
    45ae:	cf 93       	push	r28
    45b0:	df 93       	push	r29
    45b2:	ec 01       	movw	r28, r24
    45b4:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    45b6:	89 2b       	or	r24, r25
    45b8:	09 f4       	brne	.+2      	; 0x45bc <usart_init_rs232+0x12>
    45ba:	77 c0       	rjmp	.+238    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    45bc:	c1 15       	cp	r28, r1
    45be:	84 e0       	ldi	r24, 0x04	; 4
    45c0:	d8 07       	cpc	r29, r24
    45c2:	21 f4       	brne	.+8      	; 0x45cc <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    45c4:	64 e0       	ldi	r22, 0x04	; 4
    45c6:	80 e0       	ldi	r24, 0x00	; 0
    45c8:	08 d9       	rcall	.-3568   	; 0x37da <sysclk_enable_module>
    45ca:	6f c0       	rjmp	.+222    	; 0x46aa <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    45cc:	c0 38       	cpi	r28, 0x80	; 128
    45ce:	e1 e0       	ldi	r30, 0x01	; 1
    45d0:	de 07       	cpc	r29, r30
    45d2:	21 f4       	brne	.+8      	; 0x45dc <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    45d4:	62 e0       	ldi	r22, 0x02	; 2
    45d6:	80 e0       	ldi	r24, 0x00	; 0
    45d8:	00 d9       	rcall	.-3584   	; 0x37da <sysclk_enable_module>
    45da:	67 c0       	rjmp	.+206    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    45dc:	c1 15       	cp	r28, r1
    45de:	f1 e0       	ldi	r31, 0x01	; 1
    45e0:	df 07       	cpc	r29, r31
    45e2:	21 f4       	brne	.+8      	; 0x45ec <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    45e4:	61 e0       	ldi	r22, 0x01	; 1
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	f8 d8       	rcall	.-3600   	; 0x37da <sysclk_enable_module>
    45ea:	5f c0       	rjmp	.+190    	; 0x46aa <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    45ec:	c0 38       	cpi	r28, 0x80	; 128
    45ee:	83 e0       	ldi	r24, 0x03	; 3
    45f0:	d8 07       	cpc	r29, r24
    45f2:	21 f4       	brne	.+8      	; 0x45fc <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    45f4:	61 e0       	ldi	r22, 0x01	; 1
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	f0 d8       	rcall	.-3616   	; 0x37da <sysclk_enable_module>
    45fa:	57 c0       	rjmp	.+174    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    45fc:	c1 15       	cp	r28, r1
    45fe:	e2 e0       	ldi	r30, 0x02	; 2
    4600:	de 07       	cpc	r29, r30
    4602:	21 f4       	brne	.+8      	; 0x460c <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4604:	62 e0       	ldi	r22, 0x02	; 2
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	e8 d8       	rcall	.-3632   	; 0x37da <sysclk_enable_module>
    460a:	4f c0       	rjmp	.+158    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    460c:	c1 15       	cp	r28, r1
    460e:	f3 e0       	ldi	r31, 0x03	; 3
    4610:	df 07       	cpc	r29, r31
    4612:	21 f4       	brne	.+8      	; 0x461c <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    4614:	64 e0       	ldi	r22, 0x04	; 4
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	e0 d8       	rcall	.-3648   	; 0x37da <sysclk_enable_module>
    461a:	47 c0       	rjmp	.+142    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    461c:	c1 15       	cp	r28, r1
    461e:	88 e0       	ldi	r24, 0x08	; 8
    4620:	d8 07       	cpc	r29, r24
    4622:	21 f4       	brne	.+8      	; 0x462c <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    4624:	61 e0       	ldi	r22, 0x01	; 1
    4626:	83 e0       	ldi	r24, 0x03	; 3
    4628:	d8 d8       	rcall	.-3664   	; 0x37da <sysclk_enable_module>
    462a:	3f c0       	rjmp	.+126    	; 0x46aa <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    462c:	c0 34       	cpi	r28, 0x40	; 64
    462e:	e8 e0       	ldi	r30, 0x08	; 8
    4630:	de 07       	cpc	r29, r30
    4632:	21 f4       	brne	.+8      	; 0x463c <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    4634:	62 e0       	ldi	r22, 0x02	; 2
    4636:	83 e0       	ldi	r24, 0x03	; 3
    4638:	d0 d8       	rcall	.-3680   	; 0x37da <sysclk_enable_module>
    463a:	37 c0       	rjmp	.+110    	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    463c:	c0 34       	cpi	r28, 0x40	; 64
    463e:	f9 e0       	ldi	r31, 0x09	; 9
    4640:	df 07       	cpc	r29, r31
    4642:	21 f4       	brne	.+8      	; 0x464c <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    4644:	62 e0       	ldi	r22, 0x02	; 2
    4646:	84 e0       	ldi	r24, 0x04	; 4
    4648:	c8 d8       	rcall	.-3696   	; 0x37da <sysclk_enable_module>
    464a:	2f c0       	rjmp	.+94     	; 0x46aa <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    464c:	c0 3b       	cpi	r28, 0xB0	; 176
    464e:	88 e0       	ldi	r24, 0x08	; 8
    4650:	d8 07       	cpc	r29, r24
    4652:	21 f4       	brne	.+8      	; 0x465c <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4654:	64 e0       	ldi	r22, 0x04	; 4
    4656:	83 e0       	ldi	r24, 0x03	; 3
    4658:	c0 d8       	rcall	.-3712   	; 0x37da <sysclk_enable_module>
    465a:	27 c0       	rjmp	.+78     	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    465c:	c0 3e       	cpi	r28, 0xE0	; 224
    465e:	e8 e0       	ldi	r30, 0x08	; 8
    4660:	de 07       	cpc	r29, r30
    4662:	21 f4       	brne	.+8      	; 0x466c <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    4664:	68 e0       	ldi	r22, 0x08	; 8
    4666:	83 e0       	ldi	r24, 0x03	; 3
    4668:	b8 d8       	rcall	.-3728   	; 0x37da <sysclk_enable_module>
    466a:	1f c0       	rjmp	.+62     	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    466c:	c0 3c       	cpi	r28, 0xC0	; 192
    466e:	f8 e0       	ldi	r31, 0x08	; 8
    4670:	df 07       	cpc	r29, r31
    4672:	21 f4       	brne	.+8      	; 0x467c <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    4674:	60 e1       	ldi	r22, 0x10	; 16
    4676:	83 e0       	ldi	r24, 0x03	; 3
    4678:	b0 d8       	rcall	.-3744   	; 0x37da <sysclk_enable_module>
    467a:	17 c0       	rjmp	.+46     	; 0x46aa <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    467c:	c0 3c       	cpi	r28, 0xC0	; 192
    467e:	89 e0       	ldi	r24, 0x09	; 9
    4680:	d8 07       	cpc	r29, r24
    4682:	21 f4       	brne	.+8      	; 0x468c <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4684:	60 e1       	ldi	r22, 0x10	; 16
    4686:	84 e0       	ldi	r24, 0x04	; 4
    4688:	a8 d8       	rcall	.-3760   	; 0x37da <sysclk_enable_module>
    468a:	0f c0       	rjmp	.+30     	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    468c:	c0 38       	cpi	r28, 0x80	; 128
    468e:	e4 e0       	ldi	r30, 0x04	; 4
    4690:	de 07       	cpc	r29, r30
    4692:	21 f4       	brne	.+8      	; 0x469c <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    4694:	60 e4       	ldi	r22, 0x40	; 64
    4696:	83 e0       	ldi	r24, 0x03	; 3
    4698:	a0 d8       	rcall	.-3776   	; 0x37da <sysclk_enable_module>
    469a:	07 c0       	rjmp	.+14     	; 0x46aa <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    469c:	c0 36       	cpi	r28, 0x60	; 96
    469e:	f4 e0       	ldi	r31, 0x04	; 4
    46a0:	df 07       	cpc	r29, r31
    46a2:	19 f4       	brne	.+6      	; 0x46aa <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    46a4:	60 e8       	ldi	r22, 0x80	; 128
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	98 d8       	rcall	.-3792   	; 0x37da <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    46aa:	8c 81       	ldd	r24, Y+4	; 0x04
    46ac:	8f 73       	andi	r24, 0x3F	; 63
    46ae:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    46b0:	f8 01       	movw	r30, r16
    46b2:	94 81       	ldd	r25, Z+4	; 0x04
    46b4:	85 81       	ldd	r24, Z+5	; 0x05
    46b6:	89 2b       	or	r24, r25
    46b8:	96 81       	ldd	r25, Z+6	; 0x06
    46ba:	91 11       	cpse	r25, r1
    46bc:	98 e0       	ldi	r25, 0x08	; 8
    46be:	89 2b       	or	r24, r25
    46c0:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    46c2:	f8 01       	movw	r30, r16
    46c4:	40 81       	ld	r20, Z
    46c6:	51 81       	ldd	r21, Z+1	; 0x01
    46c8:	62 81       	ldd	r22, Z+2	; 0x02
    46ca:	73 81       	ldd	r23, Z+3	; 0x03
    46cc:	00 e0       	ldi	r16, 0x00	; 0
    46ce:	18 e4       	ldi	r17, 0x48	; 72
    46d0:	28 ee       	ldi	r18, 0xE8	; 232
    46d2:	31 e0       	ldi	r19, 0x01	; 1
    46d4:	ce 01       	movw	r24, r28
    46d6:	54 de       	rcall	.-856    	; 0x4380 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    46d8:	9b 81       	ldd	r25, Y+3	; 0x03
    46da:	98 60       	ori	r25, 0x08	; 8
    46dc:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    46de:	9b 81       	ldd	r25, Y+3	; 0x03
    46e0:	90 61       	ori	r25, 0x10	; 16
    46e2:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    46e4:	df 91       	pop	r29
    46e6:	cf 91       	pop	r28
    46e8:	1f 91       	pop	r17
    46ea:	0f 91       	pop	r16
    46ec:	08 95       	ret

000046ee <__subsf3>:
    46ee:	50 58       	subi	r21, 0x80	; 128

000046f0 <__addsf3>:
    46f0:	bb 27       	eor	r27, r27
    46f2:	aa 27       	eor	r26, r26
    46f4:	0e d0       	rcall	.+28     	; 0x4712 <__addsf3x>
    46f6:	70 c1       	rjmp	.+736    	; 0x49d8 <__fp_round>
    46f8:	61 d1       	rcall	.+706    	; 0x49bc <__fp_pscA>
    46fa:	30 f0       	brcs	.+12     	; 0x4708 <__addsf3+0x18>
    46fc:	66 d1       	rcall	.+716    	; 0x49ca <__fp_pscB>
    46fe:	20 f0       	brcs	.+8      	; 0x4708 <__addsf3+0x18>
    4700:	31 f4       	brne	.+12     	; 0x470e <__addsf3+0x1e>
    4702:	9f 3f       	cpi	r25, 0xFF	; 255
    4704:	11 f4       	brne	.+4      	; 0x470a <__addsf3+0x1a>
    4706:	1e f4       	brtc	.+6      	; 0x470e <__addsf3+0x1e>
    4708:	56 c1       	rjmp	.+684    	; 0x49b6 <__fp_nan>
    470a:	0e f4       	brtc	.+2      	; 0x470e <__addsf3+0x1e>
    470c:	e0 95       	com	r30
    470e:	e7 fb       	bst	r30, 7
    4710:	4c c1       	rjmp	.+664    	; 0x49aa <__fp_inf>

00004712 <__addsf3x>:
    4712:	e9 2f       	mov	r30, r25
    4714:	72 d1       	rcall	.+740    	; 0x49fa <__fp_split3>
    4716:	80 f3       	brcs	.-32     	; 0x46f8 <__addsf3+0x8>
    4718:	ba 17       	cp	r27, r26
    471a:	62 07       	cpc	r22, r18
    471c:	73 07       	cpc	r23, r19
    471e:	84 07       	cpc	r24, r20
    4720:	95 07       	cpc	r25, r21
    4722:	18 f0       	brcs	.+6      	; 0x472a <__addsf3x+0x18>
    4724:	71 f4       	brne	.+28     	; 0x4742 <__addsf3x+0x30>
    4726:	9e f5       	brtc	.+102    	; 0x478e <__addsf3x+0x7c>
    4728:	8a c1       	rjmp	.+788    	; 0x4a3e <__fp_zero>
    472a:	0e f4       	brtc	.+2      	; 0x472e <__addsf3x+0x1c>
    472c:	e0 95       	com	r30
    472e:	0b 2e       	mov	r0, r27
    4730:	ba 2f       	mov	r27, r26
    4732:	a0 2d       	mov	r26, r0
    4734:	0b 01       	movw	r0, r22
    4736:	b9 01       	movw	r22, r18
    4738:	90 01       	movw	r18, r0
    473a:	0c 01       	movw	r0, r24
    473c:	ca 01       	movw	r24, r20
    473e:	a0 01       	movw	r20, r0
    4740:	11 24       	eor	r1, r1
    4742:	ff 27       	eor	r31, r31
    4744:	59 1b       	sub	r21, r25
    4746:	99 f0       	breq	.+38     	; 0x476e <__addsf3x+0x5c>
    4748:	59 3f       	cpi	r21, 0xF9	; 249
    474a:	50 f4       	brcc	.+20     	; 0x4760 <__addsf3x+0x4e>
    474c:	50 3e       	cpi	r21, 0xE0	; 224
    474e:	68 f1       	brcs	.+90     	; 0x47aa <__addsf3x+0x98>
    4750:	1a 16       	cp	r1, r26
    4752:	f0 40       	sbci	r31, 0x00	; 0
    4754:	a2 2f       	mov	r26, r18
    4756:	23 2f       	mov	r18, r19
    4758:	34 2f       	mov	r19, r20
    475a:	44 27       	eor	r20, r20
    475c:	58 5f       	subi	r21, 0xF8	; 248
    475e:	f3 cf       	rjmp	.-26     	; 0x4746 <__addsf3x+0x34>
    4760:	46 95       	lsr	r20
    4762:	37 95       	ror	r19
    4764:	27 95       	ror	r18
    4766:	a7 95       	ror	r26
    4768:	f0 40       	sbci	r31, 0x00	; 0
    476a:	53 95       	inc	r21
    476c:	c9 f7       	brne	.-14     	; 0x4760 <__addsf3x+0x4e>
    476e:	7e f4       	brtc	.+30     	; 0x478e <__addsf3x+0x7c>
    4770:	1f 16       	cp	r1, r31
    4772:	ba 0b       	sbc	r27, r26
    4774:	62 0b       	sbc	r22, r18
    4776:	73 0b       	sbc	r23, r19
    4778:	84 0b       	sbc	r24, r20
    477a:	ba f0       	brmi	.+46     	; 0x47aa <__addsf3x+0x98>
    477c:	91 50       	subi	r25, 0x01	; 1
    477e:	a1 f0       	breq	.+40     	; 0x47a8 <__addsf3x+0x96>
    4780:	ff 0f       	add	r31, r31
    4782:	bb 1f       	adc	r27, r27
    4784:	66 1f       	adc	r22, r22
    4786:	77 1f       	adc	r23, r23
    4788:	88 1f       	adc	r24, r24
    478a:	c2 f7       	brpl	.-16     	; 0x477c <__addsf3x+0x6a>
    478c:	0e c0       	rjmp	.+28     	; 0x47aa <__addsf3x+0x98>
    478e:	ba 0f       	add	r27, r26
    4790:	62 1f       	adc	r22, r18
    4792:	73 1f       	adc	r23, r19
    4794:	84 1f       	adc	r24, r20
    4796:	48 f4       	brcc	.+18     	; 0x47aa <__addsf3x+0x98>
    4798:	87 95       	ror	r24
    479a:	77 95       	ror	r23
    479c:	67 95       	ror	r22
    479e:	b7 95       	ror	r27
    47a0:	f7 95       	ror	r31
    47a2:	9e 3f       	cpi	r25, 0xFE	; 254
    47a4:	08 f0       	brcs	.+2      	; 0x47a8 <__addsf3x+0x96>
    47a6:	b3 cf       	rjmp	.-154    	; 0x470e <__addsf3+0x1e>
    47a8:	93 95       	inc	r25
    47aa:	88 0f       	add	r24, r24
    47ac:	08 f0       	brcs	.+2      	; 0x47b0 <__addsf3x+0x9e>
    47ae:	99 27       	eor	r25, r25
    47b0:	ee 0f       	add	r30, r30
    47b2:	97 95       	ror	r25
    47b4:	87 95       	ror	r24
    47b6:	08 95       	ret

000047b8 <__cmpsf2>:
    47b8:	d4 d0       	rcall	.+424    	; 0x4962 <__fp_cmp>
    47ba:	08 f4       	brcc	.+2      	; 0x47be <__cmpsf2+0x6>
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	08 95       	ret

000047c0 <__divsf3>:
    47c0:	0c d0       	rcall	.+24     	; 0x47da <__divsf3x>
    47c2:	0a c1       	rjmp	.+532    	; 0x49d8 <__fp_round>
    47c4:	02 d1       	rcall	.+516    	; 0x49ca <__fp_pscB>
    47c6:	40 f0       	brcs	.+16     	; 0x47d8 <__divsf3+0x18>
    47c8:	f9 d0       	rcall	.+498    	; 0x49bc <__fp_pscA>
    47ca:	30 f0       	brcs	.+12     	; 0x47d8 <__divsf3+0x18>
    47cc:	21 f4       	brne	.+8      	; 0x47d6 <__divsf3+0x16>
    47ce:	5f 3f       	cpi	r21, 0xFF	; 255
    47d0:	19 f0       	breq	.+6      	; 0x47d8 <__divsf3+0x18>
    47d2:	eb c0       	rjmp	.+470    	; 0x49aa <__fp_inf>
    47d4:	51 11       	cpse	r21, r1
    47d6:	34 c1       	rjmp	.+616    	; 0x4a40 <__fp_szero>
    47d8:	ee c0       	rjmp	.+476    	; 0x49b6 <__fp_nan>

000047da <__divsf3x>:
    47da:	0f d1       	rcall	.+542    	; 0x49fa <__fp_split3>
    47dc:	98 f3       	brcs	.-26     	; 0x47c4 <__divsf3+0x4>

000047de <__divsf3_pse>:
    47de:	99 23       	and	r25, r25
    47e0:	c9 f3       	breq	.-14     	; 0x47d4 <__divsf3+0x14>
    47e2:	55 23       	and	r21, r21
    47e4:	b1 f3       	breq	.-20     	; 0x47d2 <__divsf3+0x12>
    47e6:	95 1b       	sub	r25, r21
    47e8:	55 0b       	sbc	r21, r21
    47ea:	bb 27       	eor	r27, r27
    47ec:	aa 27       	eor	r26, r26
    47ee:	62 17       	cp	r22, r18
    47f0:	73 07       	cpc	r23, r19
    47f2:	84 07       	cpc	r24, r20
    47f4:	38 f0       	brcs	.+14     	; 0x4804 <__divsf3_pse+0x26>
    47f6:	9f 5f       	subi	r25, 0xFF	; 255
    47f8:	5f 4f       	sbci	r21, 0xFF	; 255
    47fa:	22 0f       	add	r18, r18
    47fc:	33 1f       	adc	r19, r19
    47fe:	44 1f       	adc	r20, r20
    4800:	aa 1f       	adc	r26, r26
    4802:	a9 f3       	breq	.-22     	; 0x47ee <__divsf3_pse+0x10>
    4804:	33 d0       	rcall	.+102    	; 0x486c <__divsf3_pse+0x8e>
    4806:	0e 2e       	mov	r0, r30
    4808:	3a f0       	brmi	.+14     	; 0x4818 <__divsf3_pse+0x3a>
    480a:	e0 e8       	ldi	r30, 0x80	; 128
    480c:	30 d0       	rcall	.+96     	; 0x486e <__divsf3_pse+0x90>
    480e:	91 50       	subi	r25, 0x01	; 1
    4810:	50 40       	sbci	r21, 0x00	; 0
    4812:	e6 95       	lsr	r30
    4814:	00 1c       	adc	r0, r0
    4816:	ca f7       	brpl	.-14     	; 0x480a <__divsf3_pse+0x2c>
    4818:	29 d0       	rcall	.+82     	; 0x486c <__divsf3_pse+0x8e>
    481a:	fe 2f       	mov	r31, r30
    481c:	27 d0       	rcall	.+78     	; 0x486c <__divsf3_pse+0x8e>
    481e:	66 0f       	add	r22, r22
    4820:	77 1f       	adc	r23, r23
    4822:	88 1f       	adc	r24, r24
    4824:	bb 1f       	adc	r27, r27
    4826:	26 17       	cp	r18, r22
    4828:	37 07       	cpc	r19, r23
    482a:	48 07       	cpc	r20, r24
    482c:	ab 07       	cpc	r26, r27
    482e:	b0 e8       	ldi	r27, 0x80	; 128
    4830:	09 f0       	breq	.+2      	; 0x4834 <__divsf3_pse+0x56>
    4832:	bb 0b       	sbc	r27, r27
    4834:	80 2d       	mov	r24, r0
    4836:	bf 01       	movw	r22, r30
    4838:	ff 27       	eor	r31, r31
    483a:	93 58       	subi	r25, 0x83	; 131
    483c:	5f 4f       	sbci	r21, 0xFF	; 255
    483e:	2a f0       	brmi	.+10     	; 0x484a <__divsf3_pse+0x6c>
    4840:	9e 3f       	cpi	r25, 0xFE	; 254
    4842:	51 05       	cpc	r21, r1
    4844:	68 f0       	brcs	.+26     	; 0x4860 <__divsf3_pse+0x82>
    4846:	b1 c0       	rjmp	.+354    	; 0x49aa <__fp_inf>
    4848:	fb c0       	rjmp	.+502    	; 0x4a40 <__fp_szero>
    484a:	5f 3f       	cpi	r21, 0xFF	; 255
    484c:	ec f3       	brlt	.-6      	; 0x4848 <__divsf3_pse+0x6a>
    484e:	98 3e       	cpi	r25, 0xE8	; 232
    4850:	dc f3       	brlt	.-10     	; 0x4848 <__divsf3_pse+0x6a>
    4852:	86 95       	lsr	r24
    4854:	77 95       	ror	r23
    4856:	67 95       	ror	r22
    4858:	b7 95       	ror	r27
    485a:	f7 95       	ror	r31
    485c:	9f 5f       	subi	r25, 0xFF	; 255
    485e:	c9 f7       	brne	.-14     	; 0x4852 <__divsf3_pse+0x74>
    4860:	88 0f       	add	r24, r24
    4862:	91 1d       	adc	r25, r1
    4864:	96 95       	lsr	r25
    4866:	87 95       	ror	r24
    4868:	97 f9       	bld	r25, 7
    486a:	08 95       	ret
    486c:	e1 e0       	ldi	r30, 0x01	; 1
    486e:	66 0f       	add	r22, r22
    4870:	77 1f       	adc	r23, r23
    4872:	88 1f       	adc	r24, r24
    4874:	bb 1f       	adc	r27, r27
    4876:	62 17       	cp	r22, r18
    4878:	73 07       	cpc	r23, r19
    487a:	84 07       	cpc	r24, r20
    487c:	ba 07       	cpc	r27, r26
    487e:	20 f0       	brcs	.+8      	; 0x4888 <__divsf3_pse+0xaa>
    4880:	62 1b       	sub	r22, r18
    4882:	73 0b       	sbc	r23, r19
    4884:	84 0b       	sbc	r24, r20
    4886:	ba 0b       	sbc	r27, r26
    4888:	ee 1f       	adc	r30, r30
    488a:	88 f7       	brcc	.-30     	; 0x486e <__divsf3_pse+0x90>
    488c:	e0 95       	com	r30
    488e:	08 95       	ret

00004890 <__fixunssfsi>:
    4890:	bc d0       	rcall	.+376    	; 0x4a0a <__fp_splitA>
    4892:	88 f0       	brcs	.+34     	; 0x48b6 <__fixunssfsi+0x26>
    4894:	9f 57       	subi	r25, 0x7F	; 127
    4896:	90 f0       	brcs	.+36     	; 0x48bc <__fixunssfsi+0x2c>
    4898:	b9 2f       	mov	r27, r25
    489a:	99 27       	eor	r25, r25
    489c:	b7 51       	subi	r27, 0x17	; 23
    489e:	a0 f0       	brcs	.+40     	; 0x48c8 <__fixunssfsi+0x38>
    48a0:	d1 f0       	breq	.+52     	; 0x48d6 <__fixunssfsi+0x46>
    48a2:	66 0f       	add	r22, r22
    48a4:	77 1f       	adc	r23, r23
    48a6:	88 1f       	adc	r24, r24
    48a8:	99 1f       	adc	r25, r25
    48aa:	1a f0       	brmi	.+6      	; 0x48b2 <__fixunssfsi+0x22>
    48ac:	ba 95       	dec	r27
    48ae:	c9 f7       	brne	.-14     	; 0x48a2 <__fixunssfsi+0x12>
    48b0:	12 c0       	rjmp	.+36     	; 0x48d6 <__fixunssfsi+0x46>
    48b2:	b1 30       	cpi	r27, 0x01	; 1
    48b4:	81 f0       	breq	.+32     	; 0x48d6 <__fixunssfsi+0x46>
    48b6:	c3 d0       	rcall	.+390    	; 0x4a3e <__fp_zero>
    48b8:	b1 e0       	ldi	r27, 0x01	; 1
    48ba:	08 95       	ret
    48bc:	c0 c0       	rjmp	.+384    	; 0x4a3e <__fp_zero>
    48be:	67 2f       	mov	r22, r23
    48c0:	78 2f       	mov	r23, r24
    48c2:	88 27       	eor	r24, r24
    48c4:	b8 5f       	subi	r27, 0xF8	; 248
    48c6:	39 f0       	breq	.+14     	; 0x48d6 <__fixunssfsi+0x46>
    48c8:	b9 3f       	cpi	r27, 0xF9	; 249
    48ca:	cc f3       	brlt	.-14     	; 0x48be <__fixunssfsi+0x2e>
    48cc:	86 95       	lsr	r24
    48ce:	77 95       	ror	r23
    48d0:	67 95       	ror	r22
    48d2:	b3 95       	inc	r27
    48d4:	d9 f7       	brne	.-10     	; 0x48cc <__fixunssfsi+0x3c>
    48d6:	3e f4       	brtc	.+14     	; 0x48e6 <__fixunssfsi+0x56>
    48d8:	90 95       	com	r25
    48da:	80 95       	com	r24
    48dc:	70 95       	com	r23
    48de:	61 95       	neg	r22
    48e0:	7f 4f       	sbci	r23, 0xFF	; 255
    48e2:	8f 4f       	sbci	r24, 0xFF	; 255
    48e4:	9f 4f       	sbci	r25, 0xFF	; 255
    48e6:	08 95       	ret

000048e8 <__floatunsisf>:
    48e8:	e8 94       	clt
    48ea:	09 c0       	rjmp	.+18     	; 0x48fe <__floatsisf+0x12>

000048ec <__floatsisf>:
    48ec:	97 fb       	bst	r25, 7
    48ee:	3e f4       	brtc	.+14     	; 0x48fe <__floatsisf+0x12>
    48f0:	90 95       	com	r25
    48f2:	80 95       	com	r24
    48f4:	70 95       	com	r23
    48f6:	61 95       	neg	r22
    48f8:	7f 4f       	sbci	r23, 0xFF	; 255
    48fa:	8f 4f       	sbci	r24, 0xFF	; 255
    48fc:	9f 4f       	sbci	r25, 0xFF	; 255
    48fe:	99 23       	and	r25, r25
    4900:	a9 f0       	breq	.+42     	; 0x492c <__floatsisf+0x40>
    4902:	f9 2f       	mov	r31, r25
    4904:	96 e9       	ldi	r25, 0x96	; 150
    4906:	bb 27       	eor	r27, r27
    4908:	93 95       	inc	r25
    490a:	f6 95       	lsr	r31
    490c:	87 95       	ror	r24
    490e:	77 95       	ror	r23
    4910:	67 95       	ror	r22
    4912:	b7 95       	ror	r27
    4914:	f1 11       	cpse	r31, r1
    4916:	f8 cf       	rjmp	.-16     	; 0x4908 <__floatsisf+0x1c>
    4918:	fa f4       	brpl	.+62     	; 0x4958 <__floatsisf+0x6c>
    491a:	bb 0f       	add	r27, r27
    491c:	11 f4       	brne	.+4      	; 0x4922 <__floatsisf+0x36>
    491e:	60 ff       	sbrs	r22, 0
    4920:	1b c0       	rjmp	.+54     	; 0x4958 <__floatsisf+0x6c>
    4922:	6f 5f       	subi	r22, 0xFF	; 255
    4924:	7f 4f       	sbci	r23, 0xFF	; 255
    4926:	8f 4f       	sbci	r24, 0xFF	; 255
    4928:	9f 4f       	sbci	r25, 0xFF	; 255
    492a:	16 c0       	rjmp	.+44     	; 0x4958 <__floatsisf+0x6c>
    492c:	88 23       	and	r24, r24
    492e:	11 f0       	breq	.+4      	; 0x4934 <__floatsisf+0x48>
    4930:	96 e9       	ldi	r25, 0x96	; 150
    4932:	11 c0       	rjmp	.+34     	; 0x4956 <__floatsisf+0x6a>
    4934:	77 23       	and	r23, r23
    4936:	21 f0       	breq	.+8      	; 0x4940 <__floatsisf+0x54>
    4938:	9e e8       	ldi	r25, 0x8E	; 142
    493a:	87 2f       	mov	r24, r23
    493c:	76 2f       	mov	r23, r22
    493e:	05 c0       	rjmp	.+10     	; 0x494a <__floatsisf+0x5e>
    4940:	66 23       	and	r22, r22
    4942:	71 f0       	breq	.+28     	; 0x4960 <__floatsisf+0x74>
    4944:	96 e8       	ldi	r25, 0x86	; 134
    4946:	86 2f       	mov	r24, r22
    4948:	70 e0       	ldi	r23, 0x00	; 0
    494a:	60 e0       	ldi	r22, 0x00	; 0
    494c:	2a f0       	brmi	.+10     	; 0x4958 <__floatsisf+0x6c>
    494e:	9a 95       	dec	r25
    4950:	66 0f       	add	r22, r22
    4952:	77 1f       	adc	r23, r23
    4954:	88 1f       	adc	r24, r24
    4956:	da f7       	brpl	.-10     	; 0x494e <__floatsisf+0x62>
    4958:	88 0f       	add	r24, r24
    495a:	96 95       	lsr	r25
    495c:	87 95       	ror	r24
    495e:	97 f9       	bld	r25, 7
    4960:	08 95       	ret

00004962 <__fp_cmp>:
    4962:	99 0f       	add	r25, r25
    4964:	00 08       	sbc	r0, r0
    4966:	55 0f       	add	r21, r21
    4968:	aa 0b       	sbc	r26, r26
    496a:	e0 e8       	ldi	r30, 0x80	; 128
    496c:	fe ef       	ldi	r31, 0xFE	; 254
    496e:	16 16       	cp	r1, r22
    4970:	17 06       	cpc	r1, r23
    4972:	e8 07       	cpc	r30, r24
    4974:	f9 07       	cpc	r31, r25
    4976:	c0 f0       	brcs	.+48     	; 0x49a8 <__fp_cmp+0x46>
    4978:	12 16       	cp	r1, r18
    497a:	13 06       	cpc	r1, r19
    497c:	e4 07       	cpc	r30, r20
    497e:	f5 07       	cpc	r31, r21
    4980:	98 f0       	brcs	.+38     	; 0x49a8 <__fp_cmp+0x46>
    4982:	62 1b       	sub	r22, r18
    4984:	73 0b       	sbc	r23, r19
    4986:	84 0b       	sbc	r24, r20
    4988:	95 0b       	sbc	r25, r21
    498a:	39 f4       	brne	.+14     	; 0x499a <__fp_cmp+0x38>
    498c:	0a 26       	eor	r0, r26
    498e:	61 f0       	breq	.+24     	; 0x49a8 <__fp_cmp+0x46>
    4990:	23 2b       	or	r18, r19
    4992:	24 2b       	or	r18, r20
    4994:	25 2b       	or	r18, r21
    4996:	21 f4       	brne	.+8      	; 0x49a0 <__fp_cmp+0x3e>
    4998:	08 95       	ret
    499a:	0a 26       	eor	r0, r26
    499c:	09 f4       	brne	.+2      	; 0x49a0 <__fp_cmp+0x3e>
    499e:	a1 40       	sbci	r26, 0x01	; 1
    49a0:	a6 95       	lsr	r26
    49a2:	8f ef       	ldi	r24, 0xFF	; 255
    49a4:	81 1d       	adc	r24, r1
    49a6:	81 1d       	adc	r24, r1
    49a8:	08 95       	ret

000049aa <__fp_inf>:
    49aa:	97 f9       	bld	r25, 7
    49ac:	9f 67       	ori	r25, 0x7F	; 127
    49ae:	80 e8       	ldi	r24, 0x80	; 128
    49b0:	70 e0       	ldi	r23, 0x00	; 0
    49b2:	60 e0       	ldi	r22, 0x00	; 0
    49b4:	08 95       	ret

000049b6 <__fp_nan>:
    49b6:	9f ef       	ldi	r25, 0xFF	; 255
    49b8:	80 ec       	ldi	r24, 0xC0	; 192
    49ba:	08 95       	ret

000049bc <__fp_pscA>:
    49bc:	00 24       	eor	r0, r0
    49be:	0a 94       	dec	r0
    49c0:	16 16       	cp	r1, r22
    49c2:	17 06       	cpc	r1, r23
    49c4:	18 06       	cpc	r1, r24
    49c6:	09 06       	cpc	r0, r25
    49c8:	08 95       	ret

000049ca <__fp_pscB>:
    49ca:	00 24       	eor	r0, r0
    49cc:	0a 94       	dec	r0
    49ce:	12 16       	cp	r1, r18
    49d0:	13 06       	cpc	r1, r19
    49d2:	14 06       	cpc	r1, r20
    49d4:	05 06       	cpc	r0, r21
    49d6:	08 95       	ret

000049d8 <__fp_round>:
    49d8:	09 2e       	mov	r0, r25
    49da:	03 94       	inc	r0
    49dc:	00 0c       	add	r0, r0
    49de:	11 f4       	brne	.+4      	; 0x49e4 <__fp_round+0xc>
    49e0:	88 23       	and	r24, r24
    49e2:	52 f0       	brmi	.+20     	; 0x49f8 <__fp_round+0x20>
    49e4:	bb 0f       	add	r27, r27
    49e6:	40 f4       	brcc	.+16     	; 0x49f8 <__fp_round+0x20>
    49e8:	bf 2b       	or	r27, r31
    49ea:	11 f4       	brne	.+4      	; 0x49f0 <__fp_round+0x18>
    49ec:	60 ff       	sbrs	r22, 0
    49ee:	04 c0       	rjmp	.+8      	; 0x49f8 <__fp_round+0x20>
    49f0:	6f 5f       	subi	r22, 0xFF	; 255
    49f2:	7f 4f       	sbci	r23, 0xFF	; 255
    49f4:	8f 4f       	sbci	r24, 0xFF	; 255
    49f6:	9f 4f       	sbci	r25, 0xFF	; 255
    49f8:	08 95       	ret

000049fa <__fp_split3>:
    49fa:	57 fd       	sbrc	r21, 7
    49fc:	90 58       	subi	r25, 0x80	; 128
    49fe:	44 0f       	add	r20, r20
    4a00:	55 1f       	adc	r21, r21
    4a02:	59 f0       	breq	.+22     	; 0x4a1a <__fp_splitA+0x10>
    4a04:	5f 3f       	cpi	r21, 0xFF	; 255
    4a06:	71 f0       	breq	.+28     	; 0x4a24 <__fp_splitA+0x1a>
    4a08:	47 95       	ror	r20

00004a0a <__fp_splitA>:
    4a0a:	88 0f       	add	r24, r24
    4a0c:	97 fb       	bst	r25, 7
    4a0e:	99 1f       	adc	r25, r25
    4a10:	61 f0       	breq	.+24     	; 0x4a2a <__fp_splitA+0x20>
    4a12:	9f 3f       	cpi	r25, 0xFF	; 255
    4a14:	79 f0       	breq	.+30     	; 0x4a34 <__fp_splitA+0x2a>
    4a16:	87 95       	ror	r24
    4a18:	08 95       	ret
    4a1a:	12 16       	cp	r1, r18
    4a1c:	13 06       	cpc	r1, r19
    4a1e:	14 06       	cpc	r1, r20
    4a20:	55 1f       	adc	r21, r21
    4a22:	f2 cf       	rjmp	.-28     	; 0x4a08 <__fp_split3+0xe>
    4a24:	46 95       	lsr	r20
    4a26:	f1 df       	rcall	.-30     	; 0x4a0a <__fp_splitA>
    4a28:	08 c0       	rjmp	.+16     	; 0x4a3a <__fp_splitA+0x30>
    4a2a:	16 16       	cp	r1, r22
    4a2c:	17 06       	cpc	r1, r23
    4a2e:	18 06       	cpc	r1, r24
    4a30:	99 1f       	adc	r25, r25
    4a32:	f1 cf       	rjmp	.-30     	; 0x4a16 <__fp_splitA+0xc>
    4a34:	86 95       	lsr	r24
    4a36:	71 05       	cpc	r23, r1
    4a38:	61 05       	cpc	r22, r1
    4a3a:	08 94       	sec
    4a3c:	08 95       	ret

00004a3e <__fp_zero>:
    4a3e:	e8 94       	clt

00004a40 <__fp_szero>:
    4a40:	bb 27       	eor	r27, r27
    4a42:	66 27       	eor	r22, r22
    4a44:	77 27       	eor	r23, r23
    4a46:	cb 01       	movw	r24, r22
    4a48:	97 f9       	bld	r25, 7
    4a4a:	08 95       	ret

00004a4c <__gesf2>:
    4a4c:	8a df       	rcall	.-236    	; 0x4962 <__fp_cmp>
    4a4e:	08 f4       	brcc	.+2      	; 0x4a52 <__gesf2+0x6>
    4a50:	8f ef       	ldi	r24, 0xFF	; 255
    4a52:	08 95       	ret

00004a54 <__mulsf3>:
    4a54:	0b d0       	rcall	.+22     	; 0x4a6c <__mulsf3x>
    4a56:	c0 cf       	rjmp	.-128    	; 0x49d8 <__fp_round>
    4a58:	b1 df       	rcall	.-158    	; 0x49bc <__fp_pscA>
    4a5a:	28 f0       	brcs	.+10     	; 0x4a66 <__mulsf3+0x12>
    4a5c:	b6 df       	rcall	.-148    	; 0x49ca <__fp_pscB>
    4a5e:	18 f0       	brcs	.+6      	; 0x4a66 <__mulsf3+0x12>
    4a60:	95 23       	and	r25, r21
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <__mulsf3+0x12>
    4a64:	a2 cf       	rjmp	.-188    	; 0x49aa <__fp_inf>
    4a66:	a7 cf       	rjmp	.-178    	; 0x49b6 <__fp_nan>
    4a68:	11 24       	eor	r1, r1
    4a6a:	ea cf       	rjmp	.-44     	; 0x4a40 <__fp_szero>

00004a6c <__mulsf3x>:
    4a6c:	c6 df       	rcall	.-116    	; 0x49fa <__fp_split3>
    4a6e:	a0 f3       	brcs	.-24     	; 0x4a58 <__mulsf3+0x4>

00004a70 <__mulsf3_pse>:
    4a70:	95 9f       	mul	r25, r21
    4a72:	d1 f3       	breq	.-12     	; 0x4a68 <__mulsf3+0x14>
    4a74:	95 0f       	add	r25, r21
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	55 1f       	adc	r21, r21
    4a7a:	62 9f       	mul	r22, r18
    4a7c:	f0 01       	movw	r30, r0
    4a7e:	72 9f       	mul	r23, r18
    4a80:	bb 27       	eor	r27, r27
    4a82:	f0 0d       	add	r31, r0
    4a84:	b1 1d       	adc	r27, r1
    4a86:	63 9f       	mul	r22, r19
    4a88:	aa 27       	eor	r26, r26
    4a8a:	f0 0d       	add	r31, r0
    4a8c:	b1 1d       	adc	r27, r1
    4a8e:	aa 1f       	adc	r26, r26
    4a90:	64 9f       	mul	r22, r20
    4a92:	66 27       	eor	r22, r22
    4a94:	b0 0d       	add	r27, r0
    4a96:	a1 1d       	adc	r26, r1
    4a98:	66 1f       	adc	r22, r22
    4a9a:	82 9f       	mul	r24, r18
    4a9c:	22 27       	eor	r18, r18
    4a9e:	b0 0d       	add	r27, r0
    4aa0:	a1 1d       	adc	r26, r1
    4aa2:	62 1f       	adc	r22, r18
    4aa4:	73 9f       	mul	r23, r19
    4aa6:	b0 0d       	add	r27, r0
    4aa8:	a1 1d       	adc	r26, r1
    4aaa:	62 1f       	adc	r22, r18
    4aac:	83 9f       	mul	r24, r19
    4aae:	a0 0d       	add	r26, r0
    4ab0:	61 1d       	adc	r22, r1
    4ab2:	22 1f       	adc	r18, r18
    4ab4:	74 9f       	mul	r23, r20
    4ab6:	33 27       	eor	r19, r19
    4ab8:	a0 0d       	add	r26, r0
    4aba:	61 1d       	adc	r22, r1
    4abc:	23 1f       	adc	r18, r19
    4abe:	84 9f       	mul	r24, r20
    4ac0:	60 0d       	add	r22, r0
    4ac2:	21 1d       	adc	r18, r1
    4ac4:	82 2f       	mov	r24, r18
    4ac6:	76 2f       	mov	r23, r22
    4ac8:	6a 2f       	mov	r22, r26
    4aca:	11 24       	eor	r1, r1
    4acc:	9f 57       	subi	r25, 0x7F	; 127
    4ace:	50 40       	sbci	r21, 0x00	; 0
    4ad0:	8a f0       	brmi	.+34     	; 0x4af4 <__mulsf3_pse+0x84>
    4ad2:	e1 f0       	breq	.+56     	; 0x4b0c <__mulsf3_pse+0x9c>
    4ad4:	88 23       	and	r24, r24
    4ad6:	4a f0       	brmi	.+18     	; 0x4aea <__mulsf3_pse+0x7a>
    4ad8:	ee 0f       	add	r30, r30
    4ada:	ff 1f       	adc	r31, r31
    4adc:	bb 1f       	adc	r27, r27
    4ade:	66 1f       	adc	r22, r22
    4ae0:	77 1f       	adc	r23, r23
    4ae2:	88 1f       	adc	r24, r24
    4ae4:	91 50       	subi	r25, 0x01	; 1
    4ae6:	50 40       	sbci	r21, 0x00	; 0
    4ae8:	a9 f7       	brne	.-22     	; 0x4ad4 <__mulsf3_pse+0x64>
    4aea:	9e 3f       	cpi	r25, 0xFE	; 254
    4aec:	51 05       	cpc	r21, r1
    4aee:	70 f0       	brcs	.+28     	; 0x4b0c <__mulsf3_pse+0x9c>
    4af0:	5c cf       	rjmp	.-328    	; 0x49aa <__fp_inf>
    4af2:	a6 cf       	rjmp	.-180    	; 0x4a40 <__fp_szero>
    4af4:	5f 3f       	cpi	r21, 0xFF	; 255
    4af6:	ec f3       	brlt	.-6      	; 0x4af2 <__mulsf3_pse+0x82>
    4af8:	98 3e       	cpi	r25, 0xE8	; 232
    4afa:	dc f3       	brlt	.-10     	; 0x4af2 <__mulsf3_pse+0x82>
    4afc:	86 95       	lsr	r24
    4afe:	77 95       	ror	r23
    4b00:	67 95       	ror	r22
    4b02:	b7 95       	ror	r27
    4b04:	f7 95       	ror	r31
    4b06:	e7 95       	ror	r30
    4b08:	9f 5f       	subi	r25, 0xFF	; 255
    4b0a:	c1 f7       	brne	.-16     	; 0x4afc <__mulsf3_pse+0x8c>
    4b0c:	fe 2b       	or	r31, r30
    4b0e:	88 0f       	add	r24, r24
    4b10:	91 1d       	adc	r25, r1
    4b12:	96 95       	lsr	r25
    4b14:	87 95       	ror	r24
    4b16:	97 f9       	bld	r25, 7
    4b18:	08 95       	ret

00004b1a <__udivmodhi4>:
    4b1a:	aa 1b       	sub	r26, r26
    4b1c:	bb 1b       	sub	r27, r27
    4b1e:	51 e1       	ldi	r21, 0x11	; 17
    4b20:	07 c0       	rjmp	.+14     	; 0x4b30 <__udivmodhi4_ep>

00004b22 <__udivmodhi4_loop>:
    4b22:	aa 1f       	adc	r26, r26
    4b24:	bb 1f       	adc	r27, r27
    4b26:	a6 17       	cp	r26, r22
    4b28:	b7 07       	cpc	r27, r23
    4b2a:	10 f0       	brcs	.+4      	; 0x4b30 <__udivmodhi4_ep>
    4b2c:	a6 1b       	sub	r26, r22
    4b2e:	b7 0b       	sbc	r27, r23

00004b30 <__udivmodhi4_ep>:
    4b30:	88 1f       	adc	r24, r24
    4b32:	99 1f       	adc	r25, r25
    4b34:	5a 95       	dec	r21
    4b36:	a9 f7       	brne	.-22     	; 0x4b22 <__udivmodhi4_loop>
    4b38:	80 95       	com	r24
    4b3a:	90 95       	com	r25
    4b3c:	bc 01       	movw	r22, r24
    4b3e:	cd 01       	movw	r24, r26
    4b40:	08 95       	ret

00004b42 <__divmodhi4>:
    4b42:	97 fb       	bst	r25, 7
    4b44:	07 2e       	mov	r0, r23
    4b46:	16 f4       	brtc	.+4      	; 0x4b4c <__divmodhi4+0xa>
    4b48:	00 94       	com	r0
    4b4a:	06 d0       	rcall	.+12     	; 0x4b58 <__divmodhi4_neg1>
    4b4c:	77 fd       	sbrc	r23, 7
    4b4e:	08 d0       	rcall	.+16     	; 0x4b60 <__divmodhi4_neg2>
    4b50:	e4 df       	rcall	.-56     	; 0x4b1a <__udivmodhi4>
    4b52:	07 fc       	sbrc	r0, 7
    4b54:	05 d0       	rcall	.+10     	; 0x4b60 <__divmodhi4_neg2>
    4b56:	3e f4       	brtc	.+14     	; 0x4b66 <__divmodhi4_exit>

00004b58 <__divmodhi4_neg1>:
    4b58:	90 95       	com	r25
    4b5a:	81 95       	neg	r24
    4b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b5e:	08 95       	ret

00004b60 <__divmodhi4_neg2>:
    4b60:	70 95       	com	r23
    4b62:	61 95       	neg	r22
    4b64:	7f 4f       	sbci	r23, 0xFF	; 255

00004b66 <__divmodhi4_exit>:
    4b66:	08 95       	ret

00004b68 <__udivmodsi4>:
    4b68:	a1 e2       	ldi	r26, 0x21	; 33
    4b6a:	1a 2e       	mov	r1, r26
    4b6c:	aa 1b       	sub	r26, r26
    4b6e:	bb 1b       	sub	r27, r27
    4b70:	fd 01       	movw	r30, r26
    4b72:	0d c0       	rjmp	.+26     	; 0x4b8e <__udivmodsi4_ep>

00004b74 <__udivmodsi4_loop>:
    4b74:	aa 1f       	adc	r26, r26
    4b76:	bb 1f       	adc	r27, r27
    4b78:	ee 1f       	adc	r30, r30
    4b7a:	ff 1f       	adc	r31, r31
    4b7c:	a2 17       	cp	r26, r18
    4b7e:	b3 07       	cpc	r27, r19
    4b80:	e4 07       	cpc	r30, r20
    4b82:	f5 07       	cpc	r31, r21
    4b84:	20 f0       	brcs	.+8      	; 0x4b8e <__udivmodsi4_ep>
    4b86:	a2 1b       	sub	r26, r18
    4b88:	b3 0b       	sbc	r27, r19
    4b8a:	e4 0b       	sbc	r30, r20
    4b8c:	f5 0b       	sbc	r31, r21

00004b8e <__udivmodsi4_ep>:
    4b8e:	66 1f       	adc	r22, r22
    4b90:	77 1f       	adc	r23, r23
    4b92:	88 1f       	adc	r24, r24
    4b94:	99 1f       	adc	r25, r25
    4b96:	1a 94       	dec	r1
    4b98:	69 f7       	brne	.-38     	; 0x4b74 <__udivmodsi4_loop>
    4b9a:	60 95       	com	r22
    4b9c:	70 95       	com	r23
    4b9e:	80 95       	com	r24
    4ba0:	90 95       	com	r25
    4ba2:	9b 01       	movw	r18, r22
    4ba4:	ac 01       	movw	r20, r24
    4ba6:	bd 01       	movw	r22, r26
    4ba8:	cf 01       	movw	r24, r30
    4baa:	08 95       	ret

00004bac <__tablejump2__>:
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	05 90       	lpm	r0, Z+
    4bb2:	f4 91       	lpm	r31, Z
    4bb4:	e0 2d       	mov	r30, r0
    4bb6:	09 94       	ijmp

00004bb8 <_exit>:
    4bb8:	f8 94       	cli

00004bba <__stop_program>:
    4bba:	ff cf       	rjmp	.-2      	; 0x4bba <__stop_program>
