
wear.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040b6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  000040b6  0000416a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000009af  0080213e  0080213e  000042a8  2**0
                  ALLOC
  3 .eeprom       0000000a  00810000  00810000  000042a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000042b2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  000042e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000157c4  00000000  00000000  00004990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003194  00000000  00000000  0001a154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b55a  00000000  00000000  0001d2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001618  00000000  00000000  00028844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c5ae  00000000  00000000  00029e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000631e  00000000  00000000  0005640a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e0  00000000  00000000  0005c728  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003e71  00000000  00000000  0005cf08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c3       	rjmp	.+1948   	; 0x79e <__ctors_end>
       2:	00 00       	nop
       4:	e9 c3       	rjmp	.+2002   	; 0x7d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c3       	rjmp	.+1998   	; 0x7d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c3       	rjmp	.+1994   	; 0x7d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c3       	rjmp	.+1990   	; 0x7d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c3       	rjmp	.+1986   	; 0x7d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c3       	rjmp	.+1982   	; 0x7d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c3       	rjmp	.+1978   	; 0x7d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c3       	rjmp	.+1974   	; 0x7d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_9>
      28:	d7 c3       	rjmp	.+1966   	; 0x7d8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__vector_11>
      30:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__vector_12>
      34:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__vector_13>
      38:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__vector_14>
      3c:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <__vector_15>
      40:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__vector_16>
      44:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__vector_17>
      48:	0c 94 36 19 	jmp	0x326c	; 0x326c <__vector_18>
      4c:	0c 94 5f 19 	jmp	0x32be	; 0x32be <__vector_19>
      50:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__vector_20>
      54:	0c 94 b1 19 	jmp	0x3362	; 0x3362 <__vector_21>
      58:	bf c3       	rjmp	.+1918   	; 0x7d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_23>
      60:	bb c3       	rjmp	.+1910   	; 0x7d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c3       	rjmp	.+1906   	; 0x7d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c3       	rjmp	.+1902   	; 0x7d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c3       	rjmp	.+1898   	; 0x7d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c3       	rjmp	.+1894   	; 0x7d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c3       	rjmp	.+1890   	; 0x7d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c3       	rjmp	.+1886   	; 0x7d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c3       	rjmp	.+1882   	; 0x7d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c3       	rjmp	.+1878   	; 0x7d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c3       	rjmp	.+1874   	; 0x7d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <__vector_34>
      8c:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__vector_35>
      90:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__vector_36>
      94:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__vector_37>
      98:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__vector_38>
      9c:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__vector_39>
      a0:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_40>
      a4:	99 c3       	rjmp	.+1842   	; 0x7d8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	97 c3       	rjmp	.+1838   	; 0x7d8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ab 0b       	sbc	r26, r27
      ae:	b0 0b       	sbc	r27, r16
      b0:	e2 0b       	sbc	r30, r18
      b2:	e2 0b       	sbc	r30, r18
      b4:	e2 0b       	sbc	r30, r18
      b6:	e2 0b       	sbc	r30, r18
      b8:	e2 0b       	sbc	r30, r18
      ba:	e2 0b       	sbc	r30, r18
      bc:	e2 0b       	sbc	r30, r18
      be:	e2 0b       	sbc	r30, r18
      c0:	e2 0b       	sbc	r30, r18
      c2:	e2 0b       	sbc	r30, r18
      c4:	e2 0b       	sbc	r30, r18
      c6:	e2 0b       	sbc	r30, r18
      c8:	e2 0b       	sbc	r30, r18
      ca:	e2 0b       	sbc	r30, r18
      cc:	b5 0b       	sbc	r27, r21
      ce:	e2 0b       	sbc	r30, r18
      d0:	e2 0b       	sbc	r30, r18
      d2:	e2 0b       	sbc	r30, r18
      d4:	e2 0b       	sbc	r30, r18
      d6:	e2 0b       	sbc	r30, r18
      d8:	e2 0b       	sbc	r30, r18
      da:	e2 0b       	sbc	r30, r18
      dc:	e2 0b       	sbc	r30, r18
      de:	e2 0b       	sbc	r30, r18
      e0:	e2 0b       	sbc	r30, r18
      e2:	e2 0b       	sbc	r30, r18
      e4:	e2 0b       	sbc	r30, r18
      e6:	e2 0b       	sbc	r30, r18
      e8:	e2 0b       	sbc	r30, r18
      ea:	e2 0b       	sbc	r30, r18
      ec:	e2 0b       	sbc	r30, r18
      ee:	ba 0b       	sbc	r27, r26
      f0:	bf 0b       	sbc	r27, r31
      f2:	e2 0b       	sbc	r30, r18
      f4:	e2 0b       	sbc	r30, r18
      f6:	e2 0b       	sbc	r30, r18
      f8:	e2 0b       	sbc	r30, r18
      fa:	e2 0b       	sbc	r30, r18
      fc:	e2 0b       	sbc	r30, r18
      fe:	e2 0b       	sbc	r30, r18
     100:	e2 0b       	sbc	r30, r18
     102:	e2 0b       	sbc	r30, r18
     104:	e2 0b       	sbc	r30, r18
     106:	e2 0b       	sbc	r30, r18
     108:	e2 0b       	sbc	r30, r18
     10a:	e2 0b       	sbc	r30, r18
     10c:	e2 0b       	sbc	r30, r18
     10e:	c4 0b       	sbc	r28, r20
     110:	c9 0b       	sbc	r28, r25
     112:	e2 0b       	sbc	r30, r18
     114:	e2 0b       	sbc	r30, r18
     116:	e2 0b       	sbc	r30, r18
     118:	e2 0b       	sbc	r30, r18
     11a:	e2 0b       	sbc	r30, r18
     11c:	e2 0b       	sbc	r30, r18
     11e:	e2 0b       	sbc	r30, r18
     120:	e2 0b       	sbc	r30, r18
     122:	e2 0b       	sbc	r30, r18
     124:	e2 0b       	sbc	r30, r18
     126:	e2 0b       	sbc	r30, r18
     128:	e2 0b       	sbc	r30, r18
     12a:	e2 0b       	sbc	r30, r18
     12c:	e2 0b       	sbc	r30, r18
     12e:	ce 0b       	sbc	r28, r30
     130:	d3 0b       	sbc	r29, r19
     132:	e2 0b       	sbc	r30, r18
     134:	e2 0b       	sbc	r30, r18
     136:	e2 0b       	sbc	r30, r18
     138:	e2 0b       	sbc	r30, r18
     13a:	e2 0b       	sbc	r30, r18
     13c:	e2 0b       	sbc	r30, r18
     13e:	e2 0b       	sbc	r30, r18
     140:	e2 0b       	sbc	r30, r18
     142:	e2 0b       	sbc	r30, r18
     144:	e2 0b       	sbc	r30, r18
     146:	e2 0b       	sbc	r30, r18
     148:	e2 0b       	sbc	r30, r18
     14a:	e2 0b       	sbc	r30, r18
     14c:	e2 0b       	sbc	r30, r18
     14e:	d8 0b       	sbc	r29, r24
     150:	dd 0b       	sbc	r29, r29
     152:	33 0e       	add	r3, r19
     154:	42 0e       	add	r4, r18
     156:	86 0e       	add	r8, r22
     158:	8b 0e       	add	r8, r27
     15a:	90 0e       	add	r9, r16
     15c:	95 0e       	add	r9, r21
     15e:	a3 0e       	add	r10, r19
     160:	a3 0e       	add	r10, r19
     162:	a3 0e       	add	r10, r19
     164:	a3 0e       	add	r10, r19
     166:	a3 0e       	add	r10, r19
     168:	a3 0e       	add	r10, r19
     16a:	a3 0e       	add	r10, r19
     16c:	a3 0e       	add	r10, r19
     16e:	a3 0e       	add	r10, r19
     170:	a3 0e       	add	r10, r19
     172:	a3 0e       	add	r10, r19
     174:	a3 0e       	add	r10, r19
     176:	a3 0e       	add	r10, r19
     178:	a3 0e       	add	r10, r19
     17a:	a3 0e       	add	r10, r19
     17c:	a3 0e       	add	r10, r19
     17e:	a3 0e       	add	r10, r19
     180:	a3 0e       	add	r10, r19
     182:	a3 0e       	add	r10, r19
     184:	a3 0e       	add	r10, r19
     186:	a3 0e       	add	r10, r19
     188:	a3 0e       	add	r10, r19
     18a:	a3 0e       	add	r10, r19
     18c:	a3 0e       	add	r10, r19
     18e:	a3 0e       	add	r10, r19
     190:	a3 0e       	add	r10, r19
     192:	a3 0e       	add	r10, r19
     194:	a3 0e       	add	r10, r19
     196:	a3 0e       	add	r10, r19
     198:	a3 0e       	add	r10, r19
     19a:	a3 0e       	add	r10, r19
     19c:	a3 0e       	add	r10, r19
     19e:	a3 0e       	add	r10, r19
     1a0:	a3 0e       	add	r10, r19
     1a2:	a3 0e       	add	r10, r19
     1a4:	a3 0e       	add	r10, r19
     1a6:	a3 0e       	add	r10, r19
     1a8:	a3 0e       	add	r10, r19
     1aa:	a3 0e       	add	r10, r19
     1ac:	a3 0e       	add	r10, r19
     1ae:	a3 0e       	add	r10, r19
     1b0:	a3 0e       	add	r10, r19
     1b2:	a3 0e       	add	r10, r19
     1b4:	a3 0e       	add	r10, r19
     1b6:	a3 0e       	add	r10, r19
     1b8:	a3 0e       	add	r10, r19
     1ba:	a3 0e       	add	r10, r19
     1bc:	a3 0e       	add	r10, r19
     1be:	a3 0e       	add	r10, r19
     1c0:	a3 0e       	add	r10, r19
     1c2:	a3 0e       	add	r10, r19
     1c4:	a3 0e       	add	r10, r19
     1c6:	a3 0e       	add	r10, r19
     1c8:	a3 0e       	add	r10, r19
     1ca:	a3 0e       	add	r10, r19
     1cc:	a3 0e       	add	r10, r19
     1ce:	a3 0e       	add	r10, r19
     1d0:	a3 0e       	add	r10, r19
     1d2:	a3 0e       	add	r10, r19
     1d4:	9c 0e       	add	r9, r28
     1d6:	b2 0d       	add	r27, r2
     1d8:	a3 0e       	add	r10, r19
     1da:	a3 0e       	add	r10, r19
     1dc:	a3 0e       	add	r10, r19
     1de:	a2 0e       	add	r10, r18
     1e0:	a3 0e       	add	r10, r19
     1e2:	a3 0e       	add	r10, r19
     1e4:	a3 0e       	add	r10, r19
     1e6:	a3 0e       	add	r10, r19
     1e8:	a3 0e       	add	r10, r19
     1ea:	9a 0e       	add	r9, r26
     1ec:	a3 0e       	add	r10, r19
     1ee:	a3 0e       	add	r10, r19
     1f0:	17 0e       	add	r1, r23
     1f2:	a3 0e       	add	r10, r19
     1f4:	a3 0e       	add	r10, r19
     1f6:	a3 0e       	add	r10, r19
     1f8:	a3 0e       	add	r10, r19
     1fa:	a3 0e       	add	r10, r19
     1fc:	a3 0e       	add	r10, r19
     1fe:	a3 0e       	add	r10, r19
     200:	a3 0e       	add	r10, r19
     202:	a3 0e       	add	r10, r19
     204:	a3 0e       	add	r10, r19
     206:	a3 0e       	add	r10, r19
     208:	a3 0e       	add	r10, r19
     20a:	a3 0e       	add	r10, r19
     20c:	a3 0e       	add	r10, r19
     20e:	a3 0e       	add	r10, r19
     210:	a3 0e       	add	r10, r19
     212:	a3 0e       	add	r10, r19
     214:	a3 0e       	add	r10, r19
     216:	a0 0e       	add	r10, r16
     218:	a3 0e       	add	r10, r19
     21a:	a3 0e       	add	r10, r19
     21c:	a3 0e       	add	r10, r19
     21e:	a3 0e       	add	r10, r19
     220:	a3 0e       	add	r10, r19
     222:	a3 0e       	add	r10, r19
     224:	a3 0e       	add	r10, r19
     226:	a3 0e       	add	r10, r19
     228:	a3 0e       	add	r10, r19
     22a:	a3 0e       	add	r10, r19
     22c:	a3 0e       	add	r10, r19
     22e:	a3 0e       	add	r10, r19
     230:	9e 0e       	add	r9, r30
     232:	4e 0e       	add	r4, r30
     234:	56 0e       	add	r5, r22
     236:	5e 0e       	add	r5, r30
     238:	66 0e       	add	r6, r22
     23a:	6e 0e       	add	r6, r30
     23c:	76 0e       	add	r7, r22
     23e:	7e 0e       	add	r7, r30
     240:	07 15       	cp	r16, r7
     242:	5c 15       	cp	r21, r12
     244:	6d 15       	cp	r22, r13
     246:	3a 15       	cp	r19, r10
     248:	18 15       	cp	r17, r8
     24a:	4b 15       	cp	r20, r11
     24c:	29 15       	cp	r18, r9

0000024e <__trampolines_end>:
     24e:	00 00       	nop
     250:	14 00       	.word	0x0014	; ????
     252:	50 00       	.word	0x0050	; ????
     254:	b4 00       	.word	0x00b4	; ????
     256:	40 01       	movw	r8, r0
     258:	f3 01       	movw	r30, r6
     25a:	cd 02       	muls	r28, r29
     25c:	cd 03       	fmulsu	r20, r21
     25e:	f3 04       	cpc	r15, r3
     260:	3d 06       	cpc	r3, r29
     262:	ad 07       	cpc	r26, r29
     264:	3f 09       	sbc	r19, r15
     266:	f4 0a       	sbc	r15, r20
     268:	c9 0c       	add	r12, r9
     26a:	bf 0e       	add	r11, r31
     26c:	d4 10       	cpse	r13, r4
     26e:	07 13       	cpse	r16, r23
     270:	55 15       	cp	r21, r5
     272:	be 17       	cp	r27, r30
     274:	41 1a       	sub	r4, r17
     276:	db 1c       	adc	r13, r11
     278:	8b 1f       	adc	r24, r27
     27a:	50 22       	and	r5, r16
     27c:	27 25       	eor	r18, r7
     27e:	0f 28       	or	r0, r15
     280:	06 2b       	or	r16, r22
     282:	0a 2e       	mov	r0, r26
     284:	19 31       	cpi	r17, 0x19	; 25
     286:	32 34       	cpi	r19, 0x42	; 66
     288:	52 37       	cpi	r21, 0x72	; 114
     28a:	77 3a       	cpi	r23, 0xA7	; 167
     28c:	a0 3d       	cpi	r26, 0xD0	; 208
     28e:	cb 40       	sbci	r28, 0x0B	; 11
     290:	f5 43       	sbci	r31, 0x35	; 53
     292:	1c 47       	sbci	r17, 0x7C	; 124
     294:	3f 4a       	sbci	r19, 0xAF	; 175
     296:	5c 4d       	sbci	r21, 0xDC	; 220
     298:	70 50       	subi	r23, 0x00	; 0
     29a:	7a 53       	subi	r23, 0x3A	; 58
     29c:	78 56       	subi	r23, 0x68	; 104
     29e:	67 59       	subi	r22, 0x97	; 151
     2a0:	47 5c       	subi	r20, 0xC7	; 199
     2a2:	15 5f       	subi	r17, 0xF5	; 245
     2a4:	cf 61       	ori	r28, 0x1F	; 31
     2a6:	75 64       	ori	r23, 0x45	; 69
     2a8:	03 67       	ori	r16, 0x73	; 115
     2aa:	79 69       	ori	r23, 0x99	; 153
     2ac:	d6 6b       	ori	r29, 0xB6	; 182
     2ae:	16 6e       	ori	r17, 0xE6	; 230
     2b0:	3a 70       	andi	r19, 0x0A	; 10
     2b2:	3f 72       	andi	r19, 0x2F	; 47
     2b4:	26 74       	andi	r18, 0x46	; 70
     2b6:	eb 75       	andi	r30, 0x5B	; 91
     2b8:	8f 77       	andi	r24, 0x7F	; 127
     2ba:	0f 79       	andi	r16, 0x9F	; 159
     2bc:	6d 7a       	andi	r22, 0xAD	; 173
     2be:	a5 7b       	andi	r26, 0xB5	; 181
     2c0:	b8 7c       	andi	r27, 0xC8	; 200
     2c2:	a5 7d       	andi	r26, 0xD5	; 213
     2c4:	6c 7e       	andi	r22, 0xEC	; 236
     2c6:	0b 7f       	andi	r16, 0xFB	; 251
     2c8:	83 7f       	andi	r24, 0xF3	; 243
     2ca:	d3 7f       	andi	r29, 0xF3	; 243
     2cc:	fb 7f       	andi	r31, 0xFB	; 251
     2ce:	fb 7f       	andi	r31, 0xFB	; 251
     2d0:	d3 7f       	andi	r29, 0xF3	; 243
     2d2:	83 7f       	andi	r24, 0xF3	; 243
     2d4:	0b 7f       	andi	r16, 0xFB	; 251
     2d6:	6c 7e       	andi	r22, 0xEC	; 236
     2d8:	a5 7d       	andi	r26, 0xD5	; 213
     2da:	b8 7c       	andi	r27, 0xC8	; 200
     2dc:	a5 7b       	andi	r26, 0xB5	; 181
     2de:	6d 7a       	andi	r22, 0xAD	; 173
     2e0:	0f 79       	andi	r16, 0x9F	; 159
     2e2:	8f 77       	andi	r24, 0x7F	; 127
     2e4:	eb 75       	andi	r30, 0x5B	; 91
     2e6:	26 74       	andi	r18, 0x46	; 70
     2e8:	3f 72       	andi	r19, 0x2F	; 47
     2ea:	3a 70       	andi	r19, 0x0A	; 10
     2ec:	16 6e       	ori	r17, 0xE6	; 230
     2ee:	d6 6b       	ori	r29, 0xB6	; 182
     2f0:	79 69       	ori	r23, 0x99	; 153
     2f2:	03 67       	ori	r16, 0x73	; 115
     2f4:	75 64       	ori	r23, 0x45	; 69
     2f6:	cf 61       	ori	r28, 0x1F	; 31
     2f8:	15 5f       	subi	r17, 0xF5	; 245
     2fa:	47 5c       	subi	r20, 0xC7	; 199
     2fc:	67 59       	subi	r22, 0x97	; 151
     2fe:	78 56       	subi	r23, 0x68	; 104
     300:	7a 53       	subi	r23, 0x3A	; 58
     302:	70 50       	subi	r23, 0x00	; 0
     304:	5c 4d       	sbci	r21, 0xDC	; 220
     306:	3f 4a       	sbci	r19, 0xAF	; 175
     308:	1c 47       	sbci	r17, 0x7C	; 124
     30a:	f5 43       	sbci	r31, 0x35	; 53
     30c:	cb 40       	sbci	r28, 0x0B	; 11
     30e:	a0 3d       	cpi	r26, 0xD0	; 208
     310:	77 3a       	cpi	r23, 0xA7	; 167
     312:	52 37       	cpi	r21, 0x72	; 114
     314:	32 34       	cpi	r19, 0x42	; 66
     316:	19 31       	cpi	r17, 0x19	; 25
     318:	0a 2e       	mov	r0, r26
     31a:	06 2b       	or	r16, r22
     31c:	0f 28       	or	r0, r15
     31e:	27 25       	eor	r18, r7
     320:	50 22       	and	r5, r16
     322:	8b 1f       	adc	r24, r27
     324:	db 1c       	adc	r13, r11
     326:	41 1a       	sub	r4, r17
     328:	be 17       	cp	r27, r30
     32a:	55 15       	cp	r21, r5
     32c:	07 13       	cpse	r16, r23
     32e:	d4 10       	cpse	r13, r4
     330:	bf 0e       	add	r11, r31
     332:	c9 0c       	add	r12, r9
     334:	f4 0a       	sbc	r15, r20
     336:	3f 09       	sbc	r19, r15
     338:	ad 07       	cpc	r26, r29
     33a:	3d 06       	cpc	r3, r29
     33c:	f3 04       	cpc	r15, r3
     33e:	cd 03       	fmulsu	r20, r21
     340:	cd 02       	muls	r28, r29
     342:	f3 01       	movw	r30, r6
     344:	40 01       	movw	r8, r0
     346:	b4 00       	.word	0x00b4	; ????
     348:	50 00       	.word	0x0050	; ????
     34a:	14 00       	.word	0x0014	; ????
	...

0000034e <_lin_table>:
     34e:	00 01 01 02 02 02 02 03 03 03 03 03 03 04 04 04     ................
     35e:	04 04 04 04 04 05 05 05 05 05 05 05 05 05 05 06     ................
     36e:	06 06 06 06 06 06 06 06 06 06 06 07 07 07 07 07     ................
     37e:	07 07 07 07 07 07 07 07 07 08 08 08 08 08 08 08     ................
     38e:	08 08 08 08 08 08 08 08 08 09 09 09 09 09 09 09     ................
     39e:	09 09 09 09 09 09 09 09 09 09 09 0a 0a 0a 0a 0a     ................
     3ae:	0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0a 0b     ................
     3be:	0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b     ................
     3ce:	0b 0b 0b 0b 0b 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c     ................
     3de:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0d 0d 0d     ................
     3ee:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
     3fe:	0d 0d 0d 0d 0d 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     40e:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
     41e:	0e 0e 0e 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     42e:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ................
     43e:	0f 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10     ................
     44e:	00 06 08 0a 0b 0d 0e 0f 10 11 12 13 14 14 15 16     ................
     45e:	17 17 18 19 19 1a 1b 1b 1c 1c 1d 1d 1e 1e 1f 1f     ................
     46e:	20 20 21 21 22 22 23 23 24 24 25 25 26 26 26 27       !!""##$$%%&&&'
     47e:	27 28 28 28 29 29 2a 2a 2a 2b 2b 2b 2c 2c 2d 2d     '((())***+++,,--
     48e:	2d 2e 2e 2e 2f 2f 2f 30 30 30 31 31 31 32 32 32     -...///000111222
     49e:	33 33 33 34 34 34 34 35 35 35 36 36 36 37 37 37     3334444555666777
     4ae:	37 38 38 38 39 39 39 39 3a 3a 3a 3b 3b 3b 3b 3c     78889999:::;;;;<
     4be:	3c 3c 3c 3d 3d 3d 3d 3e 3e 3e 3e 3f 3f 3f 3f 40     <<<====>>>>????@
     4ce:	00 0b 10 14 17 19 1c 1e 20 22 24 26 27 29 2a 2c     ........ "$&')*,
     4de:	2d 2f 30 31 33 34 35 36 37 39 3a 3b 3c 3d 3e 3f     -/01345679:;<=>?
     4ee:	40 41 42 43 44 45 46 47 48 48 49 4a 4b 4c 4d 4e     @ABCDEFGHHIJKLMN
     4fe:	4e 4f 50 51 52 52 53 54 55 55 56 57 58 58 59 5a     NOPQRRSTUUVWXXYZ
     50e:	5b 5b 5c 5d 5d 5e 5f 5f 60 61 61 62 63 63 64 65     [[\]]^__`aabccde
     51e:	65 66 66 67 68 68 69 6a 6a 6b 6b 6c 6d 6d 6e 6e     effghhijjkklmmnn
     52e:	6f 6f 70 71 71 72 72 73 73 74 74 75 76 76 77 77     oopqqrrssttuvvww
     53e:	78 78 79 79 7a 7a 7b 7b 7c 7c 7d 7d 7e 7e 7f 7f     xxyyzz{{||}}~~..
     54e:	00 10 17 1c 20 24 27 2a 2d 30 33 35 37 3a 3c 3e     .... $'*-0357:<>
     55e:	40 42 44 46 48 49 4b 4d 4e 50 52 53 55 56 58 59     @BDFHIKMNPRSUVXY
     56e:	5b 5c 5d 5f 60 61 63 64 65 66 68 69 6a 6b 6d 6e     [\]_`acdefhijkmn
     57e:	6f 70 71 72 73 74 76 77 78 79 7a 7b 7c 7d 7e 7f     opqrstvwxyz{|}~.
     58e:	80 81 82 83 84 85 86 87 88 89 8a 8b 8b 8c 8d 8e     ................
     59e:	8f 90 91 92 93 94 94 95 96 97 98 99 99 9a 9b 9c     ................
     5ae:	9d 9e 9e 9f a0 a1 a2 a2 a3 a4 a5 a6 a6 a7 a8 a9     ................
     5be:	a9 aa ab ac ac ad ae af af b0 b1 b1 b2 b3 b4 b4     ................
     5ce:	b5 b6 b6 b7 b8 b9 b9 ba bb bb bc bd bd be bf bf     ................
     5de:	c0 c1 c1 c2 c3 c3 c4 c5 c5 c6 c7 c7 c8 c8 c9 ca     ................
     5ee:	ca cb cc cc cd ce ce cf cf d0 d1 d1 d2 d2 d3 d4     ................
     5fe:	d4 d5 d5 d6 d7 d7 d8 d8 d9 da da db db dc dd dd     ................
     60e:	de de df df e0 e1 e1 e2 e2 e3 e3 e4 e5 e5 e6 e6     ................
     61e:	e7 e7 e8 e8 e9 ea ea eb eb ec ec ed ed ee ee ef     ................
     62e:	ef f0 f1 f1 f2 f2 f3 f3 f4 f4 f5 f5 f6 f6 f7 f7     ................
     63e:	f8 f8 f9 f9 fa fa fb fb fc fc fd fd fe fe ff ff     ................

0000064e <_reorder_table>:
     64e:	70 07 78 0f 74 17 7c 1f 72 27 7a 2f 76 37 7e 3f     p.x.t.|.r'z/v7~?
     65e:	71 47 79 4f 75 57 7d 5f 73 67 7b 6f 60 03 68 0b     qGyOuW}_sg{o`.h.
     66e:	64 13 6c 1b 62 23 6a 2b 66 33 6e 3b 61 43 69 4b     d.l.b#j+f3n;aCiK
     67e:	65 53 6d 5b 50 05 58 0d 54 15 5c 1d 52 25 5a 2d     eSm[P.X.T.\.R%Z-
     68e:	56 35 5e 3d 51 45 59 4d 40 01 48 09 44 11 4c 19     V5^=QEYM@.H.D.L.
     69e:	42 21 4a 29 46 31 4e 39 30 06 38 0e 34 16 3c 1e     B!J)F1N90.8.4.<.
     6ae:	32 26 3a 2e 20 02 28 0a 24 12 2c 1a 10 04 18 0c     2&:. .(.$.,.....

000006be <_cas_constants>:
     6be:	42 76 fc 30 82 5a 82 5a fc 30 42 76 8a 7d f9 18     Bv.0.Z.Z.0Bv.}..
     6ce:	42 76 fc 30 6e 6a 1d 47 82 5a 82 5a 1d 47 6e 6a     Bv.0nj.G.Z.Z.Gnj
     6de:	fc 30 42 76 f9 18 8a 7d 62 7f 8c 0c 8a 7d f9 18     .0Bv...}b....}..
     6ee:	7d 7a 28 25 42 76 fc 30 e3 70 57 3c 6e 6a 1d 47     }z(%Bv.0.pW<nj.G
     6fe:	f2 62 34 51 82 5a 82 5a 34 51 f2 62 1d 47 6e 6a     .b4Q.Z.Z4Q.b.Gnj
     70e:	57 3c e3 70 fc 30 42 76 28 25 7d 7a f9 18 8a 7d     W<.p.0Bv(%}z...}
     71e:	8c 0c 62 7f d9 7f 48 06 62 7f 8c 0c 9d 7e c8 12     ..b...H.b....~..
     72e:	8a 7d f9 18 2a 7c 1a 1f 7d 7a 28 25 85 78 1f 2b     .}..*|..}z(%.x.+
     73e:	42 76 fc 30 b6 73 ba 36 e3 70 57 3c ca 6d ce 41     Bv.0.s.6.pW<.m.A
     74e:	6e 6a 1d 47 d0 66 40 4c f2 62 34 51 d7 5e f6 55     nj.G.f@L.b4Q.^.U
     75e:	82 5a 82 5a f6 55 d7 5e 34 51 f2 62 40 4c d0 66     .Z.Z.U.^4Q.b@L.f
     76e:	1d 47 6e 6a ce 41 ca 6d 57 3c e3 70 ba 36 b6 73     .Gnj.A.mW<.p.6.s
     77e:	fc 30 42 76 1f 2b 85 78 28 25 7d 7a 1a 1f 2a 7c     .0Bv.+.x(%}z..*|
     78e:	f9 18 8a 7d c8 12 9d 7e 8c 0c 62 7f 48 06 d9 7f     ...}...~..b.H...

0000079e <__ctors_end>:
     79e:	11 24       	eor	r1, r1
     7a0:	1f be       	out	0x3f, r1	; 63
     7a2:	cf ef       	ldi	r28, 0xFF	; 255
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df e2       	ldi	r29, 0x2F	; 47
     7a8:	de bf       	out	0x3e, r29	; 62

000007aa <__do_copy_data>:
     7aa:	11 e2       	ldi	r17, 0x21	; 33
     7ac:	a0 e0       	ldi	r26, 0x00	; 0
     7ae:	b0 e2       	ldi	r27, 0x20	; 32
     7b0:	e6 eb       	ldi	r30, 0xB6	; 182
     7b2:	f0 e4       	ldi	r31, 0x40	; 64
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__do_copy_data+0x10>
     7b6:	05 90       	lpm	r0, Z+
     7b8:	0d 92       	st	X+, r0
     7ba:	ae 33       	cpi	r26, 0x3E	; 62
     7bc:	b1 07       	cpc	r27, r17
     7be:	d9 f7       	brne	.-10     	; 0x7b6 <__do_copy_data+0xc>

000007c0 <__do_clear_bss>:
     7c0:	2a e2       	ldi	r18, 0x2A	; 42
     7c2:	ae e3       	ldi	r26, 0x3E	; 62
     7c4:	b1 e2       	ldi	r27, 0x21	; 33
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <.do_clear_bss_start>

000007c8 <.do_clear_bss_loop>:
     7c8:	1d 92       	st	X+, r1

000007ca <.do_clear_bss_start>:
     7ca:	ad 3e       	cpi	r26, 0xED	; 237
     7cc:	b2 07       	cpc	r27, r18
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <.do_clear_bss_loop>
     7d0:	0e 94 66 14 	call	0x28cc	; 0x28cc <main>
     7d4:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <_exit>

000007d8 <__bad_interrupt>:
     7d8:	13 cc       	rjmp	.-2010   	; 0x0 <__vectors>

000007da <init_adc>:
	mean_med_l = start_bubble(bubble_med_l);
	mean_high_l = start_bubble(bubble_high_l);
	
	mean_low_r = start_bubble(bubble_low_r);
	mean_med_r = start_bubble(bubble_med_r);
	mean_high_r = start_bubble(bubble_high_r);
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	61 97       	sbiw	r28, 0x11	; 17
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	18 2f       	mov	r17, r24
     7ec:	be 01       	movw	r22, r28
     7ee:	6f 5f       	subi	r22, 0xFF	; 255
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	92 e0       	ldi	r25, 0x02	; 2
     7f6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <adc_read_configuration>
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	9f 78       	andi	r25, 0x8F	; 143
     800:	92 61       	ori	r25, 0x12	; 18
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	9c 83       	std	Y+4, r25	; 0x04
     808:	81 7e       	andi	r24, 0xE1	; 225
     80a:	80 61       	ori	r24, 0x10	; 16
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	1b 82       	std	Y+3, r1	; 0x03
     810:	8f b7       	in	r24, 0x3f	; 63
     812:	f8 94       	cli
     814:	98 e0       	ldi	r25, 0x08	; 8
     816:	e0 e0       	ldi	r30, 0x00	; 0
     818:	f2 e0       	ldi	r31, 0x02	; 2
     81a:	90 87       	std	Z+8, r25	; 0x08
     81c:	8f bf       	out	0x3f, r24	; 63
     81e:	be 01       	movw	r22, r28
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <adc_write_configuration>
     82c:	ae 01       	movw	r20, r28
     82e:	48 5f       	subi	r20, 0xF8	; 248
     830:	5f 4f       	sbci	r21, 0xFF	; 255
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	92 e0       	ldi	r25, 0x02	; 2
     838:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <adcch_read_configuration>
     83c:	14 30       	cpi	r17, 0x04	; 4
     83e:	b9 f0       	breq	.+46     	; 0x86e <init_adc+0x94>
     840:	28 f4       	brcc	.+10     	; 0x84c <init_adc+0x72>
     842:	11 30       	cpi	r17, 0x01	; 1
     844:	41 f0       	breq	.+16     	; 0x856 <init_adc+0x7c>
     846:	12 30       	cpi	r17, 0x02	; 2
     848:	61 f0       	breq	.+24     	; 0x862 <init_adc+0x88>
     84a:	21 c0       	rjmp	.+66     	; 0x88e <init_adc+0xb4>
     84c:	15 30       	cpi	r17, 0x05	; 5
     84e:	a9 f0       	breq	.+42     	; 0x87a <init_adc+0xa0>
     850:	16 30       	cpi	r17, 0x06	; 6
     852:	c1 f0       	breq	.+48     	; 0x884 <init_adc+0xaa>
     854:	1c c0       	rjmp	.+56     	; 0x88e <init_adc+0xb4>
     856:	19 8a       	std	Y+17, r1	; 0x11
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	88 87       	std	Y+8, r24	; 0x08
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	89 87       	std	Y+9, r24	; 0x09
     860:	16 c0       	rjmp	.+44     	; 0x88e <init_adc+0xb4>
     862:	19 8a       	std	Y+17, r1	; 0x11
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	88 87       	std	Y+8, r24	; 0x08
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	89 87       	std	Y+9, r24	; 0x09
     86c:	10 c0       	rjmp	.+32     	; 0x88e <init_adc+0xb4>
     86e:	19 8a       	std	Y+17, r1	; 0x11
     870:	8a e0       	ldi	r24, 0x0A	; 10
     872:	88 87       	std	Y+8, r24	; 0x08
     874:	83 e1       	ldi	r24, 0x13	; 19
     876:	89 87       	std	Y+9, r24	; 0x09
     878:	0a c0       	rjmp	.+20     	; 0x88e <init_adc+0xb4>
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	88 87       	std	Y+8, r24	; 0x08
     87e:	80 e6       	ldi	r24, 0x60	; 96
     880:	89 87       	std	Y+9, r24	; 0x09
     882:	05 c0       	rjmp	.+10     	; 0x88e <init_adc+0xb4>
     884:	18 86       	std	Y+8, r1	; 0x08
     886:	88 e0       	ldi	r24, 0x08	; 8
     888:	89 87       	std	Y+9, r24	; 0x09
     88a:	86 e4       	ldi	r24, 0x46	; 70
     88c:	89 8b       	std	Y+17, r24	; 0x11
     88e:	8a 85       	ldd	r24, Y+10	; 0x0a
     890:	1c 86       	std	Y+12, r1	; 0x0c
     892:	80 7f       	andi	r24, 0xF0	; 240
     894:	8a 87       	std	Y+10, r24	; 0x0a
     896:	ae 01       	movw	r20, r28
     898:	48 5f       	subi	r20, 0xF8	; 248
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	92 e0       	ldi	r25, 0x02	; 2
     8a2:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <adcch_write_configuration>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	0e 94 dd 16 	call	0x2dba	; 0x2dba <adc_enable>
     8ae:	8f b7       	in	r24, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	e0 e0       	ldi	r30, 0x00	; 0
     8b4:	f2 e0       	ldi	r31, 0x02	; 2
     8b6:	90 81       	ld	r25, Z
     8b8:	94 60       	ori	r25, 0x04	; 4
     8ba:	90 83       	st	Z, r25
     8bc:	8f bf       	out	0x3f, r24	; 63
     8be:	86 81       	ldd	r24, Z+6	; 0x06
     8c0:	80 ff       	sbrs	r24, 0
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <init_adc+0xe4>
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	e0 e0       	ldi	r30, 0x00	; 0
     8c8:	f2 e0       	ldi	r31, 0x02	; 2
     8ca:	86 83       	std	Z+6, r24	; 0x06
     8cc:	61 96       	adiw	r28, 0x11	; 17
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	08 95       	ret

000008da <change_adc_channel>:
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	2a 97       	sbiw	r28, 0x0a	; 10
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	18 2f       	mov	r17, r24
     8ec:	ae 01       	movw	r20, r28
     8ee:	4f 5f       	subi	r20, 0xFF	; 255
     8f0:	5f 4f       	sbci	r21, 0xFF	; 255
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <adcch_read_configuration>
     8fc:	14 30       	cpi	r17, 0x04	; 4
     8fe:	b9 f0       	breq	.+46     	; 0x92e <change_adc_channel+0x54>
     900:	28 f4       	brcc	.+10     	; 0x90c <change_adc_channel+0x32>
     902:	11 30       	cpi	r17, 0x01	; 1
     904:	41 f0       	breq	.+16     	; 0x916 <change_adc_channel+0x3c>
     906:	12 30       	cpi	r17, 0x02	; 2
     908:	61 f0       	breq	.+24     	; 0x922 <change_adc_channel+0x48>
     90a:	21 c0       	rjmp	.+66     	; 0x94e <change_adc_channel+0x74>
     90c:	15 30       	cpi	r17, 0x05	; 5
     90e:	a9 f0       	breq	.+42     	; 0x93a <change_adc_channel+0x60>
     910:	16 30       	cpi	r17, 0x06	; 6
     912:	c1 f0       	breq	.+48     	; 0x944 <change_adc_channel+0x6a>
     914:	1c c0       	rjmp	.+56     	; 0x94e <change_adc_channel+0x74>
     916:	1a 86       	std	Y+10, r1	; 0x0a
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	89 83       	std	Y+1, r24	; 0x01
     91c:	80 e2       	ldi	r24, 0x20	; 32
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	16 c0       	rjmp	.+44     	; 0x94e <change_adc_channel+0x74>
     922:	1a 86       	std	Y+10, r1	; 0x0a
     924:	8a e0       	ldi	r24, 0x0A	; 10
     926:	89 83       	std	Y+1, r24	; 0x01
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	8a 83       	std	Y+2, r24	; 0x02
     92c:	10 c0       	rjmp	.+32     	; 0x94e <change_adc_channel+0x74>
     92e:	1a 86       	std	Y+10, r1	; 0x0a
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	83 e1       	ldi	r24, 0x13	; 19
     936:	8a 83       	std	Y+2, r24	; 0x02
     938:	0a c0       	rjmp	.+20     	; 0x94e <change_adc_channel+0x74>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	80 e6       	ldi	r24, 0x60	; 96
     940:	8a 83       	std	Y+2, r24	; 0x02
     942:	05 c0       	rjmp	.+10     	; 0x94e <change_adc_channel+0x74>
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	88 e0       	ldi	r24, 0x08	; 8
     948:	8a 83       	std	Y+2, r24	; 0x02
     94a:	86 e4       	ldi	r24, 0x46	; 70
     94c:	8a 87       	std	Y+10, r24	; 0x0a
     94e:	ae 01       	movw	r20, r28
     950:	4f 5f       	subi	r20, 0xFF	; 255
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	61 e0       	ldi	r22, 0x01	; 1
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <adcch_write_configuration>
     95e:	2a 96       	adiw	r28, 0x0a	; 10
     960:	cd bf       	out	0x3d, r28	; 61
     962:	de bf       	out	0x3e, r29	; 62
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	08 95       	ret

0000096c <adc_callback>:
     96c:	80 91 7f 21 	lds	r24, 0x217F
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <adc_callback+0xa>
     974:	4c c0       	rjmp	.+152    	; 0xa0e <adc_callback+0xa2>
     976:	28 f4       	brcc	.+10     	; 0x982 <adc_callback+0x16>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	51 f0       	breq	.+20     	; 0x990 <adc_callback+0x24>
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	09 f1       	breq	.+66     	; 0x9c2 <adc_callback+0x56>
     980:	08 95       	ret
     982:	85 30       	cpi	r24, 0x05	; 5
     984:	09 f4       	brne	.+2      	; 0x988 <adc_callback+0x1c>
     986:	69 c0       	rjmp	.+210    	; 0xa5a <adc_callback+0xee>
     988:	86 30       	cpi	r24, 0x06	; 6
     98a:	09 f4       	brne	.+2      	; 0x98e <adc_callback+0x22>
     98c:	75 c0       	rjmp	.+234    	; 0xa78 <adc_callback+0x10c>
     98e:	08 95       	ret
     990:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <ischarging>
     994:	81 11       	cpse	r24, r1
     996:	92 c0       	rjmp	.+292    	; 0xabc <adc_callback+0x150>
     998:	80 91 7f 21 	lds	r24, 0x217F
     99c:	80 93 7e 21 	sts	0x217E, r24
     9a0:	86 e0       	ldi	r24, 0x06	; 6
     9a2:	80 93 7f 21 	sts	0x217F, r24
     9a6:	80 91 7f 21 	lds	r24, 0x217F
     9aa:	97 df       	rcall	.-210    	; 0x8da <change_adc_channel>
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	98 e0       	ldi	r25, 0x08	; 8
     9b0:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <tc45_enable>
     9b4:	80 e4       	ldi	r24, 0x40	; 64
     9b6:	98 e0       	ldi	r25, 0x08	; 8
     9b8:	0e 94 b0 1a 	call	0x3560	; 0x3560 <tc45_disable>
     9bc:	0c 94 4e 0f 	jmp	0x1e9c	; 0x1e9c <load_data_color_led>
     9c0:	08 95       	ret
     9c2:	80 91 3f 21 	lds	r24, 0x213F
     9c6:	90 91 40 21 	lds	r25, 0x2140
     9ca:	9c 01       	movw	r18, r24
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	20 93 3f 21 	sts	0x213F, r18
     9d4:	30 93 40 21 	sts	0x2140, r19
     9d8:	fc 01       	movw	r30, r24
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	e0 55       	subi	r30, 0x50	; 80
     9e0:	f6 4d       	sbci	r31, 0xD6	; 214
     9e2:	40 83       	st	Z, r20
     9e4:	51 83       	std	Z+1, r21	; 0x01
     9e6:	80 91 3f 21 	lds	r24, 0x213F
     9ea:	90 91 40 21 	lds	r25, 0x2140
     9ee:	80 38       	cpi	r24, 0x80	; 128
     9f0:	91 05       	cpc	r25, r1
     9f2:	08 f4       	brcc	.+2      	; 0x9f6 <adc_callback+0x8a>
     9f4:	63 c0       	rjmp	.+198    	; 0xabc <adc_callback+0x150>
     9f6:	10 92 3f 21 	sts	0x213F, r1
     9fa:	10 92 40 21 	sts	0x2140, r1
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 3e 21 	sts	0x213E, r24
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	98 e0       	ldi	r25, 0x08	; 8
     a08:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <tc45_disable>
     a0c:	08 95       	ret
     a0e:	80 91 3f 21 	lds	r24, 0x213F
     a12:	90 91 40 21 	lds	r25, 0x2140
     a16:	9c 01       	movw	r18, r24
     a18:	2f 5f       	subi	r18, 0xFF	; 255
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	20 93 3f 21 	sts	0x213F, r18
     a20:	30 93 40 21 	sts	0x2140, r19
     a24:	fc 01       	movw	r30, r24
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	e0 55       	subi	r30, 0x50	; 80
     a2c:	f6 4d       	sbci	r31, 0xD6	; 214
     a2e:	40 83       	st	Z, r20
     a30:	51 83       	std	Z+1, r21	; 0x01
     a32:	80 91 3f 21 	lds	r24, 0x213F
     a36:	90 91 40 21 	lds	r25, 0x2140
     a3a:	80 38       	cpi	r24, 0x80	; 128
     a3c:	91 05       	cpc	r25, r1
     a3e:	08 f4       	brcc	.+2      	; 0xa42 <adc_callback+0xd6>
     a40:	3d c0       	rjmp	.+122    	; 0xabc <adc_callback+0x150>
     a42:	10 92 3f 21 	sts	0x213F, r1
     a46:	10 92 40 21 	sts	0x2140, r1
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	80 93 3e 21 	sts	0x213E, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	98 e0       	ldi	r25, 0x08	; 8
     a54:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <tc45_disable>
     a58:	08 95       	ret
     a5a:	40 93 7a 21 	sts	0x217A, r20
     a5e:	50 93 7b 21 	sts	0x217B, r21
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	80 93 77 21 	sts	0x2177, r24
     a68:	80 91 7e 21 	lds	r24, 0x217E
     a6c:	80 93 7f 21 	sts	0x217F, r24
     a70:	80 91 7f 21 	lds	r24, 0x217F
     a74:	32 cf       	rjmp	.-412    	; 0x8da <change_adc_channel>
     a76:	08 95       	ret
     a78:	40 93 78 21 	sts	0x2178, r20
     a7c:	50 93 79 21 	sts	0x2179, r21
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	80 93 76 21 	sts	0x2176, r24
     a86:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <ischarging>
     a8a:	88 23       	and	r24, r24
     a8c:	b9 f0       	breq	.+46     	; 0xabc <adc_callback+0x150>
     a8e:	4f ef       	ldi	r20, 0xFF	; 255
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <twinkle>
     a98:	80 91 7f 21 	lds	r24, 0x217F
     a9c:	80 93 7e 21 	sts	0x217E, r24
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	80 93 7f 21 	sts	0x217F, r24
     aa6:	80 91 7f 21 	lds	r24, 0x217F
     aaa:	17 df       	rcall	.-466    	; 0x8da <change_adc_channel>
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	98 e0       	ldi	r25, 0x08	; 8
     ab0:	0e 94 b0 1a 	call	0x3560	; 0x3560 <tc45_disable>
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	98 e0       	ldi	r25, 0x08	; 8
     ab8:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <tc45_enable>
     abc:	08 95       	ret

00000abe <adc_enable_interrupt>:
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	2a 97       	sbiw	r28, 0x0a	; 10
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <adc_disable>
     ad4:	ae 01       	movw	r20, r28
     ad6:	4f 5f       	subi	r20, 0xFF	; 255
     ad8:	5f 4f       	sbci	r21, 0xFF	; 255
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <adcch_read_configuration>
     ae4:	e0 ea       	ldi	r30, 0xA0	; 160
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	81 60       	ori	r24, 0x01	; 1
     aec:	82 83       	std	Z+2, r24	; 0x02
     aee:	66 eb       	ldi	r22, 0xB6	; 182
     af0:	74 e0       	ldi	r23, 0x04	; 4
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <adc_set_callback>
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	8c 7f       	andi	r24, 0xFC	; 252
     afe:	81 60       	ori	r24, 0x01	; 1
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	ae 01       	movw	r20, r28
     b04:	4f 5f       	subi	r20, 0xFF	; 255
     b06:	5f 4f       	sbci	r21, 0xFF	; 255
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <adcch_write_configuration>
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 dd 16 	call	0x2dba	; 0x2dba <adc_enable>
     b1a:	78 94       	sei
     b1c:	2a 96       	adiw	r28, 0x0a	; 10
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <mean>:


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b28:	46 2f       	mov	r20, r22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	14 16       	cp	r1, r20
     b2e:	15 06       	cpc	r1, r21
     b30:	7c f4       	brge	.+30     	; 0xb50 <mean+0x28>
     b32:	e8 2f       	mov	r30, r24
     b34:	f9 2f       	mov	r31, r25
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
     b3e:	71 91       	ld	r23, Z+
     b40:	87 0f       	add	r24, r23
     b42:	91 1d       	adc	r25, r1


uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
	for (int i=0; i<order; i++) 
     b44:	2f 5f       	subi	r18, 0xFF	; 255
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	24 17       	cp	r18, r20
     b4a:	35 07       	cpc	r19, r21
     b4c:	c4 f3       	brlt	.-16     	; 0xb3e <mean+0x16>
     b4e:	02 c0       	rjmp	.+4      	; 0xb54 <mean+0x2c>



uint8_t mean(uint8_t* a, uint8_t order) 
{
	uint16_t m = 0;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
	for (int i=0; i<order; i++) 
	{
		m += a[i];
	}
	return m/order;
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
     b5a:	86 2f       	mov	r24, r22
}
     b5c:	08 95       	ret

00000b5e <updateLEDs>:
		return 3;
	}
}

void updateLEDs()
{
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29

//	bool playing = isplaying();
//	bool charging = ischarging();

		// get and bin the power of frequencies to colors
		low_power_old = low_power;
     b72:	80 91 55 21 	lds	r24, 0x2155
     b76:	90 91 56 21 	lds	r25, 0x2156
     b7a:	a0 91 57 21 	lds	r26, 0x2157
     b7e:	b0 91 58 21 	lds	r27, 0x2158
     b82:	80 93 49 21 	sts	0x2149, r24
     b86:	90 93 4a 21 	sts	0x214A, r25
     b8a:	a0 93 4b 21 	sts	0x214B, r26
     b8e:	b0 93 4c 21 	sts	0x214C, r27
		mid_power_old = mid_power;
     b92:	80 91 51 21 	lds	r24, 0x2151
     b96:	90 91 52 21 	lds	r25, 0x2152
     b9a:	a0 91 53 21 	lds	r26, 0x2153
     b9e:	b0 91 54 21 	lds	r27, 0x2154
     ba2:	80 93 45 21 	sts	0x2145, r24
     ba6:	90 93 46 21 	sts	0x2146, r25
     baa:	a0 93 47 21 	sts	0x2147, r26
     bae:	b0 93 48 21 	sts	0x2148, r27
		high_power_old = high_power;
     bb2:	80 91 4d 21 	lds	r24, 0x214D
     bb6:	90 91 4e 21 	lds	r25, 0x214E
     bba:	a0 91 4f 21 	lds	r26, 0x214F
     bbe:	b0 91 50 21 	lds	r27, 0x2150
     bc2:	80 93 41 21 	sts	0x2141, r24
     bc6:	90 93 42 21 	sts	0x2142, r25
     bca:	a0 93 43 21 	sts	0x2143, r26
     bce:	b0 93 44 21 	sts	0x2144, r27

		low_power = 0;
     bd2:	10 92 55 21 	sts	0x2155, r1
     bd6:	10 92 56 21 	sts	0x2156, r1
     bda:	10 92 57 21 	sts	0x2157, r1
     bde:	10 92 58 21 	sts	0x2158, r1
		mid_power = 0;
     be2:	10 92 51 21 	sts	0x2151, r1
     be6:	10 92 52 21 	sts	0x2152, r1
     bea:	10 92 53 21 	sts	0x2153, r1
     bee:	10 92 54 21 	sts	0x2154, r1
		high_power = 0;
     bf2:	10 92 4d 21 	sts	0x214D, r1
     bf6:	10 92 4e 21 	sts	0x214E, r1
     bfa:	10 92 4f 21 	sts	0x214F, r1
     bfe:	10 92 50 21 	sts	0x2150, r1

		for (int i = 0; i < lows; i++){
     c02:	00 91 0f 20 	lds	r16, 0x200F
     c06:	10 91 10 20 	lds	r17, 0x2010
     c0a:	10 16       	cp	r1, r16
     c0c:	11 06       	cpc	r1, r17
     c0e:	9c f5       	brge	.+102    	; 0xc76 <updateLEDs+0x118>
     c10:	a0 90 55 21 	lds	r10, 0x2155
     c14:	b0 90 56 21 	lds	r11, 0x2156
     c18:	c0 90 57 21 	lds	r12, 0x2157
     c1c:	d0 90 58 21 	lds	r13, 0x2158
     c20:	0f 2e       	mov	r0, r31
     c22:	fd ee       	ldi	r31, 0xED	; 237
     c24:	ef 2e       	mov	r14, r31
     c26:	f5 e2       	ldi	r31, 0x25	; 37
     c28:	ff 2e       	mov	r15, r31
     c2a:	f0 2d       	mov	r31, r0
     c2c:	c0 e0       	ldi	r28, 0x00	; 0
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
			low_power += fht_lin_out[i];
     c30:	f7 01       	movw	r30, r14
     c32:	61 91       	ld	r22, Z+
     c34:	71 91       	ld	r23, Z+
     c36:	7f 01       	movw	r14, r30
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__floatunsisf>
     c40:	2a 2d       	mov	r18, r10
     c42:	3b 2d       	mov	r19, r11
     c44:	4c 2d       	mov	r20, r12
     c46:	5d 2d       	mov	r21, r13
     c48:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__addsf3>

		low_power = 0;
		mid_power = 0;
		high_power = 0;

		for (int i = 0; i < lows; i++){
     c4c:	21 96       	adiw	r28, 0x01	; 1
     c4e:	c0 17       	cp	r28, r16
     c50:	d1 07       	cpc	r29, r17
     c52:	2c f4       	brge	.+10     	; 0xc5e <updateLEDs+0x100>
			low_power += fht_lin_out[i];
     c54:	a6 2e       	mov	r10, r22
     c56:	b7 2e       	mov	r11, r23
     c58:	c8 2e       	mov	r12, r24
     c5a:	d9 2e       	mov	r13, r25
     c5c:	e9 cf       	rjmp	.-46     	; 0xc30 <updateLEDs+0xd2>
     c5e:	c6 2e       	mov	r12, r22
     c60:	d7 2e       	mov	r13, r23
     c62:	e8 2e       	mov	r14, r24
     c64:	f9 2e       	mov	r15, r25
     c66:	c0 92 55 21 	sts	0x2155, r12
     c6a:	d0 92 56 21 	sts	0x2156, r13
     c6e:	e0 92 57 21 	sts	0x2157, r14
     c72:	f0 92 58 21 	sts	0x2158, r15
		}
		for (int i = lows; i < lows+mids; i++){
     c76:	c0 91 0d 20 	lds	r28, 0x200D
     c7a:	d0 91 0e 20 	lds	r29, 0x200E
     c7e:	c0 0f       	add	r28, r16
     c80:	d1 1f       	adc	r29, r17
     c82:	0c 17       	cp	r16, r28
     c84:	1d 07       	cpc	r17, r29
     c86:	9c f5       	brge	.+102    	; 0xcee <updateLEDs+0x190>
     c88:	a0 90 51 21 	lds	r10, 0x2151
     c8c:	b0 90 52 21 	lds	r11, 0x2152
     c90:	c0 90 53 21 	lds	r12, 0x2153
     c94:	d0 90 54 21 	lds	r13, 0x2154
     c98:	c8 01       	movw	r24, r16
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	9c 01       	movw	r18, r24
     ca0:	23 51       	subi	r18, 0x13	; 19
     ca2:	3a 4d       	sbci	r19, 0xDA	; 218
     ca4:	79 01       	movw	r14, r18
			mid_power += fht_lin_out[i];
     ca6:	f7 01       	movw	r30, r14
     ca8:	61 91       	ld	r22, Z+
     caa:	71 91       	ld	r23, Z+
     cac:	7f 01       	movw	r14, r30
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__floatunsisf>
     cb6:	2a 2d       	mov	r18, r10
     cb8:	3b 2d       	mov	r19, r11
     cba:	4c 2d       	mov	r20, r12
     cbc:	5d 2d       	mov	r21, r13
     cbe:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__addsf3>
		high_power = 0;

		for (int i = 0; i < lows; i++){
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
     cc2:	0f 5f       	subi	r16, 0xFF	; 255
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
     cc6:	0c 17       	cp	r16, r28
     cc8:	1d 07       	cpc	r17, r29
     cca:	2c f4       	brge	.+10     	; 0xcd6 <updateLEDs+0x178>
			mid_power += fht_lin_out[i];
     ccc:	a6 2e       	mov	r10, r22
     cce:	b7 2e       	mov	r11, r23
     cd0:	c8 2e       	mov	r12, r24
     cd2:	d9 2e       	mov	r13, r25
     cd4:	e8 cf       	rjmp	.-48     	; 0xca6 <updateLEDs+0x148>
     cd6:	06 2f       	mov	r16, r22
     cd8:	17 2f       	mov	r17, r23
     cda:	28 2f       	mov	r18, r24
     cdc:	39 2f       	mov	r19, r25
     cde:	00 93 51 21 	sts	0x2151, r16
     ce2:	10 93 52 21 	sts	0x2152, r17
     ce6:	20 93 53 21 	sts	0x2153, r18
     cea:	30 93 54 21 	sts	0x2154, r19
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     cee:	e0 90 0b 20 	lds	r14, 0x200B
     cf2:	f0 90 0c 20 	lds	r15, 0x200C
     cf6:	ec 0e       	add	r14, r28
     cf8:	fd 1e       	adc	r15, r29
     cfa:	ce 15       	cp	r28, r14
     cfc:	df 05       	cpc	r29, r15
     cfe:	94 f5       	brge	.+100    	; 0xd64 <updateLEDs+0x206>
     d00:	a0 90 4d 21 	lds	r10, 0x214D
     d04:	b0 90 4e 21 	lds	r11, 0x214E
     d08:	c0 90 4f 21 	lds	r12, 0x214F
     d0c:	d0 90 50 21 	lds	r13, 0x2150
     d10:	8e 01       	movw	r16, r28
     d12:	00 0f       	add	r16, r16
     d14:	11 1f       	adc	r17, r17
     d16:	03 51       	subi	r16, 0x13	; 19
     d18:	1a 4d       	sbci	r17, 0xDA	; 218
			high_power += fht_lin_out[i];
     d1a:	f8 01       	movw	r30, r16
     d1c:	61 91       	ld	r22, Z+
     d1e:	71 91       	ld	r23, Z+
     d20:	8f 01       	movw	r16, r30
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 f1 1e 	call	0x3de2	; 0x3de2 <__floatunsisf>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	6a 2d       	mov	r22, r10
     d30:	7b 2d       	mov	r23, r11
     d32:	8c 2d       	mov	r24, r12
     d34:	9d 2d       	mov	r25, r13
     d36:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <__addsf3>
			low_power += fht_lin_out[i];
		}
		for (int i = lows; i < lows+mids; i++){
			mid_power += fht_lin_out[i];
		}
		for (int i = lows+mids; i < lows+mids+highs; i++){
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	ce 15       	cp	r28, r14
     d3e:	df 05       	cpc	r29, r15
     d40:	2c f4       	brge	.+10     	; 0xd4c <updateLEDs+0x1ee>
			high_power += fht_lin_out[i];
     d42:	a6 2e       	mov	r10, r22
     d44:	b7 2e       	mov	r11, r23
     d46:	c8 2e       	mov	r12, r24
     d48:	d9 2e       	mov	r13, r25
     d4a:	e7 cf       	rjmp	.-50     	; 0xd1a <updateLEDs+0x1bc>
     d4c:	06 2f       	mov	r16, r22
     d4e:	17 2f       	mov	r17, r23
     d50:	28 2f       	mov	r18, r24
     d52:	39 2f       	mov	r19, r25
     d54:	00 93 4d 21 	sts	0x214D, r16
     d58:	10 93 4e 21 	sts	0x214E, r17
     d5c:	20 93 4f 21 	sts	0x214F, r18
     d60:	30 93 50 21 	sts	0x2150, r19
		if (high_power < high_power_old*damp){
			high_power = high_power_old*damp;
		}*/

		// AGC - automatic gain control
		if ( low_power > maxim || mid_power > maxim || high_power > maxim)  {
     d64:	00 91 55 21 	lds	r16, 0x2155
     d68:	10 91 56 21 	lds	r17, 0x2156
     d6c:	d0 91 57 21 	lds	r29, 0x2157
     d70:	c0 91 58 21 	lds	r28, 0x2158
     d74:	c0 90 07 20 	lds	r12, 0x2007
     d78:	d0 90 08 20 	lds	r13, 0x2008
     d7c:	e0 90 09 20 	lds	r14, 0x2009
     d80:	f0 90 0a 20 	lds	r15, 0x200A
     d84:	a7 01       	movw	r20, r14
     d86:	96 01       	movw	r18, r12
     d88:	60 2f       	mov	r22, r16
     d8a:	71 2f       	mov	r23, r17
     d8c:	8d 2f       	mov	r24, r29
     d8e:	9c 2f       	mov	r25, r28
     d90:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <__gesf2>
     d94:	18 16       	cp	r1, r24
     d96:	ec f0       	brlt	.+58     	; 0xdd2 <updateLEDs+0x274>
     d98:	20 91 51 21 	lds	r18, 0x2151
     d9c:	30 91 52 21 	lds	r19, 0x2152
     da0:	40 91 53 21 	lds	r20, 0x2153
     da4:	50 91 54 21 	lds	r21, 0x2154
     da8:	c7 01       	movw	r24, r14
     daa:	b6 01       	movw	r22, r12
     dac:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__cmpsf2>
     db0:	88 23       	and	r24, r24
     db2:	7c f0       	brlt	.+30     	; 0xdd2 <updateLEDs+0x274>
     db4:	20 91 4d 21 	lds	r18, 0x214D
     db8:	30 91 4e 21 	lds	r19, 0x214E
     dbc:	40 91 4f 21 	lds	r20, 0x214F
     dc0:	50 91 50 21 	lds	r21, 0x2150
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 59 1e 	call	0x3cb2	; 0x3cb2 <__cmpsf2>
     dcc:	88 23       	and	r24, r24
     dce:	0c f0       	brlt	.+2      	; 0xdd2 <updateLEDs+0x274>
     dd0:	45 c0       	rjmp	.+138    	; 0xe5c <updateLEDs+0x2fe>
	    	vrem = max(low_power, mid_power);
     dd2:	c0 90 51 21 	lds	r12, 0x2151
     dd6:	d0 90 52 21 	lds	r13, 0x2152
     dda:	e0 90 53 21 	lds	r14, 0x2153
     dde:	f0 90 54 21 	lds	r15, 0x2154
     de2:	2c 2d       	mov	r18, r12
     de4:	3d 2d       	mov	r19, r13
     de6:	4e 2d       	mov	r20, r14
     de8:	5f 2d       	mov	r21, r15
     dea:	60 2f       	mov	r22, r16
     dec:	71 2f       	mov	r23, r17
     dee:	8d 2f       	mov	r24, r29
     df0:	9c 2f       	mov	r25, r28
     df2:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <__gesf2>
     df6:	18 16       	cp	r1, r24
     df8:	24 f0       	brlt	.+8      	; 0xe02 <updateLEDs+0x2a4>
     dfa:	0c 2d       	mov	r16, r12
     dfc:	1d 2d       	mov	r17, r13
     dfe:	de 2d       	mov	r29, r14
     e00:	cf 2d       	mov	r28, r15
	    	vrem = max(vrem, high_power);
     e02:	c0 90 4d 21 	lds	r12, 0x214D
     e06:	d0 90 4e 21 	lds	r13, 0x214E
     e0a:	e0 90 4f 21 	lds	r14, 0x214F
     e0e:	f0 90 50 21 	lds	r15, 0x2150
     e12:	2c 2d       	mov	r18, r12
     e14:	3d 2d       	mov	r19, r13
     e16:	4e 2d       	mov	r20, r14
     e18:	5f 2d       	mov	r21, r15
     e1a:	60 2f       	mov	r22, r16
     e1c:	71 2f       	mov	r23, r17
     e1e:	8d 2f       	mov	r24, r29
     e20:	9c 2f       	mov	r25, r28
     e22:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <__gesf2>
     e26:	18 16       	cp	r1, r24
     e28:	24 f0       	brlt	.+8      	; 0xe32 <updateLEDs+0x2d4>
     e2a:	0c 2d       	mov	r16, r12
     e2c:	1d 2d       	mov	r17, r13
     e2e:	de 2d       	mov	r29, r14
     e30:	cf 2d       	mov	r28, r15
     e32:	80 2f       	mov	r24, r16
     e34:	91 2f       	mov	r25, r17
     e36:	ad 2f       	mov	r26, r29
     e38:	bc 2f       	mov	r27, r28
     e3a:	80 93 ac 29 	sts	0x29AC, r24
     e3e:	90 93 ad 29 	sts	0x29AD, r25
     e42:	a0 93 ae 29 	sts	0x29AE, r26
     e46:	b0 93 af 29 	sts	0x29AF, r27
	    	maxim = vrem;
     e4a:	80 93 07 20 	sts	0x2007, r24
     e4e:	90 93 08 20 	sts	0x2008, r25
     e52:	a0 93 09 20 	sts	0x2009, r26
     e56:	b0 93 0a 20 	sts	0x200A, r27
     e5a:	14 c0       	rjmp	.+40     	; 0xe84 <updateLEDs+0x326>
	  	} 
	  	else {
	    	maxim *= agc;
     e5c:	20 91 03 20 	lds	r18, 0x2003
     e60:	30 91 04 20 	lds	r19, 0x2004
     e64:	40 91 05 20 	lds	r20, 0x2005
     e68:	50 91 06 20 	lds	r21, 0x2006
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     e74:	60 93 07 20 	sts	0x2007, r22
     e78:	70 93 08 20 	sts	0x2008, r23
     e7c:	80 93 09 20 	sts	0x2009, r24
     e80:	90 93 0a 20 	sts	0x200A, r25
	  	}
		// map values to agc adjusted
		float slope = 255/(maxim-min);
     e84:	20 91 59 21 	lds	r18, 0x2159
     e88:	30 91 5a 21 	lds	r19, 0x215A
     e8c:	40 91 5b 21 	lds	r20, 0x215B
     e90:	50 91 5c 21 	lds	r21, 0x215C
     e94:	60 91 07 20 	lds	r22, 0x2007
     e98:	70 91 08 20 	lds	r23, 0x2008
     e9c:	80 91 09 20 	lds	r24, 0x2009
     ea0:	90 91 0a 20 	lds	r25, 0x200A
     ea4:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <__subsf3>
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	8f e7       	ldi	r24, 0x7F	; 127
     eb2:	93 e4       	ldi	r25, 0x43	; 67
     eb4:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <__divsf3>
     eb8:	6b 01       	movw	r12, r22
     eba:	7c 01       	movw	r14, r24
		
	  	ledLevelLow = (uint8_t)(low_power*slope);
     ebc:	20 91 55 21 	lds	r18, 0x2155
     ec0:	30 91 56 21 	lds	r19, 0x2156
     ec4:	40 91 57 21 	lds	r20, 0x2157
     ec8:	50 91 58 21 	lds	r21, 0x2158
     ecc:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     ed0:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__fixunssfsi>
     ed4:	d6 2f       	mov	r29, r22
     ed6:	60 93 d7 25 	sts	0x25D7, r22
	  	ledLevelMid = (uint8_t)(mid_power*slope);
     eda:	20 91 51 21 	lds	r18, 0x2151
     ede:	30 91 52 21 	lds	r19, 0x2152
     ee2:	40 91 53 21 	lds	r20, 0x2153
     ee6:	50 91 54 21 	lds	r21, 0x2154
     eea:	c7 01       	movw	r24, r14
     eec:	b6 01       	movw	r22, r12
     eee:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     ef2:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__fixunssfsi>
     ef6:	c6 2f       	mov	r28, r22
     ef8:	60 93 aa 28 	sts	0x28AA, r22
	  	ledLevelHigh = (uint8_t)(high_power*slope);
     efc:	20 91 4d 21 	lds	r18, 0x214D
     f00:	30 91 4e 21 	lds	r19, 0x214E
     f04:	40 91 4f 21 	lds	r20, 0x214F
     f08:	50 91 50 21 	lds	r21, 0x2150
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 01       	movw	r22, r12
     f10:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <__mulsf3>
     f14:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <__fixunssfsi>
     f18:	60 93 ab 29 	sts	0x29AB, r22
		
     lowf[point_low] = ledLevelLow;
     f1c:	80 91 61 21 	lds	r24, 0x2161
     f20:	90 91 62 21 	lds	r25, 0x2162
     f24:	fc 01       	movw	r30, r24
     f26:	ea 54       	subi	r30, 0x4A	; 74
     f28:	ff 4d       	sbci	r31, 0xDF	; 223
     f2a:	d0 83       	st	Z, r29
	 midf[point_mid] = ledLevelMid;
     f2c:	e0 91 5f 21 	lds	r30, 0x215F
     f30:	f0 91 60 21 	lds	r31, 0x2160
     f34:	df 01       	movw	r26, r30
     f36:	a0 5e       	subi	r26, 0xE0	; 224
     f38:	bf 4d       	sbci	r27, 0xDF	; 223
     f3a:	cc 93       	st	X, r28
	 highf[point_high] = ledLevelHigh;
     f3c:	20 91 5d 21 	lds	r18, 0x215D
     f40:	30 91 5e 21 	lds	r19, 0x215E
     f44:	d9 01       	movw	r26, r18
     f46:	af 5e       	subi	r26, 0xEF	; 239
     f48:	bf 4d       	sbci	r27, 0xDF	; 223
     f4a:	6c 93       	st	X, r22
	 point_low++;
     f4c:	01 96       	adiw	r24, 0x01	; 1
	 point_mid++;
	 point_high++;
	 point_low %= order_low;
     f4e:	6e e1       	ldi	r22, 0x1E	; 30
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     f56:	80 93 61 21 	sts	0x2161, r24
     f5a:	90 93 62 21 	sts	0x2162, r25
		
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
     f5e:	cf 01       	movw	r24, r30
     f60:	01 96       	adiw	r24, 0x01	; 1
	 point_high++;
	 point_low %= order_low;
	 point_mid %= order_mid;
     f62:	66 e9       	ldi	r22, 0x96	; 150
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     f6a:	80 93 5f 21 	sts	0x215F, r24
     f6e:	90 93 60 21 	sts	0x2160, r25
     lowf[point_low] = ledLevelLow;
	 midf[point_mid] = ledLevelMid;
	 highf[point_high] = ledLevelHigh;
	 point_low++;
	 point_mid++;
	 point_high++;
     f72:	c9 01       	movw	r24, r18
     f74:	01 96       	adiw	r24, 0x01	; 1
	 point_low %= order_low;
	 point_mid %= order_mid;
	 point_high %= order_high;
     f76:	6f e0       	ldi	r22, 0x0F	; 15
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     f7e:	80 93 5d 21 	sts	0x215D, r24
     f82:	90 93 5e 21 	sts	0x215E, r25
	 
	ledLevelHigh = mean(highf, order_high);
     f86:	6f e0       	ldi	r22, 0x0F	; 15
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	90 e2       	ldi	r25, 0x20	; 32
     f8c:	cd dd       	rcall	.-1126   	; 0xb28 <mean>
     f8e:	d8 2f       	mov	r29, r24
     f90:	80 93 ab 29 	sts	0x29AB, r24
	ledLevelMid = mean(midf, order_mid);
     f94:	66 e9       	ldi	r22, 0x96	; 150
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	90 e2       	ldi	r25, 0x20	; 32
     f9a:	c6 dd       	rcall	.-1140   	; 0xb28 <mean>
     f9c:	18 2f       	mov	r17, r24
     f9e:	80 93 aa 28 	sts	0x28AA, r24
	ledLevelLow = mean(lowf, order_low);
     fa2:	6e e1       	ldi	r22, 0x1E	; 30
     fa4:	86 eb       	ldi	r24, 0xB6	; 182
     fa6:	90 e2       	ldi	r25, 0x20	; 32
     fa8:	bf dd       	rcall	.-1154   	; 0xb28 <mean>
		 
	ledLevelLow = 100*ledLevelLow/LOW_DIVIDER;
     faa:	60 91 02 20 	lds	r22, 0x2002
     fae:	c4 e6       	ldi	r28, 0x64	; 100
     fb0:	c8 9f       	mul	r28, r24
     fb2:	c0 01       	movw	r24, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     fbc:	06 2f       	mov	r16, r22
     fbe:	60 93 d7 25 	sts	0x25D7, r22
	ledLevelMid = 100*ledLevelMid/MID_DIVIDER;
     fc2:	20 91 01 20 	lds	r18, 0x2001
     fc6:	c1 9f       	mul	r28, r17
     fc8:	c0 01       	movw	r24, r0
     fca:	11 24       	eor	r1, r1
     fcc:	62 2f       	mov	r22, r18
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     fd4:	60 93 aa 28 	sts	0x28AA, r22
	ledLevelHigh = 100*ledLevelHigh/HIGH_DIVIDER;
     fd8:	20 91 00 20 	lds	r18, 0x2000
     fdc:	cd 9f       	mul	r28, r29
     fde:	c0 01       	movw	r24, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	62 2f       	mov	r22, r18
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
     fea:	86 2f       	mov	r24, r22
     fec:	60 93 ab 29 	sts	0x29AB, r22
	}
	if (ledLevelLow > 255){
		ledLevelLow = 255;
	}
	
	if (colors[0] <= colors[1] && colors[0] <= colors[2]) {
     ff0:	20 91 dc 20 	lds	r18, 0x20DC
     ff4:	90 91 dd 20 	lds	r25, 0x20DD
     ff8:	92 17       	cp	r25, r18
     ffa:	50 f0       	brcs	.+20     	; 0x1010 <updateLEDs+0x4b2>
     ffc:	20 91 dc 20 	lds	r18, 0x20DC
    1000:	90 91 de 20 	lds	r25, 0x20DE
    1004:	92 17       	cp	r25, r18
    1006:	20 f0       	brcs	.+8      	; 0x1010 <updateLEDs+0x4b2>
		twinkle(0, ledLevelHigh, ledLevelLow);
    1008:	40 2f       	mov	r20, r16
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	f2 d6       	rcall	.+3556   	; 0x1df2 <twinkle>
    100e:	24 c0       	rjmp	.+72     	; 0x1058 <updateLEDs+0x4fa>
	}
	else if (colors[1] <= colors[0] && colors[1] <= colors[2]) {
    1010:	20 91 dd 20 	lds	r18, 0x20DD
    1014:	90 91 dc 20 	lds	r25, 0x20DC
    1018:	92 17       	cp	r25, r18
    101a:	50 f0       	brcs	.+20     	; 0x1030 <updateLEDs+0x4d2>
    101c:	20 91 dd 20 	lds	r18, 0x20DD
    1020:	90 91 de 20 	lds	r25, 0x20DE
    1024:	92 17       	cp	r25, r18
    1026:	20 f0       	brcs	.+8      	; 0x1030 <updateLEDs+0x4d2>
		twinkle(ledLevelHigh, 0, ledLevelLow);
    1028:	40 2f       	mov	r20, r16
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	e2 d6       	rcall	.+3524   	; 0x1df2 <twinkle>
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <updateLEDs+0x4fa>
	}
	else if (colors[2] <= colors[0] && colors[2] <= colors[1]) {
    1030:	20 91 de 20 	lds	r18, 0x20DE
    1034:	90 91 dc 20 	lds	r25, 0x20DC
    1038:	92 17       	cp	r25, r18
    103a:	50 f0       	brcs	.+20     	; 0x1050 <updateLEDs+0x4f2>
    103c:	20 91 de 20 	lds	r18, 0x20DE
    1040:	90 91 dd 20 	lds	r25, 0x20DD
    1044:	92 17       	cp	r25, r18
    1046:	20 f0       	brcs	.+8      	; 0x1050 <updateLEDs+0x4f2>
		twinkle(ledLevelHigh, ledLevelLow, 0);
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	60 2f       	mov	r22, r16
    104c:	d2 d6       	rcall	.+3492   	; 0x1df2 <twinkle>
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <updateLEDs+0x4fa>
	}
	else {
		twinkle(0, ledLevelHigh, ledLevelLow);
    1050:	40 2f       	mov	r20, r16
    1052:	68 2f       	mov	r22, r24
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	cd d6       	rcall	.+3482   	; 0x1df2 <twinkle>
	}
	
	// update LEDs

}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	08 95       	ret

0000106e <run>:

void run(){
    106e:	2f 92       	push	r2
    1070:	3f 92       	push	r3
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
}

static inline void fht_window(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1092:	2f 92       	push	r2
    1094:	3f 92       	push	r3
    1096:	4f 92       	push	r4
    1098:	5f 92       	push	r5
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this applies a window to the data for better frequency resolution
  asm volatile (
    10a4:	c0 eb       	ldi	r28, 0xB0	; 176
    10a6:	d9 e2       	ldi	r29, 0x29	; 41
    10a8:	ee e4       	ldi	r30, 0x4E	; 78
    10aa:	f2 e0       	ldi	r31, 0x02	; 2
    10ac:	ff 24       	eor	r15, r15
    10ae:	40 e8       	ldi	r20, 0x80	; 128
    10b0:	65 91       	lpm	r22, Z+
    10b2:	75 91       	lpm	r23, Z+
    10b4:	08 81       	ld	r16, Y
    10b6:	19 81       	ldd	r17, Y+1	; 0x01
    10b8:	97 03       	fmuls	r17, r23
    10ba:	20 01       	movw	r4, r0
    10bc:	0e 03       	fmul	r16, r22
    10be:	4f 1c       	adc	r4, r15
    10c0:	10 01       	movw	r2, r0
    10c2:	9e 03       	fmulsu	r17, r22
    10c4:	5f 08       	sbc	r5, r15
    10c6:	30 0c       	add	r3, r0
    10c8:	41 1c       	adc	r4, r1
    10ca:	5f 1c       	adc	r5, r15
    10cc:	f8 03       	fmulsu	r23, r16
    10ce:	5f 08       	sbc	r5, r15
    10d0:	30 0c       	add	r3, r0
    10d2:	41 1c       	adc	r4, r1
    10d4:	5f 1c       	adc	r5, r15
    10d6:	49 92       	st	Y+, r4
    10d8:	59 92       	st	Y+, r5
    10da:	4a 95       	dec	r20
    10dc:	49 f7       	brne	.-46     	; 0x10b0 <run+0x42>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r15", "r16", "r17", "r20", "r30", "r31",
   "r22", "r23", "r28", "r29"
  );

  // get the clobbers off the stack
  asm volatile (
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	5f 90       	pop	r5
    10ea:	4f 90       	pop	r4
    10ec:	3f 90       	pop	r3
    10ee:	2f 90       	pop	r2
    10f0:	11 24       	eor	r1, r1
}

static inline void fht_reorder(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    10f2:	2f 92       	push	r2
    10f4:	3f 92       	push	r3
    10f6:	6f 92       	push	r6
    10f8:	7f 92       	push	r7
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
  "push r29 \n"
  );


  // move values to bit reversed locations
  asm volatile (
    10fe:	ee e4       	ldi	r30, 0x4E	; 78
    1100:	f6 e0       	ldi	r31, 0x06	; 6
    1102:	48 e3       	ldi	r20, 0x38	; 56
    1104:	a5 91       	lpm	r26, Z+
    1106:	bb 27       	eor	r27, r27
    1108:	aa 0f       	add	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	a0 55       	subi	r26, 0x50	; 80
    110e:	b6 4d       	sbci	r27, 0xD6	; 214
    1110:	2d 90       	ld	r2, X+
    1112:	3c 90       	ld	r3, X
    1114:	c5 91       	lpm	r28, Z+
    1116:	dd 27       	eor	r29, r29
    1118:	cc 0f       	add	r28, r28
    111a:	dd 1f       	adc	r29, r29
    111c:	c0 55       	subi	r28, 0x50	; 80
    111e:	d6 4d       	sbci	r29, 0xD6	; 214
    1120:	68 80       	ld	r6, Y
    1122:	79 80       	ldd	r7, Y+1	; 0x01
    1124:	7c 92       	st	X, r7
    1126:	6e 92       	st	-X, r6
    1128:	28 82       	st	Y, r2
    112a:	39 82       	std	Y+1, r3	; 0x01
    112c:	4a 95       	dec	r20
    112e:	51 f7       	brne	.-44     	; 0x1104 <run+0x96>
  : "r2", "r3", "r6", "r7", "r20",
    "r26", "r27", "r28", "r29", "r30", "r31" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	3f 90       	pop	r3
    113a:	2f 90       	pop	r2


static inline void fht_run(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    113c:	2f 92       	push	r2
    113e:	3f 92       	push	r3
    1140:	4f 92       	push	r4
    1142:	5f 92       	push	r5
    1144:	6f 92       	push	r6
    1146:	7f 92       	push	r7
    1148:	8f 92       	push	r8
    114a:	9f 92       	push	r9
    114c:	af 92       	push	r10
    114e:	bf 92       	push	r11
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ef 92       	push	r14
    1156:	ff 92       	push	r15
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
  "push r29 \n"
  );
 
  // do first 3 butterflies - only 1 multiply, minimizes data fetches
  // initialize
  asm volatile (
    1160:	ff 24       	eor	r15, r15
    1162:	00 e1       	ldi	r16, 0x10	; 16
    1164:	e0 2e       	mov	r14, r16
    1166:	c0 eb       	ldi	r28, 0xB0	; 176
    1168:	d9 e2       	ldi	r29, 0x29	; 41
    116a:	68 80       	ld	r6, Y
    116c:	79 80       	ldd	r7, Y+1	; 0x01
    116e:	4a 80       	ldd	r4, Y+2	; 0x02
    1170:	5b 80       	ldd	r5, Y+3	; 0x03
    1172:	75 94       	asr	r7
    1174:	67 94       	ror	r6
    1176:	43 01       	movw	r8, r6
    1178:	55 94       	asr	r5
    117a:	47 94       	ror	r4
    117c:	64 0c       	add	r6, r4
    117e:	75 1c       	adc	r7, r5
    1180:	84 18       	sub	r8, r4
    1182:	95 08       	sbc	r9, r5
    1184:	ac 80       	ldd	r10, Y+4	; 0x04
    1186:	bd 80       	ldd	r11, Y+5	; 0x05
    1188:	4e 80       	ldd	r4, Y+6	; 0x06
    118a:	5f 80       	ldd	r5, Y+7	; 0x07
    118c:	b5 94       	asr	r11
    118e:	a7 94       	ror	r10
    1190:	65 01       	movw	r12, r10
    1192:	55 94       	asr	r5
    1194:	47 94       	ror	r4
    1196:	a4 0c       	add	r10, r4
    1198:	b5 1c       	adc	r11, r5
    119a:	c4 18       	sub	r12, r4
    119c:	d5 08       	sbc	r13, r5
    119e:	68 85       	ldd	r22, Y+8	; 0x08
    11a0:	79 85       	ldd	r23, Y+9	; 0x09
    11a2:	4a 84       	ldd	r4, Y+10	; 0x0a
    11a4:	5b 84       	ldd	r5, Y+11	; 0x0b
    11a6:	75 95       	asr	r23
    11a8:	67 95       	ror	r22
    11aa:	8b 01       	movw	r16, r22
    11ac:	55 94       	asr	r5
    11ae:	47 94       	ror	r4
    11b0:	64 0d       	add	r22, r4
    11b2:	75 1d       	adc	r23, r5
    11b4:	04 19       	sub	r16, r4
    11b6:	15 09       	sbc	r17, r5
    11b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    11bc:	4e 84       	ldd	r4, Y+14	; 0x0e
    11be:	5f 84       	ldd	r5, Y+15	; 0x0f
    11c0:	95 95       	asr	r25
    11c2:	87 95       	ror	r24
    11c4:	9c 01       	movw	r18, r24
    11c6:	55 94       	asr	r5
    11c8:	47 94       	ror	r4
    11ca:	84 0d       	add	r24, r4
    11cc:	95 1d       	adc	r25, r5
    11ce:	24 19       	sub	r18, r4
    11d0:	35 09       	sbc	r19, r5
    11d2:	75 94       	asr	r7
    11d4:	67 94       	ror	r6
    11d6:	23 01       	movw	r4, r6
    11d8:	b5 94       	asr	r11
    11da:	a7 94       	ror	r10
    11dc:	6a 0c       	add	r6, r10
    11de:	7b 1c       	adc	r7, r11
    11e0:	4a 18       	sub	r4, r10
    11e2:	5b 08       	sbc	r5, r11
    11e4:	95 94       	asr	r9
    11e6:	87 94       	ror	r8
    11e8:	54 01       	movw	r10, r8
    11ea:	d5 94       	asr	r13
    11ec:	c7 94       	ror	r12
    11ee:	8c 0c       	add	r8, r12
    11f0:	9d 1c       	adc	r9, r13
    11f2:	ac 18       	sub	r10, r12
    11f4:	bd 08       	sbc	r11, r13
    11f6:	75 95       	asr	r23
    11f8:	67 95       	ror	r22
    11fa:	6b 01       	movw	r12, r22
    11fc:	95 95       	asr	r25
    11fe:	87 95       	ror	r24
    1200:	68 0f       	add	r22, r24
    1202:	79 1f       	adc	r23, r25
    1204:	c8 1a       	sub	r12, r24
    1206:	d9 0a       	sbc	r13, r25
    1208:	75 94       	asr	r7
    120a:	67 94       	ror	r6
    120c:	13 01       	movw	r2, r6
    120e:	75 95       	asr	r23
    1210:	67 95       	ror	r22
    1212:	66 0e       	add	r6, r22
    1214:	77 1e       	adc	r7, r23
    1216:	26 1a       	sub	r2, r22
    1218:	37 0a       	sbc	r3, r23
    121a:	42 e8       	ldi	r20, 0x82	; 130
    121c:	5a e5       	ldi	r21, 0x5A	; 90
    121e:	15 03       	mulsu	r17, r21
    1220:	c0 01       	movw	r24, r0
    1222:	04 9f       	mul	r16, r20
    1224:	b0 01       	movw	r22, r0
    1226:	14 03       	mulsu	r17, r20
    1228:	9f 09       	sbc	r25, r15
    122a:	70 0d       	add	r23, r0
    122c:	81 1d       	adc	r24, r1
    122e:	9f 1d       	adc	r25, r15
    1230:	50 9f       	mul	r21, r16
    1232:	70 0d       	add	r23, r0
    1234:	81 1d       	adc	r24, r1
    1236:	9f 1d       	adc	r25, r15
    1238:	95 94       	asr	r9
    123a:	87 94       	ror	r8
    123c:	84 01       	movw	r16, r8
    123e:	88 0e       	add	r8, r24
    1240:	99 1e       	adc	r9, r25
    1242:	08 1b       	sub	r16, r24
    1244:	19 0b       	sbc	r17, r25
    1246:	55 94       	asr	r5
    1248:	47 94       	ror	r4
    124a:	d2 01       	movw	r26, r4
    124c:	d5 94       	asr	r13
    124e:	c7 94       	ror	r12
    1250:	4c 0c       	add	r4, r12
    1252:	5d 1c       	adc	r5, r13
    1254:	ac 19       	sub	r26, r12
    1256:	bd 09       	sbc	r27, r13
    1258:	35 03       	mulsu	r19, r21
    125a:	c0 01       	movw	r24, r0
    125c:	24 9f       	mul	r18, r20
    125e:	b0 01       	movw	r22, r0
    1260:	34 03       	mulsu	r19, r20
    1262:	9f 09       	sbc	r25, r15
    1264:	70 0d       	add	r23, r0
    1266:	81 1d       	adc	r24, r1
    1268:	9f 1d       	adc	r25, r15
    126a:	52 9f       	mul	r21, r18
    126c:	70 0d       	add	r23, r0
    126e:	81 1d       	adc	r24, r1
    1270:	9f 1d       	adc	r25, r15
    1272:	b5 94       	asr	r11
    1274:	a7 94       	ror	r10
    1276:	65 01       	movw	r12, r10
    1278:	a8 0e       	add	r10, r24
    127a:	b9 1e       	adc	r11, r25
    127c:	c8 1a       	sub	r12, r24
    127e:	d9 0a       	sbc	r13, r25
    1280:	69 92       	st	Y+, r6
    1282:	79 92       	st	Y+, r7
    1284:	89 92       	st	Y+, r8
    1286:	99 92       	st	Y+, r9
    1288:	49 92       	st	Y+, r4
    128a:	59 92       	st	Y+, r5
    128c:	a9 92       	st	Y+, r10
    128e:	b9 92       	st	Y+, r11
    1290:	29 92       	st	Y+, r2
    1292:	39 92       	st	Y+, r3
    1294:	09 93       	st	Y+, r16
    1296:	19 93       	st	Y+, r17
    1298:	a9 93       	st	Y+, r26
    129a:	b9 93       	st	Y+, r27
    129c:	c9 92       	st	Y+, r12
    129e:	d9 92       	st	Y+, r13
    12a0:	ea 94       	dec	r14
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <run+0x238>
    12a4:	62 cf       	rjmp	.-316    	; 0x116a <run+0xfc>
  "rjmp 1b \n"
  );

  // remainder of the butterflies (fourth and higher)
  // initialize
  asm volatile (
    12a6:	00 e2       	ldi	r16, 0x20	; 32
    12a8:	c0 2e       	mov	r12, r16
    12aa:	dd 24       	eor	r13, r13
    12ac:	0a e2       	ldi	r16, 0x2A	; 42
    12ae:	90 2e       	mov	r9, r16
    12b0:	ee eb       	ldi	r30, 0xBE	; 190
    12b2:	f6 e0       	ldi	r31, 0x06	; 6
    12b4:	00 e1       	ldi	r16, 0x10	; 16
    12b6:	a0 2e       	mov	r10, r16
    12b8:	bb 24       	eor	r11, r11
    12ba:	04 e0       	ldi	r16, 0x04	; 4
    12bc:	e0 2e       	mov	r14, r16
    12be:	a0 eb       	ldi	r26, 0xB0	; 176
    12c0:	b9 e2       	ldi	r27, 0x29	; 41
    12c2:	ed 01       	movw	r28, r26
    12c4:	ca 0d       	add	r28, r10
    12c6:	db 1d       	adc	r29, r11
    12c8:	8e 2c       	mov	r8, r14
    12ca:	2d 90       	ld	r2, X+
    12cc:	3c 90       	ld	r3, X
    12ce:	48 80       	ld	r4, Y
    12d0:	59 80       	ldd	r5, Y+1	; 0x01
    12d2:	35 94       	asr	r3
    12d4:	27 94       	ror	r2
    12d6:	31 01       	movw	r6, r2
    12d8:	55 94       	asr	r5
    12da:	47 94       	ror	r4
    12dc:	64 0c       	add	r6, r4
    12de:	75 1c       	adc	r7, r5
    12e0:	24 18       	sub	r2, r4
    12e2:	35 08       	sbc	r3, r5
    12e4:	29 92       	st	Y+, r2
    12e6:	39 92       	st	Y+, r3
    12e8:	7c 92       	st	X, r7
    12ea:	6e 92       	st	-X, r6
    12ec:	ac 0d       	add	r26, r12
    12ee:	bd 1d       	adc	r27, r13
    12f0:	11 97       	sbiw	r26, 0x01	; 1
    12f2:	ea 94       	dec	r14
    12f4:	08 81       	ld	r16, Y
    12f6:	19 81       	ldd	r17, Y+1	; 0x01
    12f8:	3c 91       	ld	r19, X
    12fa:	2e 91       	ld	r18, -X
    12fc:	45 91       	lpm	r20, Z+
    12fe:	55 91       	lpm	r21, Z+
    1300:	65 91       	lpm	r22, Z+
    1302:	75 91       	lpm	r23, Z+
    1304:	15 02       	muls	r17, r21
    1306:	20 01       	movw	r4, r0
    1308:	04 9f       	mul	r16, r20
    130a:	10 01       	movw	r2, r0
    130c:	14 03       	mulsu	r17, r20
    130e:	5f 08       	sbc	r5, r15
    1310:	30 0c       	add	r3, r0
    1312:	41 1c       	adc	r4, r1
    1314:	5f 1c       	adc	r5, r15
    1316:	50 9f       	mul	r21, r16
    1318:	30 0c       	add	r3, r0
    131a:	41 1c       	adc	r4, r1
    131c:	5f 1c       	adc	r5, r15
    131e:	37 02       	muls	r19, r23
    1320:	30 01       	movw	r6, r0
    1322:	26 9f       	mul	r18, r22
    1324:	20 0c       	add	r2, r0
    1326:	31 1c       	adc	r3, r1
    1328:	46 1c       	adc	r4, r6
    132a:	57 1c       	adc	r5, r7
    132c:	36 03       	mulsu	r19, r22
    132e:	5f 08       	sbc	r5, r15
    1330:	30 0c       	add	r3, r0
    1332:	41 1c       	adc	r4, r1
    1334:	5f 1c       	adc	r5, r15
    1336:	72 9f       	mul	r23, r18
    1338:	30 0c       	add	r3, r0
    133a:	41 1c       	adc	r4, r1
    133c:	5f 1c       	adc	r5, r15
    133e:	0e 01       	movw	r0, r28
    1340:	ca 19       	sub	r28, r10
    1342:	db 09       	sbc	r29, r11
    1344:	28 80       	ld	r2, Y
    1346:	39 80       	ldd	r3, Y+1	; 0x01
    1348:	35 94       	asr	r3
    134a:	27 94       	ror	r2
    134c:	31 01       	movw	r6, r2
    134e:	64 0c       	add	r6, r4
    1350:	75 1c       	adc	r7, r5
    1352:	24 18       	sub	r2, r4
    1354:	35 08       	sbc	r3, r5
    1356:	68 82       	st	Y, r6
    1358:	79 82       	std	Y+1, r7	; 0x01
    135a:	e0 01       	movw	r28, r0
    135c:	29 92       	st	Y+, r2
    135e:	39 92       	st	Y+, r3
    1360:	17 02       	muls	r17, r23
    1362:	20 01       	movw	r4, r0
    1364:	06 9f       	mul	r16, r22
    1366:	10 01       	movw	r2, r0
    1368:	16 03       	mulsu	r17, r22
    136a:	5f 08       	sbc	r5, r15
    136c:	30 0c       	add	r3, r0
    136e:	41 1c       	adc	r4, r1
    1370:	5f 1c       	adc	r5, r15
    1372:	70 9f       	mul	r23, r16
    1374:	30 0c       	add	r3, r0
    1376:	41 1c       	adc	r4, r1
    1378:	5f 1c       	adc	r5, r15
    137a:	35 02       	muls	r19, r21
    137c:	30 01       	movw	r6, r0
    137e:	24 9f       	mul	r18, r20
    1380:	20 18       	sub	r2, r0
    1382:	31 08       	sbc	r3, r1
    1384:	46 08       	sbc	r4, r6
    1386:	57 08       	sbc	r5, r7
    1388:	34 03       	mulsu	r19, r20
    138a:	5f 1c       	adc	r5, r15
    138c:	30 18       	sub	r3, r0
    138e:	41 08       	sbc	r4, r1
    1390:	5f 08       	sbc	r5, r15
    1392:	52 9f       	mul	r21, r18
    1394:	30 18       	sub	r3, r0
    1396:	41 08       	sbc	r4, r1
    1398:	5f 08       	sbc	r5, r15
    139a:	0d 01       	movw	r0, r26
    139c:	aa 19       	sub	r26, r10
    139e:	bb 09       	sbc	r27, r11
    13a0:	2d 90       	ld	r2, X+
    13a2:	3c 90       	ld	r3, X
    13a4:	35 94       	asr	r3
    13a6:	27 94       	ror	r2
    13a8:	31 01       	movw	r6, r2
    13aa:	64 0c       	add	r6, r4
    13ac:	75 1c       	adc	r7, r5
    13ae:	24 18       	sub	r2, r4
    13b0:	35 08       	sbc	r3, r5
    13b2:	7c 92       	st	X, r7
    13b4:	6e 92       	st	-X, r6
    13b6:	d0 01       	movw	r26, r0
    13b8:	2d 92       	st	X+, r2
    13ba:	3c 92       	st	X, r3
    13bc:	12 97       	sbiw	r26, 0x02	; 2
    13be:	ea 94       	dec	r14
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <run+0x356>
    13c2:	98 cf       	rjmp	.-208    	; 0x12f4 <run+0x286>
    13c4:	de 01       	movw	r26, r28
    13c6:	aa 19       	sub	r26, r10
    13c8:	bb 09       	sbc	r27, r11
    13ca:	2d 90       	ld	r2, X+
    13cc:	3c 90       	ld	r3, X
    13ce:	48 80       	ld	r4, Y
    13d0:	59 80       	ldd	r5, Y+1	; 0x01
    13d2:	35 94       	asr	r3
    13d4:	27 94       	ror	r2
    13d6:	31 01       	movw	r6, r2
    13d8:	55 94       	asr	r5
    13da:	47 94       	ror	r4
    13dc:	64 0c       	add	r6, r4
    13de:	75 1c       	adc	r7, r5
    13e0:	24 18       	sub	r2, r4
    13e2:	35 08       	sbc	r3, r5
    13e4:	28 82       	st	Y, r2
    13e6:	39 82       	std	Y+1, r3	; 0x01
    13e8:	7c 92       	st	X, r7
    13ea:	6e 92       	st	-X, r6
    13ec:	c5 01       	movw	r24, r10
    13ee:	96 95       	lsr	r25
    13f0:	87 95       	ror	r24
    13f2:	c8 0f       	add	r28, r24
    13f4:	d9 1f       	adc	r29, r25
    13f6:	c0 3b       	cpi	r28, 0xB0	; 176
    13f8:	d9 05       	cpc	r29, r9
    13fa:	40 f4       	brcc	.+16     	; 0x140c <run+0x39e>
    13fc:	de 01       	movw	r26, r28
    13fe:	ca 0d       	add	r28, r10
    1400:	db 1d       	adc	r29, r11
    1402:	e8 2c       	mov	r14, r8
    1404:	ea 19       	sub	r30, r10
    1406:	fb 09       	sbc	r31, r11
    1408:	34 96       	adiw	r30, 0x04	; 4
    140a:	5f cf       	rjmp	.-322    	; 0x12ca <run+0x25c>
    140c:	85 fc       	sbrc	r8, 5
    140e:	06 c0       	rjmp	.+12     	; 0x141c <run+0x3ae>
    1410:	ea 2c       	mov	r14, r10
    1412:	e6 94       	lsr	r14
    1414:	56 01       	movw	r10, r12
    1416:	cc 0c       	add	r12, r12
    1418:	dd 1c       	adc	r13, r13
    141a:	51 cf       	rjmp	.-350    	; 0x12be <run+0x250>
   "r14", "r15", "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "r24", "r25",
   "r26", "r27", "r28", "r29", "r30", "r31" // clobber list for whole thing
  );

  // get the clobbers off the stack
  asm volatile (
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	df 90       	pop	r13
    142a:	cf 90       	pop	r12
    142c:	bf 90       	pop	r11
    142e:	af 90       	pop	r10
    1430:	9f 90       	pop	r9
    1432:	8f 90       	pop	r8
    1434:	7f 90       	pop	r7
    1436:	6f 90       	pop	r6
    1438:	5f 90       	pop	r5
    143a:	4f 90       	pop	r4
    143c:	3f 90       	pop	r3
    143e:	2f 90       	pop	r2
    1440:	11 24       	eor	r1, r1
}

static inline void fht_mag_lin(void) {
  // save registers that are getting clobbered
  // avr-gcc requires r2:r17,r28:r29, and r1 cleared
  asm volatile (
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
  "push r28 \n"
  "push r29 \n"
  );

  // this returns an 16b unsigned value which is 16*((img^2 + real^2)^0.5)
  asm volatile (
    145a:	a0 eb       	ldi	r26, 0xB0	; 176
    145c:	b9 e2       	ldi	r27, 0x29	; 41
    145e:	cd ee       	ldi	r28, 0xED	; 237
    1460:	d5 e2       	ldi	r29, 0x25	; 37
    1462:	e0 eb       	ldi	r30, 0xB0	; 176
    1464:	fa e2       	ldi	r31, 0x2A	; 42
    1466:	4f 01       	movw	r8, r30
    1468:	ff 24       	eor	r15, r15
    146a:	40 e4       	ldi	r20, 0x40	; 64
    146c:	0d 91       	ld	r16, X+
    146e:	1d 91       	ld	r17, X+
    1470:	98 01       	movw	r18, r16
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <run+0x412>
    1474:	f4 01       	movw	r30, r8
    1476:	0d 91       	ld	r16, X+
    1478:	1d 91       	ld	r17, X+
    147a:	32 91       	ld	r19, -Z
    147c:	22 91       	ld	r18, -Z
    147e:	4f 01       	movw	r8, r30
    1480:	11 02       	muls	r17, r17
    1482:	20 01       	movw	r4, r0
    1484:	00 9f       	mul	r16, r16
    1486:	10 01       	movw	r2, r0
    1488:	98 03       	fmulsu	r17, r16
    148a:	5f 08       	sbc	r5, r15
    148c:	30 0c       	add	r3, r0
    148e:	41 1c       	adc	r4, r1
    1490:	5f 1c       	adc	r5, r15
    1492:	33 02       	muls	r19, r19
    1494:	30 01       	movw	r6, r0
    1496:	22 9f       	mul	r18, r18
    1498:	20 0c       	add	r2, r0
    149a:	31 1c       	adc	r3, r1
    149c:	46 1c       	adc	r4, r6
    149e:	57 1c       	adc	r5, r7
    14a0:	ba 03       	fmulsu	r19, r18
    14a2:	5f 08       	sbc	r5, r15
    14a4:	30 0c       	add	r3, r0
    14a6:	41 1c       	adc	r4, r1
    14a8:	5f 1c       	adc	r5, r15
    14aa:	11 27       	eor	r17, r17
    14ac:	55 20       	and	r5, r5
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <run+0x45a>
    14b0:	18 e0       	ldi	r17, 0x08	; 8
    14b2:	f2 01       	movw	r30, r4
    14b4:	f0 34       	cpi	r31, 0x40	; 64
    14b6:	28 f5       	brcc	.+74     	; 0x1502 <run+0x494>
    14b8:	33 0c       	add	r3, r3
    14ba:	ee 1f       	adc	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	33 0c       	add	r3, r3
    14c0:	ee 1f       	adc	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	1a 95       	dec	r17
    14c6:	1d c0       	rjmp	.+58     	; 0x1502 <run+0x494>
    14c8:	44 20       	and	r4, r4
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <run+0x478>
    14cc:	14 e0       	ldi	r17, 0x04	; 4
    14ce:	f4 2d       	mov	r31, r4
    14d0:	e3 2d       	mov	r30, r3
    14d2:	f0 34       	cpi	r31, 0x40	; 64
    14d4:	b0 f4       	brcc	.+44     	; 0x1502 <run+0x494>
    14d6:	22 0c       	add	r2, r2
    14d8:	ee 1f       	adc	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	22 0c       	add	r2, r2
    14de:	ee 1f       	adc	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	1a 95       	dec	r17
    14e4:	f6 cf       	rjmp	.-20     	; 0x14d2 <run+0x464>
    14e6:	f1 01       	movw	r30, r2
    14e8:	f0 34       	cpi	r31, 0x40	; 64
    14ea:	58 f4       	brcc	.+22     	; 0x1502 <run+0x494>
    14ec:	f0 31       	cpi	r31, 0x10	; 16
    14ee:	60 f4       	brcc	.+24     	; 0x1508 <run+0x49a>
    14f0:	f1 30       	cpi	r31, 0x01	; 1
    14f2:	78 f0       	brcs	.+30     	; 0x1512 <run+0x4a4>
    14f4:	f2 95       	swap	r31
    14f6:	e2 95       	swap	r30
    14f8:	ef 70       	andi	r30, 0x0F	; 15
    14fa:	ef 2b       	or	r30, r31
    14fc:	e6 95       	lsr	r30
    14fe:	f1 e0       	ldi	r31, 0x01	; 1
    1500:	08 c0       	rjmp	.+16     	; 0x1512 <run+0x4a4>
    1502:	ef 2f       	mov	r30, r31
    1504:	f2 e0       	ldi	r31, 0x02	; 2
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <run+0x4a4>
    1508:	ee 0f       	add	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	ef 2f       	mov	r30, r31
    150e:	e0 68       	ori	r30, 0x80	; 128
    1510:	f1 e0       	ldi	r31, 0x01	; 1
    1512:	e2 5b       	subi	r30, 0xB2	; 178
    1514:	fc 4f       	sbci	r31, 0xFC	; 252
    1516:	04 91       	lpm	r16, Z
    1518:	22 27       	eor	r18, r18
    151a:	11 23       	and	r17, r17
    151c:	21 f0       	breq	.+8      	; 0x1526 <run+0x4b8>
    151e:	00 0f       	add	r16, r16
    1520:	22 1f       	adc	r18, r18
    1522:	1a 95       	dec	r17
    1524:	e1 f7       	brne	.-8      	; 0x151e <run+0x4b0>
    1526:	09 93       	st	Y+, r16
    1528:	29 93       	st	Y+, r18
    152a:	4a 95       	dec	r20
    152c:	09 f0       	breq	.+2      	; 0x1530 <run+0x4c2>
    152e:	a2 cf       	rjmp	.-188    	; 0x1474 <run+0x406>
  : "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r16", "r17", "r26", "r27",
   "r28", "r29", "r30", "r31", "r15", "r18", "r19", "r20", "r8" // clobber list
  );

  // get the clobbers off the stack
  asm volatile (
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	11 24       	eor	r1, r1
	fht_window(); // window the data for better frequency response
	fht_reorder(); // reorder the data before doing the fht
	fht_run(); // process the data in the fht
	fht_mag_lin(); // take the output of the fht
	
	updateLEDs();
    154a:	09 db       	rcall	.-2542   	; 0xb5e <updateLEDs>
	flag_fft = false;
    154c:	10 92 3e 21 	sts	0x213E, r1
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	df 90       	pop	r13
    155e:	cf 90       	pop	r12
    1560:	bf 90       	pop	r11
    1562:	af 90       	pop	r10
    1564:	9f 90       	pop	r9
    1566:	8f 90       	pop	r8
    1568:	7f 90       	pop	r7
    156a:	6f 90       	pop	r6
    156c:	5f 90       	pop	r5
    156e:	4f 90       	pop	r4
    1570:	3f 90       	pop	r3
    1572:	2f 90       	pop	r2
    1574:	08 95       	ret

00001576 <write_byte_eeprom>:

/*
	return false when the procedure was failed, true when success
*/
bool write_byte_eeprom(uint8_t addr, uint8_t data)
{
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	16 2f       	mov	r17, r22
	uint8_t rev_data;
	
	nvm_eeprom_write_byte(addr, data);
    157e:	c8 2f       	mov	r28, r24
    1580:	d0 e0       	ldi	r29, 0x00	; 0
    1582:	ce 01       	movw	r24, r28
    1584:	0e 94 10 18 	call	0x3020	; 0x3020 <nvm_eeprom_write_byte>
	rev_data = nvm_eeprom_read_byte(addr);
    1588:	ce 01       	movw	r24, r28
    158a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <nvm_eeprom_read_byte>
	if (rev_data == data)
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	18 13       	cpse	r17, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
	} 
	else
	{
		return false;
	}	
    1594:	89 2f       	mov	r24, r25
    1596:	df 91       	pop	r29
    1598:	cf 91       	pop	r28
    159a:	1f 91       	pop	r17
    159c:	08 95       	ret

0000159e <init_i2c>:
		.no_wait		= false
	};
	
	twi_master_write(&TWI_MASTER, &package);
	cmd_status = 1;
}
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	29 97       	sbiw	r28, 0x09	; 9
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	80 e8       	ldi	r24, 0x80	; 128
    15ae:	9a e1       	ldi	r25, 0x1A	; 26
    15b0:	a6 e0       	ldi	r26, 0x06	; 6
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	ab 83       	std	Y+3, r26	; 0x03
    15ba:	bc 83       	std	Y+4, r27	; 0x04
    15bc:	83 e2       	ldi	r24, 0x23	; 35
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e0       	ldi	r26, 0x00	; 0
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	af 83       	std	Y+7, r26	; 0x07
    15ca:	b8 87       	std	Y+8, r27	; 0x08
    15cc:	80 e5       	ldi	r24, 0x50	; 80
    15ce:	89 87       	std	Y+9, r24	; 0x09
    15d0:	60 e4       	ldi	r22, 0x40	; 64
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	0e 94 76 16 	call	0x2cec	; 0x2cec <sysclk_enable_module>
    15d8:	be 01       	movw	r22, r28
    15da:	6f 5f       	subi	r22, 0xFF	; 255
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	80 e8       	ldi	r24, 0x80	; 128
    15e0:	94 e0       	ldi	r25, 0x04	; 4
    15e2:	0e 94 ca 1b 	call	0x3794	; 0x3794 <twi_master_init>
    15e6:	e0 e8       	ldi	r30, 0x80	; 128
    15e8:	f4 e0       	ldi	r31, 0x04	; 4
    15ea:	81 81       	ldd	r24, Z+1	; 0x01
    15ec:	88 60       	ori	r24, 0x08	; 8
    15ee:	81 83       	std	Z+1, r24	; 0x01
    15f0:	78 94       	sei
    15f2:	29 96       	adiw	r28, 0x09	; 9
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <init_mtch6301>:
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	59 e1       	ldi	r21, 0x19	; 25
    1602:	60 e2       	ldi	r22, 0x20	; 32
    1604:	80 e4       	ldi	r24, 0x40	; 64
    1606:	96 e0       	ldi	r25, 0x06	; 6
    1608:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	80 93 b0 00 	sts	0x00B0, r24
    1612:	e0 e4       	ldi	r30, 0x40	; 64
    1614:	f6 e0       	ldi	r31, 0x06	; 6
    1616:	82 87       	std	Z+10, r24	; 0x0a
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	81 87       	std	Z+9, r24	; 0x09
    161c:	e0 ea       	ldi	r30, 0xA0	; 160
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	81 60       	ori	r24, 0x01	; 1
    1624:	82 83       	std	Z+2, r24	; 0x02
    1626:	78 94       	sei
    1628:	08 95       	ret

0000162a <init_mtchio>:
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	60 e2       	ldi	r22, 0x20	; 32
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	96 e0       	ldi	r25, 0x06	; 6
    1634:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e4       	ldi	r22, 0x40	; 64
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	96 e0       	ldi	r25, 0x06	; 6
    1642:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	60 e8       	ldi	r22, 0x80	; 128
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	96 e0       	ldi	r25, 0x06	; 6
    1650:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1654:	41 e0       	ldi	r20, 0x01	; 1
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	60 e4       	ldi	r22, 0x40	; 64
    165a:	80 e6       	ldi	r24, 0x60	; 96
    165c:	96 e0       	ldi	r25, 0x06	; 6
    165e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	80 ee       	ldi	r24, 0xE0	; 224
    166a:	97 e0       	ldi	r25, 0x07	; 7
    166c:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	80 e6       	ldi	r24, 0x60	; 96
    1678:	96 e0       	ldi	r25, 0x06	; 6
    167a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    167e:	41 e0       	ldi	r20, 0x01	; 1
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	80 e6       	ldi	r24, 0x60	; 96
    1686:	96 e0       	ldi	r25, 0x06	; 6
    1688:	0c 94 8d 16 	jmp	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    168c:	08 95       	ret

0000168e <__vector_9>:
	return response_slaver[3];
}


ISR(PORTC_INT_vect)
{	
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	2f 93       	push	r18
    169e:	3f 93       	push	r19
    16a0:	4f 93       	push	r20
    16a2:	5f 93       	push	r21
    16a4:	6f 93       	push	r22
    16a6:	7f 93       	push	r23
    16a8:	8f 93       	push	r24
    16aa:	9f 93       	push	r25
    16ac:	af 93       	push	r26
    16ae:	bf 93       	push	r27
    16b0:	ef 93       	push	r30
    16b2:	ff 93       	push	r31
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	61 97       	sbiw	r28, 0x11	; 17
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	de bf       	out	0x3e, r29	; 62
	PORTC.INTFLAGS = 0x20;
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	e0 e4       	ldi	r30, 0x40	; 64
    16c6:	f6 e0       	ldi	r31, 0x06	; 6
    16c8:	84 87       	std	Z+12, r24	; 0x0c
//	usart_putchar(&USARTD0, 0xF0);
	//twinkle(255, 255, 255);
	
	switch(cmd_status)
    16ca:	80 91 6e 21 	lds	r24, 0x216E
    16ce:	88 23       	and	r24, r24
    16d0:	21 f0       	breq	.+8      	; 0x16da <__vector_9+0x4c>
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <__vector_9+0x4a>
    16d6:	7c c0       	rjmp	.+248    	; 0x17d0 <__vector_9+0x142>
    16d8:	98 c0       	rjmp	.+304    	; 0x180a <__vector_9+0x17c>
	}
}

static inline void mtch6301_recv_data(void)
{
	uint8_t recv_pattern[RECV_SIZE_MTCH6301] = {0};	
    16da:	fe 01       	movw	r30, r28
    16dc:	3c 96       	adiw	r30, 0x0c	; 12
    16de:	86 e0       	ldi	r24, 0x06	; 6
    16e0:	df 01       	movw	r26, r30
    16e2:	1d 92       	st	X+, r1
    16e4:	8a 95       	dec	r24
    16e6:	e9 f7       	brne	.-6      	; 0x16e2 <__vector_9+0x54>
	
	twi_package_t package = {
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8b e0       	ldi	r24, 0x0B	; 11
    16f0:	db 01       	movw	r26, r22
    16f2:	1d 92       	st	X+, r1
    16f4:	8a 95       	dec	r24
    16f6:	e9 f7       	brne	.-6      	; 0x16f2 <__vector_9+0x64>
    16f8:	85 e2       	ldi	r24, 0x25	; 37
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	ef 83       	std	Y+7, r30	; 0x07
    16fe:	f8 87       	std	Y+8, r31	; 0x08
    1700:	86 e0       	ldi	r24, 0x06	; 6
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	89 87       	std	Y+9, r24	; 0x09
    1706:	9a 87       	std	Y+10, r25	; 0x0a
 * \return STATUS_OK   If all bytes were read, error code otherwise
 */
static inline status_code_t twi_master_read(TWI_t *twi,
		const twi_package_t *package)
{
	return twi_master_transfer (twi, package, true);
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	80 e8       	ldi	r24, 0x80	; 128
    170c:	94 e0       	ldi	r25, 0x04	; 4
    170e:	0e 94 df 1b 	call	0x37be	; 0x37be <twi_master_transfer>
	};
	
	//twinkle(255, 0, 0);
	
	twi_master_read(&TWI_MASTER, &package);
	m_touch_pkg->tch	= (recv_pattern[1] & 0x04) >> 2;
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	82 fb       	bst	r24, 2
    1716:	00 27       	eor	r16, r16
    1718:	00 f9       	bld	r16, 0
    171a:	10 e0       	ldi	r17, 0x00	; 0
    171c:	00 93 b1 2a 	sts	0x2AB1, r16
	
	if (m_touch_pkg->tch == 0)
    1720:	01 2b       	or	r16, r17
    1722:	09 f4       	brne	.+2      	; 0x1726 <__vector_9+0x98>
    1724:	72 c0       	rjmp	.+228    	; 0x180a <__vector_9+0x17c>
		m_touch_pkg->y		= ((recv_pattern[5] & 0x1F) << 7) | ((recv_pattern[4] & 0x7F) >> 0);	
		twinkle(0, 255, 0);	*/
	} 
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
    1726:	88 77       	andi	r24, 0x78	; 120
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	95 95       	asr	r25
    1730:	87 95       	ror	r24
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	80 93 b0 2a 	sts	0x2AB0, r24
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
    173a:	8e 85       	ldd	r24, Y+14	; 0x0e
    173c:	8f 77       	andi	r24, 0x7F	; 127
    173e:	80 93 b7 2a 	sts	0x2AB7, r24
static inline uint8_t decode_mtch6301(uint8_t m_gesture)
{
	//twinkle(255, 255, 255);
	uint8_t cmd;
	
	switch(m_gesture)
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	fc 01       	movw	r30, r24
    1746:	70 97       	sbiw	r30, 0x10	; 16
    1748:	e3 35       	cpi	r30, 0x53	; 83
    174a:	f1 05       	cpc	r31, r1
    174c:	d8 f5       	brcc	.+118    	; 0x17c4 <__vector_9+0x136>
    174e:	ea 5a       	subi	r30, 0xAA	; 170
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__tablejump2__>
	{
		case SINGLE_TAP:
			cmd = 0x01;
			latest_gesture = PLAY;
    1756:	80 ea       	ldi	r24, 0xA0	; 160
    1758:	80 93 63 21 	sts	0x2163, r24
	uint8_t cmd;
	
	switch(m_gesture)
	{
		case SINGLE_TAP:
			cmd = 0x01;
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	35 c0       	rjmp	.+106    	; 0x17ca <__vector_9+0x13c>
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
			latest_gesture = CONNDISC;
    1760:	81 ea       	ldi	r24, 0xA1	; 161
    1762:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x01;
			latest_gesture = PLAY;
			////twinkle(255, 0, 0);
			break;
		case SINGLE_TAP_HOLD:
			cmd = 0x02;
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	30 c0       	rjmp	.+96     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
			latest_gesture = INQUIRE;
    176a:	82 ea       	ldi	r24, 0xA2	; 162
    176c:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x02;
			latest_gesture = CONNDISC;
			//twinkle(255, 255, 0);
			break;
		case DOUBLE_TAP:
			cmd = 0x03;
    1770:	83 e0       	ldi	r24, 0x03	; 3
    1772:	2b c0       	rjmp	.+86     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
			latest_gesture = VOLUP;
    1774:	83 ea       	ldi	r24, 0xA3	; 163
    1776:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x03;
			latest_gesture = INQUIRE;
			break;
			//twinkle(0, 255, 0);
		case UP_SWIPE:
			cmd = 0x04;
    177a:	84 e0       	ldi	r24, 0x04	; 4
    177c:	26 c0       	rjmp	.+76     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
			latest_gesture = VOLUP;
    177e:	83 ea       	ldi	r24, 0xA3	; 163
    1780:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case UP_SWIPE_HOLD:
			cmd = 0x04;
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	21 c0       	rjmp	.+66     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
			latest_gesture = NEXT;
    1788:	84 ea       	ldi	r24, 0xA4	; 164
    178a:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x04;
			latest_gesture = VOLUP;
			//twinkle(0, 255, 255);
			break;
		case RIGHT_SWIPE:
			cmd = 0x05;
    178e:	85 e0       	ldi	r24, 0x05	; 5
    1790:	1c c0       	rjmp	.+56     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
			latest_gesture = NEXT;
    1792:	84 ea       	ldi	r24, 0xA4	; 164
    1794:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case RIGHT_SWIPE_HOLD:
			cmd = 0x05;
    1798:	85 e0       	ldi	r24, 0x05	; 5
    179a:	17 c0       	rjmp	.+46     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    179c:	85 ea       	ldi	r24, 0xA5	; 165
    179e:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x05;
			latest_gesture = NEXT;
			//twinkle(0, 0, 255);
			break;
		case DOWN_SWIPE:
			cmd = 0x06;
    17a2:	86 e0       	ldi	r24, 0x06	; 6
    17a4:	12 c0       	rjmp	.+36     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
			latest_gesture = VOLDOWN;
    17a6:	85 ea       	ldi	r24, 0xA5	; 165
    17a8:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case DOWN_SWIPE_HOLD:
			cmd = 0x06;
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
			latest_gesture = PREV;
    17b0:	86 ea       	ldi	r24, 0xA6	; 166
    17b2:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x06;
			latest_gesture = VOLDOWN;
			//twinkle(255, 0, 255);
			break;
		case LEFT_SWIPE:
			cmd = 0x07;
    17b6:	87 e0       	ldi	r24, 0x07	; 7
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <__vector_9+0x13c>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
			latest_gesture = PREV;
    17ba:	86 ea       	ldi	r24, 0xA6	; 166
    17bc:	80 93 63 21 	sts	0x2163, r24
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		case LEFT_SWIPE_HOLD:
			cmd = 0x07;
    17c0:	87 e0       	ldi	r24, 0x07	; 7
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <__vector_9+0x13c>
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
			latest_gesture = NONE;
    17c4:	10 92 63 21 	sts	0x2163, r1
			cmd = 0x07;
			latest_gesture = PREV;
			//twinkle(255, 255, 255);
			break;
		default:
			cmd = 0x00;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		m_touch_pkg->id		= (recv_pattern[1] & 0x78) >> 3;
		m_touch_pkg->gesture= (recv_pattern[2] & 0x7F) >> 0;
		
		mapio_mtch6301 = decode_mtch6301(m_touch_pkg->gesture);
    17ca:	80 93 6d 21 	sts	0x216D, r24
    17ce:	1d c0       	rjmp	.+58     	; 0x180a <__vector_9+0x17c>

static inline uint8_t response_cmd()
{
	uint8_t i;
	
	twi_package_t package = {
    17d0:	be 01       	movw	r22, r28
    17d2:	6f 5f       	subi	r22, 0xFF	; 255
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8b e0       	ldi	r24, 0x0B	; 11
    17d8:	fb 01       	movw	r30, r22
    17da:	11 92       	st	Z+, r1
    17dc:	8a 95       	dec	r24
    17de:	e9 f7       	brne	.-6      	; 0x17da <__vector_9+0x14c>
    17e0:	85 e2       	ldi	r24, 0x25	; 37
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	84 e6       	ldi	r24, 0x64	; 100
    17e6:	91 e2       	ldi	r25, 0x21	; 33
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	98 87       	std	Y+8, r25	; 0x08
    17ec:	89 e0       	ldi	r24, 0x09	; 9
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	89 87       	std	Y+9, r24	; 0x09
    17f2:	9a 87       	std	Y+10, r25	; 0x0a
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	80 e8       	ldi	r24, 0x80	; 128
    17f8:	94 e0       	ldi	r25, 0x04	; 4
    17fa:	0e 94 df 1b 	call	0x37be	; 0x37be <twi_master_transfer>
		.length			= 9,
		.no_wait		= false
	};
	
	twi_master_read(&TWI_MASTER, &package);
	cmd_status = 0;
    17fe:	10 92 6e 21 	sts	0x216E, r1
	for (i=0;i<9;i++)
	{
		//usart_putchar(&USARTD0, response_slaver[i]);
	}
	
	return response_slaver[3];
    1802:	80 91 67 21 	lds	r24, 0x2167
	{
		case 0:			
			mtch6301_recv_data();
			break;
		case 1:
			cmd_res = response_cmd();
    1806:	80 93 d4 20 	sts	0x20D4, r24
			break;
		default:
			return;
	}
    180a:	61 96       	adiw	r28, 0x11	; 17
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <timer4_overflow_interrupt_callback>:
	//wdt_reset(); // kick the watchdog - DEPRECATED
	
	tc45_clear_overflow(&TCD5);
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}
    183a:	e0 e0       	ldi	r30, 0x00	; 0
    183c:	f8 e0       	ldi	r31, 0x08	; 8
    183e:	84 85       	ldd	r24, Z+12	; 0x0c
    1840:	81 60       	ori	r24, 0x01	; 1
    1842:	84 87       	std	Z+12, r24	; 0x0c
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 b9 2a 	sts	0x2AB9, r24
    184a:	8f b7       	in	r24, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	e0 e0       	ldi	r30, 0x00	; 0
    1850:	f2 e0       	ldi	r31, 0x02	; 2
    1852:	90 81       	ld	r25, Z
    1854:	94 60       	ori	r25, 0x04	; 4
    1856:	90 83       	st	Z, r25
    1858:	8f bf       	out	0x3f, r24	; 63
    185a:	08 95       	ret

0000185c <timer5_overflow_interrupt_callback>:
	adc_start_conversion(&ADCA, ADC_CH0);
}

static inline void timer5_overflow_interrupt_callback(void)
{
	flag_timer5 = true;/*
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 b8 2a 	sts	0x2AB8, r24
static inline void tc45_clear_overflow(volatile void *tc)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTFLAGS |= TC4_OVFIF_bm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTFLAGS |= TC5_OVFIF_bm;
    1862:	e0 e4       	ldi	r30, 0x40	; 64
    1864:	f8 e0       	ldi	r31, 0x08	; 8
    1866:	84 85       	ldd	r24, Z+12	; 0x0c
    1868:	81 60       	ori	r24, 0x01	; 1
    186a:	84 87       	std	Z+12, r24	; 0x0c
	if (flag_initcharge) {
		flag_initcharge = false;
		init_charge();
	}*/
	tc45_clear_overflow(&TCC5);
	update_led_charge();
    186c:	8c c3       	rjmp	.+1816   	; 0x1f86 <update_led_charge>
    186e:	08 95       	ret

00001870 <init_timer4>:
	
	//adc_start_conversion(&ADCA, ADC_CH0);
}

void init_timer4(void)
{
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
	/*
	 * Configure TCC4 to generate 50ms overflow interrupt
	 * using 4MHz (0.25us) resolution clock (20us = 80 * 0.25us)
	 */
	/* Unmask clock for TCC4 */
	tc45_enable(&TCC4);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	98 e0       	ldi	r25, 0x08	; 8
    1878:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <tc45_enable>
 */
static inline void tc45_set_overflow_interrupt_level(volatile void *tc,
		enum TC45_INT_LEVEL_t level)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	d8 e0       	ldi	r29, 0x08	; 8
    1880:	8e 81       	ldd	r24, Y+6	; 0x06
    1882:	8c 7f       	andi	r24, 0xFC	; 252
    1884:	8e 83       	std	Y+6, r24	; 0x06
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8e 83       	std	Y+6, r24	; 0x06
 */
static inline void tc45_set_wgm(volatile void *tc, enum tc45_wg_mode_t wgm)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	88 7f       	andi	r24, 0xF8	; 248
    1890:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC4, TC45_INT_LVL_LO);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC4, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC4,	timer4_overflow_interrupt_callback);
    1892:	6d e1       	ldi	r22, 0x1D	; 29
    1894:	7c e0       	ldi	r23, 0x0C	; 12
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	98 e0       	ldi	r25, 0x08	; 8
    189a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <tc45_set_overflow_interrupt_callback>
 * \param per_value Period value : PER
 */
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
    189e:	80 e5       	ldi	r24, 0x50	; 80
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	8e a3       	std	Y+38, r24	; 0x26
    18a4:	9f a3       	std	Y+39, r25	; 0x27
static inline void tc45_write_clock_source(volatile void *tc,
		TC45_CLKSEL_t TC45_CLKSEL_enum)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
    18a6:	88 81       	ld	r24, Y
    18a8:	80 7f       	andi	r24, 0xF0	; 240
    18aa:	84 60       	ori	r24, 0x04	; 4
    18ac:	88 83       	st	Y, r24
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    18ae:	e0 ea       	ldi	r30, 0xA0	; 160
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	82 81       	ldd	r24, Z+2	; 0x02
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	82 83       	std	Z+2, r24	; 0x02
	/* Configure TC period and resolution */
	tc45_write_period(&TCC4, 80);
	tc45_set_resolution(&TCC4, 4000000);
	
	pmic_enable_level(PMIC_LVL_LOW);
	cpu_irq_enable();
    18b8:	78 94       	sei
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <init_timer5>:

void init_timer5(void)
{
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
		((TC4_t *)tc)->INTCTRLA = ((TC4_t *)tc)->INTCTRLA &
				~TC4_OVFINTLVL_gm;
		((TC4_t *)tc)->INTCTRLA
			= ((TC4_t *)tc)->INTCTRLA | (level << TC4_OVFINTLVL_gp);
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->INTCTRLA = ((TC5_t *)tc)->INTCTRLA &
    18c4:	c0 e4       	ldi	r28, 0x40	; 64
    18c6:	d8 e0       	ldi	r29, 0x08	; 8
    18c8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ca:	8c 7f       	andi	r24, 0xFC	; 252
    18cc:	8e 83       	std	Y+6, r24	; 0x06
				~TC5_OVFINTLVL_gm;
		((TC5_t *)tc)->INTCTRLA
			= ((TC5_t *)tc)->INTCTRLA | (level << TC5_OVFINTLVL_gp);
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	82 60       	ori	r24, 0x02	; 2
    18d2:	8e 83       	std	Y+6, r24	; 0x06
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->CTRLB
			= (((TC4_t *)tc)->CTRLB & ~TC4_WGMODE_gm) | wgm;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLB
			= (((TC5_t *)tc)->CTRLB & ~TC5_WGMODE_gm) | wgm;
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	88 7f       	andi	r24, 0xF8	; 248
    18d8:	89 83       	std	Y+1, r24	; 0x01
	/* Enable overflow interrupt */
	tc45_set_overflow_interrupt_level(&TCC5, TC45_INT_LVL_MED);
	/* Configure TC in normal mode */
	tc45_set_wgm(&TCC5, TC45_WG_NORMAL);
	/* Configure call back interrupt */
	tc45_set_overflow_interrupt_callback(&TCC5,	timer5_overflow_interrupt_callback);
    18da:	6e e2       	ldi	r22, 0x2E	; 46
    18dc:	7c e0       	ldi	r23, 0x0C	; 12
    18de:	80 e4       	ldi	r24, 0x40	; 64
    18e0:	98 e0       	ldi	r25, 0x08	; 8
    18e2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <tc45_set_overflow_interrupt_callback>
static inline void tc45_write_period(volatile void *tc, uint16_t per_value)
{
	if (tc45_is_TC4(void *tc)) {
		((TC4_t *)tc)->PER = per_value;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->PER = per_value;
    18e6:	84 e2       	ldi	r24, 0x24	; 36
    18e8:	94 ef       	ldi	r25, 0xF4	; 244
    18ea:	8e a3       	std	Y+38, r24	; 0x26
    18ec:	9f a3       	std	Y+39, r25	; 0x27
		((TC4_t *)tc)->CTRLA
			= (((TC4_t *)tc)->CTRLA & ~TC4_CLKSEL_gm) |
				TC45_CLKSEL_enum;
	} else if (tc45_is_TC5(void *tc)) {
		((TC5_t *)tc)->CTRLA
			= (((TC5_t *)tc)->CTRLA & ~TC5_CLKSEL_gm) |
    18ee:	88 81       	ld	r24, Y
    18f0:	80 7f       	andi	r24, 0xF0	; 240
    18f2:	86 60       	ori	r24, 0x06	; 6
    18f4:	88 83       	st	Y, r24
    18f6:	e0 ea       	ldi	r30, 0xA0	; 160
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	82 60       	ori	r24, 0x02	; 2
    18fe:	82 83       	std	Z+2, r24	; 0x02
//	tc45_set_resolution(&TCC5, 500000);
	tc45_write_period(&TCC5, 62500);
	tc45_set_resolution(&TCC5, 125000);
	
	pmic_enable_level(PMIC_LVL_MEDIUM);
	cpu_irq_enable();
    1900:	78 94       	sei
}
    1902:	df 91       	pop	r29
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <init_uart>:
	}
}

uint8_t* get_current_colors(void) {
	return colors;
}
    1908:	43 e0       	ldi	r20, 0x03	; 3
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	68 e0       	ldi	r22, 0x08	; 8
    190e:	80 e6       	ldi	r24, 0x60	; 96
    1910:	96 e0       	ldi	r25, 0x06	; 6
    1912:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	64 e0       	ldi	r22, 0x04	; 4
    191c:	80 e6       	ldi	r24, 0x60	; 96
    191e:	96 e0       	ldi	r25, 0x06	; 6
    1920:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ioport_configure_port_pin>
    1924:	65 ed       	ldi	r22, 0xD5	; 213
    1926:	70 e2       	ldi	r23, 0x20	; 32
    1928:	80 ec       	ldi	r24, 0xC0	; 192
    192a:	99 e0       	ldi	r25, 0x09	; 9
    192c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <usart_init_rs232>
    1930:	e0 ec       	ldi	r30, 0xC0	; 192
    1932:	f9 e0       	ldi	r31, 0x09	; 9
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	80 63       	ori	r24, 0x30	; 48
    1938:	82 83       	std	Z+2, r24	; 0x02
    193a:	e0 ea       	ldi	r30, 0xA0	; 160
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	84 60       	ori	r24, 0x04	; 4
    1942:	82 83       	std	Z+2, r24	; 0x02
    1944:	78 94       	sei
    1946:	08 95       	ret

00001948 <uart_send_status>:
    1948:	68 2f       	mov	r22, r24
    194a:	80 ec       	ldi	r24, 0xC0	; 192
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <usart_putchar>
    1952:	08 95       	ret

00001954 <led_set_from_colors>:
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	cc ed       	ldi	r28, 0xDC	; 220
    195a:	d0 e2       	ldi	r29, 0x20	; 32
    195c:	88 81       	ld	r24, Y
    195e:	80 93 d3 2a 	sts	0x2AD3, r24
    1962:	ad ed       	ldi	r26, 0xDD	; 221
    1964:	b0 e2       	ldi	r27, 0x20	; 32
    1966:	8c 91       	ld	r24, X
    1968:	80 93 d4 2a 	sts	0x2AD4, r24
    196c:	ee ed       	ldi	r30, 0xDE	; 222
    196e:	f0 e2       	ldi	r31, 0x20	; 32
    1970:	80 81       	ld	r24, Z
    1972:	80 93 d5 2a 	sts	0x2AD5, r24
    1976:	88 81       	ld	r24, Y
    1978:	80 93 dc 2a 	sts	0x2ADC, r24
    197c:	8c 91       	ld	r24, X
    197e:	80 93 dd 2a 	sts	0x2ADD, r24
    1982:	80 81       	ld	r24, Z
    1984:	80 93 de 2a 	sts	0x2ADE, r24
    1988:	cf ed       	ldi	r28, 0xDF	; 223
    198a:	d0 e2       	ldi	r29, 0x20	; 32
    198c:	88 81       	ld	r24, Y
    198e:	80 93 d6 2a 	sts	0x2AD6, r24
    1992:	a0 ee       	ldi	r26, 0xE0	; 224
    1994:	b0 e2       	ldi	r27, 0x20	; 32
    1996:	8c 91       	ld	r24, X
    1998:	80 93 d7 2a 	sts	0x2AD7, r24
    199c:	e1 ee       	ldi	r30, 0xE1	; 225
    199e:	f0 e2       	ldi	r31, 0x20	; 32
    19a0:	80 81       	ld	r24, Z
    19a2:	80 93 d8 2a 	sts	0x2AD8, r24
    19a6:	88 81       	ld	r24, Y
    19a8:	80 93 df 2a 	sts	0x2ADF, r24
    19ac:	8c 91       	ld	r24, X
    19ae:	80 93 e0 2a 	sts	0x2AE0, r24
    19b2:	80 81       	ld	r24, Z
    19b4:	80 93 e1 2a 	sts	0x2AE1, r24
    19b8:	c2 ee       	ldi	r28, 0xE2	; 226
    19ba:	d0 e2       	ldi	r29, 0x20	; 32
    19bc:	88 81       	ld	r24, Y
    19be:	80 93 d9 2a 	sts	0x2AD9, r24
    19c2:	a3 ee       	ldi	r26, 0xE3	; 227
    19c4:	b0 e2       	ldi	r27, 0x20	; 32
    19c6:	8c 91       	ld	r24, X
    19c8:	80 93 da 2a 	sts	0x2ADA, r24
    19cc:	e4 ee       	ldi	r30, 0xE4	; 228
    19ce:	f0 e2       	ldi	r31, 0x20	; 32
    19d0:	80 81       	ld	r24, Z
    19d2:	80 93 db 2a 	sts	0x2ADB, r24
    19d6:	88 81       	ld	r24, Y
    19d8:	80 93 e2 2a 	sts	0x2AE2, r24
    19dc:	8c 91       	ld	r24, X
    19de:	80 93 e3 2a 	sts	0x2AE3, r24
    19e2:	80 81       	ld	r24, Z
    19e4:	80 93 e4 2a 	sts	0x2AE4, r24
    19e8:	c0 e0       	ldi	r28, 0x00	; 0
    19ea:	d0 e0       	ldi	r29, 0x00	; 0
    19ec:	fe 01       	movw	r30, r28
    19ee:	e4 52       	subi	r30, 0x24	; 36
    19f0:	ff 4d       	sbci	r31, 0xDF	; 223
    19f2:	60 81       	ld	r22, Z
    19f4:	21 96       	adiw	r28, 0x01	; 1
    19f6:	ce 01       	movw	r24, r28
    19f8:	0e 94 10 18 	call	0x3020	; 0x3020 <nvm_eeprom_write_byte>
    19fc:	c9 30       	cpi	r28, 0x09	; 9
    19fe:	d1 05       	cpc	r29, r1
    1a00:	a9 f7       	brne	.-22     	; 0x19ec <led_set_from_colors+0x98>
    1a02:	f1 d1       	rcall	.+994    	; 0x1de6 <ischarging>
    1a04:	81 11       	cpse	r24, r1
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <led_set_from_colors+0xbc>
    1a08:	66 e0       	ldi	r22, 0x06	; 6
    1a0a:	83 ed       	ldi	r24, 0xD3	; 211
    1a0c:	9a e2       	ldi	r25, 0x2A	; 42
    1a0e:	03 d7       	rcall	.+3590   	; 0x2816 <set_flash_ws2812>
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <get_pulse_state>:

bool get_pulse_state(void) {
	return pulse_state;
}
    1a16:	80 91 71 21 	lds	r24, 0x2171
    1a1a:	08 95       	ret

00001a1c <get_and_clear_pulse_state_changed>:

bool get_and_clear_pulse_state_changed(void) {
	bool changed = pulse_state_changed;
    1a1c:	80 91 70 21 	lds	r24, 0x2170
	pulse_state_changed = false;
    1a20:	10 92 70 21 	sts	0x2170, r1
	return changed;
}
    1a24:	08 95       	ret

00001a26 <trigger_pulse_state_changed>:

void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 70 21 	sts	0x2170, r24
    1a2c:	08 95       	ret

00001a2e <__vector_23>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTC0_RXC_vect)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
    1a50:	80 ec       	ldi	r24, 0xC0	; 192
    1a52:	98 e0       	ldi	r25, 0x08	; 8
    1a54:	0e 94 43 1c 	call	0x3886	; 0x3886 <usart_getchar>
	
	0F 04 00 01 FB F0
*/
static inline void uart_protocal(uint8_t rxvalue)
{
	if (num_rx == 0)
    1a58:	90 91 74 21 	lds	r25, 0x2174
    1a5c:	91 11       	cpse	r25, r1
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <__vector_23+0x4e>
	{
		if (rxvalue == 0x0F)
    1a60:	8f 30       	cpi	r24, 0x0F	; 15
    1a62:	49 f4       	brne	.+18     	; 0x1a76 <__vector_23+0x48>
		{
			num_rx ++;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	80 93 74 21 	sts	0x2174, r24
			uart_length = 6;
    1a6a:	96 e0       	ldi	r25, 0x06	; 6
    1a6c:	90 93 f0 20 	sts	0x20F0, r25
	usart_putchar(M_USART, status_uart);
}

void uart_start(void)
{
	uart_start_flag = true;
    1a70:	80 93 73 21 	sts	0x2173, r24
    1a74:	38 c0       	rjmp	.+112    	; 0x1ae6 <__vector_23+0xb8>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1a76:	10 92 74 21 	sts	0x2174, r1
    1a7a:	35 c0       	rjmp	.+106    	; 0x1ae6 <__vector_23+0xb8>
		else
		{
			uart_clear();
		}
	} 
	else if (num_rx == uart_length+1)
    1a7c:	29 2f       	mov	r18, r25
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	60 91 f0 20 	lds	r22, 0x20F0
    1a84:	46 2f       	mov	r20, r22
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	4f 5f       	subi	r20, 0xFF	; 255
    1a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a8c:	24 17       	cp	r18, r20
    1a8e:	35 07       	cpc	r19, r21
    1a90:	f1 f4       	brne	.+60     	; 0x1ace <__vector_23+0xa0>
	return sum;
}

void uart_clear(void)
{
	num_rx = 0;
    1a92:	10 92 74 21 	sts	0x2174, r1
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1a96:	80 3f       	cpi	r24, 0xF0	; 240
    1a98:	a9 f4       	brne	.+42     	; 0x1ac4 <__vector_23+0x96>

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1a9a:	40 91 bb 2a 	lds	r20, 0x2ABB
    1a9e:	44 23       	and	r20, r20
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <__vector_23+0x8c>
    1aa2:	8b eb       	ldi	r24, 0xBB	; 187
    1aa4:	9a e2       	ldi	r25, 0x2A	; 42
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
	{
		sum += rxvalue[i];
    1aaa:	31 91       	ld	r19, Z+
    1aac:	23 0f       	add	r18, r19
    1aae:	3e 2f       	mov	r19, r30
    1ab0:	38 1b       	sub	r19, r24

static inline uint8_t uart_check(uint8_t * rxvalue)
{
	uint8_t sum = 0;
	
	for (uint8_t i = 0; i < rxvalue[0]; i++)
    1ab2:	34 17       	cp	r19, r20
    1ab4:	d0 f3       	brcs	.-12     	; 0x1aaa <__vector_23+0x7c>
	} 
	else if (num_rx == uart_length+1)
	{
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
    1ab6:	21 11       	cpse	r18, r1
    1ab8:	05 c0       	rjmp	.+10     	; 0x1ac4 <__vector_23+0x96>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1aba:	10 92 73 21 	sts	0x2173, r1
		uart_clear();
		
		if ((rxvalue == 0xF0) && (uart_check(rxdata) == CHECK_OK))
		{
			uart_stop();
			uart_send_status(UART_OK);
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	43 df       	rcall	.-378    	; 0x1948 <uart_send_status>
    1ac2:	11 c0       	rjmp	.+34     	; 0x1ae6 <__vector_23+0xb8>
	uart_start_flag = true;
}

void uart_stop(void)
{
	uart_start_flag = false;
    1ac4:	10 92 73 21 	sts	0x2173, r1
			uart_send_status(UART_OK);
		} 
		else
		{
			uart_stop();
			uart_send_status(UART_FAIL);
    1ac8:	8c e0       	ldi	r24, 0x0C	; 12
    1aca:	3e df       	rcall	.-388    	; 0x1948 <uart_send_status>
    1acc:	0c c0       	rjmp	.+24     	; 0x1ae6 <__vector_23+0xb8>
		}
	} 
	else
	{
		rxdata[num_rx-1] = rxvalue;
    1ace:	f9 01       	movw	r30, r18
    1ad0:	e6 54       	subi	r30, 0x46	; 70
    1ad2:	f5 4d       	sbci	r31, 0xD5	; 213
    1ad4:	80 83       	st	Z, r24
		num_rx ++;
    1ad6:	9f 5f       	subi	r25, 0xFF	; 255
    1ad8:	90 93 74 21 	sts	0x2174, r25
		
		if (uart_length != rxdata[UART_LENGTH])
    1adc:	80 91 bb 2a 	lds	r24, 0x2ABB
    1ae0:	68 13       	cpse	r22, r24
		{
			uart_length = rxdata[UART_LENGTH];
    1ae2:	80 93 f0 20 	sts	0x20F0, r24
*/
ISR(USARTC0_RXC_vect)
{
	//twinkle(255, 0, 0);
	uart_protocal(usart_getchar(&USARTC0));
}
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	bf 91       	pop	r27
    1aec:	af 91       	pop	r26
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	0f 90       	pop	r0
    1b04:	1f 90       	pop	r1
    1b06:	18 95       	reti

00001b08 <__vector_40>:

/*
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	2f 93       	push	r18
    1b14:	3f 93       	push	r19
    1b16:	4f 93       	push	r20
    1b18:	5f 93       	push	r21
    1b1a:	6f 93       	push	r22
    1b1c:	7f 93       	push	r23
    1b1e:	8f 93       	push	r24
    1b20:	9f 93       	push	r25
    1b22:	af 93       	push	r26
    1b24:	bf 93       	push	r27
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
	// twinkle(buffer_data[0], buffer_data[1], buffer_data[2]);
	for (int i=0; i<11; i++) {
    1b2e:	c0 e0       	ldi	r28, 0x00	; 0
    1b30:	d0 e0       	ldi	r29, 0x00	; 0
		buffer_data[i] = usart_getchar(&USARTD0);
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	99 e0       	ldi	r25, 0x09	; 9
    1b36:	0e 94 43 1c 	call	0x3886	; 0x3886 <usart_getchar>
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	eb 51       	subi	r30, 0x1B	; 27
    1b3e:	ff 4d       	sbci	r31, 0xDF	; 223
    1b40:	80 83       	st	Z, r24
brief RX complete interrupt service routine.
*/
ISR(USARTD0_RXC_vect)
{
	// twinkle(buffer_data[0], buffer_data[1], buffer_data[2]);
	for (int i=0; i<11; i++) {
    1b42:	21 96       	adiw	r28, 0x01	; 1
    1b44:	cb 30       	cpi	r28, 0x0B	; 11
    1b46:	d1 05       	cpc	r29, r1
    1b48:	a1 f7       	brne	.-24     	; 0x1b32 <__vector_40+0x2a>
void trigger_pulse_state_changed(void) {
	pulse_state_changed = true;
}

static void interpret_message(void) {
	switch(buffer_data[0]) {
    1b4a:	80 91 e5 20 	lds	r24, 0x20E5
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	fc 01       	movw	r30, r24
    1b52:	31 97       	sbiw	r30, 0x01	; 1
    1b54:	e0 37       	cpi	r30, 0x70	; 112
    1b56:	f1 05       	cpc	r31, r1
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <__vector_40+0x54>
    1b5a:	f5 c0       	rjmp	.+490    	; 0x1d46 <__vector_40+0x23e>
    1b5c:	e7 55       	subi	r30, 0x57	; 87
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__tablejump2__>
		case UART_SET_COLOR:
			send_response(UART_SET_COLOR, 0xff);
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	83 e4       	ldi	r24, 0x43	; 67
    1b68:	67 d4       	rcall	.+2254   	; 0x2438 <send_response>
		}
	}	
}

static inline void set_color_from_buffer(void) {
	m_led_struct[0].r = buffer_data[2];
    1b6a:	c7 ee       	ldi	r28, 0xE7	; 231
    1b6c:	d0 e2       	ldi	r29, 0x20	; 32
    1b6e:	88 81       	ld	r24, Y
    1b70:	80 93 d3 2a 	sts	0x2AD3, r24
	m_led_struct[0].g = buffer_data[3];
    1b74:	a8 ee       	ldi	r26, 0xE8	; 232
    1b76:	b0 e2       	ldi	r27, 0x20	; 32
    1b78:	8c 91       	ld	r24, X
    1b7a:	80 93 d4 2a 	sts	0x2AD4, r24
	m_led_struct[0].b = buffer_data[4];
    1b7e:	e9 ee       	ldi	r30, 0xE9	; 233
    1b80:	f0 e2       	ldi	r31, 0x20	; 32
    1b82:	80 81       	ld	r24, Z
    1b84:	80 93 d5 2a 	sts	0x2AD5, r24
	m_led_struct[3].r = buffer_data[2];
    1b88:	88 81       	ld	r24, Y
    1b8a:	80 93 dc 2a 	sts	0x2ADC, r24
	m_led_struct[3].g = buffer_data[3];
    1b8e:	8c 91       	ld	r24, X
    1b90:	80 93 dd 2a 	sts	0x2ADD, r24
	m_led_struct[3].b = buffer_data[4];
    1b94:	80 81       	ld	r24, Z
    1b96:	80 93 de 2a 	sts	0x2ADE, r24
	
	m_led_struct[1].r = buffer_data[5];
    1b9a:	ca ee       	ldi	r28, 0xEA	; 234
    1b9c:	d0 e2       	ldi	r29, 0x20	; 32
    1b9e:	88 81       	ld	r24, Y
    1ba0:	80 93 d6 2a 	sts	0x2AD6, r24
	m_led_struct[1].g = buffer_data[6];
    1ba4:	ab ee       	ldi	r26, 0xEB	; 235
    1ba6:	b0 e2       	ldi	r27, 0x20	; 32
    1ba8:	8c 91       	ld	r24, X
    1baa:	80 93 d7 2a 	sts	0x2AD7, r24
	m_led_struct[1].b = buffer_data[7];
    1bae:	ec ee       	ldi	r30, 0xEC	; 236
    1bb0:	f0 e2       	ldi	r31, 0x20	; 32
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 93 d8 2a 	sts	0x2AD8, r24
	m_led_struct[4].r = buffer_data[5];
    1bb8:	88 81       	ld	r24, Y
    1bba:	80 93 df 2a 	sts	0x2ADF, r24
	m_led_struct[4].g = buffer_data[6];
    1bbe:	8c 91       	ld	r24, X
    1bc0:	80 93 e0 2a 	sts	0x2AE0, r24
	m_led_struct[4].b = buffer_data[7];
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 93 e1 2a 	sts	0x2AE1, r24
	
	m_led_struct[2].r = buffer_data[8];
    1bca:	cd ee       	ldi	r28, 0xED	; 237
    1bcc:	d0 e2       	ldi	r29, 0x20	; 32
    1bce:	88 81       	ld	r24, Y
    1bd0:	80 93 d9 2a 	sts	0x2AD9, r24
	m_led_struct[2].g = buffer_data[9];
    1bd4:	ae ee       	ldi	r26, 0xEE	; 238
    1bd6:	b0 e2       	ldi	r27, 0x20	; 32
    1bd8:	8c 91       	ld	r24, X
    1bda:	80 93 da 2a 	sts	0x2ADA, r24
	m_led_struct[2].b = buffer_data[10];
    1bde:	ef ee       	ldi	r30, 0xEF	; 239
    1be0:	f0 e2       	ldi	r31, 0x20	; 32
    1be2:	80 81       	ld	r24, Z
    1be4:	80 93 db 2a 	sts	0x2ADB, r24
	m_led_struct[5].r = buffer_data[8];
    1be8:	88 81       	ld	r24, Y
    1bea:	80 93 e2 2a 	sts	0x2AE2, r24
	m_led_struct[5].g = buffer_data[9];
    1bee:	8c 91       	ld	r24, X
    1bf0:	80 93 e3 2a 	sts	0x2AE3, r24
	m_led_struct[5].b = buffer_data[10];
    1bf4:	80 81       	ld	r24, Z
    1bf6:	80 93 e4 2a 	sts	0x2AE4, r24
	
	for (int i=0; i<9; i++) {
    1bfa:	c0 e0       	ldi	r28, 0x00	; 0
    1bfc:	d0 e0       	ldi	r29, 0x00	; 0
		colors[i] = buffer_data[i+2];
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e9 51       	subi	r30, 0x19	; 25
    1c02:	ff 4d       	sbci	r31, 0xDF	; 223
    1c04:	80 81       	ld	r24, Z
    1c06:	fe 01       	movw	r30, r28
    1c08:	e4 52       	subi	r30, 0x24	; 36
    1c0a:	ff 4d       	sbci	r31, 0xDF	; 223
    1c0c:	80 83       	st	Z, r24
		nvm_eeprom_write_byte(i+1, colors[i]);
    1c0e:	60 81       	ld	r22, Z
    1c10:	21 96       	adiw	r28, 0x01	; 1
    1c12:	ce 01       	movw	r24, r28
    1c14:	0e 94 10 18 	call	0x3020	; 0x3020 <nvm_eeprom_write_byte>
	m_led_struct[2].b = buffer_data[10];
	m_led_struct[5].r = buffer_data[8];
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];
	
	for (int i=0; i<9; i++) {
    1c18:	c9 30       	cpi	r28, 0x09	; 9
    1c1a:	d1 05       	cpc	r29, r1
    1c1c:	81 f7       	brne	.-32     	; 0x1bfe <__vector_40+0xf6>
		colors[i] = buffer_data[i+2];
		nvm_eeprom_write_byte(i+1, colors[i]);
	}
	
	if (!ischarging()) {
    1c1e:	e3 d0       	rcall	.+454    	; 0x1de6 <ischarging>
    1c20:	81 11       	cpse	r24, r1
    1c22:	91 c0       	rjmp	.+290    	; 0x1d46 <__vector_40+0x23e>
		set_flash_ws2812(m_led_struct, 6);
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	83 ed       	ldi	r24, 0xD3	; 211
    1c28:	9a e2       	ldi	r25, 0x2A	; 42
    1c2a:	f5 d5       	rcall	.+3050   	; 0x2816 <set_flash_ws2812>
    1c2c:	8c c0       	rjmp	.+280    	; 0x1d46 <__vector_40+0x23e>
			send_response(UART_SET_COLOR, 0xff);
			set_color_from_buffer();
			break;
			
		case UART_SET_PULSE:
			send_response(UART_SET_PULSE, 0xff);
    1c2e:	6f ef       	ldi	r22, 0xFF	; 255
    1c30:	80 e5       	ldi	r24, 0x50	; 80
    1c32:	02 d4       	rcall	.+2052   	; 0x2438 <send_response>

	set_flash_ws2812(m_led_struct, 6);
}

static inline void set_pulse_from_buffer(void) {
	switch (buffer_data[2]) {
    1c34:	80 91 e7 20 	lds	r24, 0x20E7
    1c38:	88 23       	and	r24, r24
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <__vector_40+0x13a>
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	39 f0       	breq	.+14     	; 0x1c4e <__vector_40+0x146>
    1c40:	0c c0       	rjmp	.+24     	; 0x1c5a <__vector_40+0x152>
		case 0x00:
			pulse_state = false;
    1c42:	10 92 71 21 	sts	0x2171, r1
			pulse_state_changed = true;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	80 93 70 21 	sts	0x2170, r24
    1c4c:	7c c0       	rjmp	.+248    	; 0x1d46 <__vector_40+0x23e>
			break;
		case 0x01:
			pulse_state = true;
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	80 93 71 21 	sts	0x2171, r24
			pulse_state_changed = true;
    1c54:	80 93 70 21 	sts	0x2170, r24
    1c58:	76 c0       	rjmp	.+236    	; 0x1d46 <__vector_40+0x23e>
			break;
		default:
			pulse_state = true;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 71 21 	sts	0x2171, r24
			pulse_state_changed = true;
    1c60:	80 93 70 21 	sts	0x2170, r24
    1c64:	70 c0       	rjmp	.+224    	; 0x1d46 <__vector_40+0x23e>
			send_response(UART_SET_PULSE, 0xff);
			set_pulse_from_buffer();
			break;
			
		case UART_SET_SHUTDOWN:
			if (pulse_state) {
    1c66:	80 91 71 21 	lds	r24, 0x2171
    1c6a:	88 23       	and	r24, r24
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <__vector_40+0x170>
				pulse_state = false;
    1c6e:	10 92 71 21 	sts	0x2171, r1
				pulse_state_changed = true;	
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	80 93 70 21 	sts	0x2170, r24
			}
			shutdown_received = true;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 6f 21 	sts	0x216F, r24
			send_response(UART_SET_SHUTDOWN, 0xff);
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	db d3       	rcall	.+1974   	; 0x2438 <send_response>
    1c82:	61 c0       	rjmp	.+194    	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_SET_CHG_LVL:
			switch (buffer_data[2]) {
    1c84:	80 91 e7 20 	lds	r24, 0x20E7
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	87 30       	cpi	r24, 0x07	; 7
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <__vector_40+0x18a>
    1c90:	5a c0       	rjmp	.+180    	; 0x1d46 <__vector_40+0x23e>
    1c92:	fc 01       	movw	r30, r24
    1c94:	e7 5e       	subi	r30, 0xE7	; 231
    1c96:	fe 4f       	sbci	r31, 0xFE	; 254
    1c98:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__tablejump2__>
				case 0:
					chargeLVL0 = buffer_data[3];
    1c9c:	80 91 e8 20 	lds	r24, 0x20E8
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	80 93 80 21 	sts	0x2180, r24
    1ca6:	90 93 81 21 	sts	0x2181, r25
    1caa:	4d c0       	rjmp	.+154    	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 1:
					chargeLVL1 = buffer_data[3];
    1cac:	80 91 e8 20 	lds	r24, 0x20E8
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	80 93 fc 20 	sts	0x20FC, r24
    1cb6:	90 93 fd 20 	sts	0x20FD, r25
    1cba:	45 c0       	rjmp	.+138    	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 2:
					chargeLVL2 = buffer_data[3];
    1cbc:	80 91 e8 20 	lds	r24, 0x20E8
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	80 93 fa 20 	sts	0x20FA, r24
    1cc6:	90 93 fb 20 	sts	0x20FB, r25
    1cca:	3d c0       	rjmp	.+122    	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 3:
					chargeLVL3 = buffer_data[3];
    1ccc:	80 91 e8 20 	lds	r24, 0x20E8
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	80 93 f8 20 	sts	0x20F8, r24
    1cd6:	90 93 f9 20 	sts	0x20F9, r25
    1cda:	35 c0       	rjmp	.+106    	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 4:
					chargeLVL4 = buffer_data[3];
    1cdc:	80 91 e8 20 	lds	r24, 0x20E8
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	80 93 f6 20 	sts	0x20F6, r24
    1ce6:	90 93 f7 20 	sts	0x20F7, r25
    1cea:	2d c0       	rjmp	.+90     	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 5:
					chargeLVL5 = buffer_data[3];
    1cec:	80 91 e8 20 	lds	r24, 0x20E8
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	80 93 f4 20 	sts	0x20F4, r24
    1cf6:	90 93 f5 20 	sts	0x20F5, r25
    1cfa:	25 c0       	rjmp	.+74     	; 0x1d46 <__vector_40+0x23e>
					break;
					
				case 6:
					chargeLVL6 = buffer_data[3];
    1cfc:	80 91 e8 20 	lds	r24, 0x20E8
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	80 93 f2 20 	sts	0x20F2, r24
    1d06:	90 93 f3 20 	sts	0x20F3, r25
    1d0a:	1d c0       	rjmp	.+58     	; 0x1d46 <__vector_40+0x23e>
					break;
			}
			break;
			
		case UART_SET_CHG_BRIGHT:
			chargeBrightness = buffer_data[2];
    1d0c:	80 91 e7 20 	lds	r24, 0x20E7
    1d10:	80 93 f1 20 	sts	0x20F1, r24
    1d14:	18 c0       	rjmp	.+48     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_SET_LOW_DIVIDER:
			LOW_DIVIDER = buffer_data[2];
    1d16:	80 91 e7 20 	lds	r24, 0x20E7
    1d1a:	80 93 02 20 	sts	0x2002, r24
    1d1e:	13 c0       	rjmp	.+38     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_SET_MID_DIVIDER:
			MID_DIVIDER = buffer_data[2];
    1d20:	80 91 e7 20 	lds	r24, 0x20E7
    1d24:	80 93 01 20 	sts	0x2001, r24
    1d28:	0e c0       	rjmp	.+28     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_SET_HIGH_DIVIDER:
			HIGH_DIVIDER = buffer_data[2];
    1d2a:	80 91 e7 20 	lds	r24, 0x20E7
    1d2e:	80 93 00 20 	sts	0x2000, r24
    1d32:	09 c0       	rjmp	.+18     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_GET_AMBIENT:
			send_light_data();
    1d34:	92 d3       	rcall	.+1828   	; 0x245a <send_light_data>
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_GET_BATTERY:
			send_battery_data();
    1d38:	a9 d3       	rcall	.+1874   	; 0x248c <send_battery_data>
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_GET_PULSE:
			send_pulse_data();
    1d3c:	fd d3       	rcall	.+2042   	; 0x2538 <send_pulse_data>
    1d3e:	03 c0       	rjmp	.+6      	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_GET_COLOR:
			send_color_data();
    1d40:	d4 d3       	rcall	.+1960   	; 0x24ea <send_color_data>
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <__vector_40+0x23e>
			break;
			
		case UART_GET_CHARGING:
			send_charging_data();
    1d44:	bd d3       	rcall	.+1914   	; 0x24c0 <send_charging_data>
		buffer_data[i] = usart_getchar(&USARTD0);
	}
	
	interpret_message();
	
	uart_done_flag = true;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 72 21 	sts	0x2172, r24
			usart_putchar(&USARTD0, buffer_data[0]);
			usart_putchar(&USARTD0, count_uart);
		}
		}
	*/
}
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	bf 91       	pop	r27
    1d56:	af 91       	pop	r26
    1d58:	9f 91       	pop	r25
    1d5a:	8f 91       	pop	r24
    1d5c:	7f 91       	pop	r23
    1d5e:	6f 91       	pop	r22
    1d60:	5f 91       	pop	r21
    1d62:	4f 91       	pop	r20
    1d64:	3f 91       	pop	r19
    1d66:	2f 91       	pop	r18
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <uart_send_bytes>:

void uart_send_bytes(char * byte_array, unsigned int len)
{
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	8c 01       	movw	r16, r24
	for (int i = 0; i < len; i++){
    1d80:	61 15       	cp	r22, r1
    1d82:	71 05       	cpc	r23, r1
    1d84:	91 f0       	breq	.+36     	; 0x1daa <uart_send_bytes+0x38>
    1d86:	7b 01       	movw	r14, r22
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	c0 e0       	ldi	r28, 0x00	; 0
    1d8e:	d0 e0       	ldi	r29, 0x00	; 0
		usart_putchar(&USARTD0, byte_array[i]);
    1d90:	f8 01       	movw	r30, r16
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	60 81       	ld	r22, Z
    1d98:	80 ec       	ldi	r24, 0xC0	; 192
    1d9a:	99 e0       	ldi	r25, 0x09	; 9
    1d9c:	0e 94 3b 1c 	call	0x3876	; 0x3876 <usart_putchar>
	*/
}

void uart_send_bytes(char * byte_array, unsigned int len)
{
	for (int i = 0; i < len; i++){
    1da0:	21 96       	adiw	r28, 0x01	; 1
    1da2:	9e 01       	movw	r18, r28
    1da4:	ce 15       	cp	r28, r14
    1da6:	df 05       	cpc	r29, r15
    1da8:	99 f7       	brne	.-26     	; 0x1d90 <uart_send_bytes+0x1e>
		usart_putchar(&USARTD0, byte_array[i]);
	}
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	08 95       	ret

00001db8 <init_chargingpin>:
	m_led_struct[5].g = buffer_data[9];
	m_led_struct[5].b = buffer_data[10];

	set_flash_ws2812(m_led_struct, 6);
//	set_flash_ws2812(m_led_struct, 6);
}
    1db8:	68 2f       	mov	r22, r24
    1dba:	67 70       	andi	r22, 0x07	; 7
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	a9 01       	movw	r20, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <init_chargingpin+0x10>
    1dc4:	44 0f       	add	r20, r20
    1dc6:	55 1f       	adc	r21, r21
    1dc8:	6a 95       	dec	r22
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <init_chargingpin+0xc>
    1dcc:	ba 01       	movw	r22, r20
    1dce:	86 95       	lsr	r24
    1dd0:	86 95       	lsr	r24
    1dd2:	86 95       	lsr	r24
    1dd4:	50 e2       	ldi	r21, 0x20	; 32
    1dd6:	85 9f       	mul	r24, r21
    1dd8:	c0 01       	movw	r24, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	42 e0       	ldi	r20, 0x02	; 2
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	9a 5f       	subi	r25, 0xFA	; 250
    1de2:	9b c7       	rjmp	.+3894   	; 0x2d1a <ioport_configure_port_pin>
    1de4:	08 95       	ret

00001de6 <ischarging>:
    1de6:	e0 ee       	ldi	r30, 0xE0	; 224
    1de8:	f7 e0       	ldi	r31, 0x07	; 7
    1dea:	80 85       	ldd	r24, Z+8	; 0x08
    1dec:	86 95       	lsr	r24
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	08 95       	ret

00001df2 <twinkle>:
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	f9 01       	movw	r30, r18
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ff 1f       	adc	r31, r31
    1dfc:	e2 0f       	add	r30, r18
    1dfe:	f3 1f       	adc	r31, r19
    1e00:	ed 52       	subi	r30, 0x2D	; 45
    1e02:	f5 4d       	sbci	r31, 0xD5	; 213
    1e04:	80 83       	st	Z, r24
    1e06:	61 83       	std	Z+1, r22	; 0x01
    1e08:	42 83       	std	Z+2, r20	; 0x02
    1e0a:	2f 5f       	subi	r18, 0xFF	; 255
    1e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0e:	26 30       	cpi	r18, 0x06	; 6
    1e10:	31 05       	cpc	r19, r1
    1e12:	89 f7       	brne	.-30     	; 0x1df6 <twinkle+0x4>
    1e14:	66 e0       	ldi	r22, 0x06	; 6
    1e16:	83 ed       	ldi	r24, 0xD3	; 211
    1e18:	9a e2       	ldi	r25, 0x2A	; 42
    1e1a:	fd c4       	rjmp	.+2554   	; 0x2816 <set_flash_ws2812>
    1e1c:	08 95       	ret

00001e1e <rainbow>:
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
    1e20:	80 93 d3 2a 	sts	0x2AD3, r24
    1e24:	10 92 d4 2a 	sts	0x2AD4, r1
    1e28:	10 92 d5 2a 	sts	0x2AD5, r1
    1e2c:	10 92 d6 2a 	sts	0x2AD6, r1
    1e30:	80 93 d7 2a 	sts	0x2AD7, r24
    1e34:	10 92 d8 2a 	sts	0x2AD8, r1
    1e38:	10 92 d9 2a 	sts	0x2AD9, r1
    1e3c:	10 92 da 2a 	sts	0x2ADA, r1
    1e40:	80 93 db 2a 	sts	0x2ADB, r24
    1e44:	80 93 dc 2a 	sts	0x2ADC, r24
    1e48:	10 92 dd 2a 	sts	0x2ADD, r1
    1e4c:	10 92 de 2a 	sts	0x2ADE, r1
    1e50:	10 92 df 2a 	sts	0x2ADF, r1
    1e54:	80 93 e0 2a 	sts	0x2AE0, r24
    1e58:	10 92 e1 2a 	sts	0x2AE1, r1
    1e5c:	10 92 e2 2a 	sts	0x2AE2, r1
    1e60:	10 92 e3 2a 	sts	0x2AE3, r1
    1e64:	80 93 e4 2a 	sts	0x2AE4, r24
    1e68:	66 e0       	ldi	r22, 0x06	; 6
    1e6a:	83 ed       	ldi	r24, 0xD3	; 211
    1e6c:	9a e2       	ldi	r25, 0x2A	; 42
    1e6e:	d3 c4       	rjmp	.+2470   	; 0x2816 <set_flash_ws2812>
    1e70:	08 95       	ret

00001e72 <clear_led>:
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	82 2f       	mov	r24, r18
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	fc 01       	movw	r30, r24
    1e7a:	ee 0f       	add	r30, r30
    1e7c:	ff 1f       	adc	r31, r31
    1e7e:	e8 0f       	add	r30, r24
    1e80:	f9 1f       	adc	r31, r25
    1e82:	ed 52       	subi	r30, 0x2D	; 45
    1e84:	f5 4d       	sbci	r31, 0xD5	; 213
    1e86:	10 82       	st	Z, r1
    1e88:	11 82       	std	Z+1, r1	; 0x01
    1e8a:	12 82       	std	Z+2, r1	; 0x02
    1e8c:	2f 5f       	subi	r18, 0xFF	; 255
    1e8e:	26 30       	cpi	r18, 0x06	; 6
    1e90:	89 f7       	brne	.-30     	; 0x1e74 <clear_led+0x2>
    1e92:	66 e0       	ldi	r22, 0x06	; 6
    1e94:	83 ed       	ldi	r24, 0xD3	; 211
    1e96:	9a e2       	ldi	r25, 0x2A	; 42
    1e98:	be c4       	rjmp	.+2428   	; 0x2816 <set_flash_ws2812>
    1e9a:	08 95       	ret

00001e9c <load_data_color_led>:
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	0f 2e       	mov	r0, r31
    1eb0:	fc ed       	ldi	r31, 0xDC	; 220
    1eb2:	ef 2e       	mov	r14, r31
    1eb4:	f0 e2       	ldi	r31, 0x20	; 32
    1eb6:	ff 2e       	mov	r15, r31
    1eb8:	f0 2d       	mov	r31, r0
    1eba:	d7 01       	movw	r26, r14
    1ebc:	8c 91       	ld	r24, X
    1ebe:	80 93 d3 2a 	sts	0x2AD3, r24
    1ec2:	0d ed       	ldi	r16, 0xDD	; 221
    1ec4:	10 e2       	ldi	r17, 0x20	; 32
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	80 81       	ld	r24, Z
    1eca:	80 93 d4 2a 	sts	0x2AD4, r24
    1ece:	6e ed       	ldi	r22, 0xDE	; 222
    1ed0:	70 e2       	ldi	r23, 0x20	; 32
    1ed2:	db 01       	movw	r26, r22
    1ed4:	8c 91       	ld	r24, X
    1ed6:	80 93 d5 2a 	sts	0x2AD5, r24
    1eda:	4f ed       	ldi	r20, 0xDF	; 223
    1edc:	50 e2       	ldi	r21, 0x20	; 32
    1ede:	fa 01       	movw	r30, r20
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 93 d6 2a 	sts	0x2AD6, r24
    1ee6:	20 ee       	ldi	r18, 0xE0	; 224
    1ee8:	30 e2       	ldi	r19, 0x20	; 32
    1eea:	d9 01       	movw	r26, r18
    1eec:	8c 91       	ld	r24, X
    1eee:	80 93 d7 2a 	sts	0x2AD7, r24
    1ef2:	81 ee       	ldi	r24, 0xE1	; 225
    1ef4:	90 e2       	ldi	r25, 0x20	; 32
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	ec 91       	ld	r30, X
    1efa:	e0 93 d8 2a 	sts	0x2AD8, r30
    1efe:	c2 ee       	ldi	r28, 0xE2	; 226
    1f00:	d0 e2       	ldi	r29, 0x20	; 32
    1f02:	e8 81       	ld	r30, Y
    1f04:	e0 93 d9 2a 	sts	0x2AD9, r30
    1f08:	a3 ee       	ldi	r26, 0xE3	; 227
    1f0a:	b0 e2       	ldi	r27, 0x20	; 32
    1f0c:	ec 91       	ld	r30, X
    1f0e:	e0 93 da 2a 	sts	0x2ADA, r30
    1f12:	0f 2e       	mov	r0, r31
    1f14:	f4 ee       	ldi	r31, 0xE4	; 228
    1f16:	af 2e       	mov	r10, r31
    1f18:	f0 e2       	ldi	r31, 0x20	; 32
    1f1a:	bf 2e       	mov	r11, r31
    1f1c:	f0 2d       	mov	r31, r0
    1f1e:	f5 01       	movw	r30, r10
    1f20:	d0 80       	ld	r13, Z
    1f22:	d0 92 db 2a 	sts	0x2ADB, r13
    1f26:	f7 01       	movw	r30, r14
    1f28:	f0 80       	ld	r15, Z
    1f2a:	f0 92 dc 2a 	sts	0x2ADC, r15
    1f2e:	f8 01       	movw	r30, r16
    1f30:	10 81       	ld	r17, Z
    1f32:	10 93 dd 2a 	sts	0x2ADD, r17
    1f36:	fb 01       	movw	r30, r22
    1f38:	60 81       	ld	r22, Z
    1f3a:	60 93 de 2a 	sts	0x2ADE, r22
    1f3e:	fa 01       	movw	r30, r20
    1f40:	40 81       	ld	r20, Z
    1f42:	40 93 df 2a 	sts	0x2ADF, r20
    1f46:	f9 01       	movw	r30, r18
    1f48:	20 81       	ld	r18, Z
    1f4a:	20 93 e0 2a 	sts	0x2AE0, r18
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	80 93 e1 2a 	sts	0x2AE1, r24
    1f56:	88 81       	ld	r24, Y
    1f58:	80 93 e2 2a 	sts	0x2AE2, r24
    1f5c:	8c 91       	ld	r24, X
    1f5e:	80 93 e3 2a 	sts	0x2AE3, r24
    1f62:	d5 01       	movw	r26, r10
    1f64:	8c 91       	ld	r24, X
    1f66:	80 93 e4 2a 	sts	0x2AE4, r24
    1f6a:	66 e0       	ldi	r22, 0x06	; 6
    1f6c:	83 ed       	ldi	r24, 0xD3	; 211
    1f6e:	9a e2       	ldi	r25, 0x2A	; 42
    1f70:	52 d4       	rcall	.+2212   	; 0x2816 <set_flash_ws2812>
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	08 95       	ret

00001f86 <update_led_charge>:
    1f86:	10 92 b8 2a 	sts	0x2AB8, r1
    1f8a:	80 91 75 21 	lds	r24, 0x2175
    1f8e:	88 23       	and	r24, r24
    1f90:	59 f1       	breq	.+86     	; 0x1fe8 <update_led_charge+0x62>
    1f92:	80 91 78 21 	lds	r24, 0x2178
    1f96:	90 91 79 21 	lds	r25, 0x2179
    1f9a:	9c 01       	movw	r18, r24
    1f9c:	20 56       	subi	r18, 0x60	; 96
    1f9e:	35 40       	sbci	r19, 0x05	; 5
    1fa0:	2f 35       	cpi	r18, 0x5F	; 95
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	48 f4       	brcc	.+18     	; 0x1fb8 <update_led_charge+0x32>
    1fa6:	80 91 fa 20 	lds	r24, 0x20FA
    1faa:	90 91 fb 20 	lds	r25, 0x20FB
    1fae:	80 93 7c 21 	sts	0x217C, r24
    1fb2:	90 93 7d 21 	sts	0x217D, r25
    1fb6:	16 c0       	rjmp	.+44     	; 0x1fe4 <update_led_charge+0x5e>
    1fb8:	81 5b       	subi	r24, 0xB1	; 177
    1fba:	94 40       	sbci	r25, 0x04	; 4
    1fbc:	8f 3a       	cpi	r24, 0xAF	; 175
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	48 f4       	brcc	.+18     	; 0x1fd4 <update_led_charge+0x4e>
    1fc2:	80 91 f6 20 	lds	r24, 0x20F6
    1fc6:	90 91 f7 20 	lds	r25, 0x20F7
    1fca:	80 93 7c 21 	sts	0x217C, r24
    1fce:	90 93 7d 21 	sts	0x217D, r25
    1fd2:	08 c0       	rjmp	.+16     	; 0x1fe4 <update_led_charge+0x5e>
    1fd4:	80 91 80 21 	lds	r24, 0x2180
    1fd8:	90 91 81 21 	lds	r25, 0x2181
    1fdc:	80 93 7c 21 	sts	0x217C, r24
    1fe0:	90 93 7d 21 	sts	0x217D, r25
    1fe4:	10 92 75 21 	sts	0x2175, r1
    1fe8:	fe de       	rcall	.-516    	; 0x1de6 <ischarging>
    1fea:	81 11       	cpse	r24, r1
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <update_led_charge+0x90>
    1fee:	80 91 7f 21 	lds	r24, 0x217F
    1ff2:	80 93 7e 21 	sts	0x217E, r24
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	80 93 7f 21 	sts	0x217F, r24
    1ffc:	80 91 7f 21 	lds	r24, 0x217F
    2000:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	98 e0       	ldi	r25, 0x08	; 8
    2008:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <tc45_enable>
    200c:	80 e4       	ldi	r24, 0x40	; 64
    200e:	98 e0       	ldi	r25, 0x08	; 8
    2010:	0e 94 b0 1a 	call	0x3560	; 0x3560 <tc45_disable>
    2014:	43 df       	rcall	.-378    	; 0x1e9c <load_data_color_led>
    2016:	80 91 7c 21 	lds	r24, 0x217C
    201a:	90 91 7d 21 	lds	r25, 0x217D
    201e:	20 91 fc 20 	lds	r18, 0x20FC
    2022:	30 91 fd 20 	lds	r19, 0x20FD
    2026:	82 17       	cp	r24, r18
    2028:	93 07       	cpc	r25, r19
    202a:	08 f0       	brcs	.+2      	; 0x202e <update_led_charge+0xa8>
    202c:	48 c0       	rjmp	.+144    	; 0x20be <update_led_charge+0x138>
    202e:	21 df       	rcall	.-446    	; 0x1e72 <clear_led>
    2030:	40 91 f1 20 	lds	r20, 0x20F1
    2034:	20 91 7c 21 	lds	r18, 0x217C
    2038:	30 91 7d 21 	lds	r19, 0x217D
    203c:	60 91 fc 20 	lds	r22, 0x20FC
    2040:	70 91 fd 20 	lds	r23, 0x20FD
    2044:	42 9f       	mul	r20, r18
    2046:	c0 01       	movw	r24, r0
    2048:	43 9f       	mul	r20, r19
    204a:	90 0d       	add	r25, r0
    204c:	11 24       	eor	r1, r1
    204e:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2052:	60 93 d3 2a 	sts	0x2AD3, r22
    2056:	10 92 d4 2a 	sts	0x2AD4, r1
    205a:	10 92 d5 2a 	sts	0x2AD5, r1
    205e:	10 92 d6 2a 	sts	0x2AD6, r1
    2062:	10 92 d7 2a 	sts	0x2AD7, r1
    2066:	10 92 d8 2a 	sts	0x2AD8, r1
    206a:	10 92 d9 2a 	sts	0x2AD9, r1
    206e:	10 92 da 2a 	sts	0x2ADA, r1
    2072:	10 92 db 2a 	sts	0x2ADB, r1
    2076:	40 91 f1 20 	lds	r20, 0x20F1
    207a:	60 91 fc 20 	lds	r22, 0x20FC
    207e:	70 91 fd 20 	lds	r23, 0x20FD
    2082:	42 9f       	mul	r20, r18
    2084:	c0 01       	movw	r24, r0
    2086:	43 9f       	mul	r20, r19
    2088:	90 0d       	add	r25, r0
    208a:	11 24       	eor	r1, r1
    208c:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2090:	60 93 dc 2a 	sts	0x2ADC, r22
    2094:	10 92 dd 2a 	sts	0x2ADD, r1
    2098:	10 92 de 2a 	sts	0x2ADE, r1
    209c:	10 92 df 2a 	sts	0x2ADF, r1
    20a0:	10 92 e0 2a 	sts	0x2AE0, r1
    20a4:	10 92 e1 2a 	sts	0x2AE1, r1
    20a8:	10 92 e2 2a 	sts	0x2AE2, r1
    20ac:	10 92 e3 2a 	sts	0x2AE3, r1
    20b0:	10 92 e4 2a 	sts	0x2AE4, r1
    20b4:	66 e0       	ldi	r22, 0x06	; 6
    20b6:	83 ed       	ldi	r24, 0xD3	; 211
    20b8:	9a e2       	ldi	r25, 0x2A	; 42
    20ba:	ad d3       	rcall	.+1882   	; 0x2816 <set_flash_ws2812>
    20bc:	a8 c1       	rjmp	.+848    	; 0x240e <update_led_charge+0x488>
    20be:	20 91 f8 20 	lds	r18, 0x20F8
    20c2:	30 91 f9 20 	lds	r19, 0x20F9
    20c6:	82 17       	cp	r24, r18
    20c8:	93 07       	cpc	r25, r19
    20ca:	08 f0       	brcs	.+2      	; 0x20ce <update_led_charge+0x148>
    20cc:	59 c0       	rjmp	.+178    	; 0x2180 <update_led_charge+0x1fa>
    20ce:	d1 de       	rcall	.-606    	; 0x1e72 <clear_led>
    20d0:	80 91 f1 20 	lds	r24, 0x20F1
    20d4:	80 93 d3 2a 	sts	0x2AD3, r24
    20d8:	10 92 d4 2a 	sts	0x2AD4, r1
    20dc:	10 92 d5 2a 	sts	0x2AD5, r1
    20e0:	10 92 d6 2a 	sts	0x2AD6, r1
    20e4:	10 92 d7 2a 	sts	0x2AD7, r1
    20e8:	10 92 d8 2a 	sts	0x2AD8, r1
    20ec:	20 91 7c 21 	lds	r18, 0x217C
    20f0:	30 91 7d 21 	lds	r19, 0x217D
    20f4:	80 91 fc 20 	lds	r24, 0x20FC
    20f8:	90 91 fd 20 	lds	r25, 0x20FD
    20fc:	e0 91 f1 20 	lds	r30, 0x20F1
    2100:	60 91 f8 20 	lds	r22, 0x20F8
    2104:	70 91 f9 20 	lds	r23, 0x20F9
    2108:	a9 01       	movw	r20, r18
    210a:	48 1b       	sub	r20, r24
    210c:	59 0b       	sbc	r21, r25
    210e:	e4 9f       	mul	r30, r20
    2110:	c0 01       	movw	r24, r0
    2112:	e5 9f       	mul	r30, r21
    2114:	90 0d       	add	r25, r0
    2116:	11 24       	eor	r1, r1
    2118:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    211c:	60 93 d9 2a 	sts	0x2AD9, r22
    2120:	10 92 da 2a 	sts	0x2ADA, r1
    2124:	10 92 db 2a 	sts	0x2ADB, r1
    2128:	80 91 f1 20 	lds	r24, 0x20F1
    212c:	80 93 dc 2a 	sts	0x2ADC, r24
    2130:	10 92 dd 2a 	sts	0x2ADD, r1
    2134:	10 92 de 2a 	sts	0x2ADE, r1
    2138:	10 92 df 2a 	sts	0x2ADF, r1
    213c:	10 92 e0 2a 	sts	0x2AE0, r1
    2140:	10 92 e1 2a 	sts	0x2AE1, r1
    2144:	80 91 fc 20 	lds	r24, 0x20FC
    2148:	90 91 fd 20 	lds	r25, 0x20FD
    214c:	40 91 f1 20 	lds	r20, 0x20F1
    2150:	60 91 f8 20 	lds	r22, 0x20F8
    2154:	70 91 f9 20 	lds	r23, 0x20F9
    2158:	28 1b       	sub	r18, r24
    215a:	39 0b       	sbc	r19, r25
    215c:	42 9f       	mul	r20, r18
    215e:	c0 01       	movw	r24, r0
    2160:	43 9f       	mul	r20, r19
    2162:	90 0d       	add	r25, r0
    2164:	11 24       	eor	r1, r1
    2166:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    216a:	60 93 e2 2a 	sts	0x2AE2, r22
    216e:	10 92 e3 2a 	sts	0x2AE3, r1
    2172:	10 92 e4 2a 	sts	0x2AE4, r1
    2176:	66 e0       	ldi	r22, 0x06	; 6
    2178:	83 ed       	ldi	r24, 0xD3	; 211
    217a:	9a e2       	ldi	r25, 0x2A	; 42
    217c:	4c d3       	rcall	.+1688   	; 0x2816 <set_flash_ws2812>
    217e:	47 c1       	rjmp	.+654    	; 0x240e <update_led_charge+0x488>
    2180:	20 91 f4 20 	lds	r18, 0x20F4
    2184:	30 91 f5 20 	lds	r19, 0x20F5
    2188:	82 17       	cp	r24, r18
    218a:	93 07       	cpc	r25, r19
    218c:	08 f0       	brcs	.+2      	; 0x2190 <update_led_charge+0x20a>
    218e:	5d c0       	rjmp	.+186    	; 0x224a <update_led_charge+0x2c4>
    2190:	70 de       	rcall	.-800    	; 0x1e72 <clear_led>
    2192:	80 91 f1 20 	lds	r24, 0x20F1
    2196:	80 93 d3 2a 	sts	0x2AD3, r24
    219a:	10 92 d4 2a 	sts	0x2AD4, r1
    219e:	10 92 d5 2a 	sts	0x2AD5, r1
    21a2:	20 91 7c 21 	lds	r18, 0x217C
    21a6:	30 91 7d 21 	lds	r19, 0x217D
    21aa:	80 91 f8 20 	lds	r24, 0x20F8
    21ae:	90 91 f9 20 	lds	r25, 0x20F9
    21b2:	e0 91 f1 20 	lds	r30, 0x20F1
    21b6:	60 91 f4 20 	lds	r22, 0x20F4
    21ba:	70 91 f5 20 	lds	r23, 0x20F5
    21be:	a9 01       	movw	r20, r18
    21c0:	48 1b       	sub	r20, r24
    21c2:	59 0b       	sbc	r21, r25
    21c4:	e4 9f       	mul	r30, r20
    21c6:	c0 01       	movw	r24, r0
    21c8:	e5 9f       	mul	r30, r21
    21ca:	90 0d       	add	r25, r0
    21cc:	11 24       	eor	r1, r1
    21ce:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    21d2:	60 93 d6 2a 	sts	0x2AD6, r22
    21d6:	10 92 d7 2a 	sts	0x2AD7, r1
    21da:	10 92 d8 2a 	sts	0x2AD8, r1
    21de:	80 91 f1 20 	lds	r24, 0x20F1
    21e2:	80 93 d9 2a 	sts	0x2AD9, r24
    21e6:	10 92 da 2a 	sts	0x2ADA, r1
    21ea:	10 92 db 2a 	sts	0x2ADB, r1
    21ee:	80 91 f1 20 	lds	r24, 0x20F1
    21f2:	80 93 dc 2a 	sts	0x2ADC, r24
    21f6:	10 92 dd 2a 	sts	0x2ADD, r1
    21fa:	10 92 de 2a 	sts	0x2ADE, r1
    21fe:	80 91 f8 20 	lds	r24, 0x20F8
    2202:	90 91 f9 20 	lds	r25, 0x20F9
    2206:	40 91 f1 20 	lds	r20, 0x20F1
    220a:	60 91 f4 20 	lds	r22, 0x20F4
    220e:	70 91 f5 20 	lds	r23, 0x20F5
    2212:	28 1b       	sub	r18, r24
    2214:	39 0b       	sbc	r19, r25
    2216:	42 9f       	mul	r20, r18
    2218:	c0 01       	movw	r24, r0
    221a:	43 9f       	mul	r20, r19
    221c:	90 0d       	add	r25, r0
    221e:	11 24       	eor	r1, r1
    2220:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2224:	60 93 df 2a 	sts	0x2ADF, r22
    2228:	10 92 e0 2a 	sts	0x2AE0, r1
    222c:	10 92 e1 2a 	sts	0x2AE1, r1
    2230:	80 91 f1 20 	lds	r24, 0x20F1
    2234:	80 93 e2 2a 	sts	0x2AE2, r24
    2238:	10 92 e3 2a 	sts	0x2AE3, r1
    223c:	10 92 e4 2a 	sts	0x2AE4, r1
    2240:	66 e0       	ldi	r22, 0x06	; 6
    2242:	83 ed       	ldi	r24, 0xD3	; 211
    2244:	9a e2       	ldi	r25, 0x2A	; 42
    2246:	e7 d2       	rcall	.+1486   	; 0x2816 <set_flash_ws2812>
    2248:	e2 c0       	rjmp	.+452    	; 0x240e <update_led_charge+0x488>
    224a:	20 91 f2 20 	lds	r18, 0x20F2
    224e:	30 91 f3 20 	lds	r19, 0x20F3
    2252:	82 17       	cp	r24, r18
    2254:	93 07       	cpc	r25, r19
    2256:	08 f0       	brcs	.+2      	; 0x225a <update_led_charge+0x2d4>
    2258:	a5 c0       	rjmp	.+330    	; 0x23a4 <update_led_charge+0x41e>
    225a:	0b de       	rcall	.-1002   	; 0x1e72 <clear_led>
    225c:	10 92 d3 2a 	sts	0x2AD3, r1
    2260:	20 91 7c 21 	lds	r18, 0x217C
    2264:	30 91 7d 21 	lds	r19, 0x217D
    2268:	80 91 f6 20 	lds	r24, 0x20F6
    226c:	90 91 f7 20 	lds	r25, 0x20F7
    2270:	e0 91 f1 20 	lds	r30, 0x20F1
    2274:	60 91 f2 20 	lds	r22, 0x20F2
    2278:	70 91 f3 20 	lds	r23, 0x20F3
    227c:	a9 01       	movw	r20, r18
    227e:	48 1b       	sub	r20, r24
    2280:	59 0b       	sbc	r21, r25
    2282:	e4 9f       	mul	r30, r20
    2284:	c0 01       	movw	r24, r0
    2286:	e5 9f       	mul	r30, r21
    2288:	90 0d       	add	r25, r0
    228a:	11 24       	eor	r1, r1
    228c:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2290:	60 93 d4 2a 	sts	0x2AD4, r22
    2294:	10 92 d5 2a 	sts	0x2AD5, r1
    2298:	10 92 d6 2a 	sts	0x2AD6, r1
    229c:	80 91 f6 20 	lds	r24, 0x20F6
    22a0:	90 91 f7 20 	lds	r25, 0x20F7
    22a4:	e0 91 f1 20 	lds	r30, 0x20F1
    22a8:	60 91 f2 20 	lds	r22, 0x20F2
    22ac:	70 91 f3 20 	lds	r23, 0x20F3
    22b0:	a9 01       	movw	r20, r18
    22b2:	48 1b       	sub	r20, r24
    22b4:	59 0b       	sbc	r21, r25
    22b6:	e4 9f       	mul	r30, r20
    22b8:	c0 01       	movw	r24, r0
    22ba:	e5 9f       	mul	r30, r21
    22bc:	90 0d       	add	r25, r0
    22be:	11 24       	eor	r1, r1
    22c0:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    22c4:	60 93 d7 2a 	sts	0x2AD7, r22
    22c8:	10 92 d8 2a 	sts	0x2AD8, r1
    22cc:	10 92 d9 2a 	sts	0x2AD9, r1
    22d0:	80 91 f6 20 	lds	r24, 0x20F6
    22d4:	90 91 f7 20 	lds	r25, 0x20F7
    22d8:	e0 91 f1 20 	lds	r30, 0x20F1
    22dc:	60 91 f2 20 	lds	r22, 0x20F2
    22e0:	70 91 f3 20 	lds	r23, 0x20F3
    22e4:	a9 01       	movw	r20, r18
    22e6:	48 1b       	sub	r20, r24
    22e8:	59 0b       	sbc	r21, r25
    22ea:	e4 9f       	mul	r30, r20
    22ec:	c0 01       	movw	r24, r0
    22ee:	e5 9f       	mul	r30, r21
    22f0:	90 0d       	add	r25, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    22f8:	60 93 da 2a 	sts	0x2ADA, r22
    22fc:	10 92 db 2a 	sts	0x2ADB, r1
    2300:	10 92 dc 2a 	sts	0x2ADC, r1
    2304:	80 91 f6 20 	lds	r24, 0x20F6
    2308:	90 91 f7 20 	lds	r25, 0x20F7
    230c:	e0 91 f1 20 	lds	r30, 0x20F1
    2310:	60 91 f2 20 	lds	r22, 0x20F2
    2314:	70 91 f3 20 	lds	r23, 0x20F3
    2318:	a9 01       	movw	r20, r18
    231a:	48 1b       	sub	r20, r24
    231c:	59 0b       	sbc	r21, r25
    231e:	e4 9f       	mul	r30, r20
    2320:	c0 01       	movw	r24, r0
    2322:	e5 9f       	mul	r30, r21
    2324:	90 0d       	add	r25, r0
    2326:	11 24       	eor	r1, r1
    2328:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    232c:	60 93 dd 2a 	sts	0x2ADD, r22
    2330:	10 92 de 2a 	sts	0x2ADE, r1
    2334:	10 92 df 2a 	sts	0x2ADF, r1
    2338:	80 91 f6 20 	lds	r24, 0x20F6
    233c:	90 91 f7 20 	lds	r25, 0x20F7
    2340:	e0 91 f1 20 	lds	r30, 0x20F1
    2344:	60 91 f2 20 	lds	r22, 0x20F2
    2348:	70 91 f3 20 	lds	r23, 0x20F3
    234c:	a9 01       	movw	r20, r18
    234e:	48 1b       	sub	r20, r24
    2350:	59 0b       	sbc	r21, r25
    2352:	e4 9f       	mul	r30, r20
    2354:	c0 01       	movw	r24, r0
    2356:	e5 9f       	mul	r30, r21
    2358:	90 0d       	add	r25, r0
    235a:	11 24       	eor	r1, r1
    235c:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2360:	60 93 e0 2a 	sts	0x2AE0, r22
    2364:	10 92 e1 2a 	sts	0x2AE1, r1
    2368:	10 92 e2 2a 	sts	0x2AE2, r1
    236c:	80 91 f6 20 	lds	r24, 0x20F6
    2370:	90 91 f7 20 	lds	r25, 0x20F7
    2374:	40 91 f1 20 	lds	r20, 0x20F1
    2378:	60 91 f2 20 	lds	r22, 0x20F2
    237c:	70 91 f3 20 	lds	r23, 0x20F3
    2380:	28 1b       	sub	r18, r24
    2382:	39 0b       	sbc	r19, r25
    2384:	42 9f       	mul	r20, r18
    2386:	c0 01       	movw	r24, r0
    2388:	43 9f       	mul	r20, r19
    238a:	90 0d       	add	r25, r0
    238c:	11 24       	eor	r1, r1
    238e:	0e 94 0a 20 	call	0x4014	; 0x4014 <__udivmodhi4>
    2392:	60 93 e3 2a 	sts	0x2AE3, r22
    2396:	10 92 e4 2a 	sts	0x2AE4, r1
    239a:	66 e0       	ldi	r22, 0x06	; 6
    239c:	83 ed       	ldi	r24, 0xD3	; 211
    239e:	9a e2       	ldi	r25, 0x2A	; 42
    23a0:	3a d2       	rcall	.+1140   	; 0x2816 <set_flash_ws2812>
    23a2:	35 c0       	rjmp	.+106    	; 0x240e <update_led_charge+0x488>
    23a4:	66 dd       	rcall	.-1332   	; 0x1e72 <clear_led>
    23a6:	10 92 d3 2a 	sts	0x2AD3, r1
    23aa:	80 91 f1 20 	lds	r24, 0x20F1
    23ae:	80 93 d4 2a 	sts	0x2AD4, r24
    23b2:	10 92 d5 2a 	sts	0x2AD5, r1
    23b6:	10 92 d6 2a 	sts	0x2AD6, r1
    23ba:	80 91 f1 20 	lds	r24, 0x20F1
    23be:	80 93 d7 2a 	sts	0x2AD7, r24
    23c2:	10 92 d8 2a 	sts	0x2AD8, r1
    23c6:	10 92 d9 2a 	sts	0x2AD9, r1
    23ca:	80 91 f1 20 	lds	r24, 0x20F1
    23ce:	80 93 da 2a 	sts	0x2ADA, r24
    23d2:	10 92 db 2a 	sts	0x2ADB, r1
    23d6:	10 92 dc 2a 	sts	0x2ADC, r1
    23da:	80 91 f1 20 	lds	r24, 0x20F1
    23de:	80 93 dd 2a 	sts	0x2ADD, r24
    23e2:	10 92 de 2a 	sts	0x2ADE, r1
    23e6:	10 92 df 2a 	sts	0x2ADF, r1
    23ea:	80 91 f1 20 	lds	r24, 0x20F1
    23ee:	80 93 e0 2a 	sts	0x2AE0, r24
    23f2:	10 92 e1 2a 	sts	0x2AE1, r1
    23f6:	10 92 e2 2a 	sts	0x2AE2, r1
    23fa:	80 91 f1 20 	lds	r24, 0x20F1
    23fe:	80 93 e3 2a 	sts	0x2AE3, r24
    2402:	10 92 e4 2a 	sts	0x2AE4, r1
    2406:	66 e0       	ldi	r22, 0x06	; 6
    2408:	83 ed       	ldi	r24, 0xD3	; 211
    240a:	9a e2       	ldi	r25, 0x2A	; 42
    240c:	04 d2       	rcall	.+1032   	; 0x2816 <set_flash_ws2812>
    240e:	80 91 7c 21 	lds	r24, 0x217C
    2412:	90 91 7d 21 	lds	r25, 0x217D
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	80 93 7c 21 	sts	0x217C, r24
    241c:	90 93 7d 21 	sts	0x217D, r25
    2420:	08 95       	ret

00002422 <__vector_35>:
    2422:	1f 92       	push	r1
    2424:	0f 92       	push	r0
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	0f 92       	push	r0
    242a:	11 24       	eor	r1, r1
    242c:	80 e2       	ldi	r24, 0x20	; 32
    242e:	e0 e6       	ldi	r30, 0x60	; 96
    2430:	f6 e0       	ldi	r31, 0x06	; 6
    2432:	84 87       	std	Z+12, r24	; 0x0c
    2434:	1e dd       	rcall	.-1476   	; 0x1e72 <clear_led>
    2436:	ff cf       	rjmp	.-2      	; 0x2436 <__vector_35+0x14>

00002438 <send_response>:
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	00 d0       	rcall	.+0      	; 0x243e <send_response+0x6>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	6a 83       	std	Y+2, r22	; 0x02
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	ce 01       	movw	r24, r28
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	91 dc       	rcall	.-1758   	; 0x1d72 <uart_send_bytes>
    2450:	0f 90       	pop	r0
    2452:	0f 90       	pop	r0
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <send_light_data>:
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
    245e:	00 d0       	rcall	.+0      	; 0x2460 <send_light_data+0x6>
    2460:	1f 92       	push	r1
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	90 91 7a 21 	lds	r25, 0x217A
    246a:	80 91 7b 21 	lds	r24, 0x217B
    246e:	9b 83       	std	Y+3, r25	; 0x03
    2470:	8a 83       	std	Y+2, r24	; 0x02
    2472:	8d e4       	ldi	r24, 0x4D	; 77
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	63 e0       	ldi	r22, 0x03	; 3
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	ce 01       	movw	r24, r28
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	79 dc       	rcall	.-1806   	; 0x1d72 <uart_send_bytes>
    2480:	23 96       	adiw	r28, 0x03	; 3
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	08 95       	ret

0000248c <send_battery_data>:
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	00 d0       	rcall	.+0      	; 0x2492 <send_battery_data+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	80 91 78 21 	lds	r24, 0x2178
    249a:	90 91 79 21 	lds	r25, 0x2179
    249e:	6a e0       	ldi	r22, 0x0A	; 10
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	0e 94 1e 20 	call	0x403c	; 0x403c <__divmodhi4>
    24a6:	6a 83       	std	Y+2, r22	; 0x02
    24a8:	82 e4       	ldi	r24, 0x42	; 66
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	62 e0       	ldi	r22, 0x02	; 2
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	ce 01       	movw	r24, r28
    24b2:	01 96       	adiw	r24, 0x01	; 1
    24b4:	5e dc       	rcall	.-1860   	; 0x1d72 <uart_send_bytes>
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <send_charging_data>:
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <send_charging_data+0x6>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	1a 82       	std	Y+2, r1	; 0x02
    24ce:	8b dc       	rcall	.-1770   	; 0x1de6 <ischarging>
    24d0:	8a 83       	std	Y+2, r24	; 0x02
    24d2:	87 e4       	ldi	r24, 0x47	; 71
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	70 e0       	ldi	r23, 0x00	; 0
    24da:	ce 01       	movw	r24, r28
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	49 dc       	rcall	.-1902   	; 0x1d72 <uart_send_bytes>
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	08 95       	ret

000024ea <send_color_data>:
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	2a 97       	sbiw	r28, 0x0a	; 10
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	fe 01       	movw	r30, r28
    24fa:	31 96       	adiw	r30, 0x01	; 1
    24fc:	8a e0       	ldi	r24, 0x0A	; 10
    24fe:	df 01       	movw	r26, r30
    2500:	1d 92       	st	X+, r1
    2502:	8a 95       	dec	r24
    2504:	e9 f7       	brne	.-6      	; 0x2500 <send_color_data+0x16>
    2506:	83 e6       	ldi	r24, 0x63	; 99
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	31 96       	adiw	r30, 0x01	; 1
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	dc 01       	movw	r26, r24
    2512:	a4 52       	subi	r26, 0x24	; 36
    2514:	bf 4d       	sbci	r27, 0xDF	; 223
    2516:	2c 91       	ld	r18, X
    2518:	21 93       	st	Z+, r18
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	89 30       	cpi	r24, 0x09	; 9
    251e:	91 05       	cpc	r25, r1
    2520:	b9 f7       	brne	.-18     	; 0x2510 <send_color_data+0x26>
    2522:	69 e0       	ldi	r22, 0x09	; 9
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	ce 01       	movw	r24, r28
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	23 dc       	rcall	.-1978   	; 0x1d72 <uart_send_bytes>
    252c:	2a 96       	adiw	r28, 0x0a	; 10
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	de bf       	out	0x3e, r29	; 62
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	08 95       	ret

00002538 <send_pulse_data>:
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	00 d0       	rcall	.+0      	; 0x253e <send_pulse_data+0x6>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	19 82       	std	Y+1, r1	; 0x01
    2544:	1a 82       	std	Y+2, r1	; 0x02
    2546:	67 da       	rcall	.-2866   	; 0x1a16 <get_pulse_state>
    2548:	8a 83       	std	Y+2, r24	; 0x02
    254a:	80 e7       	ldi	r24, 0x70	; 112
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	63 e0       	ldi	r22, 0x03	; 3
    2550:	70 e0       	ldi	r23, 0x00	; 0
    2552:	ce 01       	movw	r24, r28
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	0d dc       	rcall	.-2022   	; 0x1d72 <uart_send_bytes>
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <restore_led_from_eeprom>:
{	
	/* Read LED data bytes from EEPROM to internal buffer */
	/* EEPROM_LED1_R_BYTE is the start address of the bytes , load into buffer_data*/
//	nvm_eeprom_read_buffer((uint16_t)EEPROM_LED1_R_BYTE, &buffer_data[2], 9);
	
	colors[0] = EEPROM_LED1_R_BYTE;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	38 d5       	rcall	.+2672   	; 0x2fd8 <nvm_eeprom_read_byte>
    2568:	80 93 dc 20 	sts	0x20DC, r24
	colors[1] = EEPROM_LED1_G_BYTE;
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	33 d5       	rcall	.+2662   	; 0x2fd8 <nvm_eeprom_read_byte>
    2572:	80 93 dd 20 	sts	0x20DD, r24
	colors[2] = EEPROM_LED1_B_BYTE;
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	2e d5       	rcall	.+2652   	; 0x2fd8 <nvm_eeprom_read_byte>
    257c:	80 93 de 20 	sts	0x20DE, r24

	colors[3] = EEPROM_LED2_R_BYTE;
    2580:	84 e0       	ldi	r24, 0x04	; 4
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	29 d5       	rcall	.+2642   	; 0x2fd8 <nvm_eeprom_read_byte>
    2586:	80 93 df 20 	sts	0x20DF, r24
	colors[4] = EEPROM_LED2_G_BYTE;
    258a:	85 e0       	ldi	r24, 0x05	; 5
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	24 d5       	rcall	.+2632   	; 0x2fd8 <nvm_eeprom_read_byte>
    2590:	80 93 e0 20 	sts	0x20E0, r24
	colors[5] = EEPROM_LED2_B_BYTE;
    2594:	86 e0       	ldi	r24, 0x06	; 6
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	1f d5       	rcall	.+2622   	; 0x2fd8 <nvm_eeprom_read_byte>
    259a:	80 93 e1 20 	sts	0x20E1, r24
	
	colors[6] = EEPROM_LED3_R_BYTE;
    259e:	87 e0       	ldi	r24, 0x07	; 7
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	1a d5       	rcall	.+2612   	; 0x2fd8 <nvm_eeprom_read_byte>
    25a4:	80 93 e2 20 	sts	0x20E2, r24
	colors[7] = EEPROM_LED3_G_BYTE;
    25a8:	88 e0       	ldi	r24, 0x08	; 8
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	15 d5       	rcall	.+2602   	; 0x2fd8 <nvm_eeprom_read_byte>
    25ae:	80 93 e3 20 	sts	0x20E3, r24
	colors[8] = EEPROM_LED3_B_BYTE;
    25b2:	89 e0       	ldi	r24, 0x09	; 9
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	10 d5       	rcall	.+2592   	; 0x2fd8 <nvm_eeprom_read_byte>
    25b8:	80 93 e4 20 	sts	0x20E4, r24
	
	led_set_from_colors();
    25bc:	cb c9       	rjmp	.-3178   	; 0x1954 <led_set_from_colors>
    25be:	08 95       	ret

000025c0 <save_led_to_eeprom>:
//usart_putchar(&USARTD0, 0x25);
}

void save_led_to_eeprom(void) {
    25c0:	08 95       	ret

000025c2 <init_ws2812>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25c2:	68 2f       	mov	r22, r24
    25c4:	67 70       	andi	r22, 0x07	; 7
    25c6:	21 e0       	ldi	r18, 0x01	; 1
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	a9 01       	movw	r20, r18
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <init_ws2812+0x10>
    25ce:	44 0f       	add	r20, r20
    25d0:	55 1f       	adc	r21, r21
    25d2:	6a 95       	dec	r22
    25d4:	e2 f7       	brpl	.-8      	; 0x25ce <init_ws2812+0xc>
    25d6:	ba 01       	movw	r22, r20
    25d8:	86 95       	lsr	r24
    25da:	86 95       	lsr	r24
    25dc:	86 95       	lsr	r24
    25de:	50 e2       	ldi	r21, 0x20	; 32
    25e0:	85 9f       	mul	r24, r21
    25e2:	c0 01       	movw	r24, r0
    25e4:	11 24       	eor	r1, r1
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	9a 5f       	subi	r25, 0xFA	; 250
    25ec:	96 c3       	rjmp	.+1836   	; 0x2d1a <ioport_configure_port_pin>
    25ee:	08 95       	ret

000025f0 <set_led_ws2812>:

	reset_dat();
}

void set_led_ws2812(led_struct * m_led_struct)
{
    25f0:	dc 01       	movw	r26, r24
	send_char(m_led_struct->g);
    25f2:	11 96       	adiw	r26, 0x01	; 1
    25f4:	9c 91       	ld	r25, X
    25f6:	11 97       	sbiw	r26, 0x01	; 1
    25f8:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    25fa:	e0 e4       	ldi	r30, 0x40	; 64
    25fc:	f6 e0       	ldi	r31, 0x06	; 6
    25fe:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    2600:	99 23       	and	r25, r25
    2602:	0c f0       	brlt	.+2      	; 0x2606 <set_led_ws2812+0x16>
    2604:	28 c0       	rjmp	.+80     	; 0x2656 <set_led_ws2812+0x66>
    2606:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2638:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2652:	00 00       	nop
    2654:	26 c0       	rjmp	.+76     	; 0x26a2 <set_led_ws2812+0xb2>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2656:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    266c:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    266e:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    26a0:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    26a2:	99 0f       	add	r25, r25
    26a4:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    26a6:	09 f0       	breq	.+2      	; 0x26aa <set_led_ws2812+0xba>
    26a8:	ab cf       	rjmp	.-170    	; 0x2600 <set_led_ws2812+0x10>
}

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
    26aa:	9c 91       	ld	r25, X
    26ac:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    26ae:	e0 e4       	ldi	r30, 0x40	; 64
    26b0:	f6 e0       	ldi	r31, 0x06	; 6
    26b2:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    26b4:	99 23       	and	r25, r25
    26b6:	0c f0       	brlt	.+2      	; 0x26ba <set_led_ws2812+0xca>
    26b8:	28 c0       	rjmp	.+80     	; 0x270a <set_led_ws2812+0x11a>
    26ba:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    26ec:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2706:	00 00       	nop
    2708:	26 c0       	rjmp	.+76     	; 0x2756 <set_led_ws2812+0x166>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    270a:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2720:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2722:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    2754:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    2756:	99 0f       	add	r25, r25
    2758:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    275a:	09 f0       	breq	.+2      	; 0x275e <set_led_ws2812+0x16e>
    275c:	ab cf       	rjmp	.-170    	; 0x26b4 <set_led_ws2812+0xc4>

void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
    275e:	12 96       	adiw	r26, 0x02	; 2
    2760:	9c 91       	ld	r25, X
    2762:	88 e0       	ldi	r24, 0x08	; 8
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2764:	e0 e4       	ldi	r30, 0x40	; 64
    2766:	f6 e0       	ldi	r31, 0x06	; 6
    2768:	20 e4       	ldi	r18, 0x40	; 64
	_delay_ms(1);
}

inline void send_bit(uint8_t data)
{
	if (data)
    276a:	99 23       	and	r25, r25
    276c:	0c f0       	brlt	.+2      	; 0x2770 <set_led_ws2812+0x180>
    276e:	28 c0       	rjmp	.+80     	; 0x27c0 <set_led_ws2812+0x1d0>
    2770:	25 83       	std	Z+5, r18	; 0x05
	...
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    27a2:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    27bc:	00 00       	nop
    27be:	26 c0       	rjmp	.+76     	; 0x280c <set_led_ws2812+0x21c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    27c0:	25 83       	std	Z+5, r18	; 0x05
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    27d6:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    27d8:	26 83       	std	Z+6, r18	; 0x06
	...
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");asm("nop");	//62.5ns
	asm("nop");				//31.25ns
    280a:	00 00       	nop
{
	uint8_t i;
	for (i=0;i<8;i++)
	{
		send_bit(data&0x80);
		data = data << 1;
    280c:	99 0f       	add	r25, r25
    280e:	81 50       	subi	r24, 0x01	; 1
}

inline void send_char(uint8_t data)
{
	uint8_t i;
	for (i=0;i<8;i++)
    2810:	09 f0       	breq	.+2      	; 0x2814 <set_led_ws2812+0x224>
    2812:	ab cf       	rjmp	.-170    	; 0x276a <set_led_ws2812+0x17a>
void set_led_ws2812(led_struct * m_led_struct)
{
	send_char(m_led_struct->g);
	send_char(m_led_struct->r);
	send_char(m_led_struct->b);
}
    2814:	08 95       	ret

00002816 <set_flash_ws2812>:
This is a brief function to light a rgb led string.
led_struct-----single led rgb parameter
num------------the number of led you want to light
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	06 2f       	mov	r16, r22
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    2820:	66 23       	and	r22, r22
    2822:	49 f0       	breq	.+18     	; 0x2836 <set_flash_ws2812+0x20>
    2824:	c8 2f       	mov	r28, r24
    2826:	d9 2f       	mov	r29, r25
    2828:	10 e0       	ldi	r17, 0x00	; 0
	{
		set_led_ws2812(&m_led_struct[i]);
    282a:	ce 01       	movw	r24, r28
    282c:	e1 de       	rcall	.-574    	; 0x25f0 <set_led_ws2812>
*/
inline void set_flash_ws2812(led_struct * m_led_struct, uint8_t num)
{
	uint8_t i=0;
	
	for (i=0;i<num;i++)
    282e:	1f 5f       	subi	r17, 0xFF	; 255
    2830:	23 96       	adiw	r28, 0x03	; 3
    2832:	10 13       	cpse	r17, r16
    2834:	fa cf       	rjmp	.-12     	; 0x282a <set_flash_ws2812+0x14>
    2836:	80 e4       	ldi	r24, 0x40	; 64
    2838:	e0 e4       	ldi	r30, 0x40	; 64
    283a:	f6 e0       	ldi	r31, 0x06	; 6
    283c:	86 83       	std	Z+6, r24	; 0x06
    283e:	89 ef       	ldi	r24, 0xF9	; 249
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <set_flash_ws2812+0x2c>
    2846:	00 c0       	rjmp	.+0      	; 0x2848 <set_flash_ws2812+0x32>
    2848:	00 00       	nop
	{
		set_led_ws2812(&m_led_struct[i]);
	}
	
	reset_dat();
}
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	08 95       	ret

00002854 <set_temp_color>:
	_delay_ms(2000);
	ioport_set_pin_low(IOPORT_CREATE_PIN(PORTA, 6));
	twinkle(0, 0, 0);
}

void set_temp_color(uint8_t* tempcolor) {
    2854:	fc 01       	movw	r30, r24
	m_led_struct[0].r = tempcolor[0];
    2856:	80 81       	ld	r24, Z
    2858:	80 93 d3 2a 	sts	0x2AD3, r24
	m_led_struct[0].g = tempcolor[1];
    285c:	81 81       	ldd	r24, Z+1	; 0x01
    285e:	80 93 d4 2a 	sts	0x2AD4, r24
	m_led_struct[0].b = tempcolor[2];
    2862:	82 81       	ldd	r24, Z+2	; 0x02
    2864:	80 93 d5 2a 	sts	0x2AD5, r24
	m_led_struct[3].r = tempcolor[0];
    2868:	80 81       	ld	r24, Z
    286a:	80 93 dc 2a 	sts	0x2ADC, r24
	m_led_struct[3].g = tempcolor[1];
    286e:	81 81       	ldd	r24, Z+1	; 0x01
    2870:	80 93 dd 2a 	sts	0x2ADD, r24
	m_led_struct[3].b = tempcolor[2];
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	80 93 de 2a 	sts	0x2ADE, r24
	
	m_led_struct[1].r = tempcolor[3];
    287a:	83 81       	ldd	r24, Z+3	; 0x03
    287c:	80 93 d6 2a 	sts	0x2AD6, r24
	m_led_struct[1].g = tempcolor[4];
    2880:	84 81       	ldd	r24, Z+4	; 0x04
    2882:	80 93 d7 2a 	sts	0x2AD7, r24
	m_led_struct[1].b = tempcolor[5];
    2886:	85 81       	ldd	r24, Z+5	; 0x05
    2888:	80 93 d8 2a 	sts	0x2AD8, r24
	m_led_struct[4].r = tempcolor[3];
    288c:	83 81       	ldd	r24, Z+3	; 0x03
    288e:	80 93 df 2a 	sts	0x2ADF, r24
	m_led_struct[4].g = tempcolor[4];
    2892:	84 81       	ldd	r24, Z+4	; 0x04
    2894:	80 93 e0 2a 	sts	0x2AE0, r24
	m_led_struct[4].b = tempcolor[5];
    2898:	85 81       	ldd	r24, Z+5	; 0x05
    289a:	80 93 e1 2a 	sts	0x2AE1, r24
	
	m_led_struct[2].r = tempcolor[6];
    289e:	86 81       	ldd	r24, Z+6	; 0x06
    28a0:	80 93 d9 2a 	sts	0x2AD9, r24
	m_led_struct[2].g = tempcolor[7];
    28a4:	87 81       	ldd	r24, Z+7	; 0x07
    28a6:	80 93 da 2a 	sts	0x2ADA, r24
	m_led_struct[2].b = tempcolor[8];
    28aa:	80 85       	ldd	r24, Z+8	; 0x08
    28ac:	80 93 db 2a 	sts	0x2ADB, r24
	m_led_struct[5].r = tempcolor[6];
    28b0:	86 81       	ldd	r24, Z+6	; 0x06
    28b2:	80 93 e2 2a 	sts	0x2AE2, r24
	m_led_struct[5].g = tempcolor[7];
    28b6:	87 81       	ldd	r24, Z+7	; 0x07
    28b8:	80 93 e3 2a 	sts	0x2AE3, r24
	m_led_struct[5].b = tempcolor[8];
    28bc:	80 85       	ldd	r24, Z+8	; 0x08
    28be:	80 93 e4 2a 	sts	0x2AE4, r24

	set_flash_ws2812(m_led_struct, 6);
    28c2:	66 e0       	ldi	r22, 0x06	; 6
    28c4:	83 ed       	ldi	r24, 0xD3	; 211
    28c6:	9a e2       	ldi	r25, 0x2A	; 42
    28c8:	a6 cf       	rjmp	.-180    	; 0x2816 <set_flash_ws2812>
    28ca:	08 95       	ret

000028cc <main>:
}


int main(void)
{
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	2a 97       	sbiw	r28, 0x0a	; 10
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	de bf       	out	0x3e, r29	; 62
	//ioport_configure_pin(IOPORT_CREATE_PIN(PORTA, 6), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
    28da:	e1 d1       	rcall	.+962    	; 0x2c9e <sysclk_init>
//	ioport_configure_pin(IOPORT_CREATE_PIN(PORTC, 3), IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	/* Set the timeout period for the watchdog - 8 ms */
	//wdt_set_timeout_period(WDT_TIMEOUT_PERIOD_8KCLK);
	
	
	init_uart();
    28dc:	15 d8       	rcall	.-4054   	; 0x1908 <init_uart>
	init_ws2812(IOPORT_CREATE_PIN(PORTC, 6));
    28de:	86 e1       	ldi	r24, 0x16	; 22
    28e0:	70 de       	rcall	.-800    	; 0x25c2 <init_ws2812>
	clear_led();
    28e2:	c7 da       	rcall	.-2674   	; 0x1e72 <clear_led>
	init_chargingpin(IOPORT_CREATE_PIN(PORTR, 1));
    28e4:	89 e7       	ldi	r24, 0x79	; 121
    28e6:	68 da       	rcall	.-2864   	; 0x1db8 <init_chargingpin>
	
	volatile uint8_t eep0 = nvm_eeprom_read_byte(0);
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	75 d3       	rcall	.+1770   	; 0x2fd8 <nvm_eeprom_read_byte>
    28ee:	89 83       	std	Y+1, r24	; 0x01
	volatile uint8_t eep1 = nvm_eeprom_read_byte(1);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	71 d3       	rcall	.+1762   	; 0x2fd8 <nvm_eeprom_read_byte>
    28f6:	8a 83       	std	Y+2, r24	; 0x02
	volatile uint8_t eep2 = nvm_eeprom_read_byte(2);
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	6d d3       	rcall	.+1754   	; 0x2fd8 <nvm_eeprom_read_byte>
    28fe:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint8_t eep3 = nvm_eeprom_read_byte(3);
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	69 d3       	rcall	.+1746   	; 0x2fd8 <nvm_eeprom_read_byte>
    2906:	8c 83       	std	Y+4, r24	; 0x04
	volatile uint8_t eep4 = nvm_eeprom_read_byte(4);
    2908:	84 e0       	ldi	r24, 0x04	; 4
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	65 d3       	rcall	.+1738   	; 0x2fd8 <nvm_eeprom_read_byte>
    290e:	8d 83       	std	Y+5, r24	; 0x05
	volatile uint8_t eep5 = nvm_eeprom_read_byte(5);
    2910:	85 e0       	ldi	r24, 0x05	; 5
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	61 d3       	rcall	.+1730   	; 0x2fd8 <nvm_eeprom_read_byte>
    2916:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t eep6 = nvm_eeprom_read_byte(6);
    2918:	86 e0       	ldi	r24, 0x06	; 6
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	5d d3       	rcall	.+1722   	; 0x2fd8 <nvm_eeprom_read_byte>
    291e:	8f 83       	std	Y+7, r24	; 0x07
	volatile uint8_t eep7 = nvm_eeprom_read_byte(7);
    2920:	87 e0       	ldi	r24, 0x07	; 7
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	59 d3       	rcall	.+1714   	; 0x2fd8 <nvm_eeprom_read_byte>
    2926:	88 87       	std	Y+8, r24	; 0x08
	volatile uint8_t eep8 = nvm_eeprom_read_byte(8);
    2928:	88 e0       	ldi	r24, 0x08	; 8
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	55 d3       	rcall	.+1706   	; 0x2fd8 <nvm_eeprom_read_byte>
    292e:	89 87       	std	Y+9, r24	; 0x09
	volatile uint8_t eep9 = nvm_eeprom_read_byte(9);
    2930:	89 e0       	ldi	r24, 0x09	; 9
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	51 d3       	rcall	.+1698   	; 0x2fd8 <nvm_eeprom_read_byte>
    2936:	8a 87       	std	Y+10, r24	; 0x0a

	// init the mtch 6301
	init_mtchio();
    2938:	0e 94 15 0b 	call	0x162a	; 0x162a <init_mtchio>
	init_i2c();
    293c:	0e 94 cf 0a 	call	0x159e	; 0x159e <init_i2c>
	init_mtch6301();
    2940:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <init_mtch6301>
		
	// restore the state stored in the eeprom
	// restore_state_eep();
	
	rainbow();
    2944:	6c da       	rcall	.-2856   	; 0x1e1e <rainbow>
	restore_led_from_eeprom();
    2946:	0d de       	rcall	.-998    	; 0x2562 <restore_led_from_eeprom>
	
	core_status = STATUS_CHARGE;
    2948:	11 e0       	ldi	r17, 0x01	; 1
    294a:	10 93 7f 21 	sts	0x217F, r17
	change_adc_channel(core_status);
    294e:	80 91 7f 21 	lds	r24, 0x217F
    2952:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
	flag_initcharge = true;
    2956:	10 93 75 21 	sts	0x2175, r17
	tc45_disable(&TCC4);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	98 e0       	ldi	r25, 0x08	; 8
    295e:	00 d6       	rcall	.+3072   	; 0x3560 <tc45_disable>
	tc45_enable(&TCC5);
    2960:	80 e4       	ldi	r24, 0x40	; 64
    2962:	98 e0       	ldi	r25, 0x08	; 8
    2964:	cb d5       	rcall	.+2966   	; 0x34fc <tc45_enable>
		
	init_adc(core_status);
    2966:	80 91 7f 21 	lds	r24, 0x217F
    296a:	0e 94 ed 03 	call	0x7da	; 0x7da <init_adc>
	adc_enable_interrupt();
    296e:	0e 94 5f 05 	call	0xabe	; 0xabe <adc_enable_interrupt>
	init_timer5();
    2972:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <init_timer5>
	init_timer4();		
    2976:	0e 94 38 0c 	call	0x1870	; 0x1870 <init_timer4>
		flag_initcharge = true;
		tc45_disable(&TCC4);
		tc45_enable(&TCC5);
	}
	else*/
	(!ischarging()){
    297a:	35 da       	rcall	.-2966   	; 0x1de6 <ischarging>
    297c:	81 11       	cpse	r24, r1
    297e:	11 c0       	rjmp	.+34     	; 0x29a2 <main+0xd6>
		old_core_status = core_status;
    2980:	80 91 7f 21 	lds	r24, 0x217F
    2984:	80 93 7e 21 	sts	0x217E, r24
		core_status = STATUS_BATT_READ;
    2988:	86 e0       	ldi	r24, 0x06	; 6
    298a:	80 93 7f 21 	sts	0x217F, r24
		change_adc_channel(core_status);
    298e:	80 91 7f 21 	lds	r24, 0x217F
    2992:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
		tc45_disable(&TCC5);
    2996:	80 e4       	ldi	r24, 0x40	; 64
    2998:	98 e0       	ldi	r25, 0x08	; 8
    299a:	e2 d5       	rcall	.+3012   	; 0x3560 <tc45_disable>
		tc45_enable(&TCC4);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	98 e0       	ldi	r25, 0x08	; 8
    29a0:	ad d5       	rcall	.+2906   	; 0x34fc <tc45_enable>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    29a2:	0f 2e       	mov	r0, r31
    29a4:	f0 e6       	ldi	r31, 0x60	; 96
    29a6:	ef 2e       	mov	r14, r31
    29a8:	f6 e0       	ldi	r31, 0x06	; 6
    29aa:	ff 2e       	mov	r15, r31
    29ac:	f0 2d       	mov	r31, r0
    29ae:	68 94       	set
    29b0:	99 24       	eor	r9, r9
    29b2:	91 f8       	bld	r9, 1
    29b4:	bb 24       	eor	r11, r11
    29b6:	b3 94       	inc	r11
    29b8:	0f 2e       	mov	r0, r31
    29ba:	f0 ee       	ldi	r31, 0xE0	; 224
    29bc:	cf 2e       	mov	r12, r31
    29be:	f7 e0       	ldi	r31, 0x07	; 7
    29c0:	df 2e       	mov	r13, r31
    29c2:	f0 2d       	mov	r31, r0
    29c4:	68 94       	set
    29c6:	aa 24       	eor	r10, r10
    29c8:	a6 f8       	bld	r10, 6
    29ca:	00 e0       	ldi	r16, 0x00	; 0
    29cc:	16 e0       	ldi	r17, 0x06	; 6
    29ce:	68 94       	set
    29d0:	77 24       	eor	r7, r7
    29d2:	77 f8       	bld	r7, 7
    29d4:	68 94       	set
    29d6:	88 24       	eor	r8, r8
    29d8:	85 f8       	bld	r8, 5
						{
							//	usart_putchar(M_USART, 0x55);

							run();
							old_core_status = core_status;
							core_status = STATUS_FFT_R;
    29da:	68 94       	set
    29dc:	55 24       	eor	r5, r5
    29de:	52 f8       	bld	r5, 2
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
					old_core_status = core_status;
					core_status = STATUS_BATT_READ;
    29e0:	0f 2e       	mov	r0, r31
    29e2:	f6 e0       	ldi	r31, 0x06	; 6
    29e4:	6f 2e       	mov	r6, r31
    29e6:	f0 2d       	mov	r31, r0
	//init_timerd5();
	
	// Insert application code here, after the board has been initialized.
	while(1)
	{
		if (latest_gesture) {
    29e8:	80 91 63 21 	lds	r24, 0x2163
    29ec:	88 23       	and	r24, r24
    29ee:	09 f4       	brne	.+2      	; 0x29f2 <main+0x126>
    29f0:	86 c0       	rjmp	.+268    	; 0x2afe <main+0x232>
			//twinkle(255, 0, 255);
			switch (latest_gesture) {
    29f2:	80 91 63 21 	lds	r24, 0x2163
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	fc 01       	movw	r30, r24
    29fa:	e0 5a       	subi	r30, 0xA0	; 160
    29fc:	f1 09       	sbc	r31, r1
    29fe:	e7 30       	cpi	r30, 0x07	; 7
    2a00:	f1 05       	cpc	r31, r1
    2a02:	08 f0       	brcs	.+2      	; 0x2a06 <main+0x13a>
    2a04:	7a c0       	rjmp	.+244    	; 0x2afa <main+0x22e>
    2a06:	e0 5e       	subi	r30, 0xE0	; 224
    2a08:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0a:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <__tablejump2__>
    2a0e:	f8 01       	movw	r30, r16
    2a10:	85 82       	std	Z+5, r8	; 0x05
				case PLAY:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTA, 5));
					//twinkle(255, 0, 0);
					set_temp_color(playPauseColor);
    2a12:	84 e3       	ldi	r24, 0x34	; 52
    2a14:	91 e2       	ldi	r25, 0x21	; 33
    2a16:	1e df       	rcall	.-452    	; 0x2854 <set_temp_color>
    2a18:	ff e7       	ldi	r31, 0x7F	; 127
    2a1a:	2a e1       	ldi	r18, 0x1A	; 26
    2a1c:	86 e0       	ldi	r24, 0x06	; 6
    2a1e:	f1 50       	subi	r31, 0x01	; 1
    2a20:	20 40       	sbci	r18, 0x00	; 0
    2a22:	80 40       	sbci	r24, 0x00	; 0
    2a24:	e1 f7       	brne	.-8      	; 0x2a1e <main+0x152>
    2a26:	00 c0       	rjmp	.+0      	; 0x2a28 <main+0x15c>
    2a28:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a2a:	f8 01       	movw	r30, r16
    2a2c:	86 82       	std	Z+6, r8	; 0x06
    2a2e:	65 c0       	rjmp	.+202    	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a30:	f8 01       	movw	r30, r16
    2a32:	a5 82       	std	Z+5, r10	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTA, 5));
					break;
				case NEXT:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTA, 6));
					//twinkle(255, 255, 0);
					set_temp_color(forwardColor);
    2a34:	8b e2       	ldi	r24, 0x2B	; 43
    2a36:	91 e2       	ldi	r25, 0x21	; 33
    2a38:	0d df       	rcall	.-486    	; 0x2854 <set_temp_color>
    2a3a:	ff e7       	ldi	r31, 0x7F	; 127
    2a3c:	2a e1       	ldi	r18, 0x1A	; 26
    2a3e:	86 e0       	ldi	r24, 0x06	; 6
    2a40:	f1 50       	subi	r31, 0x01	; 1
    2a42:	20 40       	sbci	r18, 0x00	; 0
    2a44:	80 40       	sbci	r24, 0x00	; 0
    2a46:	e1 f7       	brne	.-8      	; 0x2a40 <main+0x174>
    2a48:	00 c0       	rjmp	.+0      	; 0x2a4a <main+0x17e>
    2a4a:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	a6 82       	std	Z+6, r10	; 0x06
    2a50:	54 c0       	rjmp	.+168    	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a52:	f8 01       	movw	r30, r16
    2a54:	75 82       	std	Z+5, r7	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTA, 6));
					break;
				case PREV:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTA, 7));
					//twinkle(0, 255, 0);
					set_temp_color(backwardColor);
    2a56:	82 e2       	ldi	r24, 0x22	; 34
    2a58:	91 e2       	ldi	r25, 0x21	; 33
    2a5a:	fc de       	rcall	.-520    	; 0x2854 <set_temp_color>
    2a5c:	ff e7       	ldi	r31, 0x7F	; 127
    2a5e:	2a e1       	ldi	r18, 0x1A	; 26
    2a60:	86 e0       	ldi	r24, 0x06	; 6
    2a62:	f1 50       	subi	r31, 0x01	; 1
    2a64:	20 40       	sbci	r18, 0x00	; 0
    2a66:	80 40       	sbci	r24, 0x00	; 0
    2a68:	e1 f7       	brne	.-8      	; 0x2a62 <main+0x196>
    2a6a:	00 c0       	rjmp	.+0      	; 0x2a6c <main+0x1a0>
    2a6c:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a6e:	f8 01       	movw	r30, r16
    2a70:	76 82       	std	Z+6, r7	; 0x06
    2a72:	43 c0       	rjmp	.+134    	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a74:	f7 01       	movw	r30, r14
    2a76:	a5 82       	std	Z+5, r10	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTA, 7));
					break;
				case VOLUP:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTD, 6));
					//twinkle(0, 255, 255);
					set_temp_color(volumeUpColor);
    2a78:	89 e1       	ldi	r24, 0x19	; 25
    2a7a:	91 e2       	ldi	r25, 0x21	; 33
    2a7c:	eb de       	rcall	.-554    	; 0x2854 <set_temp_color>
    2a7e:	ff e7       	ldi	r31, 0x7F	; 127
    2a80:	2a e1       	ldi	r18, 0x1A	; 26
    2a82:	86 e0       	ldi	r24, 0x06	; 6
    2a84:	f1 50       	subi	r31, 0x01	; 1
    2a86:	20 40       	sbci	r18, 0x00	; 0
    2a88:	80 40       	sbci	r24, 0x00	; 0
    2a8a:	e1 f7       	brne	.-8      	; 0x2a84 <main+0x1b8>
    2a8c:	00 c0       	rjmp	.+0      	; 0x2a8e <main+0x1c2>
    2a8e:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2a90:	f7 01       	movw	r30, r14
    2a92:	a6 82       	std	Z+6, r10	; 0x06
    2a94:	32 c0       	rjmp	.+100    	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2a96:	f6 01       	movw	r30, r12
    2a98:	b5 82       	std	Z+5, r11	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 6));
					break;
				case VOLDOWN:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTR, 0));
					//twinkle(0, 0, 255);
					set_temp_color(volumeDownColor);
    2a9a:	80 e1       	ldi	r24, 0x10	; 16
    2a9c:	91 e2       	ldi	r25, 0x21	; 33
    2a9e:	da de       	rcall	.-588    	; 0x2854 <set_temp_color>
    2aa0:	ff e7       	ldi	r31, 0x7F	; 127
    2aa2:	2a e1       	ldi	r18, 0x1A	; 26
    2aa4:	86 e0       	ldi	r24, 0x06	; 6
    2aa6:	f1 50       	subi	r31, 0x01	; 1
    2aa8:	20 40       	sbci	r18, 0x00	; 0
    2aaa:	80 40       	sbci	r24, 0x00	; 0
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <main+0x1da>
    2aae:	00 c0       	rjmp	.+0      	; 0x2ab0 <main+0x1e4>
    2ab0:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ab2:	f6 01       	movw	r30, r12
    2ab4:	b6 82       	std	Z+6, r11	; 0x06
    2ab6:	21 c0       	rjmp	.+66     	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ab8:	f7 01       	movw	r30, r14
    2aba:	b5 82       	std	Z+5, r11	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTR, 0));
					break;
				case CONNDISC:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTD, 0));
					//twinkle(255, 0, 255);
					set_temp_color(connDiscColor);
    2abc:	87 e0       	ldi	r24, 0x07	; 7
    2abe:	91 e2       	ldi	r25, 0x21	; 33
    2ac0:	c9 de       	rcall	.-622    	; 0x2854 <set_temp_color>
    2ac2:	ff e7       	ldi	r31, 0x7F	; 127
    2ac4:	2a e1       	ldi	r18, 0x1A	; 26
    2ac6:	86 e0       	ldi	r24, 0x06	; 6
    2ac8:	f1 50       	subi	r31, 0x01	; 1
    2aca:	20 40       	sbci	r18, 0x00	; 0
    2acc:	80 40       	sbci	r24, 0x00	; 0
    2ace:	e1 f7       	brne	.-8      	; 0x2ac8 <main+0x1fc>
    2ad0:	00 c0       	rjmp	.+0      	; 0x2ad2 <main+0x206>
    2ad2:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2ad4:	f7 01       	movw	r30, r14
    2ad6:	b6 82       	std	Z+6, r11	; 0x06
    2ad8:	10 c0       	rjmp	.+32     	; 0x2afa <main+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2ada:	f7 01       	movw	r30, r14
    2adc:	95 82       	std	Z+5, r9	; 0x05
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 0));
					break;
				case INQUIRE:
					ioport_set_pin_high(IOPORT_CREATE_PIN(PORTD, 1));
					//twinkle(255, 255, 255);
					set_temp_color(inquiryColor);
    2ade:	8e ef       	ldi	r24, 0xFE	; 254
    2ae0:	90 e2       	ldi	r25, 0x20	; 32
    2ae2:	b8 de       	rcall	.-656    	; 0x2854 <set_temp_color>
    2ae4:	ff e7       	ldi	r31, 0x7F	; 127
    2ae6:	2a e1       	ldi	r18, 0x1A	; 26
    2ae8:	86 e0       	ldi	r24, 0x06	; 6
    2aea:	f1 50       	subi	r31, 0x01	; 1
    2aec:	20 40       	sbci	r18, 0x00	; 0
    2aee:	80 40       	sbci	r24, 0x00	; 0
    2af0:	e1 f7       	brne	.-8      	; 0x2aea <main+0x21e>
    2af2:	00 c0       	rjmp	.+0      	; 0x2af4 <main+0x228>
    2af4:	00 00       	nop
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2af6:	f7 01       	movw	r30, r14
    2af8:	96 82       	std	Z+6, r9	; 0x06
					ioport_set_pin_low(IOPORT_CREATE_PIN(PORTD, 1));
					break;
				default:
				break;
			}
			latest_gesture = NONE;
    2afa:	10 92 63 21 	sts	0x2163, r1
			//twinkle(0, 0, 0);
		}
		
		if (ischarging()) {
    2afe:	73 d9       	rcall	.-3354   	; 0x1de6 <ischarging>
    2b00:	88 23       	and	r24, r24
    2b02:	f1 f0       	breq	.+60     	; 0x2b40 <main+0x274>
			if (core_status != STATUS_CHARGE)
    2b04:	80 91 7f 21 	lds	r24, 0x217F
    2b08:	81 30       	cpi	r24, 0x01	; 1
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <main+0x242>
    2b0c:	6d cf       	rjmp	.-294    	; 0x29e8 <main+0x11c>
			{
				twinkle(0, 0, 255);
    2b0e:	4f ef       	ldi	r20, 0xFF	; 255
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	6e d9       	rcall	.-3364   	; 0x1df2 <twinkle>
				shutdown_received = false;
    2b16:	10 92 6f 21 	sts	0x216F, r1
				old_core_status = core_status;
    2b1a:	80 91 7f 21 	lds	r24, 0x217F
    2b1e:	80 93 7e 21 	sts	0x217E, r24
				core_status = STATUS_CHARGE;
    2b22:	b0 92 7f 21 	sts	0x217F, r11
				change_adc_channel(core_status);
    2b26:	80 91 7f 21 	lds	r24, 0x217F
    2b2a:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
				flag_initcharge = true;
    2b2e:	b0 92 75 21 	sts	0x2175, r11
				tc45_disable(&TCC4);
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	98 e0       	ldi	r25, 0x08	; 8
    2b36:	14 d5       	rcall	.+2600   	; 0x3560 <tc45_disable>
				tc45_enable(&TCC5);
    2b38:	80 e4       	ldi	r24, 0x40	; 64
    2b3a:	98 e0       	ldi	r25, 0x08	; 8
    2b3c:	df d4       	rcall	.+2494   	; 0x34fc <tc45_enable>
    2b3e:	54 cf       	rjmp	.-344    	; 0x29e8 <main+0x11c>
			}
		}
		else {
			if (core_status == STATUS_CHARGE) {
    2b40:	80 91 7f 21 	lds	r24, 0x217F
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	89 f4       	brne	.+34     	; 0x2b6a <main+0x29e>
				old_core_status = core_status;
    2b48:	80 91 7f 21 	lds	r24, 0x217F
    2b4c:	80 93 7e 21 	sts	0x217E, r24
				core_status = STATUS_BATT_READ;
    2b50:	60 92 7f 21 	sts	0x217F, r6
				change_adc_channel(core_status);
    2b54:	80 91 7f 21 	lds	r24, 0x217F
    2b58:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
				tc45_disable(&TCC5);
    2b5c:	80 e4       	ldi	r24, 0x40	; 64
    2b5e:	98 e0       	ldi	r25, 0x08	; 8
    2b60:	ff d4       	rcall	.+2558   	; 0x3560 <tc45_disable>
				tc45_enable(&TCC4);
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	98 e0       	ldi	r25, 0x08	; 8
    2b66:	ca d4       	rcall	.+2452   	; 0x34fc <tc45_enable>
				load_data_color_led();
    2b68:	99 d9       	rcall	.-3278   	; 0x1e9c <load_data_color_led>
			}
			
			if (get_pulse_state() && core_status != STATUS_FFT_L && core_status != STATUS_FFT_R) {
    2b6a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <get_pulse_state>
    2b6e:	88 23       	and	r24, r24
    2b70:	51 f0       	breq	.+20     	; 0x2b86 <main+0x2ba>
    2b72:	80 91 7f 21 	lds	r24, 0x217F
    2b76:	82 30       	cpi	r24, 0x02	; 2
    2b78:	31 f0       	breq	.+12     	; 0x2b86 <main+0x2ba>
    2b7a:	80 91 7f 21 	lds	r24, 0x217F
    2b7e:	84 30       	cpi	r24, 0x04	; 4
    2b80:	11 f0       	breq	.+4      	; 0x2b86 <main+0x2ba>
				trigger_pulse_state_changed();
    2b82:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <trigger_pulse_state_changed>
			}
			
			if (shutdown_received) {
    2b86:	80 91 6f 21 	lds	r24, 0x216F
    2b8a:	88 23       	and	r24, r24
    2b8c:	79 f0       	breq	.+30     	; 0x2bac <main+0x2e0>
				old_core_status = core_status;
    2b8e:	80 91 7f 21 	lds	r24, 0x217F
    2b92:	80 93 7e 21 	sts	0x217E, r24
				core_status = STATUS_NULL;
    2b96:	10 92 7f 21 	sts	0x217F, r1
				tc45_disable(&TCC4);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	98 e0       	ldi	r25, 0x08	; 8
    2b9e:	e0 d4       	rcall	.+2496   	; 0x3560 <tc45_disable>
				save_led_to_eeprom();
    2ba0:	0f dd       	rcall	.-1506   	; 0x25c0 <save_led_to_eeprom>
				twinkle(0, 0, 0);
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
    2ba8:	24 d9       	rcall	.-3512   	; 0x1df2 <twinkle>
    2baa:	1e cf       	rjmp	.-452    	; 0x29e8 <main+0x11c>
			}
			else if (get_and_clear_pulse_state_changed()) {
    2bac:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <get_and_clear_pulse_state_changed>
    2bb0:	88 23       	and	r24, r24
    2bb2:	59 f1       	breq	.+86     	; 0x2c0a <main+0x33e>
				if (get_pulse_state()) {
    2bb4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <get_pulse_state>
    2bb8:	88 23       	and	r24, r24
    2bba:	a1 f0       	breq	.+40     	; 0x2be4 <main+0x318>
					// If new message is to turn on visualization and if it is already on then ignore it
					
					// Initialize the ADC by changing to correct channel
					fht_flag = true;
    2bbc:	b0 92 82 21 	sts	0x2182, r11
					
					old_core_status = core_status;
    2bc0:	80 91 7f 21 	lds	r24, 0x217F
    2bc4:	80 93 7e 21 	sts	0x217E, r24
					core_status = STATUS_FFT_L;
    2bc8:	90 92 7f 21 	sts	0x217F, r9
					change_adc_channel(core_status);
    2bcc:	80 91 7f 21 	lds	r24, 0x217F
    2bd0:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
					// Switch on visualization interrupt
					tc45_enable(&TCC4);
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	98 e0       	ldi	r25, 0x08	; 8
    2bd8:	91 d4       	rcall	.+2338   	; 0x34fc <tc45_enable>
					// save state to CSR- the fact that visualization is on
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x01);
    2bda:	6b 2d       	mov	r22, r11
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_byte_eeprom>
    2be2:	02 cf       	rjmp	.-508    	; 0x29e8 <main+0x11c>
					// respond to CSR
					//send_response(new_message_ID, 0x01);
				}
				else {
					fht_flag = false;
    2be4:	10 92 82 21 	sts	0x2182, r1
					old_core_status = core_status;
    2be8:	80 91 7f 21 	lds	r24, 0x217F
    2bec:	80 93 7e 21 	sts	0x217E, r24
					core_status = STATUS_BATT_READ;
    2bf0:	60 92 7f 21 	sts	0x217F, r6
					change_adc_channel(core_status);
    2bf4:	80 91 7f 21 	lds	r24, 0x217F
    2bf8:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
					clear_led();
    2bfc:	3a d9       	rcall	.-3468   	; 0x1e72 <clear_led>
					// save the state to eeprom (Clear visualization was on)
					write_byte_eeprom(VISUALIZATION_STATE_BYTE, 0x00);
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	0e 94 bb 0a 	call	0x1576	; 0x1576 <write_byte_eeprom>
					// Update LED from led_color_buf_data to last saved state
					load_data_color_led();
    2c06:	4a d9       	rcall	.-3436   	; 0x1e9c <load_data_color_led>
    2c08:	ef ce       	rjmp	.-546    	; 0x29e8 <main+0x11c>
					//send_response(new_message_ID, 0x01);
				}
			}
			else {
				// if the fht led function was turned on
				if (fht_flag == true)
    2c0a:	80 91 82 21 	lds	r24, 0x2182
    2c0e:	81 30       	cpi	r24, 0x01	; 1
    2c10:	09 f0       	breq	.+2      	; 0x2c14 <main+0x348>
    2c12:	ea ce       	rjmp	.-556    	; 0x29e8 <main+0x11c>
				{
					if (flag_fft == true)
    2c14:	80 91 3e 21 	lds	r24, 0x213E
    2c18:	88 23       	and	r24, r24
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <main+0x352>
    2c1c:	e5 ce       	rjmp	.-566    	; 0x29e8 <main+0x11c>
					{
						
						if (core_status == STATUS_FFT_L)
    2c1e:	80 91 7f 21 	lds	r24, 0x217F
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	81 f4       	brne	.+32     	; 0x2c46 <main+0x37a>
						{
							//	usart_putchar(M_USART, 0x55);

							run();
    2c26:	0e 94 37 08 	call	0x106e	; 0x106e <run>
							old_core_status = core_status;
    2c2a:	80 91 7f 21 	lds	r24, 0x217F
    2c2e:	80 93 7e 21 	sts	0x217E, r24
							core_status = STATUS_FFT_R;
    2c32:	50 92 7f 21 	sts	0x217F, r5
							change_adc_channel(core_status);
    2c36:	80 91 7f 21 	lds	r24, 0x217F
    2c3a:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
							tc45_enable(&TCC4);
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	98 e0       	ldi	r25, 0x08	; 8
    2c42:	5c d4       	rcall	.+2232   	; 0x34fc <tc45_enable>
    2c44:	29 c0       	rjmp	.+82     	; 0x2c98 <main+0x3cc>
						}
						else if (core_status == STATUS_FFT_R)
    2c46:	80 91 7f 21 	lds	r24, 0x217F
    2c4a:	84 30       	cpi	r24, 0x04	; 4
    2c4c:	29 f5       	brne	.+74     	; 0x2c98 <main+0x3cc>
						{
							//	usart_putchar(M_USART, 0x66);

							run();
    2c4e:	0e 94 37 08 	call	0x106e	; 0x106e <run>
							if (ischarging())
    2c52:	c9 d8       	rcall	.-3694   	; 0x1de6 <ischarging>
    2c54:	88 23       	and	r24, r24
    2c56:	99 f0       	breq	.+38     	; 0x2c7e <main+0x3b2>
							{
								old_core_status = core_status;
    2c58:	80 91 7f 21 	lds	r24, 0x217F
    2c5c:	80 93 7e 21 	sts	0x217E, r24
								core_status = STATUS_CHARGE;
    2c60:	b0 92 7f 21 	sts	0x217F, r11
								change_adc_channel(core_status);
    2c64:	80 91 7f 21 	lds	r24, 0x217F
    2c68:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
								flag_initcharge = true;
    2c6c:	b0 92 75 21 	sts	0x2175, r11
								tc45_disable(&TCC4);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	98 e0       	ldi	r25, 0x08	; 8
    2c74:	75 d4       	rcall	.+2282   	; 0x3560 <tc45_disable>
								tc45_enable(&TCC5);
    2c76:	80 e4       	ldi	r24, 0x40	; 64
    2c78:	98 e0       	ldi	r25, 0x08	; 8
    2c7a:	40 d4       	rcall	.+2176   	; 0x34fc <tc45_enable>
    2c7c:	0d c0       	rjmp	.+26     	; 0x2c98 <main+0x3cc>
							}
							else
							{
								old_core_status = core_status;
    2c7e:	80 91 7f 21 	lds	r24, 0x217F
    2c82:	80 93 7e 21 	sts	0x217E, r24
								core_status = STATUS_FFT_L;
    2c86:	90 92 7f 21 	sts	0x217F, r9
								change_adc_channel(core_status);
    2c8a:	80 91 7f 21 	lds	r24, 0x217F
    2c8e:	0e 94 6d 04 	call	0x8da	; 0x8da <change_adc_channel>
								tc45_enable(&TCC4);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	98 e0       	ldi	r25, 0x08	; 8
    2c96:	32 d4       	rcall	.+2148   	; 0x34fc <tc45_enable>
							}
							
						}
						
						flag_fft = false;
    2c98:	10 92 3e 21 	sts	0x213E, r1
    2c9c:	a5 ce       	rjmp	.-694    	; 0x29e8 <main+0x11c>

00002c9e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2c9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ca0:	80 93 70 00 	sts	0x0070, r24
    2ca4:	80 93 71 00 	sts	0x0071, r24
    2ca8:	80 93 72 00 	sts	0x0072, r24
    2cac:	80 93 73 00 	sts	0x0073, r24
    2cb0:	80 93 74 00 	sts	0x0074, r24
    2cb4:	80 93 75 00 	sts	0x0075, r24
    2cb8:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2cbc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2cbe:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2cc0:	e0 e5       	ldi	r30, 0x50	; 80
    2cc2:	f0 e0       	ldi	r31, 0x00	; 0
    2cc4:	90 81       	ld	r25, Z
    2cc6:	92 60       	ori	r25, 0x02	; 2
    2cc8:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2cca:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2ccc:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2cce:	81 ff       	sbrs	r24, 1
    2cd0:	fd cf       	rjmp	.-6      	; 0x2ccc <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	80 e4       	ldi	r24, 0x40	; 64
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	79 d1       	rcall	.+754    	; 0x2fcc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2cda:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2cdc:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2cde:	e0 e5       	ldi	r30, 0x50	; 80
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	90 81       	ld	r25, Z
    2ce4:	9e 7f       	andi	r25, 0xFE	; 254
    2ce6:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ce8:	8f bf       	out	0x3f, r24	; 63
    2cea:	08 95       	ret

00002cec <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2cec:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2cee:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2cf0:	e8 2f       	mov	r30, r24
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	e0 59       	subi	r30, 0x90	; 144
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 95       	com	r22
    2cfa:	80 81       	ld	r24, Z
    2cfc:	68 23       	and	r22, r24
    2cfe:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d00:	9f bf       	out	0x3f, r25	; 63
    2d02:	08 95       	ret

00002d04 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d04:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    2d06:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    2d08:	e8 2f       	mov	r30, r24
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	e0 59       	subi	r30, 0x90	; 144
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	68 2b       	or	r22, r24
    2d14:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d16:	9f bf       	out	0x3f, r25	; 63
    2d18:	08 95       	ret

00002d1a <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	fc 01       	movw	r30, r24
    2d20:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2d26:	c6 2f       	mov	r28, r22
    2d28:	d0 e0       	ldi	r29, 0x00	; 0
    2d2a:	de 01       	movw	r26, r28
    2d2c:	02 2e       	mov	r0, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <ioport_configure_port_pin+0x1a>
    2d30:	b5 95       	asr	r27
    2d32:	a7 95       	ror	r26
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <ioport_configure_port_pin+0x16>
    2d38:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2d3a:	50 83       	st	Z, r21
    2d3c:	2f 5f       	subi	r18, 0xFF	; 255
    2d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d40:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2d42:	28 30       	cpi	r18, 0x08	; 8
    2d44:	31 05       	cpc	r19, r1
    2d46:	89 f7       	brne	.-30     	; 0x2d2a <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2d48:	40 ff       	sbrs	r20, 0
    2d4a:	0a c0       	rjmp	.+20     	; 0x2d60 <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2d4c:	41 ff       	sbrs	r20, 1
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2d50:	fc 01       	movw	r30, r24
    2d52:	65 83       	std	Z+5, r22	; 0x05
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2d56:	fc 01       	movw	r30, r24
    2d58:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	61 83       	std	Z+1, r22	; 0x01
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    2d60:	fc 01       	movw	r30, r24
    2d62:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2d6a:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    2d6c:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2d6e:	81 15       	cp	r24, r1
    2d70:	92 40       	sbci	r25, 0x02	; 2
    2d72:	21 f4       	brne	.+8      	; 0x2d7c <adc_set_callback+0x12>
		adca_callback = callback;
    2d74:	60 93 eb 2a 	sts	0x2AEB, r22
    2d78:	70 93 ec 2a 	sts	0x2AEC, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d7c:	2f bf       	out	0x3f, r18	; 63
    2d7e:	08 95       	ret

00002d80 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2d80:	81 15       	cp	r24, r1
    2d82:	92 40       	sbci	r25, 0x02	; 2
    2d84:	59 f4       	brne	.+22     	; 0x2d9c <adc_enable_clock+0x1c>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    2d86:	80 91 83 21 	lds	r24, 0x2183
    2d8a:	91 e0       	ldi	r25, 0x01	; 1
    2d8c:	98 0f       	add	r25, r24
    2d8e:	90 93 83 21 	sts	0x2183, r25
    2d92:	81 11       	cpse	r24, r1
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <adc_enable_clock+0x1c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	a8 cf       	rjmp	.-176    	; 0x2cec <sysclk_enable_module>
    2d9c:	08 95       	ret

00002d9e <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    2d9e:	81 15       	cp	r24, r1
    2da0:	92 40       	sbci	r25, 0x02	; 2
    2da2:	51 f4       	brne	.+20     	; 0x2db8 <adc_disable_clock+0x1a>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    2da4:	80 91 83 21 	lds	r24, 0x2183
    2da8:	81 50       	subi	r24, 0x01	; 1
    2daa:	80 93 83 21 	sts	0x2183, r24
    2dae:	81 11       	cpse	r24, r1
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <adc_disable_clock+0x1a>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2db2:	62 e0       	ldi	r22, 0x02	; 2
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	a6 cf       	rjmp	.-180    	; 0x2d04 <sysclk_disable_module>
    2db8:	08 95       	ret

00002dba <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    2dba:	1f 93       	push	r17
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2dc2:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    2dc4:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    2dc6:	dc df       	rcall	.-72     	; 0x2d80 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    2dc8:	88 81       	ld	r24, Y
    2dca:	81 60       	ori	r24, 0x01	; 1
    2dcc:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dce:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2dd0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2dd2:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    2dd4:	e6 ee       	ldi	r30, 0xE6	; 230
    2dd6:	fa e2       	ldi	r31, 0x2A	; 42
    2dd8:	90 81       	ld	r25, Z
    2dda:	9f 5f       	subi	r25, 0xFF	; 255
    2ddc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2dde:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    2de0:	df 91       	pop	r29
    2de2:	cf 91       	pop	r28
    2de4:	1f 91       	pop	r17
    2de6:	08 95       	ret

00002de8 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    2de8:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2dea:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    2dec:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    2dee:	fc 01       	movw	r30, r24
    2df0:	20 81       	ld	r18, Z
    2df2:	2e 7f       	andi	r18, 0xFE	; 254
    2df4:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    2df6:	d3 df       	rcall	.-90     	; 0x2d9e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2df8:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2dfa:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    2dfc:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    2dfe:	e6 ee       	ldi	r30, 0xE6	; 230
    2e00:	fa e2       	ldi	r31, 0x2A	; 42
    2e02:	90 81       	ld	r25, Z
    2e04:	91 50       	subi	r25, 0x01	; 1
    2e06:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2e08:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    2e0a:	cf 91       	pop	r28
    2e0c:	08 95       	ret

00002e0e <__vector_34>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2e0e:	1f 92       	push	r1
    2e10:	0f 92       	push	r0
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	0f 92       	push	r0
    2e16:	11 24       	eor	r1, r1
    2e18:	2f 93       	push	r18
    2e1a:	3f 93       	push	r19
    2e1c:	4f 93       	push	r20
    2e1e:	5f 93       	push	r21
    2e20:	6f 93       	push	r22
    2e22:	7f 93       	push	r23
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
    2e28:	af 93       	push	r26
    2e2a:	bf 93       	push	r27
    2e2c:	ef 93       	push	r30
    2e2e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2e30:	e0 e0       	ldi	r30, 0x00	; 0
    2e32:	f2 e0       	ldi	r31, 0x02	; 2
    2e34:	44 a1       	ldd	r20, Z+36	; 0x24
    2e36:	55 a1       	ldd	r21, Z+37	; 0x25
    2e38:	e0 91 eb 2a 	lds	r30, 0x2AEB
    2e3c:	f0 91 ec 2a 	lds	r31, 0x2AEC
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	09 95       	icall
}
    2e48:	ff 91       	pop	r31
    2e4a:	ef 91       	pop	r30
    2e4c:	bf 91       	pop	r27
    2e4e:	af 91       	pop	r26
    2e50:	9f 91       	pop	r25
    2e52:	8f 91       	pop	r24
    2e54:	7f 91       	pop	r23
    2e56:	6f 91       	pop	r22
    2e58:	5f 91       	pop	r21
    2e5a:	4f 91       	pop	r20
    2e5c:	3f 91       	pop	r19
    2e5e:	2f 91       	pop	r18
    2e60:	0f 90       	pop	r0
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	0f 90       	pop	r0
    2e66:	1f 90       	pop	r1
    2e68:	18 95       	reti

00002e6a <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    2e6a:	df 92       	push	r13
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
    2e7a:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    2e7c:	c1 15       	cp	r28, r1
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	d8 07       	cpc	r29, r24
    2e82:	51 f5       	brne	.+84     	; 0x2ed8 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2e84:	61 e2       	ldi	r22, 0x21	; 33
    2e86:	70 e0       	ldi	r23, 0x00	; 0
    2e88:	82 e0       	ldi	r24, 0x02	; 2
    2e8a:	f0 d0       	rcall	.+480    	; 0x306c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2e8c:	e8 2e       	mov	r14, r24
    2e8e:	f1 2c       	mov	r15, r1
    2e90:	60 e2       	ldi	r22, 0x20	; 32
    2e92:	70 e0       	ldi	r23, 0x00	; 0
    2e94:	82 e0       	ldi	r24, 0x02	; 2
    2e96:	ea d0       	rcall	.+468    	; 0x306c <nvm_read_byte>
		data <<= 8;
    2e98:	fe 2c       	mov	r15, r14
    2e9a:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    2e9c:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2e9e:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    2ea0:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    2ea2:	ce 01       	movw	r24, r28
    2ea4:	6d df       	rcall	.-294    	; 0x2d80 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    2ea6:	28 81       	ld	r18, Y
    2ea8:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	88 83       	st	Y, r24
	adc->CAL = cal;
    2eae:	ec 86       	std	Y+12, r14	; 0x0c
    2eb0:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	84 81       	ldd	r24, Z+4	; 0x04
    2eb6:	95 81       	ldd	r25, Z+5	; 0x05
    2eb8:	88 8f       	std	Y+24, r24	; 0x18
    2eba:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    2ebc:	81 81       	ldd	r24, Z+1	; 0x01
    2ebe:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    2ec0:	83 81       	ldd	r24, Z+3	; 0x03
    2ec2:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    2ec8:	80 81       	ld	r24, Z
    2eca:	89 83       	std	Y+1, r24	; 0x01
	adc->SAMPCTRL = conf->sampctrl;
    2ecc:	86 81       	ldd	r24, Z+6	; 0x06
    2ece:	88 87       	std	Y+8, r24	; 0x08

	adc->CTRLA = enable;
    2ed0:	28 83       	st	Y, r18

	adc_disable_clock(adc);
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	64 df       	rcall	.-312    	; 0x2d9e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2ed6:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    2ed8:	df 91       	pop	r29
    2eda:	cf 91       	pop	r28
    2edc:	1f 91       	pop	r17
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	df 90       	pop	r13
    2ee6:	08 95       	ret

00002ee8 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    2ee8:	ff 92       	push	r15
    2eea:	0f 93       	push	r16
    2eec:	1f 93       	push	r17
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	ec 01       	movw	r28, r24
    2ef4:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2ef6:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2ef8:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    2efa:	42 df       	rcall	.-380    	; 0x2d80 <adc_enable_clock>

	conf->cmp = adc->CMP;
    2efc:	88 8d       	ldd	r24, Y+24	; 0x18
    2efe:	99 8d       	ldd	r25, Y+25	; 0x19
    2f00:	f8 01       	movw	r30, r16
    2f02:	84 83       	std	Z+4, r24	; 0x04
    2f04:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    2f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0c:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	80 83       	st	Z, r24
	conf->sampctrl = adc->SAMPCTRL;
    2f16:	88 85       	ldd	r24, Y+8	; 0x08
    2f18:	86 83       	std	Z+6, r24	; 0x06

	adc_disable_clock(adc);
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	40 df       	rcall	.-384    	; 0x2d9e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f1e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2f20:	df 91       	pop	r29
    2f22:	cf 91       	pop	r28
    2f24:	1f 91       	pop	r17
    2f26:	0f 91       	pop	r16
    2f28:	ff 90       	pop	r15
    2f2a:	08 95       	ret

00002f2c <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    2f2c:	ff 92       	push	r15
    2f2e:	0f 93       	push	r16
    2f30:	1f 93       	push	r17
    2f32:	cf 93       	push	r28
    2f34:	df 93       	push	r29
    2f36:	ec 01       	movw	r28, r24
    2f38:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f3a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2f3c:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    2f3e:	20 df       	rcall	.-448    	; 0x2d80 <adc_enable_clock>

	adc_ch->CTRL = ch_conf->ctrl;
    2f40:	f8 01       	movw	r30, r16
    2f42:	80 81       	ld	r24, Z
    2f44:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    2f4a:	81 81       	ldd	r24, Z+1	; 0x01
    2f4c:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    2f4e:	83 81       	ldd	r24, Z+3	; 0x03
    2f50:	8e a3       	std	Y+38, r24	; 0x26
	adc_ch->CORRCTRL = ch_conf->corrctrl;
    2f52:	84 81       	ldd	r24, Z+4	; 0x04
    2f54:	8f a3       	std	Y+39, r24	; 0x27
	adc_ch->OFFSETCORR0 = ch_conf->offsetcorr0;
    2f56:	85 81       	ldd	r24, Z+5	; 0x05
    2f58:	88 a7       	std	Y+40, r24	; 0x28
	adc_ch->OFFSETCORR1 = ch_conf->offsetcorr1;
    2f5a:	86 81       	ldd	r24, Z+6	; 0x06
    2f5c:	89 a7       	std	Y+41, r24	; 0x29
	adc_ch->GAINCORR0 = ch_conf->gaincorr0;
    2f5e:	87 81       	ldd	r24, Z+7	; 0x07
    2f60:	8a a7       	std	Y+42, r24	; 0x2a
	adc_ch->GAINCORR1 = ch_conf->gaincorr1;
    2f62:	80 85       	ldd	r24, Z+8	; 0x08
    2f64:	8b a7       	std	Y+43, r24	; 0x2b
	adc_ch->AVGCTRL = ch_conf->avgctrl;
    2f66:	81 85       	ldd	r24, Z+9	; 0x09
    2f68:	8c a7       	std	Y+44, r24	; 0x2c

	adc_disable_clock(adc);
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	18 df       	rcall	.-464    	; 0x2d9e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2f6e:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2f70:	df 91       	pop	r29
    2f72:	cf 91       	pop	r28
    2f74:	1f 91       	pop	r17
    2f76:	0f 91       	pop	r16
    2f78:	ff 90       	pop	r15
    2f7a:	08 95       	ret

00002f7c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    2f7c:	ff 92       	push	r15
    2f7e:	0f 93       	push	r16
    2f80:	1f 93       	push	r17
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
    2f88:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    2f8a:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    2f8c:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    2f8e:	f8 de       	rcall	.-528    	; 0x2d80 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    2f90:	88 a1       	ldd	r24, Y+32	; 0x20
    2f92:	f8 01       	movw	r30, r16
    2f94:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    2f96:	8a a1       	ldd	r24, Y+34	; 0x22
    2f98:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    2f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f9c:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    2f9e:	8e a1       	ldd	r24, Y+38	; 0x26
    2fa0:	83 83       	std	Z+3, r24	; 0x03
	ch_conf->corrctrl = adc_ch->CORRCTRL;
    2fa2:	8f a1       	ldd	r24, Y+39	; 0x27
    2fa4:	84 83       	std	Z+4, r24	; 0x04
	ch_conf->offsetcorr0 = adc_ch->OFFSETCORR0;
    2fa6:	88 a5       	ldd	r24, Y+40	; 0x28
    2fa8:	85 83       	std	Z+5, r24	; 0x05
	ch_conf->offsetcorr1 = adc_ch->OFFSETCORR1;
    2faa:	89 a5       	ldd	r24, Y+41	; 0x29
    2fac:	86 83       	std	Z+6, r24	; 0x06
	ch_conf->gaincorr0 = adc_ch->GAINCORR0;
    2fae:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fb0:	87 83       	std	Z+7, r24	; 0x07
	ch_conf->gaincorr1 = adc_ch->GAINCORR1;
    2fb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb4:	80 87       	std	Z+8, r24	; 0x08
	ch_conf->avgctrl = adc_ch->AVGCTRL;
    2fb6:	8c a5       	ldd	r24, Y+44	; 0x2c
    2fb8:	81 87       	std	Z+9, r24	; 0x09
	adc_disable_clock(adc);
    2fba:	ce 01       	movw	r24, r28
    2fbc:	f0 de       	rcall	.-544    	; 0x2d9e <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2fbe:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	08 95       	ret

00002fcc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2fcc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    2fce:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2fd0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2fd2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2fd4:	60 83       	st	Z, r22
	ret                             // Return to caller
    2fd6:	08 95       	ret

00002fd8 <nvm_eeprom_read_byte>:
 */
void nvm_eeprom_read_buffer(eeprom_addr_t address, void *buf, uint16_t len)
{
	nvm_wait_until_ready();
	eeprom_enable_mapping();
	memcpy( buf,(void*)(address+MAPPED_EEPROM_START), len );
    2fd8:	e0 ec       	ldi	r30, 0xC0	; 192
    2fda:	f1 e0       	ldi	r31, 0x01	; 1
    2fdc:	27 85       	ldd	r18, Z+15	; 0x0f
    2fde:	22 23       	and	r18, r18
    2fe0:	ec f3       	brlt	.-6      	; 0x2fdc <nvm_eeprom_read_byte+0x4>
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	f0 5f       	subi	r31, 0xF0	; 240
    2fe6:	80 81       	ld	r24, Z
    2fe8:	08 95       	ret

00002fea <nvm_eeprom_flush_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2fea:	e0 ec       	ldi	r30, 0xC0	; 192
    2fec:	f1 e0       	ldi	r31, 0x01	; 1
    2fee:	87 85       	ldd	r24, Z+15	; 0x0f
    2ff0:	88 23       	and	r24, r24
    2ff2:	ec f3       	brlt	.-6      	; 0x2fee <nvm_eeprom_flush_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	// Flush EEPROM page buffer if necessary
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    2ff4:	e0 ec       	ldi	r30, 0xC0	; 192
    2ff6:	f1 e0       	ldi	r31, 0x01	; 1
    2ff8:	87 85       	ldd	r24, Z+15	; 0x0f
    2ffa:	81 ff       	sbrs	r24, 1
    2ffc:	06 c0       	rjmp	.+12     	; 0x300a <__stack+0xb>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    2ffe:	86 e3       	ldi	r24, 0x36	; 54
    3000:	82 87       	std	Z+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3002:	61 e0       	ldi	r22, 0x01	; 1
    3004:	8b ec       	ldi	r24, 0xCB	; 203
    3006:	91 e0       	ldi	r25, 0x01	; 1
    3008:	e1 cf       	rjmp	.-62     	; 0x2fcc <ccp_write_io>
    300a:	08 95       	ret

0000300c <nvm_eeprom_load_byte_to_buffer>:
 */
static inline void nvm_wait_until_ready( void )
{
	do {
		// Block execution while waiting for the NVM to be ready
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    300c:	e0 ec       	ldi	r30, 0xC0	; 192
    300e:	f1 e0       	ldi	r31, 0x01	; 1
    3010:	97 85       	ldd	r25, Z+15	; 0x0f
    3012:	99 23       	and	r25, r25
    3014:	ec f3       	brlt	.-6      	; 0x3010 <nvm_eeprom_load_byte_to_buffer+0x4>
{
	// Wait until NVM is ready
	nvm_wait_until_ready();

	eeprom_enable_mapping();
	*(uint8_t*)(byte_addr + MAPPED_EEPROM_START) = value;
    3016:	e8 2f       	mov	r30, r24
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	f0 5f       	subi	r31, 0xF0	; 240
    301c:	60 83       	st	Z, r22
    301e:	08 95       	ret

00003020 <nvm_eeprom_write_byte>:
 *
 * \param  address    EEPROM address (max EEPROM_SIZE)
 * \param  value      Byte value to write to EEPROM.
 */
void nvm_eeprom_write_byte(eeprom_addr_t address, uint8_t value)
{
    3020:	ff 92       	push	r15
    3022:	0f 93       	push	r16
    3024:	1f 93       	push	r17
    3026:	cf 93       	push	r28
    3028:	df 93       	push	r29
    302a:	18 2f       	mov	r17, r24
    302c:	f9 2e       	mov	r15, r25
    302e:	c6 2f       	mov	r28, r22

	Assert(address <= EEPROM_SIZE);
	/*  Flush buffer to make sure no unintentional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	old_cmd = NVM.CMD;
    3030:	e0 ec       	ldi	r30, 0xC0	; 192
    3032:	f1 e0       	ldi	r31, 0x01	; 1
    3034:	02 85       	ldd	r16, Z+10	; 0x0a
	nvm_eeprom_flush_buffer();
    3036:	d9 df       	rcall	.-78     	; 0x2fea <nvm_eeprom_flush_buffer>
    3038:	e0 ec       	ldi	r30, 0xC0	; 192
    303a:	f1 e0       	ldi	r31, 0x01	; 1
    303c:	27 85       	ldd	r18, Z+15	; 0x0f
    303e:	22 23       	and	r18, r18
    3040:	ec f3       	brlt	.-6      	; 0x303c <nvm_eeprom_write_byte+0x1c>
	// Wait until NVM is ready
	nvm_wait_until_ready();
	nvm_eeprom_load_byte_to_buffer(address, value);
    3042:	6c 2f       	mov	r22, r28
    3044:	81 2f       	mov	r24, r17
    3046:	e2 df       	rcall	.-60     	; 0x300c <nvm_eeprom_load_byte_to_buffer>

	// Set address to write to
	NVM.ADDR2 = 0x00;
    3048:	c0 ec       	ldi	r28, 0xC0	; 192
    304a:	d1 e0       	ldi	r29, 0x01	; 1
    304c:	1a 82       	std	Y+2, r1	; 0x02
	NVM.ADDR1 = (address >> 8) & 0xFF;
    304e:	f9 82       	std	Y+1, r15	; 0x01
	NVM.ADDR0 = address & 0xFF;
    3050:	18 83       	st	Y, r17

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3052:	85 e3       	ldi	r24, 0x35	; 53
    3054:	8a 87       	std	Y+10, r24	; 0x0a
 * \note The correct NVM command must be set in the NVM.CMD register before
 *       calling this function.
 */
static inline void nvm_exec(void)
{
	ccp_write_io((uint8_t *)&NVM.CTRLA, NVM_CMDEX_bm);
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	8b ec       	ldi	r24, 0xCB	; 203
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	b7 df       	rcall	.-146    	; 0x2fcc <ccp_write_io>
	nvm_exec();
	NVM.CMD = old_cmd;
    305e:	0a 87       	std	Y+10, r16	; 0x0a
}
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	ff 90       	pop	r15
    306a:	08 95       	ret

0000306c <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    306c:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    3070:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    3072:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    3074:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    3078:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    307a:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    307e:	08 95       	ret

00003080 <__vector_12>:
 *
 * This function will handle interrupt on Timer Counter C4 overflow and
 * call the callback function.
 */
ISR(TCC4_OVF_vect)
{
    3080:	1f 92       	push	r1
    3082:	0f 92       	push	r0
    3084:	0f b6       	in	r0, 0x3f	; 63
    3086:	0f 92       	push	r0
    3088:	11 24       	eor	r1, r1
    308a:	2f 93       	push	r18
    308c:	3f 93       	push	r19
    308e:	4f 93       	push	r20
    3090:	5f 93       	push	r21
    3092:	6f 93       	push	r22
    3094:	7f 93       	push	r23
    3096:	8f 93       	push	r24
    3098:	9f 93       	push	r25
    309a:	af 93       	push	r26
    309c:	bf 93       	push	r27
    309e:	ef 93       	push	r30
    30a0:	ff 93       	push	r31
	if (tc45_tcc4_ovf_callback) {
    30a2:	e0 91 9e 21 	lds	r30, 0x219E
    30a6:	f0 91 9f 21 	lds	r31, 0x219F
    30aa:	30 97       	sbiw	r30, 0x00	; 0
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <__vector_12+0x30>
		tc45_tcc4_ovf_callback();
    30ae:	09 95       	icall
	}
}
    30b0:	ff 91       	pop	r31
    30b2:	ef 91       	pop	r30
    30b4:	bf 91       	pop	r27
    30b6:	af 91       	pop	r26
    30b8:	9f 91       	pop	r25
    30ba:	8f 91       	pop	r24
    30bc:	7f 91       	pop	r23
    30be:	6f 91       	pop	r22
    30c0:	5f 91       	pop	r21
    30c2:	4f 91       	pop	r20
    30c4:	3f 91       	pop	r19
    30c6:	2f 91       	pop	r18
    30c8:	0f 90       	pop	r0
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	0f 90       	pop	r0
    30ce:	1f 90       	pop	r1
    30d0:	18 95       	reti

000030d2 <__vector_13>:
 *
 * This function will handle interrupt on Timer Counter C4 error and
 * call the callback function.
 */
ISR(TCC4_ERR_vect)
{
    30d2:	1f 92       	push	r1
    30d4:	0f 92       	push	r0
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	0f 92       	push	r0
    30da:	11 24       	eor	r1, r1
    30dc:	2f 93       	push	r18
    30de:	3f 93       	push	r19
    30e0:	4f 93       	push	r20
    30e2:	5f 93       	push	r21
    30e4:	6f 93       	push	r22
    30e6:	7f 93       	push	r23
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	af 93       	push	r26
    30ee:	bf 93       	push	r27
    30f0:	ef 93       	push	r30
    30f2:	ff 93       	push	r31
	if (tc45_tcc4_err_callback) {
    30f4:	e0 91 9c 21 	lds	r30, 0x219C
    30f8:	f0 91 9d 21 	lds	r31, 0x219D
    30fc:	30 97       	sbiw	r30, 0x00	; 0
    30fe:	09 f0       	breq	.+2      	; 0x3102 <__vector_13+0x30>
		tc45_tcc4_err_callback();
    3100:	09 95       	icall
	}
}
    3102:	ff 91       	pop	r31
    3104:	ef 91       	pop	r30
    3106:	bf 91       	pop	r27
    3108:	af 91       	pop	r26
    310a:	9f 91       	pop	r25
    310c:	8f 91       	pop	r24
    310e:	7f 91       	pop	r23
    3110:	6f 91       	pop	r22
    3112:	5f 91       	pop	r21
    3114:	4f 91       	pop	r20
    3116:	3f 91       	pop	r19
    3118:	2f 91       	pop	r18
    311a:	0f 90       	pop	r0
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	0f 90       	pop	r0
    3120:	1f 90       	pop	r1
    3122:	18 95       	reti

00003124 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC4_CCA_vect)
{
    3124:	1f 92       	push	r1
    3126:	0f 92       	push	r0
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	0f 92       	push	r0
    312c:	11 24       	eor	r1, r1
    312e:	2f 93       	push	r18
    3130:	3f 93       	push	r19
    3132:	4f 93       	push	r20
    3134:	5f 93       	push	r21
    3136:	6f 93       	push	r22
    3138:	7f 93       	push	r23
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	af 93       	push	r26
    3140:	bf 93       	push	r27
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
	if (tc45_tcc4_cca_callback) {
    3146:	e0 91 9a 21 	lds	r30, 0x219A
    314a:	f0 91 9b 21 	lds	r31, 0x219B
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	09 f0       	breq	.+2      	; 0x3154 <__vector_14+0x30>
		tc45_tcc4_cca_callback();
    3152:	09 95       	icall
	}
}
    3154:	ff 91       	pop	r31
    3156:	ef 91       	pop	r30
    3158:	bf 91       	pop	r27
    315a:	af 91       	pop	r26
    315c:	9f 91       	pop	r25
    315e:	8f 91       	pop	r24
    3160:	7f 91       	pop	r23
    3162:	6f 91       	pop	r22
    3164:	5f 91       	pop	r21
    3166:	4f 91       	pop	r20
    3168:	3f 91       	pop	r19
    316a:	2f 91       	pop	r18
    316c:	0f 90       	pop	r0
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	0f 90       	pop	r0
    3172:	1f 90       	pop	r1
    3174:	18 95       	reti

00003176 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC4_CCB_vect)
{
    3176:	1f 92       	push	r1
    3178:	0f 92       	push	r0
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	0f 92       	push	r0
    317e:	11 24       	eor	r1, r1
    3180:	2f 93       	push	r18
    3182:	3f 93       	push	r19
    3184:	4f 93       	push	r20
    3186:	5f 93       	push	r21
    3188:	6f 93       	push	r22
    318a:	7f 93       	push	r23
    318c:	8f 93       	push	r24
    318e:	9f 93       	push	r25
    3190:	af 93       	push	r26
    3192:	bf 93       	push	r27
    3194:	ef 93       	push	r30
    3196:	ff 93       	push	r31
	if (tc45_tcc4_ccb_callback) {
    3198:	e0 91 98 21 	lds	r30, 0x2198
    319c:	f0 91 99 21 	lds	r31, 0x2199
    31a0:	30 97       	sbiw	r30, 0x00	; 0
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <__vector_15+0x30>
		tc45_tcc4_ccb_callback();
    31a4:	09 95       	icall
	}
}
    31a6:	ff 91       	pop	r31
    31a8:	ef 91       	pop	r30
    31aa:	bf 91       	pop	r27
    31ac:	af 91       	pop	r26
    31ae:	9f 91       	pop	r25
    31b0:	8f 91       	pop	r24
    31b2:	7f 91       	pop	r23
    31b4:	6f 91       	pop	r22
    31b6:	5f 91       	pop	r21
    31b8:	4f 91       	pop	r20
    31ba:	3f 91       	pop	r19
    31bc:	2f 91       	pop	r18
    31be:	0f 90       	pop	r0
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	0f 90       	pop	r0
    31c4:	1f 90       	pop	r1
    31c6:	18 95       	reti

000031c8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC4_CCC_vect)
{
    31c8:	1f 92       	push	r1
    31ca:	0f 92       	push	r0
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	0f 92       	push	r0
    31d0:	11 24       	eor	r1, r1
    31d2:	2f 93       	push	r18
    31d4:	3f 93       	push	r19
    31d6:	4f 93       	push	r20
    31d8:	5f 93       	push	r21
    31da:	6f 93       	push	r22
    31dc:	7f 93       	push	r23
    31de:	8f 93       	push	r24
    31e0:	9f 93       	push	r25
    31e2:	af 93       	push	r26
    31e4:	bf 93       	push	r27
    31e6:	ef 93       	push	r30
    31e8:	ff 93       	push	r31
	if (tc45_tcc4_ccc_callback) {
    31ea:	e0 91 96 21 	lds	r30, 0x2196
    31ee:	f0 91 97 21 	lds	r31, 0x2197
    31f2:	30 97       	sbiw	r30, 0x00	; 0
    31f4:	09 f0       	breq	.+2      	; 0x31f8 <__vector_16+0x30>
		tc45_tcc4_ccc_callback();
    31f6:	09 95       	icall
	}
}
    31f8:	ff 91       	pop	r31
    31fa:	ef 91       	pop	r30
    31fc:	bf 91       	pop	r27
    31fe:	af 91       	pop	r26
    3200:	9f 91       	pop	r25
    3202:	8f 91       	pop	r24
    3204:	7f 91       	pop	r23
    3206:	6f 91       	pop	r22
    3208:	5f 91       	pop	r21
    320a:	4f 91       	pop	r20
    320c:	3f 91       	pop	r19
    320e:	2f 91       	pop	r18
    3210:	0f 90       	pop	r0
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	0f 90       	pop	r0
    3216:	1f 90       	pop	r1
    3218:	18 95       	reti

0000321a <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter C4 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC4_CCD_vect)
{
    321a:	1f 92       	push	r1
    321c:	0f 92       	push	r0
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	0f 92       	push	r0
    3222:	11 24       	eor	r1, r1
    3224:	2f 93       	push	r18
    3226:	3f 93       	push	r19
    3228:	4f 93       	push	r20
    322a:	5f 93       	push	r21
    322c:	6f 93       	push	r22
    322e:	7f 93       	push	r23
    3230:	8f 93       	push	r24
    3232:	9f 93       	push	r25
    3234:	af 93       	push	r26
    3236:	bf 93       	push	r27
    3238:	ef 93       	push	r30
    323a:	ff 93       	push	r31
	if (tc45_tcc4_ccd_callback) {
    323c:	e0 91 94 21 	lds	r30, 0x2194
    3240:	f0 91 95 21 	lds	r31, 0x2195
    3244:	30 97       	sbiw	r30, 0x00	; 0
    3246:	09 f0       	breq	.+2      	; 0x324a <__vector_17+0x30>
		tc45_tcc4_ccd_callback();
    3248:	09 95       	icall
	}
}
    324a:	ff 91       	pop	r31
    324c:	ef 91       	pop	r30
    324e:	bf 91       	pop	r27
    3250:	af 91       	pop	r26
    3252:	9f 91       	pop	r25
    3254:	8f 91       	pop	r24
    3256:	7f 91       	pop	r23
    3258:	6f 91       	pop	r22
    325a:	5f 91       	pop	r21
    325c:	4f 91       	pop	r20
    325e:	3f 91       	pop	r19
    3260:	2f 91       	pop	r18
    3262:	0f 90       	pop	r0
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	0f 90       	pop	r0
    3268:	1f 90       	pop	r1
    326a:	18 95       	reti

0000326c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter C5 overflow and
 * call the callback function.
 */
ISR(TCC5_OVF_vect)
{
    326c:	1f 92       	push	r1
    326e:	0f 92       	push	r0
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	0f 92       	push	r0
    3274:	11 24       	eor	r1, r1
    3276:	2f 93       	push	r18
    3278:	3f 93       	push	r19
    327a:	4f 93       	push	r20
    327c:	5f 93       	push	r21
    327e:	6f 93       	push	r22
    3280:	7f 93       	push	r23
    3282:	8f 93       	push	r24
    3284:	9f 93       	push	r25
    3286:	af 93       	push	r26
    3288:	bf 93       	push	r27
    328a:	ef 93       	push	r30
    328c:	ff 93       	push	r31
	if (tc45_tcc5_ovf_callback) {
    328e:	e0 91 92 21 	lds	r30, 0x2192
    3292:	f0 91 93 21 	lds	r31, 0x2193
    3296:	30 97       	sbiw	r30, 0x00	; 0
    3298:	09 f0       	breq	.+2      	; 0x329c <__vector_18+0x30>
		tc45_tcc5_ovf_callback();
    329a:	09 95       	icall
	}
}
    329c:	ff 91       	pop	r31
    329e:	ef 91       	pop	r30
    32a0:	bf 91       	pop	r27
    32a2:	af 91       	pop	r26
    32a4:	9f 91       	pop	r25
    32a6:	8f 91       	pop	r24
    32a8:	7f 91       	pop	r23
    32aa:	6f 91       	pop	r22
    32ac:	5f 91       	pop	r21
    32ae:	4f 91       	pop	r20
    32b0:	3f 91       	pop	r19
    32b2:	2f 91       	pop	r18
    32b4:	0f 90       	pop	r0
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	0f 90       	pop	r0
    32ba:	1f 90       	pop	r1
    32bc:	18 95       	reti

000032be <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter C5 error and
 * call the callback function.
 */
ISR(TCC5_ERR_vect)
{
    32be:	1f 92       	push	r1
    32c0:	0f 92       	push	r0
    32c2:	0f b6       	in	r0, 0x3f	; 63
    32c4:	0f 92       	push	r0
    32c6:	11 24       	eor	r1, r1
    32c8:	2f 93       	push	r18
    32ca:	3f 93       	push	r19
    32cc:	4f 93       	push	r20
    32ce:	5f 93       	push	r21
    32d0:	6f 93       	push	r22
    32d2:	7f 93       	push	r23
    32d4:	8f 93       	push	r24
    32d6:	9f 93       	push	r25
    32d8:	af 93       	push	r26
    32da:	bf 93       	push	r27
    32dc:	ef 93       	push	r30
    32de:	ff 93       	push	r31
	if (tc45_tcc5_err_callback) {
    32e0:	e0 91 90 21 	lds	r30, 0x2190
    32e4:	f0 91 91 21 	lds	r31, 0x2191
    32e8:	30 97       	sbiw	r30, 0x00	; 0
    32ea:	09 f0       	breq	.+2      	; 0x32ee <__vector_19+0x30>
		tc45_tcc5_err_callback();
    32ec:	09 95       	icall
	}
}
    32ee:	ff 91       	pop	r31
    32f0:	ef 91       	pop	r30
    32f2:	bf 91       	pop	r27
    32f4:	af 91       	pop	r26
    32f6:	9f 91       	pop	r25
    32f8:	8f 91       	pop	r24
    32fa:	7f 91       	pop	r23
    32fc:	6f 91       	pop	r22
    32fe:	5f 91       	pop	r21
    3300:	4f 91       	pop	r20
    3302:	3f 91       	pop	r19
    3304:	2f 91       	pop	r18
    3306:	0f 90       	pop	r0
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	0f 90       	pop	r0
    330c:	1f 90       	pop	r1
    330e:	18 95       	reti

00003310 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC5_CCA_vect)
{
    3310:	1f 92       	push	r1
    3312:	0f 92       	push	r0
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	0f 92       	push	r0
    3318:	11 24       	eor	r1, r1
    331a:	2f 93       	push	r18
    331c:	3f 93       	push	r19
    331e:	4f 93       	push	r20
    3320:	5f 93       	push	r21
    3322:	6f 93       	push	r22
    3324:	7f 93       	push	r23
    3326:	8f 93       	push	r24
    3328:	9f 93       	push	r25
    332a:	af 93       	push	r26
    332c:	bf 93       	push	r27
    332e:	ef 93       	push	r30
    3330:	ff 93       	push	r31
	if (tc45_tcc5_cca_callback) {
    3332:	e0 91 8e 21 	lds	r30, 0x218E
    3336:	f0 91 8f 21 	lds	r31, 0x218F
    333a:	30 97       	sbiw	r30, 0x00	; 0
    333c:	09 f0       	breq	.+2      	; 0x3340 <__vector_20+0x30>
		tc45_tcc5_cca_callback();
    333e:	09 95       	icall
	}
}
    3340:	ff 91       	pop	r31
    3342:	ef 91       	pop	r30
    3344:	bf 91       	pop	r27
    3346:	af 91       	pop	r26
    3348:	9f 91       	pop	r25
    334a:	8f 91       	pop	r24
    334c:	7f 91       	pop	r23
    334e:	6f 91       	pop	r22
    3350:	5f 91       	pop	r21
    3352:	4f 91       	pop	r20
    3354:	3f 91       	pop	r19
    3356:	2f 91       	pop	r18
    3358:	0f 90       	pop	r0
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	0f 90       	pop	r0
    335e:	1f 90       	pop	r1
    3360:	18 95       	reti

00003362 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC5_CCB_vect)
{
    3362:	1f 92       	push	r1
    3364:	0f 92       	push	r0
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	0f 92       	push	r0
    336a:	11 24       	eor	r1, r1
    336c:	2f 93       	push	r18
    336e:	3f 93       	push	r19
    3370:	4f 93       	push	r20
    3372:	5f 93       	push	r21
    3374:	6f 93       	push	r22
    3376:	7f 93       	push	r23
    3378:	8f 93       	push	r24
    337a:	9f 93       	push	r25
    337c:	af 93       	push	r26
    337e:	bf 93       	push	r27
    3380:	ef 93       	push	r30
    3382:	ff 93       	push	r31
	if (tc45_tcc5_ccb_callback) {
    3384:	e0 91 8c 21 	lds	r30, 0x218C
    3388:	f0 91 8d 21 	lds	r31, 0x218D
    338c:	30 97       	sbiw	r30, 0x00	; 0
    338e:	09 f0       	breq	.+2      	; 0x3392 <__vector_21+0x30>
		tc45_tcc5_ccb_callback();
    3390:	09 95       	icall
	}
}
    3392:	ff 91       	pop	r31
    3394:	ef 91       	pop	r30
    3396:	bf 91       	pop	r27
    3398:	af 91       	pop	r26
    339a:	9f 91       	pop	r25
    339c:	8f 91       	pop	r24
    339e:	7f 91       	pop	r23
    33a0:	6f 91       	pop	r22
    33a2:	5f 91       	pop	r21
    33a4:	4f 91       	pop	r20
    33a6:	3f 91       	pop	r19
    33a8:	2f 91       	pop	r18
    33aa:	0f 90       	pop	r0
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	0f 90       	pop	r0
    33b0:	1f 90       	pop	r1
    33b2:	18 95       	reti

000033b4 <__vector_36>:
 *
 * This function will handle interrupt on Timer Counter D5 overflow and
 * call the callback function.
 */
ISR(TCD5_OVF_vect)
{
    33b4:	1f 92       	push	r1
    33b6:	0f 92       	push	r0
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	0f 92       	push	r0
    33bc:	11 24       	eor	r1, r1
    33be:	2f 93       	push	r18
    33c0:	3f 93       	push	r19
    33c2:	4f 93       	push	r20
    33c4:	5f 93       	push	r21
    33c6:	6f 93       	push	r22
    33c8:	7f 93       	push	r23
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	af 93       	push	r26
    33d0:	bf 93       	push	r27
    33d2:	ef 93       	push	r30
    33d4:	ff 93       	push	r31
	if (tc45_tcd5_ovf_callback) {
    33d6:	e0 91 8a 21 	lds	r30, 0x218A
    33da:	f0 91 8b 21 	lds	r31, 0x218B
    33de:	30 97       	sbiw	r30, 0x00	; 0
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <__vector_36+0x30>
		tc45_tcd5_ovf_callback();
    33e2:	09 95       	icall
	}
}
    33e4:	ff 91       	pop	r31
    33e6:	ef 91       	pop	r30
    33e8:	bf 91       	pop	r27
    33ea:	af 91       	pop	r26
    33ec:	9f 91       	pop	r25
    33ee:	8f 91       	pop	r24
    33f0:	7f 91       	pop	r23
    33f2:	6f 91       	pop	r22
    33f4:	5f 91       	pop	r21
    33f6:	4f 91       	pop	r20
    33f8:	3f 91       	pop	r19
    33fa:	2f 91       	pop	r18
    33fc:	0f 90       	pop	r0
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	0f 90       	pop	r0
    3402:	1f 90       	pop	r1
    3404:	18 95       	reti

00003406 <__vector_37>:
 *
 * This function will handle interrupt on Timer Counter D5 error and
 * call the callback function.
 */
ISR(TCD5_ERR_vect)
{
    3406:	1f 92       	push	r1
    3408:	0f 92       	push	r0
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	0f 92       	push	r0
    340e:	11 24       	eor	r1, r1
    3410:	2f 93       	push	r18
    3412:	3f 93       	push	r19
    3414:	4f 93       	push	r20
    3416:	5f 93       	push	r21
    3418:	6f 93       	push	r22
    341a:	7f 93       	push	r23
    341c:	8f 93       	push	r24
    341e:	9f 93       	push	r25
    3420:	af 93       	push	r26
    3422:	bf 93       	push	r27
    3424:	ef 93       	push	r30
    3426:	ff 93       	push	r31
	if (tc45_tcd5_err_callback) {
    3428:	e0 91 88 21 	lds	r30, 0x2188
    342c:	f0 91 89 21 	lds	r31, 0x2189
    3430:	30 97       	sbiw	r30, 0x00	; 0
    3432:	09 f0       	breq	.+2      	; 0x3436 <__vector_37+0x30>
		tc45_tcd5_err_callback();
    3434:	09 95       	icall
	}
}
    3436:	ff 91       	pop	r31
    3438:	ef 91       	pop	r30
    343a:	bf 91       	pop	r27
    343c:	af 91       	pop	r26
    343e:	9f 91       	pop	r25
    3440:	8f 91       	pop	r24
    3442:	7f 91       	pop	r23
    3444:	6f 91       	pop	r22
    3446:	5f 91       	pop	r21
    3448:	4f 91       	pop	r20
    344a:	3f 91       	pop	r19
    344c:	2f 91       	pop	r18
    344e:	0f 90       	pop	r0
    3450:	0f be       	out	0x3f, r0	; 63
    3452:	0f 90       	pop	r0
    3454:	1f 90       	pop	r1
    3456:	18 95       	reti

00003458 <__vector_38>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD5_CCA_vect)
{
    3458:	1f 92       	push	r1
    345a:	0f 92       	push	r0
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	0f 92       	push	r0
    3460:	11 24       	eor	r1, r1
    3462:	2f 93       	push	r18
    3464:	3f 93       	push	r19
    3466:	4f 93       	push	r20
    3468:	5f 93       	push	r21
    346a:	6f 93       	push	r22
    346c:	7f 93       	push	r23
    346e:	8f 93       	push	r24
    3470:	9f 93       	push	r25
    3472:	af 93       	push	r26
    3474:	bf 93       	push	r27
    3476:	ef 93       	push	r30
    3478:	ff 93       	push	r31
	if (tc45_tcd5_cca_callback) {
    347a:	e0 91 86 21 	lds	r30, 0x2186
    347e:	f0 91 87 21 	lds	r31, 0x2187
    3482:	30 97       	sbiw	r30, 0x00	; 0
    3484:	09 f0       	breq	.+2      	; 0x3488 <__vector_38+0x30>
		tc45_tcd5_cca_callback();
    3486:	09 95       	icall
	}
}
    3488:	ff 91       	pop	r31
    348a:	ef 91       	pop	r30
    348c:	bf 91       	pop	r27
    348e:	af 91       	pop	r26
    3490:	9f 91       	pop	r25
    3492:	8f 91       	pop	r24
    3494:	7f 91       	pop	r23
    3496:	6f 91       	pop	r22
    3498:	5f 91       	pop	r21
    349a:	4f 91       	pop	r20
    349c:	3f 91       	pop	r19
    349e:	2f 91       	pop	r18
    34a0:	0f 90       	pop	r0
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	0f 90       	pop	r0
    34a6:	1f 90       	pop	r1
    34a8:	18 95       	reti

000034aa <__vector_39>:
 *
 * This function will handle interrupt on Timer Counter D5 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD5_CCB_vect)
{
    34aa:	1f 92       	push	r1
    34ac:	0f 92       	push	r0
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	0f 92       	push	r0
    34b2:	11 24       	eor	r1, r1
    34b4:	2f 93       	push	r18
    34b6:	3f 93       	push	r19
    34b8:	4f 93       	push	r20
    34ba:	5f 93       	push	r21
    34bc:	6f 93       	push	r22
    34be:	7f 93       	push	r23
    34c0:	8f 93       	push	r24
    34c2:	9f 93       	push	r25
    34c4:	af 93       	push	r26
    34c6:	bf 93       	push	r27
    34c8:	ef 93       	push	r30
    34ca:	ff 93       	push	r31
	if (tc45_tcd5_ccb_callback) {
    34cc:	e0 91 84 21 	lds	r30, 0x2184
    34d0:	f0 91 85 21 	lds	r31, 0x2185
    34d4:	30 97       	sbiw	r30, 0x00	; 0
    34d6:	09 f0       	breq	.+2      	; 0x34da <__vector_39+0x30>
		tc45_tcd5_ccb_callback();
    34d8:	09 95       	icall
	}
}
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	0f 90       	pop	r0
    34f8:	1f 90       	pop	r1
    34fa:	18 95       	reti

000034fc <tc45_enable>:
 *
 * \note
 * unmask TC45 clock (sysclk), but does not configure the TC45 clock source.
 */
void tc45_enable(volatile void *tc)
{
    34fc:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    34fe:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3500:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3502:	28 2f       	mov	r18, r24
    3504:	39 2f       	mov	r19, r25
    3506:	21 15       	cp	r18, r1
    3508:	88 e0       	ldi	r24, 0x08	; 8
    350a:	38 07       	cpc	r19, r24
    350c:	39 f4       	brne	.+14     	; 0x351c <tc45_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    350e:	61 e0       	ldi	r22, 0x01	; 1
    3510:	83 e0       	ldi	r24, 0x03	; 3
    3512:	ec db       	rcall	.-2088   	; 0x2cec <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3514:	64 e0       	ldi	r22, 0x04	; 4
    3516:	83 e0       	ldi	r24, 0x03	; 3
    3518:	e9 db       	rcall	.-2094   	; 0x2cec <sysclk_enable_module>
    351a:	17 c0       	rjmp	.+46     	; 0x354a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    351c:	20 34       	cpi	r18, 0x40	; 64
    351e:	88 e0       	ldi	r24, 0x08	; 8
    3520:	38 07       	cpc	r19, r24
    3522:	39 f4       	brne	.+14     	; 0x3532 <tc45_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3524:	62 e0       	ldi	r22, 0x02	; 2
    3526:	83 e0       	ldi	r24, 0x03	; 3
    3528:	e1 db       	rcall	.-2110   	; 0x2cec <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    352a:	64 e0       	ldi	r22, 0x04	; 4
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	de db       	rcall	.-2116   	; 0x2cec <sysclk_enable_module>
    3530:	0c c0       	rjmp	.+24     	; 0x354a <tc45_enable+0x4e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    3532:	20 34       	cpi	r18, 0x40	; 64
    3534:	39 40       	sbci	r19, 0x09	; 9
    3536:	39 f4       	brne	.+14     	; 0x3546 <tc45_enable+0x4a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    3538:	62 e0       	ldi	r22, 0x02	; 2
    353a:	84 e0       	ldi	r24, 0x04	; 4
    353c:	d7 db       	rcall	.-2130   	; 0x2cec <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    353e:	64 e0       	ldi	r22, 0x04	; 4
    3540:	84 e0       	ldi	r24, 0x04	; 4
    3542:	d4 db       	rcall	.-2136   	; 0x2cec <sysclk_enable_module>
    3544:	02 c0       	rjmp	.+4      	; 0x354a <tc45_enable+0x4e>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3546:	cf bf       	out	0x3f, r28	; 63
    3548:	09 c0       	rjmp	.+18     	; 0x355c <tc45_enable+0x60>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    354a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    354c:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    354e:	e6 ee       	ldi	r30, 0xE6	; 230
    3550:	fa e2       	ldi	r31, 0x2A	; 42
    3552:	90 81       	ld	r25, Z
    3554:	9f 5f       	subi	r25, 0xFF	; 255
    3556:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3558:	8f bf       	out	0x3f, r24	; 63
    355a:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <tc45_disable>:
 *
 * \note
 * mask TC45 clock (sysclk).
 */
void tc45_disable(volatile void *tc)
{
    3560:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3562:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3564:	f8 94       	cli

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3566:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    3568:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    356a:	e6 ee       	ldi	r30, 0xE6	; 230
    356c:	fa e2       	ldi	r31, 0x2A	; 42
    356e:	30 81       	ld	r19, Z
    3570:	31 50       	subi	r19, 0x01	; 1
    3572:	30 83       	st	Z, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3574:	2f bf       	out	0x3f, r18	; 63
	irqflags_t iflags = cpu_irq_save();

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);

#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    3576:	28 2f       	mov	r18, r24
    3578:	39 2f       	mov	r19, r25
    357a:	21 15       	cp	r18, r1
    357c:	88 e0       	ldi	r24, 0x08	; 8
    357e:	38 07       	cpc	r19, r24
    3580:	39 f4       	brne	.+14     	; 0x3590 <tc45_disable+0x30>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3582:	61 e0       	ldi	r22, 0x01	; 1
    3584:	83 e0       	ldi	r24, 0x03	; 3
    3586:	be db       	rcall	.-2180   	; 0x2d04 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3588:	64 e0       	ldi	r22, 0x04	; 4
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	bb db       	rcall	.-2186   	; 0x2d04 <sysclk_disable_module>
    358e:	17 c0       	rjmp	.+46     	; 0x35be <tc45_disable+0x5e>
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    3590:	20 34       	cpi	r18, 0x40	; 64
    3592:	88 e0       	ldi	r24, 0x08	; 8
    3594:	38 07       	cpc	r19, r24
    3596:	39 f4       	brne	.+14     	; 0x35a6 <tc45_disable+0x46>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3598:	62 e0       	ldi	r22, 0x02	; 2
    359a:	83 e0       	ldi	r24, 0x03	; 3
    359c:	b3 db       	rcall	.-2202   	; 0x2d04 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    359e:	64 e0       	ldi	r22, 0x04	; 4
    35a0:	83 e0       	ldi	r24, 0x03	; 3
    35a2:	b0 db       	rcall	.-2208   	; 0x2d04 <sysclk_disable_module>
    35a4:	0c c0       	rjmp	.+24     	; 0x35be <tc45_disable+0x5e>
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    35a6:	20 34       	cpi	r18, 0x40	; 64
    35a8:	39 40       	sbci	r19, 0x09	; 9
    35aa:	39 f4       	brne	.+14     	; 0x35ba <tc45_disable+0x5a>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_TC4);
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	84 e0       	ldi	r24, 0x04	; 4
    35b0:	a9 db       	rcall	.-2222   	; 0x2d04 <sysclk_disable_module>
		sysclk_disable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    35b2:	64 e0       	ldi	r22, 0x04	; 4
    35b4:	84 e0       	ldi	r24, 0x04	; 4
    35b6:	a6 db       	rcall	.-2228   	; 0x2d04 <sysclk_disable_module>
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <tc45_disable+0x5e>
    35ba:	cf bf       	out	0x3f, r28	; 63
    35bc:	01 c0       	rjmp	.+2      	; 0x35c0 <tc45_disable+0x60>
    35be:	cf bf       	out	0x3f, r28	; 63
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    35c0:	cf 91       	pop	r28
    35c2:	08 95       	ret

000035c4 <tc45_set_overflow_interrupt_callback>:
 */
void tc45_set_overflow_interrupt_callback(volatile void *tc,
		tc45_callback_t callback)
{
#ifdef TCC4
	if ((uintptr_t)tc == (uintptr_t)&TCC4) {
    35c4:	81 15       	cp	r24, r1
    35c6:	28 e0       	ldi	r18, 0x08	; 8
    35c8:	92 07       	cpc	r25, r18
    35ca:	29 f4       	brne	.+10     	; 0x35d6 <tc45_set_overflow_interrupt_callback+0x12>
		tc45_tcc4_ovf_callback = callback;
    35cc:	60 93 9e 21 	sts	0x219E, r22
    35d0:	70 93 9f 21 	sts	0x219F, r23
    35d4:	08 95       	ret
	} else
#endif
#ifdef TCC5
	if ((uintptr_t)tc == (uintptr_t)&TCC5) {
    35d6:	80 34       	cpi	r24, 0x40	; 64
    35d8:	28 e0       	ldi	r18, 0x08	; 8
    35da:	92 07       	cpc	r25, r18
    35dc:	29 f4       	brne	.+10     	; 0x35e8 <tc45_set_overflow_interrupt_callback+0x24>
		tc45_tcc5_ovf_callback = callback;
    35de:	60 93 92 21 	sts	0x2192, r22
    35e2:	70 93 93 21 	sts	0x2193, r23
    35e6:	08 95       	ret
	} else
#endif
#ifdef TCD5
	if ((uintptr_t)tc == (uintptr_t)&TCD5) {
    35e8:	80 34       	cpi	r24, 0x40	; 64
    35ea:	99 40       	sbci	r25, 0x09	; 9
    35ec:	21 f4       	brne	.+8      	; 0x35f6 <tc45_set_overflow_interrupt_callback+0x32>
		tc45_tcd5_ovf_callback = callback;
    35ee:	60 93 8a 21 	sts	0x218A, r22
    35f2:	70 93 8b 21 	sts	0x218B, r23
    35f6:	08 95       	ret

000035f8 <__vector_11>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    35f8:	1f 92       	push	r1
    35fa:	0f 92       	push	r0
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	0f 92       	push	r0
    3600:	11 24       	eor	r1, r1
    3602:	2f 93       	push	r18
    3604:	3f 93       	push	r19
    3606:	4f 93       	push	r20
    3608:	5f 93       	push	r21
    360a:	6f 93       	push	r22
    360c:	7f 93       	push	r23
    360e:	8f 93       	push	r24
    3610:	9f 93       	push	r25
    3612:	af 93       	push	r26
    3614:	bf 93       	push	r27
    3616:	cf 93       	push	r28
    3618:	df 93       	push	r29
    361a:	ef 93       	push	r30
    361c:	ff 93       	push	r31
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
    361e:	e0 91 a0 21 	lds	r30, 0x21A0
    3622:	f0 91 a1 21 	lds	r31, 0x21A1
    3626:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
    3628:	83 ff       	sbrs	r24, 3
    362a:	08 c0       	rjmp	.+16     	; 0x363c <__vector_11+0x44>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
    362c:	88 60       	ori	r24, 0x08	; 8
    362e:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
    3630:	83 e0       	ldi	r24, 0x03	; 3
    3632:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
    3634:	86 ef       	ldi	r24, 0xF6	; 246
    3636:	80 93 aa 21 	sts	0x21AA, r24
    363a:	99 c0       	rjmp	.+306    	; 0x376e <__vector_11+0x176>
    363c:	98 2f       	mov	r25, r24
    363e:	94 71       	andi	r25, 0x14	; 20

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
    3640:	31 f0       	breq	.+12     	; 0x364e <__vector_11+0x56>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
    3646:	8f ef       	ldi	r24, 0xFF	; 255
    3648:	80 93 aa 21 	sts	0x21AA, r24
    364c:	90 c0       	rjmp	.+288    	; 0x376e <__vector_11+0x176>

	} else if (master_status & TWI_MASTER_WIF_bm) {
    364e:	86 ff       	sbrs	r24, 6
    3650:	45 c0       	rjmp	.+138    	; 0x36dc <__vector_11+0xe4>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    3652:	a0 91 a2 21 	lds	r26, 0x21A2
    3656:	b0 91 a3 21 	lds	r27, 0x21A3

	if (transfer.addr_count < pkg->addr_length) {
    365a:	80 91 a4 21 	lds	r24, 0x21A4
    365e:	90 91 a5 21 	lds	r25, 0x21A5
    3662:	14 96       	adiw	r26, 0x04	; 4
    3664:	2d 91       	ld	r18, X+
    3666:	3c 91       	ld	r19, X
    3668:	15 97       	sbiw	r26, 0x05	; 5
    366a:	82 17       	cp	r24, r18
    366c:	93 07       	cpc	r25, r19
    366e:	6c f4       	brge	.+26     	; 0x368a <__vector_11+0x92>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
    3670:	9c 01       	movw	r18, r24
    3672:	2f 5f       	subi	r18, 0xFF	; 255
    3674:	3f 4f       	sbci	r19, 0xFF	; 255
    3676:	20 93 a4 21 	sts	0x21A4, r18
    367a:	30 93 a5 21 	sts	0x21A5, r19
    367e:	a8 0f       	add	r26, r24
    3680:	b9 1f       	adc	r27, r25
    3682:	11 96       	adiw	r26, 0x01	; 1
    3684:	8c 91       	ld	r24, X
    3686:	87 83       	std	Z+7, r24	; 0x07
    3688:	72 c0       	rjmp	.+228    	; 0x376e <__vector_11+0x176>

	} else if (transfer.data_count < pkg->length) {
    368a:	80 91 a6 21 	lds	r24, 0x21A6
    368e:	90 91 a7 21 	lds	r25, 0x21A7
    3692:	18 96       	adiw	r26, 0x08	; 8
    3694:	2d 91       	ld	r18, X+
    3696:	3c 91       	ld	r19, X
    3698:	19 97       	sbiw	r26, 0x09	; 9
    369a:	82 17       	cp	r24, r18
    369c:	93 07       	cpc	r25, r19
    369e:	c8 f4       	brcc	.+50     	; 0x36d2 <__vector_11+0xda>

		if (transfer.read) {
    36a0:	20 91 a8 21 	lds	r18, 0x21A8
    36a4:	22 23       	and	r18, r18
    36a6:	21 f0       	breq	.+8      	; 0x36b0 <__vector_11+0xb8>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
    36a8:	86 81       	ldd	r24, Z+6	; 0x06
    36aa:	81 60       	ori	r24, 0x01	; 1
    36ac:	86 83       	std	Z+6, r24	; 0x06
    36ae:	5f c0       	rjmp	.+190    	; 0x376e <__vector_11+0x176>

		} else {
			const uint8_t * const data = pkg->buffer;
    36b0:	16 96       	adiw	r26, 0x06	; 6
    36b2:	2d 91       	ld	r18, X+
    36b4:	3c 91       	ld	r19, X
    36b6:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
    36b8:	ac 01       	movw	r20, r24
    36ba:	4f 5f       	subi	r20, 0xFF	; 255
    36bc:	5f 4f       	sbci	r21, 0xFF	; 255
    36be:	40 93 a6 21 	sts	0x21A6, r20
    36c2:	50 93 a7 21 	sts	0x21A7, r21
    36c6:	d9 01       	movw	r26, r18
    36c8:	a8 0f       	add	r26, r24
    36ca:	b9 1f       	adc	r27, r25
    36cc:	8c 91       	ld	r24, X
    36ce:	87 83       	std	Z+7, r24	; 0x07
    36d0:	4e c0       	rjmp	.+156    	; 0x376e <__vector_11+0x176>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    36d2:	83 e0       	ldi	r24, 0x03	; 3
    36d4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
    36d6:	10 92 aa 21 	sts	0x21AA, r1
    36da:	49 c0       	rjmp	.+146    	; 0x376e <__vector_11+0x176>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
    36dc:	88 23       	and	r24, r24
    36de:	0c f0       	brlt	.+2      	; 0x36e2 <__vector_11+0xea>
    36e0:	43 c0       	rjmp	.+134    	; 0x3768 <__vector_11+0x170>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
    36e2:	a0 91 a2 21 	lds	r26, 0x21A2
    36e6:	b0 91 a3 21 	lds	r27, 0x21A3

	if (transfer.data_count < pkg->length) {
    36ea:	80 91 a6 21 	lds	r24, 0x21A6
    36ee:	90 91 a7 21 	lds	r25, 0x21A7
    36f2:	18 96       	adiw	r26, 0x08	; 8
    36f4:	2d 91       	ld	r18, X+
    36f6:	3c 91       	ld	r19, X
    36f8:	19 97       	sbiw	r26, 0x09	; 9
    36fa:	82 17       	cp	r24, r18
    36fc:	93 07       	cpc	r25, r19
    36fe:	70 f5       	brcc	.+92     	; 0x375c <__vector_11+0x164>

		uint8_t * const data = pkg->buffer;
    3700:	16 96       	adiw	r26, 0x06	; 6
    3702:	6d 91       	ld	r22, X+
    3704:	7c 91       	ld	r23, X
    3706:	17 97       	sbiw	r26, 0x07	; 7
		data[transfer.data_count++] = bus->MASTER.DATA;
    3708:	9c 01       	movw	r18, r24
    370a:	2f 5f       	subi	r18, 0xFF	; 255
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	20 93 a6 21 	sts	0x21A6, r18
    3712:	30 93 a7 21 	sts	0x21A7, r19
    3716:	47 81       	ldd	r20, Z+7	; 0x07
    3718:	86 0f       	add	r24, r22
    371a:	97 1f       	adc	r25, r23
    371c:	ec 01       	movw	r28, r24
    371e:	48 83       	st	Y, r20
	
		//The first byte read from the slave defined the number of data to read		
		if (pkg->length != (data[0]+1))
    3720:	eb 01       	movw	r28, r22
    3722:	88 81       	ld	r24, Y
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	01 96       	adiw	r24, 0x01	; 1
    3728:	18 96       	adiw	r26, 0x08	; 8
    372a:	4d 91       	ld	r20, X+
    372c:	5c 91       	ld	r21, X
    372e:	19 97       	sbiw	r26, 0x09	; 9
    3730:	48 17       	cp	r20, r24
    3732:	59 07       	cpc	r21, r25
    3734:	21 f0       	breq	.+8      	; 0x373e <__vector_11+0x146>
		{
			pkg->length = data[0]+1;
    3736:	18 96       	adiw	r26, 0x08	; 8
    3738:	8d 93       	st	X+, r24
    373a:	9c 93       	st	X, r25
    373c:	19 97       	sbiw	r26, 0x09	; 9
		}

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
    373e:	18 96       	adiw	r26, 0x08	; 8
    3740:	8d 91       	ld	r24, X+
    3742:	9c 91       	ld	r25, X
    3744:	19 97       	sbiw	r26, 0x09	; 9
    3746:	28 17       	cp	r18, r24
    3748:	39 07       	cpc	r19, r25
    374a:	18 f4       	brcc	.+6      	; 0x3752 <__vector_11+0x15a>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	83 83       	std	Z+3, r24	; 0x03
    3750:	0e c0       	rjmp	.+28     	; 0x376e <__vector_11+0x176>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3752:	87 e0       	ldi	r24, 0x07	; 7
    3754:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
    3756:	10 92 aa 21 	sts	0x21AA, r1
    375a:	09 c0       	rjmp	.+18     	; 0x376e <__vector_11+0x176>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
    3760:	89 ef       	ldi	r24, 0xF9	; 249
    3762:	80 93 aa 21 	sts	0x21AA, r24
    3766:	03 c0       	rjmp	.+6      	; 0x376e <__vector_11+0x176>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
    3768:	8b ef       	ldi	r24, 0xFB	; 251
    376a:	80 93 aa 21 	sts	0x21AA, r24
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
    376e:	ff 91       	pop	r31
    3770:	ef 91       	pop	r30
    3772:	df 91       	pop	r29
    3774:	cf 91       	pop	r28
    3776:	bf 91       	pop	r27
    3778:	af 91       	pop	r26
    377a:	9f 91       	pop	r25
    377c:	8f 91       	pop	r24
    377e:	7f 91       	pop	r23
    3780:	6f 91       	pop	r22
    3782:	5f 91       	pop	r21
    3784:	4f 91       	pop	r20
    3786:	3f 91       	pop	r19
    3788:	2f 91       	pop	r18
    378a:	0f 90       	pop	r0
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	0f 90       	pop	r0
    3790:	1f 90       	pop	r1
    3792:	18 95       	reti

00003794 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
    3794:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
    3796:	db 01       	movw	r26, r22
    3798:	14 96       	adiw	r26, 0x04	; 4
    379a:	8c 91       	ld	r24, X
    379c:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
    379e:	88 eb       	ldi	r24, 0xB8	; 184
    37a0:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
    37a6:	10 92 a9 21 	sts	0x21A9, r1
	transfer.status    = STATUS_OK;
    37aa:	10 92 aa 21 	sts	0x21AA, r1

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
    37ae:	e0 ea       	ldi	r30, 0xA0	; 160
    37b0:	f0 e0       	ldi	r31, 0x00	; 0
    37b2:	82 81       	ldd	r24, Z+2	; 0x02
    37b4:	82 60       	ori	r24, 0x02	; 2
    37b6:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
    37b8:	78 94       	sei

	return STATUS_OK;
}
    37ba:	80 e0       	ldi	r24, 0x00	; 0
    37bc:	08 95       	ret

000037be <twi_master_transfer>:
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
    37be:	00 97       	sbiw	r24, 0x00	; 0
    37c0:	09 f4       	brne	.+2      	; 0x37c4 <twi_master_transfer+0x6>
    37c2:	53 c0       	rjmp	.+166    	; 0x386a <twi_master_transfer+0xac>
    37c4:	61 15       	cp	r22, r1
    37c6:	71 05       	cpc	r23, r1
    37c8:	09 f4       	brne	.+2      	; 0x37cc <twi_master_transfer+0xe>
    37ca:	51 c0       	rjmp	.+162    	; 0x386e <twi_master_transfer+0xb0>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
    37cc:	fb 01       	movw	r30, r22
    37ce:	32 85       	ldd	r19, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    37d0:	20 91 a9 21 	lds	r18, 0x21A9
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <twi_master_transfer+0x1c>

		if (no_wait) { return ERR_BUSY; }
    37d6:	31 11       	cpse	r19, r1
    37d8:	4c c0       	rjmp	.+152    	; 0x3872 <twi_master_transfer+0xb4>
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
    37da:	21 11       	cpse	r18, r1
    37dc:	fc cf       	rjmp	.-8      	; 0x37d6 <twi_master_transfer+0x18>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    37de:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    37e0:	f8 94       	cli
		if (no_wait) { return ERR_BUSY; }
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
    37e2:	31 e0       	ldi	r19, 0x01	; 1
    37e4:	30 93 a9 21 	sts	0x21A9, r19
	transfer.status = OPERATION_IN_PROGRESS;
    37e8:	30 e8       	ldi	r19, 0x80	; 128
    37ea:	30 93 aa 21 	sts	0x21AA, r19
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    37ee:	2f bf       	out	0x3f, r18	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
    37f0:	80 93 a0 21 	sts	0x21A0, r24
    37f4:	90 93 a1 21 	sts	0x21A1, r25
		transfer.pkg         = (twi_package_t *) package;
    37f8:	60 93 a2 21 	sts	0x21A2, r22
    37fc:	70 93 a3 21 	sts	0x21A3, r23
		transfer.addr_count  = 0;
    3800:	10 92 a4 21 	sts	0x21A4, r1
    3804:	10 92 a5 21 	sts	0x21A5, r1
		transfer.data_count  = 0;
    3808:	10 92 a6 21 	sts	0x21A6, r1
    380c:	10 92 a7 21 	sts	0x21A7, r1
		transfer.read        = read;
    3810:	40 93 a8 21 	sts	0x21A8, r20

		uint8_t const chip = (package->chip) << 1;
    3814:	fb 01       	movw	r30, r22
    3816:	20 81       	ld	r18, Z
    3818:	52 2f       	mov	r21, r18
    381a:	55 0f       	add	r21, r21

		if (package->addr_length || (false == read)) {
    381c:	24 81       	ldd	r18, Z+4	; 0x04
    381e:	35 81       	ldd	r19, Z+5	; 0x05
    3820:	23 2b       	or	r18, r19
    3822:	11 f4       	brne	.+4      	; 0x3828 <twi_master_transfer+0x6a>
    3824:	41 11       	cpse	r20, r1
    3826:	03 c0       	rjmp	.+6      	; 0x382e <twi_master_transfer+0x70>
			transfer.bus->MASTER.ADDR = chip;
    3828:	fc 01       	movw	r30, r24
    382a:	56 83       	std	Z+6, r21	; 0x06
    382c:	03 c0       	rjmp	.+6      	; 0x3834 <twi_master_transfer+0x76>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
    382e:	51 60       	ori	r21, 0x01	; 1
    3830:	fc 01       	movw	r30, r24
    3832:	56 83       	std	Z+6, r21	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
    3834:	ea ea       	ldi	r30, 0xAA	; 170
    3836:	f1 e2       	ldi	r31, 0x21	; 33
    3838:	80 81       	ld	r24, Z
    383a:	80 38       	cpi	r24, 0x80	; 128
    383c:	e9 f3       	breq	.-6      	; 0x3838 <twi_master_transfer+0x7a>

	while (! twim_idle(transfer.bus)) { barrier(); }
    383e:	e0 91 a0 21 	lds	r30, 0x21A0
    3842:	f0 91 a1 21 	lds	r31, 0x21A1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3846:	84 81       	ldd	r24, Z+4	; 0x04
    3848:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    384a:	81 30       	cpi	r24, 0x01	; 1
    384c:	49 f0       	breq	.+18     	; 0x3860 <twi_master_transfer+0xa2>
    384e:	a0 ea       	ldi	r26, 0xA0	; 160
    3850:	b1 e2       	ldi	r27, 0x21	; 33
    3852:	ed 91       	ld	r30, X+
    3854:	fc 91       	ld	r31, X
    3856:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
    3858:	84 81       	ldd	r24, Z+4	; 0x04
    385a:	83 70       	andi	r24, 0x03	; 3
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
    385c:	81 30       	cpi	r24, 0x01	; 1
    385e:	c9 f7       	brne	.-14     	; 0x3852 <twi_master_transfer+0x94>

	status_code_t const status = transfer.status;
    3860:	80 91 aa 21 	lds	r24, 0x21AA

	transfer.locked = false;
    3864:	10 92 a9 21 	sts	0x21A9, r1
    3868:	08 95       	ret
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
    386a:	88 ef       	ldi	r24, 0xF8	; 248
    386c:	08 95       	ret
    386e:	88 ef       	ldi	r24, 0xF8	; 248
    3870:	08 95       	ret
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
    3872:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
    3874:	08 95       	ret

00003876 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    3876:	fc 01       	movw	r30, r24
    3878:	81 81       	ldd	r24, Z+1	; 0x01
    387a:	85 ff       	sbrs	r24, 5
    387c:	fd cf       	rjmp	.-6      	; 0x3878 <usart_putchar+0x2>
    387e:	60 83       	st	Z, r22
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	08 95       	ret

00003886 <usart_getchar>:
    3886:	fc 01       	movw	r30, r24
    3888:	81 81       	ldd	r24, Z+1	; 0x01
    388a:	88 23       	and	r24, r24
    388c:	ec f7       	brge	.-6      	; 0x3888 <usart_getchar+0x2>
    388e:	80 81       	ld	r24, Z
    3890:	08 95       	ret

00003892 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3892:	4f 92       	push	r4
    3894:	5f 92       	push	r5
    3896:	6f 92       	push	r6
    3898:	7f 92       	push	r7
    389a:	8f 92       	push	r8
    389c:	9f 92       	push	r9
    389e:	af 92       	push	r10
    38a0:	bf 92       	push	r11
    38a2:	cf 92       	push	r12
    38a4:	df 92       	push	r13
    38a6:	ef 92       	push	r14
    38a8:	ff 92       	push	r15
    38aa:	0f 93       	push	r16
    38ac:	1f 93       	push	r17
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	ec 01       	movw	r28, r24
    38b4:	4a 01       	movw	r8, r20
    38b6:	5b 01       	movw	r10, r22
    38b8:	28 01       	movw	r4, r16
    38ba:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    38bc:	d9 01       	movw	r26, r18
    38be:	c8 01       	movw	r24, r16
    38c0:	68 94       	set
    38c2:	12 f8       	bld	r1, 2
    38c4:	b6 95       	lsr	r27
    38c6:	a7 95       	ror	r26
    38c8:	97 95       	ror	r25
    38ca:	87 95       	ror	r24
    38cc:	16 94       	lsr	r1
    38ce:	d1 f7       	brne	.-12     	; 0x38c4 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    38d0:	b9 01       	movw	r22, r18
    38d2:	a8 01       	movw	r20, r16
    38d4:	03 2e       	mov	r0, r19
    38d6:	36 e1       	ldi	r19, 0x16	; 22
    38d8:	76 95       	lsr	r23
    38da:	67 95       	ror	r22
    38dc:	57 95       	ror	r21
    38de:	47 95       	ror	r20
    38e0:	3a 95       	dec	r19
    38e2:	d1 f7       	brne	.-12     	; 0x38d8 <usart_set_baudrate+0x46>
    38e4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    38e6:	2b 81       	ldd	r18, Y+3	; 0x03
    38e8:	22 fd       	sbrc	r18, 2
    38ea:	08 c0       	rjmp	.+16     	; 0x38fc <usart_set_baudrate+0x6a>
		max_rate /= 2;
    38ec:	b6 95       	lsr	r27
    38ee:	a7 95       	ror	r26
    38f0:	97 95       	ror	r25
    38f2:	87 95       	ror	r24
		min_rate /= 2;
    38f4:	76 95       	lsr	r23
    38f6:	67 95       	ror	r22
    38f8:	57 95       	ror	r21
    38fa:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    38fc:	88 15       	cp	r24, r8
    38fe:	99 05       	cpc	r25, r9
    3900:	aa 05       	cpc	r26, r10
    3902:	bb 05       	cpc	r27, r11
    3904:	08 f4       	brcc	.+2      	; 0x3908 <usart_set_baudrate+0x76>
    3906:	a2 c0       	rjmp	.+324    	; 0x3a4c <usart_set_baudrate+0x1ba>
    3908:	84 16       	cp	r8, r20
    390a:	95 06       	cpc	r9, r21
    390c:	a6 06       	cpc	r10, r22
    390e:	b7 06       	cpc	r11, r23
    3910:	08 f4       	brcc	.+2      	; 0x3914 <usart_set_baudrate+0x82>
    3912:	9e c0       	rjmp	.+316    	; 0x3a50 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3914:	8b 81       	ldd	r24, Y+3	; 0x03
    3916:	82 fd       	sbrc	r24, 2
    3918:	04 c0       	rjmp	.+8      	; 0x3922 <usart_set_baudrate+0x90>
		baud *= 2;
    391a:	88 0c       	add	r8, r8
    391c:	99 1c       	adc	r9, r9
    391e:	aa 1c       	adc	r10, r10
    3920:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    3922:	c3 01       	movw	r24, r6
    3924:	b2 01       	movw	r22, r4
    3926:	a5 01       	movw	r20, r10
    3928:	94 01       	movw	r18, r8
    392a:	9b d3       	rcall	.+1846   	; 0x4062 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    392c:	2f 3f       	cpi	r18, 0xFF	; 255
    392e:	31 05       	cpc	r19, r1
    3930:	41 05       	cpc	r20, r1
    3932:	51 05       	cpc	r21, r1
    3934:	08 f4       	brcc	.+2      	; 0x3938 <usart_set_baudrate+0xa6>
    3936:	8e c0       	rjmp	.+284    	; 0x3a54 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    3938:	c1 2c       	mov	r12, r1
    393a:	d1 2c       	mov	r13, r1
    393c:	76 01       	movw	r14, r12
    393e:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3940:	19 ef       	ldi	r17, 0xF9	; 249
    3942:	05 c0       	rjmp	.+10     	; 0x394e <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    3944:	2c 15       	cp	r18, r12
    3946:	3d 05       	cpc	r19, r13
    3948:	4e 05       	cpc	r20, r14
    394a:	5f 05       	cpc	r21, r15
    394c:	68 f0       	brcs	.+26     	; 0x3968 <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    394e:	cc 0c       	add	r12, r12
    3950:	dd 1c       	adc	r13, r13
    3952:	ee 1c       	adc	r14, r14
    3954:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    3956:	1d 3f       	cpi	r17, 0xFD	; 253
    3958:	14 f4       	brge	.+4      	; 0x395e <usart_set_baudrate+0xcc>
			limit |= 1;
    395a:	68 94       	set
    395c:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    395e:	1f 5f       	subi	r17, 0xFF	; 255
    3960:	17 30       	cpi	r17, 0x07	; 7
    3962:	81 f7       	brne	.-32     	; 0x3944 <usart_set_baudrate+0xb2>
    3964:	21 2f       	mov	r18, r17
    3966:	4e c0       	rjmp	.+156    	; 0x3a04 <usart_set_baudrate+0x172>
    3968:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    396a:	11 23       	and	r17, r17
    396c:	0c f0       	brlt	.+2      	; 0x3970 <usart_set_baudrate+0xde>
    396e:	4a c0       	rjmp	.+148    	; 0x3a04 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3970:	d5 01       	movw	r26, r10
    3972:	c4 01       	movw	r24, r8
    3974:	88 0f       	add	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	aa 1f       	adc	r26, r26
    397a:	bb 1f       	adc	r27, r27
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	aa 1f       	adc	r26, r26
    3982:	bb 1f       	adc	r27, r27
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	aa 1f       	adc	r26, r26
    398a:	bb 1f       	adc	r27, r27
    398c:	48 1a       	sub	r4, r24
    398e:	59 0a       	sbc	r5, r25
    3990:	6a 0a       	sbc	r6, r26
    3992:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3994:	1e 3f       	cpi	r17, 0xFE	; 254
    3996:	ec f4       	brge	.+58     	; 0x39d2 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3998:	6d ef       	ldi	r22, 0xFD	; 253
    399a:	7f ef       	ldi	r23, 0xFF	; 255
    399c:	61 1b       	sub	r22, r17
    399e:	71 09       	sbc	r23, r1
    39a0:	17 fd       	sbrc	r17, 7
    39a2:	73 95       	inc	r23
    39a4:	04 c0       	rjmp	.+8      	; 0x39ae <usart_set_baudrate+0x11c>
    39a6:	44 0c       	add	r4, r4
    39a8:	55 1c       	adc	r5, r5
    39aa:	66 1c       	adc	r6, r6
    39ac:	77 1c       	adc	r7, r7
    39ae:	6a 95       	dec	r22
    39b0:	d2 f7       	brpl	.-12     	; 0x39a6 <usart_set_baudrate+0x114>
    39b2:	d5 01       	movw	r26, r10
    39b4:	c4 01       	movw	r24, r8
    39b6:	b6 95       	lsr	r27
    39b8:	a7 95       	ror	r26
    39ba:	97 95       	ror	r25
    39bc:	87 95       	ror	r24
    39be:	bc 01       	movw	r22, r24
    39c0:	cd 01       	movw	r24, r26
    39c2:	64 0d       	add	r22, r4
    39c4:	75 1d       	adc	r23, r5
    39c6:	86 1d       	adc	r24, r6
    39c8:	97 1d       	adc	r25, r7
    39ca:	a5 01       	movw	r20, r10
    39cc:	94 01       	movw	r18, r8
    39ce:	49 d3       	rcall	.+1682   	; 0x4062 <__udivmodsi4>
    39d0:	34 c0       	rjmp	.+104    	; 0x3a3a <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
    39d2:	23 e0       	ldi	r18, 0x03	; 3
    39d4:	21 0f       	add	r18, r17
    39d6:	d5 01       	movw	r26, r10
    39d8:	c4 01       	movw	r24, r8
    39da:	04 c0       	rjmp	.+8      	; 0x39e4 <usart_set_baudrate+0x152>
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	aa 1f       	adc	r26, r26
    39e2:	bb 1f       	adc	r27, r27
    39e4:	2a 95       	dec	r18
    39e6:	d2 f7       	brpl	.-12     	; 0x39dc <usart_set_baudrate+0x14a>
    39e8:	9c 01       	movw	r18, r24
    39ea:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    39ec:	b6 95       	lsr	r27
    39ee:	a7 95       	ror	r26
    39f0:	97 95       	ror	r25
    39f2:	87 95       	ror	r24
    39f4:	bc 01       	movw	r22, r24
    39f6:	cd 01       	movw	r24, r26
    39f8:	64 0d       	add	r22, r4
    39fa:	75 1d       	adc	r23, r5
    39fc:	86 1d       	adc	r24, r6
    39fe:	97 1d       	adc	r25, r7
    3a00:	30 d3       	rcall	.+1632   	; 0x4062 <__udivmodsi4>
    3a02:	1b c0       	rjmp	.+54     	; 0x3a3a <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3a04:	2d 5f       	subi	r18, 0xFD	; 253
    3a06:	d5 01       	movw	r26, r10
    3a08:	c4 01       	movw	r24, r8
    3a0a:	04 c0       	rjmp	.+8      	; 0x3a14 <usart_set_baudrate+0x182>
    3a0c:	88 0f       	add	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	aa 1f       	adc	r26, r26
    3a12:	bb 1f       	adc	r27, r27
    3a14:	2a 95       	dec	r18
    3a16:	d2 f7       	brpl	.-12     	; 0x3a0c <usart_set_baudrate+0x17a>
    3a18:	9c 01       	movw	r18, r24
    3a1a:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    3a1c:	b6 95       	lsr	r27
    3a1e:	a7 95       	ror	r26
    3a20:	97 95       	ror	r25
    3a22:	87 95       	ror	r24
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	64 0d       	add	r22, r4
    3a2a:	75 1d       	adc	r23, r5
    3a2c:	86 1d       	adc	r24, r6
    3a2e:	97 1d       	adc	r25, r7
    3a30:	18 d3       	rcall	.+1584   	; 0x4062 <__udivmodsi4>
    3a32:	21 50       	subi	r18, 0x01	; 1
    3a34:	31 09       	sbc	r19, r1
    3a36:	41 09       	sbc	r20, r1
    3a38:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    3a3a:	83 2f       	mov	r24, r19
    3a3c:	8f 70       	andi	r24, 0x0F	; 15
    3a3e:	12 95       	swap	r17
    3a40:	10 7f       	andi	r17, 0xF0	; 240
    3a42:	18 2b       	or	r17, r24
    3a44:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    3a46:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	18 c0       	rjmp	.+48     	; 0x3a7c <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	16 c0       	rjmp	.+44     	; 0x3a7c <usart_set_baudrate+0x1ea>
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	14 c0       	rjmp	.+40     	; 0x3a7c <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    3a54:	d5 01       	movw	r26, r10
    3a56:	c4 01       	movw	r24, r8
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	aa 1f       	adc	r26, r26
    3a5e:	bb 1f       	adc	r27, r27
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	aa 1f       	adc	r26, r26
    3a66:	bb 1f       	adc	r27, r27
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	aa 1f       	adc	r26, r26
    3a6e:	bb 1f       	adc	r27, r27
    3a70:	48 1a       	sub	r4, r24
    3a72:	59 0a       	sbc	r5, r25
    3a74:	6a 0a       	sbc	r6, r26
    3a76:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3a78:	19 ef       	ldi	r17, 0xF9	; 249
    3a7a:	8e cf       	rjmp	.-228    	; 0x3998 <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	1f 91       	pop	r17
    3a82:	0f 91       	pop	r16
    3a84:	ff 90       	pop	r15
    3a86:	ef 90       	pop	r14
    3a88:	df 90       	pop	r13
    3a8a:	cf 90       	pop	r12
    3a8c:	bf 90       	pop	r11
    3a8e:	af 90       	pop	r10
    3a90:	9f 90       	pop	r9
    3a92:	8f 90       	pop	r8
    3a94:	7f 90       	pop	r7
    3a96:	6f 90       	pop	r6
    3a98:	5f 90       	pop	r5
    3a9a:	4f 90       	pop	r4
    3a9c:	08 95       	ret

00003a9e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3a9e:	0f 93       	push	r16
    3aa0:	1f 93       	push	r17
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	ec 01       	movw	r28, r24
    3aa8:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	09 f4       	brne	.+2      	; 0x3ab0 <usart_init_rs232+0x12>
    3aae:	77 c0       	rjmp	.+238    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3ab0:	c1 15       	cp	r28, r1
    3ab2:	84 e0       	ldi	r24, 0x04	; 4
    3ab4:	d8 07       	cpc	r29, r24
    3ab6:	21 f4       	brne	.+8      	; 0x3ac0 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3ab8:	64 e0       	ldi	r22, 0x04	; 4
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	17 d9       	rcall	.-3538   	; 0x2cec <sysclk_enable_module>
    3abe:	6f c0       	rjmp	.+222    	; 0x3b9e <usart_init_rs232+0x100>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3ac0:	c0 38       	cpi	r28, 0x80	; 128
    3ac2:	e1 e0       	ldi	r30, 0x01	; 1
    3ac4:	de 07       	cpc	r29, r30
    3ac6:	21 f4       	brne	.+8      	; 0x3ad0 <usart_init_rs232+0x32>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	0f d9       	rcall	.-3554   	; 0x2cec <sysclk_enable_module>
    3ace:	67 c0       	rjmp	.+206    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &DMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
	}
#endif
#ifdef EDMA
	else if (module == &EDMA) {
    3ad0:	c1 15       	cp	r28, r1
    3ad2:	f1 e0       	ldi	r31, 0x01	; 1
    3ad4:	df 07       	cpc	r29, r31
    3ad6:	21 f4       	brne	.+8      	; 0x3ae0 <usart_init_rs232+0x42>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
    3ad8:	61 e0       	ldi	r22, 0x01	; 1
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	07 d9       	rcall	.-3570   	; 0x2cec <sysclk_enable_module>
    3ade:	5f c0       	rjmp	.+190    	; 0x3b9e <usart_init_rs232+0x100>
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    3ae0:	c0 38       	cpi	r28, 0x80	; 128
    3ae2:	83 e0       	ldi	r24, 0x03	; 3
    3ae4:	d8 07       	cpc	r29, r24
    3ae6:	21 f4       	brne	.+8      	; 0x3af0 <usart_init_rs232+0x52>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3ae8:	61 e0       	ldi	r22, 0x01	; 1
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	ff d8       	rcall	.-3586   	; 0x2cec <sysclk_enable_module>
    3aee:	57 c0       	rjmp	.+174    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3af0:	c1 15       	cp	r28, r1
    3af2:	e2 e0       	ldi	r30, 0x02	; 2
    3af4:	de 07       	cpc	r29, r30
    3af6:	21 f4       	brne	.+8      	; 0x3b00 <usart_init_rs232+0x62>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3af8:	62 e0       	ldi	r22, 0x02	; 2
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	f7 d8       	rcall	.-3602   	; 0x2cec <sysclk_enable_module>
    3afe:	4f c0       	rjmp	.+158    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &ADCB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    3b00:	c1 15       	cp	r28, r1
    3b02:	f3 e0       	ldi	r31, 0x03	; 3
    3b04:	df 07       	cpc	r29, r31
    3b06:	21 f4       	brne	.+8      	; 0x3b10 <usart_init_rs232+0x72>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    3b08:	64 e0       	ldi	r22, 0x04	; 4
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	ef d8       	rcall	.-3618   	; 0x2cec <sysclk_enable_module>
    3b0e:	47 c0       	rjmp	.+142    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &TCF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
	}
#endif
#ifdef TCC4
	else if (module == &TCC4) {
    3b10:	c1 15       	cp	r28, r1
    3b12:	88 e0       	ldi	r24, 0x08	; 8
    3b14:	d8 07       	cpc	r29, r24
    3b16:	21 f4       	brne	.+8      	; 0x3b20 <usart_init_rs232+0x82>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC4);
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	83 e0       	ldi	r24, 0x03	; 3
    3b1c:	e7 d8       	rcall	.-3634   	; 0x2cec <sysclk_enable_module>
    3b1e:	3f c0       	rjmp	.+126    	; 0x3b9e <usart_init_rs232+0x100>
	}
#endif
#ifdef TCC5
	else if (module == &TCC5) {
    3b20:	c0 34       	cpi	r28, 0x40	; 64
    3b22:	e8 e0       	ldi	r30, 0x08	; 8
    3b24:	de 07       	cpc	r29, r30
    3b26:	21 f4       	brne	.+8      	; 0x3b30 <usart_init_rs232+0x92>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC5);
    3b28:	62 e0       	ldi	r22, 0x02	; 2
    3b2a:	83 e0       	ldi	r24, 0x03	; 3
    3b2c:	df d8       	rcall	.-3650   	; 0x2cec <sysclk_enable_module>
    3b2e:	37 c0       	rjmp	.+110    	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &TCD4) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC4);
	}
#endif
#ifdef TCD5
	else if (module == &TCD5) {
    3b30:	c0 34       	cpi	r28, 0x40	; 64
    3b32:	f9 e0       	ldi	r31, 0x09	; 9
    3b34:	df 07       	cpc	r29, r31
    3b36:	21 f4       	brne	.+8      	; 0x3b40 <usart_init_rs232+0xa2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
    3b38:	62 e0       	ldi	r22, 0x02	; 2
    3b3a:	84 e0       	ldi	r24, 0x04	; 4
    3b3c:	d7 d8       	rcall	.-3666   	; 0x2cec <sysclk_enable_module>
    3b3e:	2f c0       	rjmp	.+94     	; 0x3b9e <usart_init_rs232+0x100>
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3b40:	c0 3b       	cpi	r28, 0xB0	; 176
    3b42:	88 e0       	ldi	r24, 0x08	; 8
    3b44:	d8 07       	cpc	r29, r24
    3b46:	21 f4       	brne	.+8      	; 0x3b50 <usart_init_rs232+0xb2>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3b48:	64 e0       	ldi	r22, 0x04	; 4
    3b4a:	83 e0       	ldi	r24, 0x03	; 3
    3b4c:	cf d8       	rcall	.-3682   	; 0x2cec <sysclk_enable_module>
    3b4e:	27 c0       	rjmp	.+78     	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3b50:	c0 3e       	cpi	r28, 0xE0	; 224
    3b52:	e8 e0       	ldi	r30, 0x08	; 8
    3b54:	de 07       	cpc	r29, r30
    3b56:	21 f4       	brne	.+8      	; 0x3b60 <usart_init_rs232+0xc2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3b58:	68 e0       	ldi	r22, 0x08	; 8
    3b5a:	83 e0       	ldi	r24, 0x03	; 3
    3b5c:	c7 d8       	rcall	.-3698   	; 0x2cec <sysclk_enable_module>
    3b5e:	1f c0       	rjmp	.+62     	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3b60:	c0 3c       	cpi	r28, 0xC0	; 192
    3b62:	f8 e0       	ldi	r31, 0x08	; 8
    3b64:	df 07       	cpc	r29, r31
    3b66:	21 f4       	brne	.+8      	; 0x3b70 <usart_init_rs232+0xd2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3b68:	60 e1       	ldi	r22, 0x10	; 16
    3b6a:	83 e0       	ldi	r24, 0x03	; 3
    3b6c:	bf d8       	rcall	.-3714   	; 0x2cec <sysclk_enable_module>
    3b6e:	17 c0       	rjmp	.+46     	; 0x3b9e <usart_init_rs232+0x100>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    3b70:	c0 3c       	cpi	r28, 0xC0	; 192
    3b72:	89 e0       	ldi	r24, 0x09	; 9
    3b74:	d8 07       	cpc	r29, r24
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <usart_init_rs232+0xe2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3b78:	60 e1       	ldi	r22, 0x10	; 16
    3b7a:	84 e0       	ldi	r24, 0x04	; 4
    3b7c:	b7 d8       	rcall	.-3730   	; 0x2cec <sysclk_enable_module>
    3b7e:	0f c0       	rjmp	.+30     	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3b80:	c0 38       	cpi	r28, 0x80	; 128
    3b82:	e4 e0       	ldi	r30, 0x04	; 4
    3b84:	de 07       	cpc	r29, r30
    3b86:	21 f4       	brne	.+8      	; 0x3b90 <usart_init_rs232+0xf2>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3b88:	60 e4       	ldi	r22, 0x40	; 64
    3b8a:	83 e0       	ldi	r24, 0x03	; 3
    3b8c:	af d8       	rcall	.-3746   	; 0x2cec <sysclk_enable_module>
    3b8e:	07 c0       	rjmp	.+14     	; 0x3b9e <usart_init_rs232+0x100>
	else if (module == &TWIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
	}
#endif
#ifdef XCL
	else if (module == &XCL) {
    3b90:	c0 36       	cpi	r28, 0x60	; 96
    3b92:	f4 e0       	ldi	r31, 0x04	; 4
    3b94:	df 07       	cpc	r29, r31
    3b96:	19 f4       	brne	.+6      	; 0x3b9e <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_XCL);
    3b98:	60 e8       	ldi	r22, 0x80	; 128
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	a7 d8       	rcall	.-3762   	; 0x2cec <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba0:	8f 73       	andi	r24, 0x3F	; 63
    3ba2:	8c 83       	std	Y+4, r24	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	94 81       	ldd	r25, Z+4	; 0x04
    3ba8:	85 81       	ldd	r24, Z+5	; 0x05
    3baa:	89 2b       	or	r24, r25
    3bac:	96 81       	ldd	r25, Z+6	; 0x06
    3bae:	99 23       	and	r25, r25
    3bb0:	11 f0       	breq	.+4      	; 0x3bb6 <usart_init_rs232+0x118>
    3bb2:	98 e0       	ldi	r25, 0x08	; 8
    3bb4:	01 c0       	rjmp	.+2      	; 0x3bb8 <usart_init_rs232+0x11a>
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	89 2b       	or	r24, r25
    3bba:	8c 83       	std	Y+4, r24	; 0x04
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    3bbc:	f8 01       	movw	r30, r16
    3bbe:	40 81       	ld	r20, Z
    3bc0:	51 81       	ldd	r21, Z+1	; 0x01
    3bc2:	62 81       	ldd	r22, Z+2	; 0x02
    3bc4:	73 81       	ldd	r23, Z+3	; 0x03
    3bc6:	00 e0       	ldi	r16, 0x00	; 0
    3bc8:	18 e4       	ldi	r17, 0x48	; 72
    3bca:	28 ee       	ldi	r18, 0xE8	; 232
    3bcc:	31 e0       	ldi	r19, 0x01	; 1
    3bce:	ce 01       	movw	r24, r28
    3bd0:	60 de       	rcall	.-832    	; 0x3892 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    3bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd4:	98 60       	ori	r25, 0x08	; 8
    3bd6:	9b 83       	std	Y+3, r25	; 0x03
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    3bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bda:	90 61       	ori	r25, 0x10	; 16
    3bdc:	9b 83       	std	Y+3, r25	; 0x03
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    3bde:	df 91       	pop	r29
    3be0:	cf 91       	pop	r28
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	08 95       	ret

00003be8 <__subsf3>:
    3be8:	50 58       	subi	r21, 0x80	; 128

00003bea <__addsf3>:
    3bea:	bb 27       	eor	r27, r27
    3bec:	aa 27       	eor	r26, r26
    3bee:	0e d0       	rcall	.+28     	; 0x3c0c <__addsf3x>
    3bf0:	70 c1       	rjmp	.+736    	; 0x3ed2 <__fp_round>
    3bf2:	61 d1       	rcall	.+706    	; 0x3eb6 <__fp_pscA>
    3bf4:	30 f0       	brcs	.+12     	; 0x3c02 <__addsf3+0x18>
    3bf6:	66 d1       	rcall	.+716    	; 0x3ec4 <__fp_pscB>
    3bf8:	20 f0       	brcs	.+8      	; 0x3c02 <__addsf3+0x18>
    3bfa:	31 f4       	brne	.+12     	; 0x3c08 <__addsf3+0x1e>
    3bfc:	9f 3f       	cpi	r25, 0xFF	; 255
    3bfe:	11 f4       	brne	.+4      	; 0x3c04 <__addsf3+0x1a>
    3c00:	1e f4       	brtc	.+6      	; 0x3c08 <__addsf3+0x1e>
    3c02:	56 c1       	rjmp	.+684    	; 0x3eb0 <__fp_nan>
    3c04:	0e f4       	brtc	.+2      	; 0x3c08 <__addsf3+0x1e>
    3c06:	e0 95       	com	r30
    3c08:	e7 fb       	bst	r30, 7
    3c0a:	4c c1       	rjmp	.+664    	; 0x3ea4 <__fp_inf>

00003c0c <__addsf3x>:
    3c0c:	e9 2f       	mov	r30, r25
    3c0e:	72 d1       	rcall	.+740    	; 0x3ef4 <__fp_split3>
    3c10:	80 f3       	brcs	.-32     	; 0x3bf2 <__addsf3+0x8>
    3c12:	ba 17       	cp	r27, r26
    3c14:	62 07       	cpc	r22, r18
    3c16:	73 07       	cpc	r23, r19
    3c18:	84 07       	cpc	r24, r20
    3c1a:	95 07       	cpc	r25, r21
    3c1c:	18 f0       	brcs	.+6      	; 0x3c24 <__addsf3x+0x18>
    3c1e:	71 f4       	brne	.+28     	; 0x3c3c <__addsf3x+0x30>
    3c20:	9e f5       	brtc	.+102    	; 0x3c88 <__addsf3x+0x7c>
    3c22:	8a c1       	rjmp	.+788    	; 0x3f38 <__fp_zero>
    3c24:	0e f4       	brtc	.+2      	; 0x3c28 <__addsf3x+0x1c>
    3c26:	e0 95       	com	r30
    3c28:	0b 2e       	mov	r0, r27
    3c2a:	ba 2f       	mov	r27, r26
    3c2c:	a0 2d       	mov	r26, r0
    3c2e:	0b 01       	movw	r0, r22
    3c30:	b9 01       	movw	r22, r18
    3c32:	90 01       	movw	r18, r0
    3c34:	0c 01       	movw	r0, r24
    3c36:	ca 01       	movw	r24, r20
    3c38:	a0 01       	movw	r20, r0
    3c3a:	11 24       	eor	r1, r1
    3c3c:	ff 27       	eor	r31, r31
    3c3e:	59 1b       	sub	r21, r25
    3c40:	99 f0       	breq	.+38     	; 0x3c68 <__addsf3x+0x5c>
    3c42:	59 3f       	cpi	r21, 0xF9	; 249
    3c44:	50 f4       	brcc	.+20     	; 0x3c5a <__addsf3x+0x4e>
    3c46:	50 3e       	cpi	r21, 0xE0	; 224
    3c48:	68 f1       	brcs	.+90     	; 0x3ca4 <__addsf3x+0x98>
    3c4a:	1a 16       	cp	r1, r26
    3c4c:	f0 40       	sbci	r31, 0x00	; 0
    3c4e:	a2 2f       	mov	r26, r18
    3c50:	23 2f       	mov	r18, r19
    3c52:	34 2f       	mov	r19, r20
    3c54:	44 27       	eor	r20, r20
    3c56:	58 5f       	subi	r21, 0xF8	; 248
    3c58:	f3 cf       	rjmp	.-26     	; 0x3c40 <__addsf3x+0x34>
    3c5a:	46 95       	lsr	r20
    3c5c:	37 95       	ror	r19
    3c5e:	27 95       	ror	r18
    3c60:	a7 95       	ror	r26
    3c62:	f0 40       	sbci	r31, 0x00	; 0
    3c64:	53 95       	inc	r21
    3c66:	c9 f7       	brne	.-14     	; 0x3c5a <__addsf3x+0x4e>
    3c68:	7e f4       	brtc	.+30     	; 0x3c88 <__addsf3x+0x7c>
    3c6a:	1f 16       	cp	r1, r31
    3c6c:	ba 0b       	sbc	r27, r26
    3c6e:	62 0b       	sbc	r22, r18
    3c70:	73 0b       	sbc	r23, r19
    3c72:	84 0b       	sbc	r24, r20
    3c74:	ba f0       	brmi	.+46     	; 0x3ca4 <__addsf3x+0x98>
    3c76:	91 50       	subi	r25, 0x01	; 1
    3c78:	a1 f0       	breq	.+40     	; 0x3ca2 <__addsf3x+0x96>
    3c7a:	ff 0f       	add	r31, r31
    3c7c:	bb 1f       	adc	r27, r27
    3c7e:	66 1f       	adc	r22, r22
    3c80:	77 1f       	adc	r23, r23
    3c82:	88 1f       	adc	r24, r24
    3c84:	c2 f7       	brpl	.-16     	; 0x3c76 <__addsf3x+0x6a>
    3c86:	0e c0       	rjmp	.+28     	; 0x3ca4 <__addsf3x+0x98>
    3c88:	ba 0f       	add	r27, r26
    3c8a:	62 1f       	adc	r22, r18
    3c8c:	73 1f       	adc	r23, r19
    3c8e:	84 1f       	adc	r24, r20
    3c90:	48 f4       	brcc	.+18     	; 0x3ca4 <__addsf3x+0x98>
    3c92:	87 95       	ror	r24
    3c94:	77 95       	ror	r23
    3c96:	67 95       	ror	r22
    3c98:	b7 95       	ror	r27
    3c9a:	f7 95       	ror	r31
    3c9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c9e:	08 f0       	brcs	.+2      	; 0x3ca2 <__addsf3x+0x96>
    3ca0:	b3 cf       	rjmp	.-154    	; 0x3c08 <__addsf3+0x1e>
    3ca2:	93 95       	inc	r25
    3ca4:	88 0f       	add	r24, r24
    3ca6:	08 f0       	brcs	.+2      	; 0x3caa <__addsf3x+0x9e>
    3ca8:	99 27       	eor	r25, r25
    3caa:	ee 0f       	add	r30, r30
    3cac:	97 95       	ror	r25
    3cae:	87 95       	ror	r24
    3cb0:	08 95       	ret

00003cb2 <__cmpsf2>:
    3cb2:	d4 d0       	rcall	.+424    	; 0x3e5c <__fp_cmp>
    3cb4:	08 f4       	brcc	.+2      	; 0x3cb8 <__cmpsf2+0x6>
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	08 95       	ret

00003cba <__divsf3>:
    3cba:	0c d0       	rcall	.+24     	; 0x3cd4 <__divsf3x>
    3cbc:	0a c1       	rjmp	.+532    	; 0x3ed2 <__fp_round>
    3cbe:	02 d1       	rcall	.+516    	; 0x3ec4 <__fp_pscB>
    3cc0:	40 f0       	brcs	.+16     	; 0x3cd2 <__divsf3+0x18>
    3cc2:	f9 d0       	rcall	.+498    	; 0x3eb6 <__fp_pscA>
    3cc4:	30 f0       	brcs	.+12     	; 0x3cd2 <__divsf3+0x18>
    3cc6:	21 f4       	brne	.+8      	; 0x3cd0 <__divsf3+0x16>
    3cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    3cca:	19 f0       	breq	.+6      	; 0x3cd2 <__divsf3+0x18>
    3ccc:	eb c0       	rjmp	.+470    	; 0x3ea4 <__fp_inf>
    3cce:	51 11       	cpse	r21, r1
    3cd0:	34 c1       	rjmp	.+616    	; 0x3f3a <__fp_szero>
    3cd2:	ee c0       	rjmp	.+476    	; 0x3eb0 <__fp_nan>

00003cd4 <__divsf3x>:
    3cd4:	0f d1       	rcall	.+542    	; 0x3ef4 <__fp_split3>
    3cd6:	98 f3       	brcs	.-26     	; 0x3cbe <__divsf3+0x4>

00003cd8 <__divsf3_pse>:
    3cd8:	99 23       	and	r25, r25
    3cda:	c9 f3       	breq	.-14     	; 0x3cce <__divsf3+0x14>
    3cdc:	55 23       	and	r21, r21
    3cde:	b1 f3       	breq	.-20     	; 0x3ccc <__divsf3+0x12>
    3ce0:	95 1b       	sub	r25, r21
    3ce2:	55 0b       	sbc	r21, r21
    3ce4:	bb 27       	eor	r27, r27
    3ce6:	aa 27       	eor	r26, r26
    3ce8:	62 17       	cp	r22, r18
    3cea:	73 07       	cpc	r23, r19
    3cec:	84 07       	cpc	r24, r20
    3cee:	38 f0       	brcs	.+14     	; 0x3cfe <__divsf3_pse+0x26>
    3cf0:	9f 5f       	subi	r25, 0xFF	; 255
    3cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    3cf4:	22 0f       	add	r18, r18
    3cf6:	33 1f       	adc	r19, r19
    3cf8:	44 1f       	adc	r20, r20
    3cfa:	aa 1f       	adc	r26, r26
    3cfc:	a9 f3       	breq	.-22     	; 0x3ce8 <__divsf3_pse+0x10>
    3cfe:	33 d0       	rcall	.+102    	; 0x3d66 <__divsf3_pse+0x8e>
    3d00:	0e 2e       	mov	r0, r30
    3d02:	3a f0       	brmi	.+14     	; 0x3d12 <__divsf3_pse+0x3a>
    3d04:	e0 e8       	ldi	r30, 0x80	; 128
    3d06:	30 d0       	rcall	.+96     	; 0x3d68 <__divsf3_pse+0x90>
    3d08:	91 50       	subi	r25, 0x01	; 1
    3d0a:	50 40       	sbci	r21, 0x00	; 0
    3d0c:	e6 95       	lsr	r30
    3d0e:	00 1c       	adc	r0, r0
    3d10:	ca f7       	brpl	.-14     	; 0x3d04 <__divsf3_pse+0x2c>
    3d12:	29 d0       	rcall	.+82     	; 0x3d66 <__divsf3_pse+0x8e>
    3d14:	fe 2f       	mov	r31, r30
    3d16:	27 d0       	rcall	.+78     	; 0x3d66 <__divsf3_pse+0x8e>
    3d18:	66 0f       	add	r22, r22
    3d1a:	77 1f       	adc	r23, r23
    3d1c:	88 1f       	adc	r24, r24
    3d1e:	bb 1f       	adc	r27, r27
    3d20:	26 17       	cp	r18, r22
    3d22:	37 07       	cpc	r19, r23
    3d24:	48 07       	cpc	r20, r24
    3d26:	ab 07       	cpc	r26, r27
    3d28:	b0 e8       	ldi	r27, 0x80	; 128
    3d2a:	09 f0       	breq	.+2      	; 0x3d2e <__divsf3_pse+0x56>
    3d2c:	bb 0b       	sbc	r27, r27
    3d2e:	80 2d       	mov	r24, r0
    3d30:	bf 01       	movw	r22, r30
    3d32:	ff 27       	eor	r31, r31
    3d34:	93 58       	subi	r25, 0x83	; 131
    3d36:	5f 4f       	sbci	r21, 0xFF	; 255
    3d38:	2a f0       	brmi	.+10     	; 0x3d44 <__divsf3_pse+0x6c>
    3d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    3d3c:	51 05       	cpc	r21, r1
    3d3e:	68 f0       	brcs	.+26     	; 0x3d5a <__divsf3_pse+0x82>
    3d40:	b1 c0       	rjmp	.+354    	; 0x3ea4 <__fp_inf>
    3d42:	fb c0       	rjmp	.+502    	; 0x3f3a <__fp_szero>
    3d44:	5f 3f       	cpi	r21, 0xFF	; 255
    3d46:	ec f3       	brlt	.-6      	; 0x3d42 <__divsf3_pse+0x6a>
    3d48:	98 3e       	cpi	r25, 0xE8	; 232
    3d4a:	dc f3       	brlt	.-10     	; 0x3d42 <__divsf3_pse+0x6a>
    3d4c:	86 95       	lsr	r24
    3d4e:	77 95       	ror	r23
    3d50:	67 95       	ror	r22
    3d52:	b7 95       	ror	r27
    3d54:	f7 95       	ror	r31
    3d56:	9f 5f       	subi	r25, 0xFF	; 255
    3d58:	c9 f7       	brne	.-14     	; 0x3d4c <__divsf3_pse+0x74>
    3d5a:	88 0f       	add	r24, r24
    3d5c:	91 1d       	adc	r25, r1
    3d5e:	96 95       	lsr	r25
    3d60:	87 95       	ror	r24
    3d62:	97 f9       	bld	r25, 7
    3d64:	08 95       	ret
    3d66:	e1 e0       	ldi	r30, 0x01	; 1
    3d68:	66 0f       	add	r22, r22
    3d6a:	77 1f       	adc	r23, r23
    3d6c:	88 1f       	adc	r24, r24
    3d6e:	bb 1f       	adc	r27, r27
    3d70:	62 17       	cp	r22, r18
    3d72:	73 07       	cpc	r23, r19
    3d74:	84 07       	cpc	r24, r20
    3d76:	ba 07       	cpc	r27, r26
    3d78:	20 f0       	brcs	.+8      	; 0x3d82 <__divsf3_pse+0xaa>
    3d7a:	62 1b       	sub	r22, r18
    3d7c:	73 0b       	sbc	r23, r19
    3d7e:	84 0b       	sbc	r24, r20
    3d80:	ba 0b       	sbc	r27, r26
    3d82:	ee 1f       	adc	r30, r30
    3d84:	88 f7       	brcc	.-30     	; 0x3d68 <__divsf3_pse+0x90>
    3d86:	e0 95       	com	r30
    3d88:	08 95       	ret

00003d8a <__fixunssfsi>:
    3d8a:	bc d0       	rcall	.+376    	; 0x3f04 <__fp_splitA>
    3d8c:	88 f0       	brcs	.+34     	; 0x3db0 <__fixunssfsi+0x26>
    3d8e:	9f 57       	subi	r25, 0x7F	; 127
    3d90:	90 f0       	brcs	.+36     	; 0x3db6 <__fixunssfsi+0x2c>
    3d92:	b9 2f       	mov	r27, r25
    3d94:	99 27       	eor	r25, r25
    3d96:	b7 51       	subi	r27, 0x17	; 23
    3d98:	a0 f0       	brcs	.+40     	; 0x3dc2 <__fixunssfsi+0x38>
    3d9a:	d1 f0       	breq	.+52     	; 0x3dd0 <__fixunssfsi+0x46>
    3d9c:	66 0f       	add	r22, r22
    3d9e:	77 1f       	adc	r23, r23
    3da0:	88 1f       	adc	r24, r24
    3da2:	99 1f       	adc	r25, r25
    3da4:	1a f0       	brmi	.+6      	; 0x3dac <__fixunssfsi+0x22>
    3da6:	ba 95       	dec	r27
    3da8:	c9 f7       	brne	.-14     	; 0x3d9c <__fixunssfsi+0x12>
    3daa:	12 c0       	rjmp	.+36     	; 0x3dd0 <__fixunssfsi+0x46>
    3dac:	b1 30       	cpi	r27, 0x01	; 1
    3dae:	81 f0       	breq	.+32     	; 0x3dd0 <__fixunssfsi+0x46>
    3db0:	c3 d0       	rcall	.+390    	; 0x3f38 <__fp_zero>
    3db2:	b1 e0       	ldi	r27, 0x01	; 1
    3db4:	08 95       	ret
    3db6:	c0 c0       	rjmp	.+384    	; 0x3f38 <__fp_zero>
    3db8:	67 2f       	mov	r22, r23
    3dba:	78 2f       	mov	r23, r24
    3dbc:	88 27       	eor	r24, r24
    3dbe:	b8 5f       	subi	r27, 0xF8	; 248
    3dc0:	39 f0       	breq	.+14     	; 0x3dd0 <__fixunssfsi+0x46>
    3dc2:	b9 3f       	cpi	r27, 0xF9	; 249
    3dc4:	cc f3       	brlt	.-14     	; 0x3db8 <__fixunssfsi+0x2e>
    3dc6:	86 95       	lsr	r24
    3dc8:	77 95       	ror	r23
    3dca:	67 95       	ror	r22
    3dcc:	b3 95       	inc	r27
    3dce:	d9 f7       	brne	.-10     	; 0x3dc6 <__fixunssfsi+0x3c>
    3dd0:	3e f4       	brtc	.+14     	; 0x3de0 <__fixunssfsi+0x56>
    3dd2:	90 95       	com	r25
    3dd4:	80 95       	com	r24
    3dd6:	70 95       	com	r23
    3dd8:	61 95       	neg	r22
    3dda:	7f 4f       	sbci	r23, 0xFF	; 255
    3ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    3dde:	9f 4f       	sbci	r25, 0xFF	; 255
    3de0:	08 95       	ret

00003de2 <__floatunsisf>:
    3de2:	e8 94       	clt
    3de4:	09 c0       	rjmp	.+18     	; 0x3df8 <__floatsisf+0x12>

00003de6 <__floatsisf>:
    3de6:	97 fb       	bst	r25, 7
    3de8:	3e f4       	brtc	.+14     	; 0x3df8 <__floatsisf+0x12>
    3dea:	90 95       	com	r25
    3dec:	80 95       	com	r24
    3dee:	70 95       	com	r23
    3df0:	61 95       	neg	r22
    3df2:	7f 4f       	sbci	r23, 0xFF	; 255
    3df4:	8f 4f       	sbci	r24, 0xFF	; 255
    3df6:	9f 4f       	sbci	r25, 0xFF	; 255
    3df8:	99 23       	and	r25, r25
    3dfa:	a9 f0       	breq	.+42     	; 0x3e26 <__floatsisf+0x40>
    3dfc:	f9 2f       	mov	r31, r25
    3dfe:	96 e9       	ldi	r25, 0x96	; 150
    3e00:	bb 27       	eor	r27, r27
    3e02:	93 95       	inc	r25
    3e04:	f6 95       	lsr	r31
    3e06:	87 95       	ror	r24
    3e08:	77 95       	ror	r23
    3e0a:	67 95       	ror	r22
    3e0c:	b7 95       	ror	r27
    3e0e:	f1 11       	cpse	r31, r1
    3e10:	f8 cf       	rjmp	.-16     	; 0x3e02 <__floatsisf+0x1c>
    3e12:	fa f4       	brpl	.+62     	; 0x3e52 <__floatsisf+0x6c>
    3e14:	bb 0f       	add	r27, r27
    3e16:	11 f4       	brne	.+4      	; 0x3e1c <__floatsisf+0x36>
    3e18:	60 ff       	sbrs	r22, 0
    3e1a:	1b c0       	rjmp	.+54     	; 0x3e52 <__floatsisf+0x6c>
    3e1c:	6f 5f       	subi	r22, 0xFF	; 255
    3e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e20:	8f 4f       	sbci	r24, 0xFF	; 255
    3e22:	9f 4f       	sbci	r25, 0xFF	; 255
    3e24:	16 c0       	rjmp	.+44     	; 0x3e52 <__floatsisf+0x6c>
    3e26:	88 23       	and	r24, r24
    3e28:	11 f0       	breq	.+4      	; 0x3e2e <__floatsisf+0x48>
    3e2a:	96 e9       	ldi	r25, 0x96	; 150
    3e2c:	11 c0       	rjmp	.+34     	; 0x3e50 <__floatsisf+0x6a>
    3e2e:	77 23       	and	r23, r23
    3e30:	21 f0       	breq	.+8      	; 0x3e3a <__floatsisf+0x54>
    3e32:	9e e8       	ldi	r25, 0x8E	; 142
    3e34:	87 2f       	mov	r24, r23
    3e36:	76 2f       	mov	r23, r22
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <__floatsisf+0x5e>
    3e3a:	66 23       	and	r22, r22
    3e3c:	71 f0       	breq	.+28     	; 0x3e5a <__floatsisf+0x74>
    3e3e:	96 e8       	ldi	r25, 0x86	; 134
    3e40:	86 2f       	mov	r24, r22
    3e42:	70 e0       	ldi	r23, 0x00	; 0
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	2a f0       	brmi	.+10     	; 0x3e52 <__floatsisf+0x6c>
    3e48:	9a 95       	dec	r25
    3e4a:	66 0f       	add	r22, r22
    3e4c:	77 1f       	adc	r23, r23
    3e4e:	88 1f       	adc	r24, r24
    3e50:	da f7       	brpl	.-10     	; 0x3e48 <__floatsisf+0x62>
    3e52:	88 0f       	add	r24, r24
    3e54:	96 95       	lsr	r25
    3e56:	87 95       	ror	r24
    3e58:	97 f9       	bld	r25, 7
    3e5a:	08 95       	ret

00003e5c <__fp_cmp>:
    3e5c:	99 0f       	add	r25, r25
    3e5e:	00 08       	sbc	r0, r0
    3e60:	55 0f       	add	r21, r21
    3e62:	aa 0b       	sbc	r26, r26
    3e64:	e0 e8       	ldi	r30, 0x80	; 128
    3e66:	fe ef       	ldi	r31, 0xFE	; 254
    3e68:	16 16       	cp	r1, r22
    3e6a:	17 06       	cpc	r1, r23
    3e6c:	e8 07       	cpc	r30, r24
    3e6e:	f9 07       	cpc	r31, r25
    3e70:	c0 f0       	brcs	.+48     	; 0x3ea2 <__fp_cmp+0x46>
    3e72:	12 16       	cp	r1, r18
    3e74:	13 06       	cpc	r1, r19
    3e76:	e4 07       	cpc	r30, r20
    3e78:	f5 07       	cpc	r31, r21
    3e7a:	98 f0       	brcs	.+38     	; 0x3ea2 <__fp_cmp+0x46>
    3e7c:	62 1b       	sub	r22, r18
    3e7e:	73 0b       	sbc	r23, r19
    3e80:	84 0b       	sbc	r24, r20
    3e82:	95 0b       	sbc	r25, r21
    3e84:	39 f4       	brne	.+14     	; 0x3e94 <__fp_cmp+0x38>
    3e86:	0a 26       	eor	r0, r26
    3e88:	61 f0       	breq	.+24     	; 0x3ea2 <__fp_cmp+0x46>
    3e8a:	23 2b       	or	r18, r19
    3e8c:	24 2b       	or	r18, r20
    3e8e:	25 2b       	or	r18, r21
    3e90:	21 f4       	brne	.+8      	; 0x3e9a <__fp_cmp+0x3e>
    3e92:	08 95       	ret
    3e94:	0a 26       	eor	r0, r26
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <__fp_cmp+0x3e>
    3e98:	a1 40       	sbci	r26, 0x01	; 1
    3e9a:	a6 95       	lsr	r26
    3e9c:	8f ef       	ldi	r24, 0xFF	; 255
    3e9e:	81 1d       	adc	r24, r1
    3ea0:	81 1d       	adc	r24, r1
    3ea2:	08 95       	ret

00003ea4 <__fp_inf>:
    3ea4:	97 f9       	bld	r25, 7
    3ea6:	9f 67       	ori	r25, 0x7F	; 127
    3ea8:	80 e8       	ldi	r24, 0x80	; 128
    3eaa:	70 e0       	ldi	r23, 0x00	; 0
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	08 95       	ret

00003eb0 <__fp_nan>:
    3eb0:	9f ef       	ldi	r25, 0xFF	; 255
    3eb2:	80 ec       	ldi	r24, 0xC0	; 192
    3eb4:	08 95       	ret

00003eb6 <__fp_pscA>:
    3eb6:	00 24       	eor	r0, r0
    3eb8:	0a 94       	dec	r0
    3eba:	16 16       	cp	r1, r22
    3ebc:	17 06       	cpc	r1, r23
    3ebe:	18 06       	cpc	r1, r24
    3ec0:	09 06       	cpc	r0, r25
    3ec2:	08 95       	ret

00003ec4 <__fp_pscB>:
    3ec4:	00 24       	eor	r0, r0
    3ec6:	0a 94       	dec	r0
    3ec8:	12 16       	cp	r1, r18
    3eca:	13 06       	cpc	r1, r19
    3ecc:	14 06       	cpc	r1, r20
    3ece:	05 06       	cpc	r0, r21
    3ed0:	08 95       	ret

00003ed2 <__fp_round>:
    3ed2:	09 2e       	mov	r0, r25
    3ed4:	03 94       	inc	r0
    3ed6:	00 0c       	add	r0, r0
    3ed8:	11 f4       	brne	.+4      	; 0x3ede <__fp_round+0xc>
    3eda:	88 23       	and	r24, r24
    3edc:	52 f0       	brmi	.+20     	; 0x3ef2 <__fp_round+0x20>
    3ede:	bb 0f       	add	r27, r27
    3ee0:	40 f4       	brcc	.+16     	; 0x3ef2 <__fp_round+0x20>
    3ee2:	bf 2b       	or	r27, r31
    3ee4:	11 f4       	brne	.+4      	; 0x3eea <__fp_round+0x18>
    3ee6:	60 ff       	sbrs	r22, 0
    3ee8:	04 c0       	rjmp	.+8      	; 0x3ef2 <__fp_round+0x20>
    3eea:	6f 5f       	subi	r22, 0xFF	; 255
    3eec:	7f 4f       	sbci	r23, 0xFF	; 255
    3eee:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef2:	08 95       	ret

00003ef4 <__fp_split3>:
    3ef4:	57 fd       	sbrc	r21, 7
    3ef6:	90 58       	subi	r25, 0x80	; 128
    3ef8:	44 0f       	add	r20, r20
    3efa:	55 1f       	adc	r21, r21
    3efc:	59 f0       	breq	.+22     	; 0x3f14 <__fp_splitA+0x10>
    3efe:	5f 3f       	cpi	r21, 0xFF	; 255
    3f00:	71 f0       	breq	.+28     	; 0x3f1e <__fp_splitA+0x1a>
    3f02:	47 95       	ror	r20

00003f04 <__fp_splitA>:
    3f04:	88 0f       	add	r24, r24
    3f06:	97 fb       	bst	r25, 7
    3f08:	99 1f       	adc	r25, r25
    3f0a:	61 f0       	breq	.+24     	; 0x3f24 <__fp_splitA+0x20>
    3f0c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f0e:	79 f0       	breq	.+30     	; 0x3f2e <__fp_splitA+0x2a>
    3f10:	87 95       	ror	r24
    3f12:	08 95       	ret
    3f14:	12 16       	cp	r1, r18
    3f16:	13 06       	cpc	r1, r19
    3f18:	14 06       	cpc	r1, r20
    3f1a:	55 1f       	adc	r21, r21
    3f1c:	f2 cf       	rjmp	.-28     	; 0x3f02 <__fp_split3+0xe>
    3f1e:	46 95       	lsr	r20
    3f20:	f1 df       	rcall	.-30     	; 0x3f04 <__fp_splitA>
    3f22:	08 c0       	rjmp	.+16     	; 0x3f34 <__fp_splitA+0x30>
    3f24:	16 16       	cp	r1, r22
    3f26:	17 06       	cpc	r1, r23
    3f28:	18 06       	cpc	r1, r24
    3f2a:	99 1f       	adc	r25, r25
    3f2c:	f1 cf       	rjmp	.-30     	; 0x3f10 <__fp_splitA+0xc>
    3f2e:	86 95       	lsr	r24
    3f30:	71 05       	cpc	r23, r1
    3f32:	61 05       	cpc	r22, r1
    3f34:	08 94       	sec
    3f36:	08 95       	ret

00003f38 <__fp_zero>:
    3f38:	e8 94       	clt

00003f3a <__fp_szero>:
    3f3a:	bb 27       	eor	r27, r27
    3f3c:	66 27       	eor	r22, r22
    3f3e:	77 27       	eor	r23, r23
    3f40:	cb 01       	movw	r24, r22
    3f42:	97 f9       	bld	r25, 7
    3f44:	08 95       	ret

00003f46 <__gesf2>:
    3f46:	8a df       	rcall	.-236    	; 0x3e5c <__fp_cmp>
    3f48:	08 f4       	brcc	.+2      	; 0x3f4c <__gesf2+0x6>
    3f4a:	8f ef       	ldi	r24, 0xFF	; 255
    3f4c:	08 95       	ret

00003f4e <__mulsf3>:
    3f4e:	0b d0       	rcall	.+22     	; 0x3f66 <__mulsf3x>
    3f50:	c0 cf       	rjmp	.-128    	; 0x3ed2 <__fp_round>
    3f52:	b1 df       	rcall	.-158    	; 0x3eb6 <__fp_pscA>
    3f54:	28 f0       	brcs	.+10     	; 0x3f60 <__mulsf3+0x12>
    3f56:	b6 df       	rcall	.-148    	; 0x3ec4 <__fp_pscB>
    3f58:	18 f0       	brcs	.+6      	; 0x3f60 <__mulsf3+0x12>
    3f5a:	95 23       	and	r25, r21
    3f5c:	09 f0       	breq	.+2      	; 0x3f60 <__mulsf3+0x12>
    3f5e:	a2 cf       	rjmp	.-188    	; 0x3ea4 <__fp_inf>
    3f60:	a7 cf       	rjmp	.-178    	; 0x3eb0 <__fp_nan>
    3f62:	11 24       	eor	r1, r1
    3f64:	ea cf       	rjmp	.-44     	; 0x3f3a <__fp_szero>

00003f66 <__mulsf3x>:
    3f66:	c6 df       	rcall	.-116    	; 0x3ef4 <__fp_split3>
    3f68:	a0 f3       	brcs	.-24     	; 0x3f52 <__mulsf3+0x4>

00003f6a <__mulsf3_pse>:
    3f6a:	95 9f       	mul	r25, r21
    3f6c:	d1 f3       	breq	.-12     	; 0x3f62 <__mulsf3+0x14>
    3f6e:	95 0f       	add	r25, r21
    3f70:	50 e0       	ldi	r21, 0x00	; 0
    3f72:	55 1f       	adc	r21, r21
    3f74:	62 9f       	mul	r22, r18
    3f76:	f0 01       	movw	r30, r0
    3f78:	72 9f       	mul	r23, r18
    3f7a:	bb 27       	eor	r27, r27
    3f7c:	f0 0d       	add	r31, r0
    3f7e:	b1 1d       	adc	r27, r1
    3f80:	63 9f       	mul	r22, r19
    3f82:	aa 27       	eor	r26, r26
    3f84:	f0 0d       	add	r31, r0
    3f86:	b1 1d       	adc	r27, r1
    3f88:	aa 1f       	adc	r26, r26
    3f8a:	64 9f       	mul	r22, r20
    3f8c:	66 27       	eor	r22, r22
    3f8e:	b0 0d       	add	r27, r0
    3f90:	a1 1d       	adc	r26, r1
    3f92:	66 1f       	adc	r22, r22
    3f94:	82 9f       	mul	r24, r18
    3f96:	22 27       	eor	r18, r18
    3f98:	b0 0d       	add	r27, r0
    3f9a:	a1 1d       	adc	r26, r1
    3f9c:	62 1f       	adc	r22, r18
    3f9e:	73 9f       	mul	r23, r19
    3fa0:	b0 0d       	add	r27, r0
    3fa2:	a1 1d       	adc	r26, r1
    3fa4:	62 1f       	adc	r22, r18
    3fa6:	83 9f       	mul	r24, r19
    3fa8:	a0 0d       	add	r26, r0
    3faa:	61 1d       	adc	r22, r1
    3fac:	22 1f       	adc	r18, r18
    3fae:	74 9f       	mul	r23, r20
    3fb0:	33 27       	eor	r19, r19
    3fb2:	a0 0d       	add	r26, r0
    3fb4:	61 1d       	adc	r22, r1
    3fb6:	23 1f       	adc	r18, r19
    3fb8:	84 9f       	mul	r24, r20
    3fba:	60 0d       	add	r22, r0
    3fbc:	21 1d       	adc	r18, r1
    3fbe:	82 2f       	mov	r24, r18
    3fc0:	76 2f       	mov	r23, r22
    3fc2:	6a 2f       	mov	r22, r26
    3fc4:	11 24       	eor	r1, r1
    3fc6:	9f 57       	subi	r25, 0x7F	; 127
    3fc8:	50 40       	sbci	r21, 0x00	; 0
    3fca:	8a f0       	brmi	.+34     	; 0x3fee <__mulsf3_pse+0x84>
    3fcc:	e1 f0       	breq	.+56     	; 0x4006 <__mulsf3_pse+0x9c>
    3fce:	88 23       	and	r24, r24
    3fd0:	4a f0       	brmi	.+18     	; 0x3fe4 <__mulsf3_pse+0x7a>
    3fd2:	ee 0f       	add	r30, r30
    3fd4:	ff 1f       	adc	r31, r31
    3fd6:	bb 1f       	adc	r27, r27
    3fd8:	66 1f       	adc	r22, r22
    3fda:	77 1f       	adc	r23, r23
    3fdc:	88 1f       	adc	r24, r24
    3fde:	91 50       	subi	r25, 0x01	; 1
    3fe0:	50 40       	sbci	r21, 0x00	; 0
    3fe2:	a9 f7       	brne	.-22     	; 0x3fce <__mulsf3_pse+0x64>
    3fe4:	9e 3f       	cpi	r25, 0xFE	; 254
    3fe6:	51 05       	cpc	r21, r1
    3fe8:	70 f0       	brcs	.+28     	; 0x4006 <__mulsf3_pse+0x9c>
    3fea:	5c cf       	rjmp	.-328    	; 0x3ea4 <__fp_inf>
    3fec:	a6 cf       	rjmp	.-180    	; 0x3f3a <__fp_szero>
    3fee:	5f 3f       	cpi	r21, 0xFF	; 255
    3ff0:	ec f3       	brlt	.-6      	; 0x3fec <__mulsf3_pse+0x82>
    3ff2:	98 3e       	cpi	r25, 0xE8	; 232
    3ff4:	dc f3       	brlt	.-10     	; 0x3fec <__mulsf3_pse+0x82>
    3ff6:	86 95       	lsr	r24
    3ff8:	77 95       	ror	r23
    3ffa:	67 95       	ror	r22
    3ffc:	b7 95       	ror	r27
    3ffe:	f7 95       	ror	r31
    4000:	e7 95       	ror	r30
    4002:	9f 5f       	subi	r25, 0xFF	; 255
    4004:	c1 f7       	brne	.-16     	; 0x3ff6 <__mulsf3_pse+0x8c>
    4006:	fe 2b       	or	r31, r30
    4008:	88 0f       	add	r24, r24
    400a:	91 1d       	adc	r25, r1
    400c:	96 95       	lsr	r25
    400e:	87 95       	ror	r24
    4010:	97 f9       	bld	r25, 7
    4012:	08 95       	ret

00004014 <__udivmodhi4>:
    4014:	aa 1b       	sub	r26, r26
    4016:	bb 1b       	sub	r27, r27
    4018:	51 e1       	ldi	r21, 0x11	; 17
    401a:	07 c0       	rjmp	.+14     	; 0x402a <__udivmodhi4_ep>

0000401c <__udivmodhi4_loop>:
    401c:	aa 1f       	adc	r26, r26
    401e:	bb 1f       	adc	r27, r27
    4020:	a6 17       	cp	r26, r22
    4022:	b7 07       	cpc	r27, r23
    4024:	10 f0       	brcs	.+4      	; 0x402a <__udivmodhi4_ep>
    4026:	a6 1b       	sub	r26, r22
    4028:	b7 0b       	sbc	r27, r23

0000402a <__udivmodhi4_ep>:
    402a:	88 1f       	adc	r24, r24
    402c:	99 1f       	adc	r25, r25
    402e:	5a 95       	dec	r21
    4030:	a9 f7       	brne	.-22     	; 0x401c <__udivmodhi4_loop>
    4032:	80 95       	com	r24
    4034:	90 95       	com	r25
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	08 95       	ret

0000403c <__divmodhi4>:
    403c:	97 fb       	bst	r25, 7
    403e:	07 2e       	mov	r0, r23
    4040:	16 f4       	brtc	.+4      	; 0x4046 <__divmodhi4+0xa>
    4042:	00 94       	com	r0
    4044:	06 d0       	rcall	.+12     	; 0x4052 <__divmodhi4_neg1>
    4046:	77 fd       	sbrc	r23, 7
    4048:	08 d0       	rcall	.+16     	; 0x405a <__divmodhi4_neg2>
    404a:	e4 df       	rcall	.-56     	; 0x4014 <__udivmodhi4>
    404c:	07 fc       	sbrc	r0, 7
    404e:	05 d0       	rcall	.+10     	; 0x405a <__divmodhi4_neg2>
    4050:	3e f4       	brtc	.+14     	; 0x4060 <__divmodhi4_exit>

00004052 <__divmodhi4_neg1>:
    4052:	90 95       	com	r25
    4054:	81 95       	neg	r24
    4056:	9f 4f       	sbci	r25, 0xFF	; 255
    4058:	08 95       	ret

0000405a <__divmodhi4_neg2>:
    405a:	70 95       	com	r23
    405c:	61 95       	neg	r22
    405e:	7f 4f       	sbci	r23, 0xFF	; 255

00004060 <__divmodhi4_exit>:
    4060:	08 95       	ret

00004062 <__udivmodsi4>:
    4062:	a1 e2       	ldi	r26, 0x21	; 33
    4064:	1a 2e       	mov	r1, r26
    4066:	aa 1b       	sub	r26, r26
    4068:	bb 1b       	sub	r27, r27
    406a:	fd 01       	movw	r30, r26
    406c:	0d c0       	rjmp	.+26     	; 0x4088 <__udivmodsi4_ep>

0000406e <__udivmodsi4_loop>:
    406e:	aa 1f       	adc	r26, r26
    4070:	bb 1f       	adc	r27, r27
    4072:	ee 1f       	adc	r30, r30
    4074:	ff 1f       	adc	r31, r31
    4076:	a2 17       	cp	r26, r18
    4078:	b3 07       	cpc	r27, r19
    407a:	e4 07       	cpc	r30, r20
    407c:	f5 07       	cpc	r31, r21
    407e:	20 f0       	brcs	.+8      	; 0x4088 <__udivmodsi4_ep>
    4080:	a2 1b       	sub	r26, r18
    4082:	b3 0b       	sbc	r27, r19
    4084:	e4 0b       	sbc	r30, r20
    4086:	f5 0b       	sbc	r31, r21

00004088 <__udivmodsi4_ep>:
    4088:	66 1f       	adc	r22, r22
    408a:	77 1f       	adc	r23, r23
    408c:	88 1f       	adc	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	1a 94       	dec	r1
    4092:	69 f7       	brne	.-38     	; 0x406e <__udivmodsi4_loop>
    4094:	60 95       	com	r22
    4096:	70 95       	com	r23
    4098:	80 95       	com	r24
    409a:	90 95       	com	r25
    409c:	9b 01       	movw	r18, r22
    409e:	ac 01       	movw	r20, r24
    40a0:	bd 01       	movw	r22, r26
    40a2:	cf 01       	movw	r24, r30
    40a4:	08 95       	ret

000040a6 <__tablejump2__>:
    40a6:	ee 0f       	add	r30, r30
    40a8:	ff 1f       	adc	r31, r31

000040aa <__tablejump__>:
    40aa:	05 90       	lpm	r0, Z+
    40ac:	f4 91       	lpm	r31, Z
    40ae:	e0 2d       	mov	r30, r0
    40b0:	09 94       	ijmp

000040b2 <_exit>:
    40b2:	f8 94       	cli

000040b4 <__stop_program>:
    40b4:	ff cf       	rjmp	.-2      	; 0x40b4 <__stop_program>
